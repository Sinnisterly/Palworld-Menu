#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpreadSheetToCsv

#include "Basic.hpp"

#include "SpreadSheetToCsv_classes.hpp"
#include "SpreadSheetToCsv_parameters.hpp"


namespace SDK
{

// Function SpreadSheetToCsv.SpreadSheetImpoter.Create
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USpreadSheetImpoter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USpreadSheetImpoter* USpreadSheetImpoter::Create()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpreadSheetImpoter", "Create");

	Params::SpreadSheetImpoter_Create Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpreadSheetToCsv.SpreadSheetImpoter.CreateSheetUrlString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             SheetId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SheetNameId                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USpreadSheetImpoter::CreateSheetUrlString(const class FName SheetId, const class FName SheetNameId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpreadSheetImpoter", "CreateSheetUrlString");

	Params::SpreadSheetImpoter_CreateSheetUrlString Parms{};

	Parms.SheetId = SheetId;
	Parms.SheetNameId = SheetNameId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpreadSheetToCsv.SpreadSheetImpoter.GetRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             SheetId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SheetName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USpreadSheetImpoter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USpreadSheetImpoter* USpreadSheetImpoter::GetRequest(const class FName SheetId, const class FName SheetName, const class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpreadSheetImpoter", "GetRequest");

	Params::SpreadSheetImpoter_GetRequest Parms{};

	Parms.SheetId = SheetId;
	Parms.SheetName = SheetName;
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpreadSheetToCsv.SpreadSheetImpoter.FromString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Data                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpreadSheetImpoter::FromString(const class FString& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpreadSheetImpoter", "FromString");

	Params::SpreadSheetImpoter_FromString Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpreadSheetToCsv.SpreadSheetImpoter.PostProcessImport
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bAppliedPostProcess                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpreadSheetImpoter::PostProcessImport(bool* bAppliedPostProcess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpreadSheetImpoter", "PostProcessImport");

	Params::SpreadSheetImpoter_PostProcessImport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bAppliedPostProcess != nullptr)
		*bAppliedPostProcess = Parms.bAppliedPostProcess;
}


// Function SpreadSheetToCsv.SpreadSheetImpoter.ToCsvString
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USpreadSheetImpoter::ToCsvString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpreadSheetImpoter", "ToCsvString");

	Params::SpreadSheetImpoter_ToCsvString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpreadSheetToCsv.SpreadSheetImpoter.ToCsvStringForLocalizedText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PickCultureName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USpreadSheetImpoter::ToCsvStringForLocalizedText(const class FString& PickCultureName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpreadSheetImpoter", "ToCsvStringForLocalizedText");

	Params::SpreadSheetImpoter_ToCsvStringForLocalizedText Parms{};

	Parms.PickCultureName = std::move(PickCultureName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpreadSheetToCsv.SpreadSheetImpoter.IsExistNewRecord
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpreadSheetImpoter::IsExistNewRecord() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpreadSheetImpoter", "IsExistNewRecord");

	Params::SpreadSheetImpoter_IsExistNewRecord Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

