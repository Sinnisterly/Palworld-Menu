#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PalIncidentCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PalIncidentCamera.BP_PalIncidentCamera_C
// 0x00E0 (0x0370 - 0x0290)
class ABP_PalIncidentCamera_C final : public AActor
{
public:
	class UCameraComponent*                       Camera;                                            // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             StartTransform;                                    // 0x02A0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TargetTransform;                                   // 0x0300(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpolSec;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ElapsedTime;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetCameraTransform(const struct FTransform& Transform);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PalIncidentCamera_C">();
	}
	static class ABP_PalIncidentCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PalIncidentCamera_C>();
	}
};
static_assert(alignof(ABP_PalIncidentCamera_C) == 0x000010, "Wrong alignment on ABP_PalIncidentCamera_C");
static_assert(sizeof(ABP_PalIncidentCamera_C) == 0x000370, "Wrong size on ABP_PalIncidentCamera_C");
static_assert(offsetof(ABP_PalIncidentCamera_C, Camera) == 0x000290, "Member 'ABP_PalIncidentCamera_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_PalIncidentCamera_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_PalIncidentCamera_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PalIncidentCamera_C, StartTransform) == 0x0002A0, "Member 'ABP_PalIncidentCamera_C::StartTransform' has a wrong offset!");
static_assert(offsetof(ABP_PalIncidentCamera_C, TargetTransform) == 0x000300, "Member 'ABP_PalIncidentCamera_C::TargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_PalIncidentCamera_C, InterpolSec) == 0x000360, "Member 'ABP_PalIncidentCamera_C::InterpolSec' has a wrong offset!");
static_assert(offsetof(ABP_PalIncidentCamera_C, ElapsedTime) == 0x000368, "Member 'ABP_PalIncidentCamera_C::ElapsedTime' has a wrong offset!");

}

