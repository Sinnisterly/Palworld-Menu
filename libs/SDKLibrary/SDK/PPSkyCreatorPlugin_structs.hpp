#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PPSkyCreatorPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PPSkyCreatorPlugin.EPPSkyCreatorEditorWeatherType
// NumValues: 0x0003
enum class EPPSkyCreatorEditorWeatherType : uint8
{
	EditorWeather_WeatherPreset              = 0,
	EditorWeather_WeatherSettings            = 1,
	EditorWeather_MAX                        = 2,
};

// Enum PPSkyCreatorPlugin.EPPSkyCreatorSunPositionType
// NumValues: 0x0003
enum class EPPSkyCreatorSunPositionType : uint8
{
	SunPositionType_Simple                   = 0,
	SunPositionType_Real                     = 1,
	SunPositionType_MAX                      = 2,
};

// Enum PPSkyCreatorPlugin.EPPSkyCreatorMoonPositionType
// NumValues: 0x0004
enum class EPPSkyCreatorMoonPositionType : uint8
{
	MoonPositionType_Simple                  = 0,
	MoonPositionType_SimpleFixedElevation    = 1,
	MoonPositionType_Real                    = 2,
	MoonPositionType_MAX                     = 3,
};

// Enum PPSkyCreatorPlugin.EPPVolumetricCloudRenderTargetMode
// NumValues: 0x0004
enum class EPPVolumetricCloudRenderTargetMode : uint8
{
	VolumetricCloudRenderTargetMode_Default  = 0,
	VolumetricCloudRenderTargetMode_Quality  = 1,
	VolumetricCloudRenderTargetMode_Performance = 2,
	VolumetricCloudRenderTargetMode_MAX      = 3,
};

// Enum PPSkyCreatorPlugin.EPPVolumetricCloudNoiseShapeResolution
// NumValues: 0x0004
enum class EPPVolumetricCloudNoiseShapeResolution : uint8
{
	VolumetricCloudNoiseShapeResolution_64   = 0,
	VolumetricCloudNoiseShapeResolution_128  = 1,
	VolumetricCloudNoiseShapeResolution_256  = 2,
	VolumetricCloudNoiseShapeResolution_MAX  = 3,
};

// Enum PPSkyCreatorPlugin.EPPVolumetricCloudNoiseDetailResolution
// NumValues: 0x0003
enum class EPPVolumetricCloudNoiseDetailResolution : uint8
{
	VolumetricCloudNoiseDetailResolution_32  = 0,
	VolumetricCloudNoiseDetailResolution_64  = 1,
	VolumetricCloudNoiseDetailResolution_MAX = 2,
};

// Enum PPSkyCreatorPlugin.EPPSkyCreatorStarMapRotationType
// NumValues: 0x0004
enum class EPPSkyCreatorStarMapRotationType : uint8
{
	StarMapRotationType_NoRotation           = 0,
	StarMapRotationType_FollowSun            = 1,
	StarMapRotationType_FollowMoon           = 2,
	StarMapRotationType_MAX                  = 3,
};

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorLightningParameters
// 0x0020 (0x0020 - 0x0000)
struct FPPSkyCreatorLightningParameters final
{
public:
	struct FLinearColor                           Position;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorLightningParameters) == 0x000004, "Wrong alignment on FPPSkyCreatorLightningParameters");
static_assert(sizeof(FPPSkyCreatorLightningParameters) == 0x000020, "Wrong size on FPPSkyCreatorLightningParameters");
static_assert(offsetof(FPPSkyCreatorLightningParameters, Position) == 0x000000, "Member 'FPPSkyCreatorLightningParameters::Position' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorLightningParameters, Color) == 0x000010, "Member 'FPPSkyCreatorLightningParameters::Color' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPCelestialPositionData
// 0x0008 (0x0008 - 0x0000)
struct FPPCelestialPositionData final
{
public:
	float                                         Elevation;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Azimuth;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPCelestialPositionData) == 0x000004, "Wrong alignment on FPPCelestialPositionData");
static_assert(sizeof(FPPCelestialPositionData) == 0x000008, "Wrong size on FPPCelestialPositionData");
static_assert(offsetof(FPPCelestialPositionData, Elevation) == 0x000000, "Member 'FPPCelestialPositionData::Elevation' has a wrong offset!");
static_assert(offsetof(FPPCelestialPositionData, Azimuth) == 0x000004, "Member 'FPPCelestialPositionData::Azimuth' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorSkyAtmosphereSettings
// 0x0080 (0x0080 - 0x0000)
struct FPPSkyCreatorSkyAtmosphereSettings final
{
public:
	float                                         RayleighScatteringScale;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RayleighScattering;                                // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighExponentialDistribution;                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieScatteringScale;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieScattering;                                     // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAbsorptionScale;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieAbsorption;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAnisotropy;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieExponentialDistribution;                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsorptionScale;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Absorption;                                        // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLuminanceFactor;                                // 0x005C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GroundAlbedo;                                      // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogContribution;                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorSkyAtmosphereSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorSkyAtmosphereSettings");
static_assert(sizeof(FPPSkyCreatorSkyAtmosphereSettings) == 0x000080, "Wrong size on FPPSkyCreatorSkyAtmosphereSettings");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, RayleighScatteringScale) == 0x000000, "Member 'FPPSkyCreatorSkyAtmosphereSettings::RayleighScatteringScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, RayleighScattering) == 0x000004, "Member 'FPPSkyCreatorSkyAtmosphereSettings::RayleighScattering' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, RayleighExponentialDistribution) == 0x000014, "Member 'FPPSkyCreatorSkyAtmosphereSettings::RayleighExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, MieScatteringScale) == 0x000018, "Member 'FPPSkyCreatorSkyAtmosphereSettings::MieScatteringScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, MieScattering) == 0x00001C, "Member 'FPPSkyCreatorSkyAtmosphereSettings::MieScattering' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, MieAbsorptionScale) == 0x00002C, "Member 'FPPSkyCreatorSkyAtmosphereSettings::MieAbsorptionScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, MieAbsorption) == 0x000030, "Member 'FPPSkyCreatorSkyAtmosphereSettings::MieAbsorption' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, MieAnisotropy) == 0x000040, "Member 'FPPSkyCreatorSkyAtmosphereSettings::MieAnisotropy' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, MieExponentialDistribution) == 0x000044, "Member 'FPPSkyCreatorSkyAtmosphereSettings::MieExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, AbsorptionScale) == 0x000048, "Member 'FPPSkyCreatorSkyAtmosphereSettings::AbsorptionScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, Absorption) == 0x00004C, "Member 'FPPSkyCreatorSkyAtmosphereSettings::Absorption' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, SkyLuminanceFactor) == 0x00005C, "Member 'FPPSkyCreatorSkyAtmosphereSettings::SkyLuminanceFactor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, GroundAlbedo) == 0x00006C, "Member 'FPPSkyCreatorSkyAtmosphereSettings::GroundAlbedo' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyAtmosphereSettings, HeightFogContribution) == 0x00007C, "Member 'FPPSkyCreatorSkyAtmosphereSettings::HeightFogContribution' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorVolumetricCloudSettings
// 0x00A8 (0x00A8 - 0x0000)
struct FPPSkyCreatorVolumetricCloudSettings final
{
public:
	float                                         StratusCoverage;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratusCoverageVariation;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratusHeightVariation;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratocumulusCoverage;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratocumulusCoverageVariation;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratocumulusHeightVariation;                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulusCoverage;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulusCoverageVariation;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulusHeightVariation;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulonimbusCoverage;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulonimbusAnvil;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulonimbusHeightVariation;                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityBottom;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityMiddle;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityTop;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Albedo;                                            // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GroundAlbedo;                                      // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeersPowderIntensity;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeersPowderDepth;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomOcclusion;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomOcclusionHeight;                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightEmissive;                                     // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseG;                                            // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseG2;                                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseBlend;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringContribution;                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringOcclusion;                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringEccentricity;                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityA;                              // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityB;                              // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityC;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityD;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurbulenceIntensity;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorVolumetricCloudSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorVolumetricCloudSettings");
static_assert(sizeof(FPPSkyCreatorVolumetricCloudSettings) == 0x0000A8, "Wrong size on FPPSkyCreatorVolumetricCloudSettings");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, StratusCoverage) == 0x000000, "Member 'FPPSkyCreatorVolumetricCloudSettings::StratusCoverage' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, StratusCoverageVariation) == 0x000004, "Member 'FPPSkyCreatorVolumetricCloudSettings::StratusCoverageVariation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, StratusHeightVariation) == 0x000008, "Member 'FPPSkyCreatorVolumetricCloudSettings::StratusHeightVariation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, StratocumulusCoverage) == 0x00000C, "Member 'FPPSkyCreatorVolumetricCloudSettings::StratocumulusCoverage' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, StratocumulusCoverageVariation) == 0x000010, "Member 'FPPSkyCreatorVolumetricCloudSettings::StratocumulusCoverageVariation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, StratocumulusHeightVariation) == 0x000014, "Member 'FPPSkyCreatorVolumetricCloudSettings::StratocumulusHeightVariation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, CumulusCoverage) == 0x000018, "Member 'FPPSkyCreatorVolumetricCloudSettings::CumulusCoverage' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, CumulusCoverageVariation) == 0x00001C, "Member 'FPPSkyCreatorVolumetricCloudSettings::CumulusCoverageVariation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, CumulusHeightVariation) == 0x000020, "Member 'FPPSkyCreatorVolumetricCloudSettings::CumulusHeightVariation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, CumulonimbusCoverage) == 0x000024, "Member 'FPPSkyCreatorVolumetricCloudSettings::CumulonimbusCoverage' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, CumulonimbusAnvil) == 0x000028, "Member 'FPPSkyCreatorVolumetricCloudSettings::CumulonimbusAnvil' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, CumulonimbusHeightVariation) == 0x00002C, "Member 'FPPSkyCreatorVolumetricCloudSettings::CumulonimbusHeightVariation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, DensityBottom) == 0x000030, "Member 'FPPSkyCreatorVolumetricCloudSettings::DensityBottom' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, DensityMiddle) == 0x000034, "Member 'FPPSkyCreatorVolumetricCloudSettings::DensityMiddle' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, DensityTop) == 0x000038, "Member 'FPPSkyCreatorVolumetricCloudSettings::DensityTop' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, Albedo) == 0x00003C, "Member 'FPPSkyCreatorVolumetricCloudSettings::Albedo' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, GroundAlbedo) == 0x00004C, "Member 'FPPSkyCreatorVolumetricCloudSettings::GroundAlbedo' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, BeersPowderIntensity) == 0x00005C, "Member 'FPPSkyCreatorVolumetricCloudSettings::BeersPowderIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, BeersPowderDepth) == 0x000060, "Member 'FPPSkyCreatorVolumetricCloudSettings::BeersPowderDepth' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, BottomOcclusion) == 0x000064, "Member 'FPPSkyCreatorVolumetricCloudSettings::BottomOcclusion' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, BottomOcclusionHeight) == 0x000068, "Member 'FPPSkyCreatorVolumetricCloudSettings::BottomOcclusionHeight' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, NightEmissive) == 0x00006C, "Member 'FPPSkyCreatorVolumetricCloudSettings::NightEmissive' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, PhaseG) == 0x00007C, "Member 'FPPSkyCreatorVolumetricCloudSettings::PhaseG' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, PhaseG2) == 0x000080, "Member 'FPPSkyCreatorVolumetricCloudSettings::PhaseG2' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, PhaseBlend) == 0x000084, "Member 'FPPSkyCreatorVolumetricCloudSettings::PhaseBlend' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, MultiScatteringContribution) == 0x000088, "Member 'FPPSkyCreatorVolumetricCloudSettings::MultiScatteringContribution' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, MultiScatteringOcclusion) == 0x00008C, "Member 'FPPSkyCreatorVolumetricCloudSettings::MultiScatteringOcclusion' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, MultiScatteringEccentricity) == 0x000090, "Member 'FPPSkyCreatorVolumetricCloudSettings::MultiScatteringEccentricity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityA) == 0x000094, "Member 'FPPSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityA' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityB) == 0x000098, "Member 'FPPSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityB' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityC) == 0x00009C, "Member 'FPPSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityC' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityD) == 0x0000A0, "Member 'FPPSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityD' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorVolumetricCloudSettings, TurbulenceIntensity) == 0x0000A4, "Member 'FPPSkyCreatorVolumetricCloudSettings::TurbulenceIntensity' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorBackgroundCloudSettings
// 0x0024 (0x0024 - 0x0000)
struct FPPSkyCreatorBackgroundCloudSettings final
{
public:
	float                                         BackgroundCloudsIntensity;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundCloudsColorTint;                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLayerA;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLayerB;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLayerC;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLightningPhase;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorBackgroundCloudSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorBackgroundCloudSettings");
static_assert(sizeof(FPPSkyCreatorBackgroundCloudSettings) == 0x000024, "Wrong size on FPPSkyCreatorBackgroundCloudSettings");
static_assert(offsetof(FPPSkyCreatorBackgroundCloudSettings, BackgroundCloudsIntensity) == 0x000000, "Member 'FPPSkyCreatorBackgroundCloudSettings::BackgroundCloudsIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorBackgroundCloudSettings, BackgroundCloudsColorTint) == 0x000004, "Member 'FPPSkyCreatorBackgroundCloudSettings::BackgroundCloudsColorTint' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorBackgroundCloudSettings, BackgroundCloudsLayerA) == 0x000014, "Member 'FPPSkyCreatorBackgroundCloudSettings::BackgroundCloudsLayerA' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorBackgroundCloudSettings, BackgroundCloudsLayerB) == 0x000018, "Member 'FPPSkyCreatorBackgroundCloudSettings::BackgroundCloudsLayerB' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorBackgroundCloudSettings, BackgroundCloudsLayerC) == 0x00001C, "Member 'FPPSkyCreatorBackgroundCloudSettings::BackgroundCloudsLayerC' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorBackgroundCloudSettings, BackgroundCloudsLightningPhase) == 0x000020, "Member 'FPPSkyCreatorBackgroundCloudSettings::BackgroundCloudsLightningPhase' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorSkyLightSettings
// 0x002C (0x002C - 0x0000)
struct FPPSkyCreatorSkyLightSettings final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensity;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionStrength;                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorSkyLightSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorSkyLightSettings");
static_assert(sizeof(FPPSkyCreatorSkyLightSettings) == 0x00002C, "Wrong size on FPPSkyCreatorSkyLightSettings");
static_assert(offsetof(FPPSkyCreatorSkyLightSettings, Intensity) == 0x000000, "Member 'FPPSkyCreatorSkyLightSettings::Intensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyLightSettings, NightIntensity) == 0x000004, "Member 'FPPSkyCreatorSkyLightSettings::NightIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyLightSettings, LightColor) == 0x000008, "Member 'FPPSkyCreatorSkyLightSettings::LightColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyLightSettings, LowerHemisphereColor) == 0x000018, "Member 'FPPSkyCreatorSkyLightSettings::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSkyLightSettings, CloudAmbientOcclusionStrength) == 0x000028, "Member 'FPPSkyCreatorSkyLightSettings::CloudAmbientOcclusionStrength' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorSunLightSettings
// 0x0048 (0x0048 - 0x0000)
struct FPPSkyCreatorSunLightSettings final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereDiskColorScale;                          // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowStrength;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorSunLightSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorSunLightSettings");
static_assert(sizeof(FPPSkyCreatorSunLightSettings) == 0x000048, "Wrong size on FPPSkyCreatorSunLightSettings");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, Intensity) == 0x000000, "Member 'FPPSkyCreatorSunLightSettings::Intensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, LightColor) == 0x000004, "Member 'FPPSkyCreatorSunLightSettings::LightColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, Temperature) == 0x000014, "Member 'FPPSkyCreatorSunLightSettings::Temperature' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, VolumetricScatteringIntensity) == 0x000018, "Member 'FPPSkyCreatorSunLightSettings::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, AtmosphereDiskColorScale) == 0x00001C, "Member 'FPPSkyCreatorSunLightSettings::AtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, CloudScatteredLuminanceScale) == 0x00002C, "Member 'FPPSkyCreatorSunLightSettings::CloudScatteredLuminanceScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, CloudShadowStrength) == 0x00003C, "Member 'FPPSkyCreatorSunLightSettings::CloudShadowStrength' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, CloudShadowOnAtmosphereStrength) == 0x000040, "Member 'FPPSkyCreatorSunLightSettings::CloudShadowOnAtmosphereStrength' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorSunLightSettings, CloudShadowOnSurfaceStrength) == 0x000044, "Member 'FPPSkyCreatorSunLightSettings::CloudShadowOnSurfaceStrength' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorMoonLightSettings
// 0x0048 (0x0048 - 0x0000)
struct FPPSkyCreatorMoonLightSettings final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereDiskColorScale;                          // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowStrength;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorMoonLightSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorMoonLightSettings");
static_assert(sizeof(FPPSkyCreatorMoonLightSettings) == 0x000048, "Wrong size on FPPSkyCreatorMoonLightSettings");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, Intensity) == 0x000000, "Member 'FPPSkyCreatorMoonLightSettings::Intensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, LightColor) == 0x000004, "Member 'FPPSkyCreatorMoonLightSettings::LightColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, Temperature) == 0x000014, "Member 'FPPSkyCreatorMoonLightSettings::Temperature' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, VolumetricScatteringIntensity) == 0x000018, "Member 'FPPSkyCreatorMoonLightSettings::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, AtmosphereDiskColorScale) == 0x00001C, "Member 'FPPSkyCreatorMoonLightSettings::AtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, CloudScatteredLuminanceScale) == 0x00002C, "Member 'FPPSkyCreatorMoonLightSettings::CloudScatteredLuminanceScale' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, CloudShadowStrength) == 0x00003C, "Member 'FPPSkyCreatorMoonLightSettings::CloudShadowStrength' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, CloudShadowOnAtmosphereStrength) == 0x000040, "Member 'FPPSkyCreatorMoonLightSettings::CloudShadowOnAtmosphereStrength' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorMoonLightSettings, CloudShadowOnSurfaceStrength) == 0x000044, "Member 'FPPSkyCreatorMoonLightSettings::CloudShadowOnSurfaceStrength' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorExponentialHeightFogSettings
// 0x0064 (0x0064 - 0x0000)
struct FPPSkyCreatorExponentialHeightFogSettings final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogStartDistance;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogDensity;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightFalloff;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogAlbedo;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorExponentialHeightFogSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorExponentialHeightFogSettings");
static_assert(sizeof(FPPSkyCreatorExponentialHeightFogSettings) == 0x000064, "Wrong size on FPPSkyCreatorExponentialHeightFogSettings");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, FogDensity) == 0x000000, "Member 'FPPSkyCreatorExponentialHeightFogSettings::FogDensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, FogHeightFalloff) == 0x000004, "Member 'FPPSkyCreatorExponentialHeightFogSettings::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, FogInscatteringColor) == 0x000008, "Member 'FPPSkyCreatorExponentialHeightFogSettings::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, FogStartDistance) == 0x000018, "Member 'FPPSkyCreatorExponentialHeightFogSettings::FogStartDistance' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, SecondFogDensity) == 0x00001C, "Member 'FPPSkyCreatorExponentialHeightFogSettings::SecondFogDensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, SecondFogHeightFalloff) == 0x000020, "Member 'FPPSkyCreatorExponentialHeightFogSettings::SecondFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, DirectionalInscatteringExponent) == 0x000024, "Member 'FPPSkyCreatorExponentialHeightFogSettings::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, DirectionalInscatteringStartDistance) == 0x000028, "Member 'FPPSkyCreatorExponentialHeightFogSettings::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, DirectionalInscatteringColor) == 0x00002C, "Member 'FPPSkyCreatorExponentialHeightFogSettings::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, VolumetricFogScatteringDistribution) == 0x00003C, "Member 'FPPSkyCreatorExponentialHeightFogSettings::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, VolumetricFogAlbedo) == 0x000040, "Member 'FPPSkyCreatorExponentialHeightFogSettings::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, VolumetricFogEmissive) == 0x000050, "Member 'FPPSkyCreatorExponentialHeightFogSettings::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorExponentialHeightFogSettings, VolumetricFogExtinctionScale) == 0x000060, "Member 'FPPSkyCreatorExponentialHeightFogSettings::VolumetricFogExtinctionScale' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorStarMapSettings
// 0x0048 (0x0048 - 0x0000)
struct FPPSkyCreatorStarMapSettings final
{
public:
	float                                         StarMapIntensity;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StarMapColorTint;                                  // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapTwinkleIntensity;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapTwinkleSaturation;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapTwinkleSpeed;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapHorizonThreshold;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapAtmosphereThreshold;                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightHorizonColor;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightZenithColor;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorStarMapSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorStarMapSettings");
static_assert(sizeof(FPPSkyCreatorStarMapSettings) == 0x000048, "Wrong size on FPPSkyCreatorStarMapSettings");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, StarMapIntensity) == 0x000000, "Member 'FPPSkyCreatorStarMapSettings::StarMapIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, StarMapColorTint) == 0x000004, "Member 'FPPSkyCreatorStarMapSettings::StarMapColorTint' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, StarMapTwinkleIntensity) == 0x000014, "Member 'FPPSkyCreatorStarMapSettings::StarMapTwinkleIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, StarMapTwinkleSaturation) == 0x000018, "Member 'FPPSkyCreatorStarMapSettings::StarMapTwinkleSaturation' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, StarMapTwinkleSpeed) == 0x00001C, "Member 'FPPSkyCreatorStarMapSettings::StarMapTwinkleSpeed' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, StarMapHorizonThreshold) == 0x000020, "Member 'FPPSkyCreatorStarMapSettings::StarMapHorizonThreshold' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, StarMapAtmosphereThreshold) == 0x000024, "Member 'FPPSkyCreatorStarMapSettings::StarMapAtmosphereThreshold' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, NightHorizonColor) == 0x000028, "Member 'FPPSkyCreatorStarMapSettings::NightHorizonColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorStarMapSettings, NightZenithColor) == 0x000038, "Member 'FPPSkyCreatorStarMapSettings::NightZenithColor' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorWeatherFXSettings
// 0x0110 (0x0110 - 0x0000)
struct FPPSkyCreatorWeatherFXSettings final
{
public:
	float                                         RainAmount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RainColor;                                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainGravity;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainLifetimeMin;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainLifetimeMax;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSizeMin;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSizeMax;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashLifetimeMin;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashLifetimeMax;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RainSplashSizeMin;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RainSplashSizeMax;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowAmount;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SnowColor;                                         // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowGravity;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowTurbulence;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowLifetimeMin;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowLifetimeMax;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSizeMin;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSizeMax;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLightnings;                                  // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD8[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightningSpawnIntervalMin;                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnIntervalMax;                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightningColorMin;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightningColorMax;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningLifetime;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltSpawnChance;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltWidthMin;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltWidthMax;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltLengthMin;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltLengthMax;                            // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltCurveFrequency;                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltCurveStrengthMin;                     // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltCurveStrengthMax;                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltJitterStrength;                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBranchSpawnChance;                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBranchScaleMin;                           // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBranchScaleMax;                           // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowAmount;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RainbowColor;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowRadius;                                     // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowThickness;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryRainbowColor;                             // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryRainbowRadius;                            // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryRainbowThickness;                         // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorWeatherFXSettings) == 0x000008, "Wrong alignment on FPPSkyCreatorWeatherFXSettings");
static_assert(sizeof(FPPSkyCreatorWeatherFXSettings) == 0x000110, "Wrong size on FPPSkyCreatorWeatherFXSettings");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainAmount) == 0x000000, "Member 'FPPSkyCreatorWeatherFXSettings::RainAmount' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainColor) == 0x000004, "Member 'FPPSkyCreatorWeatherFXSettings::RainColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainGravity) == 0x000014, "Member 'FPPSkyCreatorWeatherFXSettings::RainGravity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainLifetimeMin) == 0x000018, "Member 'FPPSkyCreatorWeatherFXSettings::RainLifetimeMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainLifetimeMax) == 0x00001C, "Member 'FPPSkyCreatorWeatherFXSettings::RainLifetimeMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainSizeMin) == 0x000020, "Member 'FPPSkyCreatorWeatherFXSettings::RainSizeMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainSizeMax) == 0x000024, "Member 'FPPSkyCreatorWeatherFXSettings::RainSizeMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainSplashLifetimeMin) == 0x000028, "Member 'FPPSkyCreatorWeatherFXSettings::RainSplashLifetimeMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainSplashLifetimeMax) == 0x00002C, "Member 'FPPSkyCreatorWeatherFXSettings::RainSplashLifetimeMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainSplashSizeMin) == 0x000030, "Member 'FPPSkyCreatorWeatherFXSettings::RainSplashSizeMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainSplashSizeMax) == 0x000040, "Member 'FPPSkyCreatorWeatherFXSettings::RainSplashSizeMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowAmount) == 0x000050, "Member 'FPPSkyCreatorWeatherFXSettings::SnowAmount' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowColor) == 0x000054, "Member 'FPPSkyCreatorWeatherFXSettings::SnowColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowGravity) == 0x000064, "Member 'FPPSkyCreatorWeatherFXSettings::SnowGravity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowTurbulence) == 0x000068, "Member 'FPPSkyCreatorWeatherFXSettings::SnowTurbulence' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowLifetimeMin) == 0x00006C, "Member 'FPPSkyCreatorWeatherFXSettings::SnowLifetimeMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowLifetimeMax) == 0x000070, "Member 'FPPSkyCreatorWeatherFXSettings::SnowLifetimeMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowSizeMin) == 0x000074, "Member 'FPPSkyCreatorWeatherFXSettings::SnowSizeMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SnowSizeMax) == 0x000078, "Member 'FPPSkyCreatorWeatherFXSettings::SnowSizeMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, EnableLightnings) == 0x00007C, "Member 'FPPSkyCreatorWeatherFXSettings::EnableLightnings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningSpawnIntervalMin) == 0x000080, "Member 'FPPSkyCreatorWeatherFXSettings::LightningSpawnIntervalMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningSpawnIntervalMax) == 0x000084, "Member 'FPPSkyCreatorWeatherFXSettings::LightningSpawnIntervalMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningColorMin) == 0x000088, "Member 'FPPSkyCreatorWeatherFXSettings::LightningColorMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningColorMax) == 0x000098, "Member 'FPPSkyCreatorWeatherFXSettings::LightningColorMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningLifetime) == 0x0000A8, "Member 'FPPSkyCreatorWeatherFXSettings::LightningLifetime' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltSpawnChance) == 0x0000AC, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltSpawnChance' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltWidthMin) == 0x0000B0, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltWidthMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltWidthMax) == 0x0000B4, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltWidthMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltLengthMin) == 0x0000B8, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltLengthMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltLengthMax) == 0x0000BC, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltLengthMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltCurveFrequency) == 0x0000C0, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltCurveFrequency' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltCurveStrengthMin) == 0x0000C4, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltCurveStrengthMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltCurveStrengthMax) == 0x0000C8, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltCurveStrengthMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBoltJitterStrength) == 0x0000CC, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBoltJitterStrength' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBranchSpawnChance) == 0x0000D0, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBranchSpawnChance' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBranchScaleMin) == 0x0000D4, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBranchScaleMin' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, LightningBranchScaleMax) == 0x0000D8, "Member 'FPPSkyCreatorWeatherFXSettings::LightningBranchScaleMax' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainbowAmount) == 0x0000DC, "Member 'FPPSkyCreatorWeatherFXSettings::RainbowAmount' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainbowColor) == 0x0000E0, "Member 'FPPSkyCreatorWeatherFXSettings::RainbowColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainbowRadius) == 0x0000F0, "Member 'FPPSkyCreatorWeatherFXSettings::RainbowRadius' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, RainbowThickness) == 0x0000F4, "Member 'FPPSkyCreatorWeatherFXSettings::RainbowThickness' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SecondaryRainbowColor) == 0x0000F8, "Member 'FPPSkyCreatorWeatherFXSettings::SecondaryRainbowColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SecondaryRainbowRadius) == 0x000108, "Member 'FPPSkyCreatorWeatherFXSettings::SecondaryRainbowRadius' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherFXSettings, SecondaryRainbowThickness) == 0x00010C, "Member 'FPPSkyCreatorWeatherFXSettings::SecondaryRainbowThickness' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorWeatherMaterialFXSettings
// 0x0068 (0x0068 - 0x0000)
struct FPPSkyCreatorWeatherMaterialFXSettings final
{
public:
	float                                         WetnessAmount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WetnessColor;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesAmount;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PuddlesColor;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesAmount;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesIntensity;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesForceMinRadius;                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesForceMaxRadius;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesRingsNumber;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesRingsDelay;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesDamping;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRipplesIntensity;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRipplesSpeed;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowAmount;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SnowColor;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowIntensity;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesThreshold;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorWeatherMaterialFXSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorWeatherMaterialFXSettings");
static_assert(sizeof(FPPSkyCreatorWeatherMaterialFXSettings) == 0x000068, "Wrong size on FPPSkyCreatorWeatherMaterialFXSettings");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, WetnessAmount) == 0x000000, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::WetnessAmount' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, WetnessColor) == 0x000004, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::WetnessColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, PuddlesAmount) == 0x000014, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::PuddlesAmount' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, PuddlesColor) == 0x000018, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::PuddlesColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, RainRipplesAmount) == 0x000028, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::RainRipplesAmount' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, RainRipplesIntensity) == 0x00002C, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::RainRipplesIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, RainRipplesForceMinRadius) == 0x000030, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::RainRipplesForceMinRadius' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, RainRipplesForceMaxRadius) == 0x000034, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::RainRipplesForceMaxRadius' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, RainRipplesRingsNumber) == 0x000038, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::RainRipplesRingsNumber' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, RainRipplesRingsDelay) == 0x00003C, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::RainRipplesRingsDelay' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, RainRipplesDamping) == 0x000040, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::RainRipplesDamping' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, WindRipplesIntensity) == 0x000044, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::WindRipplesIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, WindRipplesSpeed) == 0x000048, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::WindRipplesSpeed' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, SnowAmount) == 0x00004C, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::SnowAmount' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, SnowColor) == 0x000050, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::SnowColor' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, SnowIntensity) == 0x000060, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::SnowIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherMaterialFXSettings, SnowSparklesThreshold) == 0x000064, "Member 'FPPSkyCreatorWeatherMaterialFXSettings::SnowSparklesThreshold' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorWindSettings
// 0x001C (0x001C - 0x0000)
struct FPPSkyCreatorWindSettings final
{
public:
	float                                         CloudWindDirection;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudWindSpeed;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudNoiseShapeWindDirection;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudNoiseShapeWindSpeedHorizontal;                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudNoiseDetailWindSpeedVertical;                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationWindDirection;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationWindSpeed;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorWindSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorWindSettings");
static_assert(sizeof(FPPSkyCreatorWindSettings) == 0x00001C, "Wrong size on FPPSkyCreatorWindSettings");
static_assert(offsetof(FPPSkyCreatorWindSettings, CloudWindDirection) == 0x000000, "Member 'FPPSkyCreatorWindSettings::CloudWindDirection' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWindSettings, CloudWindSpeed) == 0x000004, "Member 'FPPSkyCreatorWindSettings::CloudWindSpeed' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWindSettings, CloudNoiseShapeWindDirection) == 0x000008, "Member 'FPPSkyCreatorWindSettings::CloudNoiseShapeWindDirection' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWindSettings, CloudNoiseShapeWindSpeedHorizontal) == 0x00000C, "Member 'FPPSkyCreatorWindSettings::CloudNoiseShapeWindSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWindSettings, CloudNoiseDetailWindSpeedVertical) == 0x000010, "Member 'FPPSkyCreatorWindSettings::CloudNoiseDetailWindSpeedVertical' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWindSettings, PrecipitationWindDirection) == 0x000014, "Member 'FPPSkyCreatorWindSettings::PrecipitationWindDirection' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWindSettings, PrecipitationWindSpeed) == 0x000018, "Member 'FPPSkyCreatorWindSettings::PrecipitationWindSpeed' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorPostProcessSettings
// 0x000C (0x000C - 0x0000)
struct FPPSkyCreatorPostProcessSettings final
{
public:
	float                                         BloomIntensity;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureCompensation;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorPostProcessSettings) == 0x000004, "Wrong alignment on FPPSkyCreatorPostProcessSettings");
static_assert(sizeof(FPPSkyCreatorPostProcessSettings) == 0x00000C, "Wrong size on FPPSkyCreatorPostProcessSettings");
static_assert(offsetof(FPPSkyCreatorPostProcessSettings, BloomIntensity) == 0x000000, "Member 'FPPSkyCreatorPostProcessSettings::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorPostProcessSettings, BloomThreshold) == 0x000004, "Member 'FPPSkyCreatorPostProcessSettings::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorPostProcessSettings, ExposureCompensation) == 0x000008, "Member 'FPPSkyCreatorPostProcessSettings::ExposureCompensation' has a wrong offset!");

// ScriptStruct PPSkyCreatorPlugin.PPSkyCreatorWeatherSettings
// 0x0458 (0x0458 - 0x0000)
struct FPPSkyCreatorWeatherSettings final
{
public:
	struct FPPSkyCreatorSkyAtmosphereSettings     SkyAtmosphereSettings;                             // 0x0000(0x0080)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorVolumetricCloudSettings   VolumetricCloudSettings;                           // 0x0080(0x00A8)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorBackgroundCloudSettings   BackgroundCloudSettings;                           // 0x0128(0x0024)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSkyLightSettings          SkyLightSettings;                                  // 0x014C(0x002C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSunLightSettings          SunLightSettings;                                  // 0x0178(0x0048)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorMoonLightSettings         MoonLightSettings;                                 // 0x01C0(0x0048)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorExponentialHeightFogSettings ExponentialHeightFogSettings;                      // 0x0208(0x0064)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorStarMapSettings           StarMapSettings;                                   // 0x026C(0x0048)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD9[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPPSkyCreatorWeatherFXSettings         WeatherFXSettings;                                 // 0x02B8(0x0110)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWeatherMaterialFXSettings WeatherMaterialFXSettings;                         // 0x03C8(0x0068)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWindSettings              WindSettings;                                      // 0x0430(0x001C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorPostProcessSettings       PostProcessSettings;                               // 0x044C(0x000C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPPSkyCreatorWeatherSettings) == 0x000008, "Wrong alignment on FPPSkyCreatorWeatherSettings");
static_assert(sizeof(FPPSkyCreatorWeatherSettings) == 0x000458, "Wrong size on FPPSkyCreatorWeatherSettings");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, SkyAtmosphereSettings) == 0x000000, "Member 'FPPSkyCreatorWeatherSettings::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, VolumetricCloudSettings) == 0x000080, "Member 'FPPSkyCreatorWeatherSettings::VolumetricCloudSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, BackgroundCloudSettings) == 0x000128, "Member 'FPPSkyCreatorWeatherSettings::BackgroundCloudSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, SkyLightSettings) == 0x00014C, "Member 'FPPSkyCreatorWeatherSettings::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, SunLightSettings) == 0x000178, "Member 'FPPSkyCreatorWeatherSettings::SunLightSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, MoonLightSettings) == 0x0001C0, "Member 'FPPSkyCreatorWeatherSettings::MoonLightSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, ExponentialHeightFogSettings) == 0x000208, "Member 'FPPSkyCreatorWeatherSettings::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, StarMapSettings) == 0x00026C, "Member 'FPPSkyCreatorWeatherSettings::StarMapSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, WeatherFXSettings) == 0x0002B8, "Member 'FPPSkyCreatorWeatherSettings::WeatherFXSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, WeatherMaterialFXSettings) == 0x0003C8, "Member 'FPPSkyCreatorWeatherSettings::WeatherMaterialFXSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, WindSettings) == 0x000430, "Member 'FPPSkyCreatorWeatherSettings::WindSettings' has a wrong offset!");
static_assert(offsetof(FPPSkyCreatorWeatherSettings, PostProcessSettings) == 0x00044C, "Member 'FPPSkyCreatorWeatherSettings::PostProcessSettings' has a wrong offset!");

}

