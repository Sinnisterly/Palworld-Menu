#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HitEffectSlot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Pal_structs.hpp"
#include "Pal_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HitEffectSlot.BP_HitEffectSlot_C
// 0x0068 (0x0090 - 0x0028)
class UBP_HitEffectSlot_C final : public UPalHitEffectSlot
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<TSoftObjectPtr<class UNiagaraSystem>>  PreLoadList;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNiagaraSystem*>                 LoadCache;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsCrying;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_158D[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         RockBPList;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         TreeBPList;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NewVar_0;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_158E[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RockBPName;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void CryCoolTime(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void ExecuteUbergraph_BP_HitEffectSlot(int32 EntryPoint);
	void Initialize();
	void IsEnableCameraShake(bool* IsEnable);
	void LoadAndPlayEffect(TSoftObjectPtr<class UNiagaraSystem> EffectPath, const struct FTransform& Transform);
	void OnLoaded_D5A0C82B4BA3C329BE0E728CCA761919(class UObject* Loaded);
	void PlayCameraShakeAndSoundEffect(EPalWazaCategory Category, class AActor* Attacker, bool SpecializedEffectPlayed);
	void PlayHitEffect(const struct FPalDamageInfo& Info);
	void PlayHitSound(const struct FPalDamageInfo& PalDamageInfo);
	void SpawnElementalHitEffectBullet(EPalElementType Element, const struct FVector& Location, double EffectScale);
	void SpawnElementalHitEffectFar(EPalElementType Element, const struct FVector& Location, double EffectScale, bool IsPoison);
	void SpawnElementalHitEffectNear(EPalElementType Element, const struct FVector& Location, double EffectScale);
	void SpawnSneakAttackEffect(const struct FVector& Location);
	void SpawnSpecializationEffect(class AActor* Attacker, const struct FVector& Location, double EffectScale, bool* Played);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HitEffectSlot_C">();
	}
	static class UBP_HitEffectSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_HitEffectSlot_C>();
	}
};
static_assert(alignof(UBP_HitEffectSlot_C) == 0x000008, "Wrong alignment on UBP_HitEffectSlot_C");
static_assert(sizeof(UBP_HitEffectSlot_C) == 0x000090, "Wrong size on UBP_HitEffectSlot_C");
static_assert(offsetof(UBP_HitEffectSlot_C, UberGraphFrame) == 0x000028, "Member 'UBP_HitEffectSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_HitEffectSlot_C, PreLoadList) == 0x000030, "Member 'UBP_HitEffectSlot_C::PreLoadList' has a wrong offset!");
static_assert(offsetof(UBP_HitEffectSlot_C, LoadCache) == 0x000040, "Member 'UBP_HitEffectSlot_C::LoadCache' has a wrong offset!");
static_assert(offsetof(UBP_HitEffectSlot_C, IsCrying) == 0x000050, "Member 'UBP_HitEffectSlot_C::IsCrying' has a wrong offset!");
static_assert(offsetof(UBP_HitEffectSlot_C, RockBPList) == 0x000058, "Member 'UBP_HitEffectSlot_C::RockBPList' has a wrong offset!");
static_assert(offsetof(UBP_HitEffectSlot_C, TreeBPList) == 0x000068, "Member 'UBP_HitEffectSlot_C::TreeBPList' has a wrong offset!");
static_assert(offsetof(UBP_HitEffectSlot_C, NewVar_0) == 0x000078, "Member 'UBP_HitEffectSlot_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_HitEffectSlot_C, RockBPName) == 0x000080, "Member 'UBP_HitEffectSlot_C::RockBPName' has a wrong offset!");

}

