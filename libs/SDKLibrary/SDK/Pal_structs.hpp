#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Pal

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "NetCore_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "DLSSBlueprint_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum Pal.EPalBossType
// NumValues: 0x0007
enum class EPalBossType : uint8
{
	None                                     = 0,
	GrassBoss                                = 1,
	ElectricBoss                             = 2,
	ForestBoss                               = 3,
	SnowBoss                                 = 4,
	DesertBoss                               = 5,
	EPalBossType_MAX                         = 6,
};

// Enum Pal.EPalBossBattleState
// NumValues: 0x0005
enum class EPalBossBattleState : uint8
{
	Open                                     = 0,
	PreBattle                                = 1,
	InBattle                                 = 2,
	AfterBattle                              = 3,
	EPalBossBattleState_MAX                  = 4,
};

// Enum Pal.EPalSizeType
// NumValues: 0x0007
enum class EPalSizeType : uint8
{
	None                                     = 0,
	XS                                       = 1,
	S                                        = 2,
	M                                        = 3,
	L                                        = 4,
	XL                                       = 5,
	EPalSizeType_MAX                         = 6,
};

// Enum Pal.EPalPlayerDamageCameraShakeCategory
// NumValues: 0x0009
enum class EPalPlayerDamageCameraShakeCategory : uint8
{
	None                                     = 0,
	Waza_S                                   = 1,
	Waza_M                                   = 2,
	Waza_L                                   = 3,
	Gun_S                                    = 4,
	Gun_M                                    = 5,
	Gun_L                                    = 6,
	Melee                                    = 7,
	EPalPlayerDamageCameraShakeCategory_MAX  = 8,
};

// Enum Pal.EPalDamageAnimationReactionType
// NumValues: 0x0004
enum class EPalDamageAnimationReactionType : uint8
{
	None                                     = 0,
	Small                                    = 1,
	Big                                      = 2,
	EPalDamageAnimationReactionType_MAX      = 3,
};

// Enum Pal.EPalSpecialAttackRateType
// NumValues: 0x0006
enum class EPalSpecialAttackRateType : uint8
{
	None                                     = 0,
	VsWood                                   = 1,
	VsStone                                  = 2,
	VsWood_Raid                              = 3,
	VsStone_Raid                             = 4,
	EPalSpecialAttackRateType_MAX            = 5,
};

// Enum Pal.EPalAdditionalEffectType
// NumValues: 0x0010
enum class EPalAdditionalEffectType : uint8
{
	None                                     = 0,
	Stun                                     = 1,
	Sleep                                    = 2,
	Poison                                   = 3,
	Burn                                     = 4,
	Wetness                                  = 5,
	Freeze                                   = 6,
	Electrical                               = 7,
	Muddy                                    = 8,
	IvyCling                                 = 9,
	Darkness                                 = 10,
	AttackUp                                 = 11,
	DefenseUp                                = 12,
	Recovery                                 = 13,
	Trap_LegHold                             = 14,
	EPalAdditionalEffectType_MAX             = 15,
};

// Enum Pal.EPalAttackType
// NumValues: 0x0006
enum class EPalAttackType : uint8
{
	Waza                                     = 0,
	Weapon                                   = 1,
	Turret                                   = 2,
	SlipDamage                               = 3,
	Mine                                     = 4,
	EPalAttackType_MAX                       = 5,
};

// Enum Pal.EPalElementType
// NumValues: 0x000B
enum class EPalElementType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Fire                                     = 2,
	Water                                    = 3,
	Leaf                                     = 4,
	Electricity                              = 5,
	Ice                                      = 6,
	Earth                                    = 7,
	Dark                                     = 8,
	Dragon                                   = 9,
	MAX                                      = 10,
};

// Enum Pal.EPalBodyPartsType
// NumValues: 0x0005
enum class EPalBodyPartsType : uint8
{
	Weak                                     = 0,
	Normal                                   = 1,
	Strong                                   = 2,
	Invincible                               = 3,
	EPalBodyPartsType_MAX                    = 4,
};

// Enum Pal.EPalWazaCategory
// NumValues: 0x0004
enum class EPalWazaCategory : uint8
{
	Melee                                    = 0,
	Shot                                     = 1,
	Support                                  = 2,
	EPalWazaCategory_MAX                     = 3,
};

// Enum Pal.EPalHUDDisplayType
// NumValues: 0x0005
enum class EPalHUDDisplayType : uint8
{
	Undefined                                = 0,
	DamegeReact                              = 1,
	InteractOn                               = 2,
	InteractOff                              = 3,
	EPalHUDDisplayType_MAX                   = 4,
};

// Enum Pal.EPalMapObjectGetModelOutPinType
// NumValues: 0x0003
enum class EPalMapObjectGetModelOutPinType : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	EPalMapObjectGetModelOutPinType_MAX      = 2,
};

// Enum Pal.EPalMapObjectChangeMeshFXType
// NumValues: 0x0003
enum class EPalMapObjectChangeMeshFXType : uint8
{
	None                                     = 0,
	RockDestroyProgress                      = 1,
	EPalMapObjectChangeMeshFXType_MAX        = 2,
};

// Enum Pal.EPalMapObjectDamagableType
// NumValues: 0x0004
enum class EPalMapObjectDamagableType : uint8
{
	AllRecieve                               = 0,
	OtherGroup                               = 1,
	NoDamage                                 = 2,
	EPalMapObjectDamagableType_MAX           = 3,
};

// Enum Pal.EPalMapObjectDestroyFXType
// NumValues: 0x000F
enum class EPalMapObjectDestroyFXType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	NormalWood                               = 2,
	NormalRock                               = 3,
	NormalMetal                              = 4,
	FoliageTree                              = 5,
	Pickup                                   = 6,
	Pickup_Wood                              = 7,
	Pickup_Stone                             = 8,
	Pickup_Berry                             = 9,
	LowTree                                  = 10,
	Rock                                     = 11,
	FoliageTree_CherryBlossom                = 12,
	Mushroom                                 = 13,
	EPalMapObjectDestroyFXType_MAX           = 14,
};

// Enum Pal.EPalBuildObjectState
// NumValues: 0x0006
enum class EPalBuildObjectState : uint8
{
	Init                                     = 0,
	Simulation                               = 1,
	Building                                 = 2,
	Available                                = 3,
	NotAvailable                             = 4,
	EPalBuildObjectState_MAX                 = 5,
};

// Enum Pal.EPalInteractiveObjectIndicatorType
// NumValues: 0x004A
enum class EPalInteractiveObjectIndicatorType : uint8
{
	None                                     = 0,
	Build                                    = 1,
	BuildCancel                              = 2,
	Work                                     = 3,
	Open                                     = 4,
	OpenCraftMenu                            = 5,
	OpenConverterMenu                        = 6,
	OpenBaseCampMenu                         = 7,
	OpenBaseCampTaskMenu                     = 8,
	OpenPalBoxMenu                           = 9,
	OpenPalRankUp                            = 10,
	Collect                                  = 11,
	Pickup                                   = 12,
	SelectCrop                               = 13,
	Seeding                                  = 14,
	Watering                                 = 15,
	Harvest                                  = 16,
	OpenPalMedicalBedMenu                    = 17,
	SleepPlayerBed                           = 18,
	GetupPlayerBed                           = 19,
	OpenDetailMenu                           = 20,
	SelectRecipe                             = 21,
	PickupProduct                            = 22,
	Mining                                   = 23,
	UnlockFastTravel                         = 24,
	FastTravel                               = 25,
	UnuseFastTravel                          = 26,
	Obtain                                   = 27,
	SetEgg                                   = 28,
	StoreAll                                 = 29,
	ObtainAll                                = 30,
	RecoveryAllOtomo                         = 31,
	Liftup                                   = 32,
	MoveToWorker                             = 33,
	MoveToPalBox                             = 34,
	OpenWorkerMenu                           = 35,
	CoopAction                               = 36,
	Talk                                     = 37,
	EnterDungeon                             = 38,
	ExitDungeon                              = 39,
	EntryBossBattle                          = 40,
	EntryBossBattleFullMember                = 41,
	StartBossBattle                          = 42,
	Resuscitation                            = 43,
	Repair                                   = 44,
	StatusOperator_Player                    = 45,
	StatusOperator_Pal                       = 46,
	Ignition                                 = 47,
	OpenDoor                                 = 48,
	CloseDoor                                = 49,
	OpenMenu_SecuritySetting                 = 50,
	InputPassword                            = 51,
	InputPassword_CannotTry                  = 52,
	SelectRepairTarget                       = 53,
	CancelWork                               = 54,
	WaitForReplication                       = 55,
	RequestJoinGuild                         = 56,
	Signboard                                = 57,
	OpenCaptureCage                          = 58,
	ChangeBaseCampBattleType_AttackToEnemyInBaseCamp = 59,
	ChangeBaseCampBattleType_NoBattle        = 60,
	SummonRaidBoss                           = 61,
	SummonRaidBoss_RequireMaterial           = 62,
	CharacterMake                            = 63,
	OpenWorkHardMenu                         = 64,
	OpenWorkSuitabilityPreferenceMenu        = 65,
	OpenChestItemPreferenceMenu              = 66,
	Uninteractable                           = 67,
	Test_Warp                                = 68,
	DevTest_1                                = 69,
	DevTest_2                                = 70,
	DevTest_3                                = 71,
	DevTest_4                                = 72,
	EPalInteractiveObjectIndicatorType_MAX   = 73,
};

// Enum Pal.EPalBuildObjectInstallStrategy
// NumValues: 0x000F
enum class EPalBuildObjectInstallStrategy : uint8
{
	Normal                                   = 0,
	WallV2                                   = 1,
	SinkableNormal                           = 2,
	Foundation                               = 3,
	Roof                                     = 4,
	Stairs                                   = 5,
	GroundWall                               = 6,
	BaseCampPoint                            = 7,
	AttachToWall                             = 8,
	AttachToCeil                             = 9,
	PalStorage                               = 10,
	Floor                                    = 11,
	Wall                                     = 12,
	Undefined                                = 13,
	EPalBuildObjectInstallStrategy_MAX       = 14,
};

// Enum Pal.EPalPassiveSkillEffectType
// NumValues: 0x0042
enum class EPalPassiveSkillEffectType : uint8
{
	No                                       = 0,
	MaxHP                                    = 1,
	MeleeAttack                              = 2,
	ShotAttack                               = 3,
	Defense                                  = 4,
	Support                                  = 5,
	CraftSpeed                               = 6,
	MoveSpeed                                = 7,
	Homing                                   = 8,
	Explosive                                = 9,
	BulletSpeed                              = 10,
	BulletAccuracy                           = 11,
	Recoil                                   = 12,
	ElementFire                              = 13,
	ElementWater                             = 14,
	ElementLeaf                              = 15,
	ElementElectricity                       = 16,
	ElementIce                               = 17,
	ElementEarth                             = 18,
	ElementDark                              = 19,
	ElementDragon                            = 20,
	ElementResist_Normal                     = 21,
	ElementResist_Fire                       = 22,
	ElementResist_Water                      = 23,
	ElementResist_Leaf                       = 24,
	ElementResist_Electricity                = 25,
	ElementResist_Ice                        = 26,
	ElementResist_Earth                      = 27,
	ElementResist_Dark                       = 28,
	ElementResist_Dragon                     = 29,
	ElementBoost_Normal                      = 30,
	ElementBoost_Fire                        = 31,
	ElementBoost_Water                       = 32,
	ElementBoost_Leaf                        = 33,
	ElementBoost_Electricity                 = 34,
	ElementBoost_Ice                         = 35,
	ElementBoost_Earth                       = 36,
	ElementBoost_Dark                        = 37,
	ElementBoost_Dragon                      = 38,
	ElementAddItemDrop_Normal                = 39,
	ElementAddItemDrop_Fire                  = 40,
	ElementAddItemDrop_Water                 = 41,
	ElementAddItemDrop_Leaf                  = 42,
	ElementAddItemDrop_Electricity           = 43,
	ElementAddItemDrop_Ice                   = 44,
	ElementAddItemDrop_Earth                 = 45,
	ElementAddItemDrop_Dark                  = 46,
	ElementAddItemDrop_Dragon                = 47,
	CollectItem                              = 48,
	Mute                                     = 49,
	Logging                                  = 50,
	Mining                                   = 51,
	GainItemDrop                             = 52,
	CollectItemDrop                          = 53,
	LifeSteal                                = 54,
	TemperatureResist_Heat                   = 55,
	TemperatureResist_Cold                   = 56,
	TemperatureInvalid_Heat                  = 57,
	TemperatureInvalid_Cold                  = 58,
	MaxInventoryWeight                       = 59,
	FullStomatch_Decrease                    = 60,
	Sanity_Decrease                          = 61,
	BodyPartsWeakDamage                      = 62,
	NonKilling                               = 63,
	ItemWeightReduction                      = 64,
	EPalPassiveSkillEffectType_MAX           = 65,
};

// Enum Pal.EPalItemTypeB
// NumValues: 0x003B
enum class EPalItemTypeB : uint8
{
	None                                     = 0,
	WeaponMelee                              = 1,
	WeaponBow                                = 2,
	WeaponCrossbow                           = 3,
	WeaponHandgun                            = 4,
	WeaponAssaultRifle                       = 5,
	WeaponSniperRifle                        = 6,
	WeaponRocketLauncher                     = 7,
	WeaponShotgun                            = 8,
	WeaponFlameThrower                       = 9,
	WeaponGatlingGun                         = 10,
	WeaponCollectionTool                     = 11,
	WeaponThrowObject                        = 12,
	WeaponGrapplingGun                       = 13,
	SPWeaponCaptureBall                      = 14,
	SPWeaponDamageTrap                       = 15,
	SPWeaponCaptureTrap                      = 16,
	SPWeaponCaptureRope                      = 17,
	ArmorHead                                = 18,
	ArmorBody                                = 19,
	Accessory                                = 20,
	MaterialOre                              = 21,
	MaterialJewelry                          = 22,
	MaterialIngot                            = 23,
	MaterialWood                             = 24,
	MaterialStone                            = 25,
	MaterialProccessing                      = 26,
	MaterialMonster                          = 27,
	MaterialPalEgg                           = 28,
	ConsumeBandage                           = 29,
	ConsumeSeed                              = 30,
	ConsumeBullet                            = 31,
	ConsumeWazaMachine                       = 32,
	ConsumeTechnologyBook                    = 33,
	ConsumeAncientTechnologyBook             = 34,
	ConsumeOther                             = 35,
	ConsumeGainStatusPoints                  = 36,
	ConsumePalLevelUp                        = 37,
	ConsumePalGainExp                        = 38,
	ConsumePalTalentUp                       = 39,
	ConsumePalRankUp                         = 40,
	FoodMeat                                 = 41,
	FoodVegetable                            = 42,
	FoodFish                                 = 43,
	FoodDishMeat                             = 44,
	FoodDishVegetable                        = 45,
	FoodDishFish                             = 46,
	FoodProcessed                            = 47,
	Essential                                = 48,
	Essential_UnlockPlayerFuture             = 49,
	Glider                                   = 50,
	Shield                                   = 51,
	Money                                    = 52,
	Medicine                                 = 53,
	Drug                                     = 54,
	MonsterEquipWeapon                       = 55,
	Blueprint                                = 56,
	ReturnToBaseCamp                         = 57,
	EPalItemTypeB_MAX                        = 58,
};

// Enum Pal.EPalItemTypeA
// NumValues: 0x000E
enum class EPalItemTypeA : uint8
{
	None                                     = 0,
	Weapon                                   = 1,
	SpecialWeapon                            = 2,
	Armor                                    = 3,
	Accessory                                = 4,
	Material                                 = 5,
	Consume                                  = 6,
	Ammo                                     = 7,
	Food                                     = 8,
	Essential                                = 9,
	Glider                                   = 10,
	MonsterEquipWeapon                       = 11,
	Blueprint                                = 12,
	EPalItemTypeA_MAX                        = 13,
};

// Enum Pal.EPalCharacterCompleteDelegatePriority
// NumValues: 0x0004
enum class EPalCharacterCompleteDelegatePriority : uint8
{
	SetTrainer                               = 0,
	Default                                  = 1,
	PostDefault                              = 2,
	EPalCharacterCompleteDelegatePriority_MAX = 3,
};

// Enum Pal.EPalCharacterImportanceType
// NumValues: 0x000A
enum class EPalCharacterImportanceType : uint8
{
	Undefined                                = 0,
	AllUpdate                                = 1,
	Nearest                                  = 2,
	Near                                     = 3,
	MidInSight                               = 4,
	FarInSight                               = 5,
	MidOutSight                              = 6,
	FarOutSight                              = 7,
	Farthest                                 = 8,
	EPalCharacterImportanceType_MAX          = 9,
};

// Enum Pal.EPalDungeonEnemySpawnerRankType
// NumValues: 0x0004
enum class EPalDungeonEnemySpawnerRankType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Boss                                     = 2,
	EPalDungeonEnemySpawnerRankType_MAX      = 3,
};

// Enum Pal.EPalChatCategory
// NumValues: 0x0005
enum class EPalChatCategory : uint8
{
	None                                     = 0,
	Global                                   = 1,
	Guild                                    = 2,
	Say                                      = 3,
	EPalChatCategory_MAX                     = 4,
};

// Enum Pal.EPalCheckSpawnResultType
// NumValues: 0x0004
enum class EPalCheckSpawnResultType : uint8
{
	Ignore                                   = 0,
	Spawn                                    = 1,
	Despawn                                  = 2,
	EPalCheckSpawnResultType_MAX             = 3,
};

// Enum Pal.EPalWeatherConditionType
// NumValues: 0x000A
enum class EPalWeatherConditionType : uint8
{
	Undefined                                = 0,
	Sun                                      = 1,
	Cloud                                    = 2,
	Rain                                     = 3,
	Thunder                                  = 4,
	Snow                                     = 5,
	Fog                                      = 6,
	Storm                                    = 7,
	Snowstorm                                = 8,
	EPalWeatherConditionType_MAX             = 9,
};

// Enum Pal.EPalOneDayTimeType
// NumValues: 0x0004
enum class EPalOneDayTimeType : uint8
{
	Undefined                                = 0,
	Day                                      = 1,
	Night                                    = 2,
	EPalOneDayTimeType_MAX                   = 3,
};

// Enum Pal.EPalSpwnerImportanceType
// NumValues: 0x0006
enum class EPalSpwnerImportanceType : uint8
{
	Undefined                                = 0,
	AllUpdate                                = 1,
	Near                                     = 2,
	Mid                                      = 3,
	Far                                      = 4,
	EPalSpwnerImportanceType_MAX             = 5,
};

// Enum Pal.EPalSpawnRadiusType
// NumValues: 0x0006
enum class EPalSpawnRadiusType : uint8
{
	S                                        = 0,
	M                                        = 1,
	L                                        = 2,
	NPC                                      = 3,
	Override                                 = 4,
	EPalSpawnRadiusType_MAX                  = 5,
};

// Enum Pal.EPalBattleBGMType
// NumValues: 0x000B
enum class EPalBattleBGMType : uint8
{
	None                                     = 0,
	Cute                                     = 1,
	Cool                                     = 2,
	Strong                                   = 3,
	Human_Common                             = 4,
	Human_Villain                            = 5,
	FieldBoss                                = 6,
	Legend                                   = 7,
	RaidBoss                                 = 8,
	TowerBoss                                = 9,
	EPalBattleBGMType_MAX                    = 10,
};

// Enum Pal.EPalCharacterMovementCustomMode
// NumValues: 0x0009
enum class EPalCharacterMovementCustomMode : uint8
{
	None                                     = 0,
	Fatigue                                  = 1,
	Sprint                                   = 2,
	Sliding                                  = 3,
	Glider                                   = 4,
	Climbing                                 = 5,
	Riding                                   = 6,
	Rolling                                  = 7,
	EPalCharacterMovementCustomMode_MAX      = 8,
};

// Enum Pal.EPalPlayerBattleFinishType
// NumValues: 0x0005
enum class EPalPlayerBattleFinishType : uint8
{
	Undefined                                = 0,
	Escape                                   = 1,
	Victory                                  = 2,
	Capture                                  = 3,
	EPalPlayerBattleFinishType_MAX           = 4,
};

// Enum Pal.EPalGuildJoinRequestConfirm
// NumValues: 0x0004
enum class EPalGuildJoinRequestConfirm : uint8
{
	None                                     = 0,
	JoinLowBaseCampLevelGuild                = 1,
	LoseLastBaseCamp                         = 2,
	EPalGuildJoinRequestConfirm_MAX          = 3,
};

// Enum Pal.EPalStepAxisType
// NumValues: 0x0009
enum class EPalStepAxisType : uint8
{
	Forward                                  = 0,
	Back                                     = 1,
	Right                                    = 2,
	Left                                     = 3,
	ForwardRight                             = 4,
	ForwardLeft                              = 5,
	BackRight                                = 6,
	BackLeft                                 = 7,
	EPalStepAxisType_MAX                     = 8,
};

// Enum Pal.EWeaponNotifyType
// NumValues: 0x0006
enum class EWeaponNotifyType : uint8
{
	None                                     = 0,
	Shoot                                    = 1,
	ThrowRequest                             = 2,
	RequestReload                            = 3,
	ShootComplated                           = 4,
	EWeaponNotifyType_MAX                    = 5,
};

// Enum Pal.EPalGuildJoinRequestResult
// NumValues: 0x001D
enum class EPalGuildJoinRequestResult : uint8
{
	Failed_NotValidGroupManager              = 0,
	Failed_Terminated                        = 1,
	Failed_NotValidApplicantPlayerCharacter  = 2,
	Failed_NotValidApplicantPlayerState      = 3,
	Failed_NotValidApplicantPlayerGuild      = 4,
	Failed_NotValidRespondentPlayerCharacter = 5,
	Failed_NotValidRespondentPlayerController = 6,
	Failed_NotFoundApplicantPlayerGuild      = 7,
	Failed_NotExistsApplicantPlayerInTargetGuild = 8,
	Failed_NotExistsTargetPlayerInTargetGuild = 9,
	Failed_CannotExitGuildByAlonePlayer      = 10,
	Failed_CannotExitGuildAdminPlayer        = 11,
	Failed_NotAdminApplicantPlayer           = 12,
	Failed_CannotJoinOtherGuildApplicant     = 13,
	Failed_RequestAlreadyInProgressOtherProcess = 14,
	Failed_TooFarPlayers                     = 15,
	Failed_TooManyRequest                    = 16,
	Failed_RefuseByRespondent                = 17,
	Failed_CancelByApplicant                 = 18,
	Failed_OverBaseCampNum_Applicant         = 19,
	Failed_OverBaseCampNum_Respondent        = 20,
	Failed_NotEnoughSpaceStoreBackBaseCampWorkers_Applicant = 21,
	Failed_NotEnoughSpaceStoreBackBaseCampWorkers_Respondent = 22,
	Separator_Success_Failed                 = 23,
	Succcess_MergePalBox_Applicant           = 24,
	Succcess_MergePalBox_Respondent          = 25,
	Succcess_NoMerge_Applicant               = 26,
	Succcess_NoMerge_Respondent              = 27,
	EPalGuildJoinRequestResult_MAX           = 28,
};

// Enum Pal.EPalLiftupRequestResult
// NumValues: 0x000D
enum class EPalLiftupRequestResult : uint8
{
	Success                                  = 0,
	FailedNotExistsTargetCharacter           = 1,
	FailedNotExistsLiftupComponent           = 2,
	FailedInvalidPlayerIdInController        = 3,
	FailedInvalidDefaultCharacterInController = 4,
	FailedDisabledLiftup                     = 5,
	FailedInvalidRequestPlayerId             = 6,
	FailedAlreadyLiftingActor                = 7,
	FailedCharacterParameter                 = 8,
	FailedIndividualCharacterParameter       = 9,
	FailedAlreadyLocked                      = 10,
	FailedSleeping                           = 11,
	EPalLiftupRequestResult_MAX              = 12,
};

// Enum Pal.EPalLogContentToneType
// NumValues: 0x0004
enum class EPalLogContentToneType : uint8
{
	Normal                                   = 0,
	Negative                                 = 1,
	Positive                                 = 2,
	EPalLogContentToneType_MAX               = 3,
};

// Enum Pal.EPalLogPriority
// NumValues: 0x0005
enum class EPalLogPriority : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Important                                = 2,
	VeryImportant                            = 3,
	EPalLogPriority_MAX                      = 4,
};

// Enum Pal.EPalCharacterStatusOperationName
// NumValues: 0x0006
enum class EPalCharacterStatusOperationName : uint8
{
	Undefined                                = 0,
	Attack                                   = 1,
	Defence                                  = 2,
	HP                                       = 3,
	WorkSpeed                                = 4,
	EPalCharacterStatusOperationName_MAX     = 5,
};

// Enum Pal.EPalWazaID
// NumValues: 0x00CB
enum class EPalWazaID : uint8
{
	None                                     = 0,
	Human_Punch                              = 1,
	WorkAttack                               = 2,
	Throw                                    = 3,
	Scratch                                  = 4,
	EnergyShot                               = 5,
	Unique_Anubis_LowRoundKick               = 6,
	Unique_Anubis_GroundPunch                = 7,
	Unique_Anubis_Tackle                     = 8,
	Unique_Deer_PushupHorn                   = 9,
	HyperBeam                                = 10,
	PowerShot                                = 11,
	PowerBall                                = 12,
	Unique_Garm_Bite                         = 13,
	Intimidate                               = 14,
	Unique_Boar_Tackle                       = 15,
	Unique_PinkCat_CatPunch                  = 16,
	Unique_FlowerDinosaur_Whip               = 17,
	Unique_SheepBall_Roll                    = 18,
	Unique_ChickenPal_ChickenPeck            = 19,
	Unique_Gorilla_GroundPunch               = 20,
	Unique_Grassmammoth_Earthquake           = 21,
	AirCanon                                 = 22,
	Unique_GrassPanda_MusclePunch            = 23,
	Unique_RobinHood_BowSnipe                = 24,
	Unique_Alpaca_Tackle                     = 25,
	Unique_KingAlpaca_BodyPress              = 26,
	Unique_Werewolf_Scratch                  = 27,
	Unique_FengyunDeeper_CloudTempest        = 28,
	Unique_Baphomet_SwallowKite              = 29,
	Unique_HerculesBeetle_BeetleTackle       = 30,
	Unique_HawkBird_Storm                    = 31,
	Unique_Eagle_GlidingNail                 = 32,
	SelfDestruct                             = 33,
	SelfDestruct_Bee                         = 34,
	SelfExplosion                            = 35,
	FireBlast                                = 36,
	Flamethrower                             = 37,
	FireBall                                 = 38,
	FlareArrow                               = 39,
	FireSeed                                 = 40,
	Unique_Horus_FlareBird                   = 41,
	FlareTornado                             = 42,
	Inferno                                  = 43,
	Unique_FireKirin_Tackle                  = 44,
	Unique_AmaterasuWolf_FireCharge          = 45,
	Unique_VolcanicMonster_MagmaAttack       = 46,
	Unique_FlameBuffalo_FlameHorn            = 47,
	WaterGun                                 = 48,
	WaterWave                                = 49,
	HydroPump                                = 50,
	WaterBall                                = 51,
	TidalWave                                = 52,
	AquaJet                                  = 53,
	BubbleShot                               = 54,
	AcidRain                                 = 55,
	Unique_BluePlatypus_Toboggan             = 56,
	WindCutter                               = 57,
	GrassTornado                             = 58,
	SolarBeam                                = 59,
	SeedMachinegun                           = 60,
	SeedMine                                 = 61,
	RootAttack                               = 62,
	SpecialCutter                            = 63,
	Unique_QueenBee_SpinLance                = 64,
	ThunderRain                              = 65,
	ThunderBall                              = 66,
	LineThunder                              = 67,
	CrossThunder                             = 68,
	ThreeThunder                             = 69,
	ElecWave                                 = 70,
	Thunderbolt                              = 71,
	ThunderFunnel                            = 72,
	SpreadPulse                              = 73,
	LockonLaser                              = 74,
	LightningStrike                          = 75,
	Unique_ElecPanda_ElecScratch             = 76,
	Unique_Kirin_LightningTackle             = 77,
	IceMissile                               = 78,
	BlizzardLance                            = 79,
	SnowStorm                                = 80,
	IcicleThrow                              = 81,
	Unique_IceHorse_IceBladeAttack           = 82,
	IceBlade                                 = 83,
	SandTornado                              = 84,
	ThrowRock                                = 85,
	RockLance                                = 86,
	MudShot                                  = 87,
	StoneShotgun                             = 88,
	Unique_DrillGame_ShellAttack             = 89,
	DarkLaser                                = 90,
	DarkWave                                 = 91,
	ShadowBall                               = 92,
	Psychokinesis                            = 93,
	PoisonShot                               = 94,
	GhostFlame                               = 95,
	Unique_DarkCrow_TelePoke                 = 96,
	DragonMeteor                             = 97,
	DragonBreath                             = 98,
	DragonWave                               = 99,
	DragonCanon                              = 100,
	Unique_FairyDragon_FairyTornado          = 101,
	Funnel_DreamDemon                        = 102,
	Funnel_RaijinDaughter                    = 103,
	StardustArrow                            = 104,
	Tremor                                   = 105,
	FrostBreath                              = 106,
	DiamondFall                              = 107,
	BeamSlicer                               = 108,
	Commet                                   = 109,
	DarkBall                                 = 110,
	DarkFog                                  = 111,
	PoisonFog                                = 112,
	DarkLegion                               = 113,
	DarkCanon                                = 114,
	DarkArrow                                = 115,
	DarkPulse                                = 116,
	DarkTornado                              = 117,
	Apocalypse                               = 118,
	Unique_BirdDragon_FireBreath             = 119,
	Unique_BlackMetalDragon_FirePunch        = 120,
	Unique_DarkScorpion_Pierce               = 121,
	Unique_GhostBeast_Tossin                 = 122,
	Unique_JetDragon_JumpBeam                = 123,
	Unique_ThunderBird_ThunderStorm          = 124,
	Unique_Yeti_SnowBall                     = 125,
	Unique_NaughtyCat_CatPress               = 126,
	Unique_IceDeer_IceHorn                   = 127,
	Unique_KingBahamut_AirCrash              = 128,
	Unique_Manticore_InfernoStrike           = 129,
	Unique_SoldierBee_NeedleLance            = 130,
	Unique_ThunderDog_InazumaShorai          = 131,
	Unique_BlackCentaur_TwoSpearRushes       = 132,
	Unique_BlackGriffon_TackleLaser          = 133,
	Unique_SakuraSaurus_SideTackle           = 134,
	Unique_ThunderDragonMan_ThunderSwordAttack = 135,
	Unique_RedArmorBird_TriplePeck           = 136,
	Unique_CaptainPenguin_BodySlide          = 137,
	Unique_Ronin_Iai                         = 138,
	Unique_GrassRabbitMan_GrassRoundKick     = 139,
	Unique_SaintCentaur_OneSpearRushes       = 140,
	Unique_Umihebi_WindingTackle             = 141,
	Unique_WeaselDragon_FlyingTackle         = 142,
	Unique_WhiteTiger_IceScratch             = 143,
	Unique_Baphomet_Dark_DarkKite            = 144,
	Unique_BirdDragon_Ice_IceBreath          = 145,
	Unique_FireKirin_Dark_DarkTossin         = 146,
	Unique_VolcanicMonster_Ice_IceAttack     = 147,
	Unique_IceHorse_Dark_DarkBladeAttack     = 148,
	Unique_Yeti_Grass_GrassBall              = 149,
	Unique_GrassPanda_Electric_ElectricPunch = 150,
	Unique_NightLady_WarpBeam                = 151,
	Unique_NightLady_WarpBeam_Straight       = 152,
	Unique_NightLady_FlameNightmare          = 153,
	Reserve_52                               = 154,
	Reserve_53                               = 155,
	Reserve_54                               = 156,
	Reserve_55                               = 157,
	Reserve_56                               = 158,
	Reserve_57                               = 159,
	Reserve_58                               = 160,
	Reserve_59                               = 161,
	Reserve_60                               = 162,
	Reserve_61                               = 163,
	Reserve_62                               = 164,
	Reserve_63                               = 165,
	Reserve_64                               = 166,
	Reserve_65                               = 167,
	Reserve_66                               = 168,
	Reserve_67                               = 169,
	Reserve_68                               = 170,
	Reserve_69                               = 171,
	Reserve_70                               = 172,
	Reserve_71                               = 173,
	Reserve_72                               = 174,
	Reserve_73                               = 175,
	Reserve_74                               = 176,
	Reserve_75                               = 177,
	Reserve_76                               = 178,
	Reserve_77                               = 179,
	Reserve_78                               = 180,
	Reserve_79                               = 181,
	Reserve_80                               = 182,
	Reserve_81                               = 183,
	Reserve_82                               = 184,
	Reserve_83                               = 185,
	Reserve_84                               = 186,
	Reserve_85                               = 187,
	Reserve_86                               = 188,
	Reserve_87                               = 189,
	Reserve_88                               = 190,
	Reserve_89                               = 191,
	Reserve_90                               = 192,
	Reserve_91                               = 193,
	Reserve_92                               = 194,
	Reserve_93                               = 195,
	Reserve_94                               = 196,
	Reserve_95                               = 197,
	Reserve_96                               = 198,
	Reserve_97                               = 199,
	Reserve_98                               = 200,
	Reserve_99                               = 201,
	MAX                                      = 202,
};

// Enum Pal.EPalPlayerJoinResult
// NumValues: 0x0005
enum class EPalPlayerJoinResult : uint8
{
	Success                                  = 0,
	FailedInvalidLoginPlayerId               = 1,
	FailedInvalidLoginPlayerCharacterHandle  = 2,
	FailedDuplicateAccountCreation           = 3,
	EPalPlayerJoinResult_MAX                 = 4,
};

// Enum Pal.EPalGuildPlayerStatus
// NumValues: 0x0003
enum class EPalGuildPlayerStatus : uint8
{
	Logout                                   = 0,
	Online                                   = 1,
	EPalGuildPlayerStatus_MAX                = 2,
};

// Enum Pal.EPalInvaderType
// NumValues: 0x0004
enum class EPalInvaderType : uint8
{
	None                                     = 0,
	InvaderEnemy                             = 1,
	VisitorNPC                               = 2,
	EPalInvaderType_MAX                      = 3,
};

// Enum Pal.EPalWorkSuitability
// NumValues: 0x0010
enum class EPalWorkSuitability : uint8
{
	None                                     = 0,
	EmitFlame                                = 1,
	Watering                                 = 2,
	Seeding                                  = 3,
	GenerateElectricity                      = 4,
	Handcraft                                = 5,
	Collection                               = 6,
	Deforest                                 = 7,
	Mining                                   = 8,
	OilExtraction                            = 9,
	ProductMedicine                          = 10,
	Cool                                     = 11,
	Transport                                = 12,
	MonsterFarm                              = 13,
	Anyone                                   = 14,
	MAX                                      = 15,
};

// Enum Pal.EPalFoodStatusEffectType
// NumValues: 0x0008
enum class EPalFoodStatusEffectType : uint8
{
	None                                     = 0,
	Attack                                   = 1,
	Defense                                  = 2,
	HungerResist                             = 3,
	SANResist                                = 4,
	WorkSpeed                                = 5,
	Regene_Hp                                = 6,
	EPalFoodStatusEffectType_MAX             = 7,
};

// Enum Pal.EPalBaseCampWorkerEventType
// NumValues: 0x000D
enum class EPalBaseCampWorkerEventType : uint8
{
	None                                     = 0,
	Escape                                   = 1,
	OverworkDeath                            = 2,
	Sick                                     = 3,
	DodgeWork                                = 4,
	DodgeWork_Short                          = 5,
	DodgeWork_Sleep                          = 6,
	EatTooMuch                               = 7,
	Trantrum                                 = 8,
	FightWithFriend                          = 9,
	TurnFoodBox                              = 10,
	DestroyBuilding                          = 11,
	EPalBaseCampWorkerEventType_MAX          = 12,
};

// Enum Pal.EPalStatusHungerType
// NumValues: 0x0004
enum class EPalStatusHungerType : uint8
{
	Default                                  = 0,
	Hunger                                   = 1,
	Starvation                               = 2,
	EPalStatusHungerType_MAX                 = 3,
};

// Enum Pal.EPalBaseCampWorkerSickType
// NumValues: 0x000A
enum class EPalBaseCampWorkerSickType : uint8
{
	None                                     = 0,
	Cold                                     = 1,
	Sprain                                   = 2,
	Bulimia                                  = 3,
	GastricUlcer                             = 4,
	Fracture                                 = 5,
	Weakness                                 = 6,
	DepressionSprain                         = 7,
	DisturbingElement                        = 8,
	EPalBaseCampWorkerSickType_MAX           = 9,
};

// Enum Pal.EPalStatusPhysicalHealthType
// NumValues: 0x0007
enum class EPalStatusPhysicalHealthType : uint8
{
	Healthful                                = 0,
	MinorInjury                              = 1,
	Severe                                   = 2,
	Dying                                    = 3,
	DeadBody                                 = 4,
	CloudCemetery                            = 5,
	EPalStatusPhysicalHealthType_MAX         = 6,
};

// Enum Pal.EPalGenderType
// NumValues: 0x0004
enum class EPalGenderType : uint8
{
	None                                     = 0,
	Male                                     = 1,
	Female                                   = 2,
	EPalGenderType_MAX                       = 3,
};

// Enum Pal.EPalShooterFlagContainerPriority
// NumValues: 0x0003
enum class EPalShooterFlagContainerPriority : uint8
{
	Weapon                                   = 0,
	Ball                                     = 1,
	EPalShooterFlagContainerPriority_MAX     = 2,
};

// Enum Pal.EWeaponPlaySoundType
// NumValues: 0x0007
enum class EWeaponPlaySoundType : uint8
{
	None                                     = 0,
	OnStartAim                               = 1,
	OnEndAim                                 = 2,
	OnAttach                                 = 3,
	OnDetach                                 = 4,
	OnThrow                                  = 5,
	EWeaponPlaySoundType_MAX                 = 6,
};

// Enum Pal.EPalWeaponType
// NumValues: 0x000F
enum class EPalWeaponType : uint8
{
	None                                     = 0,
	ThrowObject                              = 1,
	Handgun                                  = 2,
	AssaultRifle                             = 3,
	Shotgun                                  = 4,
	SniperRifle                              = 5,
	RocketLauncher                           = 6,
	MeleeWeapon                              = 7,
	Bow                                      = 8,
	BowGun                                   = 9,
	FlameThrower                             = 10,
	GatlingGun                               = 11,
	Liftup                                   = 12,
	LaserRifle                               = 13,
	MAX                                      = 14,
};

// Enum Pal.EWeaponCoopType
// NumValues: 0x0006
enum class EWeaponCoopType : uint8
{
	None                                     = 0,
	RapidFireWeapon                          = 1,
	NearRangeWeapon                          = 2,
	FarRangeWeapon                           = 3,
	SupportWeapon                            = 4,
	EWeaponCoopType_MAX                      = 5,
};

// Enum Pal.EPalCharacterStatusOperationResult
// NumValues: 0x0013
enum class EPalCharacterStatusOperationResult : uint8
{
	Success                                  = 0,
	FailedNotValidIndividualHandle           = 1,
	FailedNotValidIndividualParameter        = 2,
	FailedNotValidPlayerState                = 3,
	FailedNotValidPlayerRecordData           = 4,
	FailedNotValidPlayerInventoryData        = 5,
	FailedNotValidOtomoHolder                = 6,
	FailedGetPlayerRankMasterData            = 7,
	FailedGetCharacterUpgradeMasterData      = 8,
	FailedNotFoundOtomo                      = 9,
	FailedAlreadyMaxRank                     = 10,
	FailedAlreadyResetStatus                 = 11,
	FailedCalcRequiredRelicNum               = 12,
	FailedLackRelicNum                       = 13,
	FailedCalcRequiredUpgradeItemNum         = 14,
	FailedLackUpgradeItemNum                 = 15,
	FailedLackMoneyNum                       = 16,
	FailedItemOperation                      = 17,
	EPalCharacterStatusOperationResult_MAX   = 18,
};

// Enum Pal.EPalDeadType
// NumValues: 0x000B
enum class EPalDeadType : uint8
{
	Undefined                                = 0,
	Attack                                   = 1,
	SelfDestruction                          = 2,
	BodyTemperature                          = 3,
	Falling                                  = 4,
	Poison                                   = 5,
	Burn                                     = 6,
	Drown                                    = 7,
	TowerBossBattle                          = 8,
	Ground                                   = 9,
	EPalDeadType_MAX                         = 10,
};

// Enum Pal.EPalGroupOperationResult
// NumValues: 0x001C
enum class EPalGroupOperationResult : uint8
{
	Success                                  = 0,
	FailedNotFoundNetworkTransmitter         = 1,
	FailedCreateNewGroup                     = 2,
	FailedNotFoundGroup                      = 3,
	FailedNotFoundGuild                      = 4,
	FailedNotFoundOrganization               = 5,
	FailedNotFoundCharacterHandle            = 6,
	FailedNotFoundCharacterIndividualID      = 7,
	FailedNotFoundCharacterParameter         = 8,
	FailedNotFoundPlayerCharacterHandle      = 9,
	FailedAlreadyBelongToGroup               = 10,
	FailedNotImplementExitNoPlayerCharacter  = 11,
	FailedAlreadyExist                       = 12,
	FailedPlayerAlreadyBelongingToGuild      = 13,
	FailedBaseCampAlreadyBelongingToGuild    = 14,
	FailedPlayerNotBelongingToGuild          = 15,
	FailedGuildMaxPlayerNum                  = 16,
	FailedBelongingToIndependentGuildOtherPlayer = 17,
	FailedPermissionDeniedByNotAdmin         = 18,
	FailedAdminCannotExitGuild               = 19,
	FailedDisposeStaticOrganization          = 20,
	FailedNotEnoughSpaceStoreBackBaseCampWorkers = 21,
	FailedOverBaseCamp                       = 22,
	FailedBaseCampNotBelongingToGuild        = 23,
	FailedNotFoundBaseCamp                   = 24,
	FailedBaseCampOperation                  = 25,
	FailedNotImplement                       = 26,
	EPalGroupOperationResult_MAX             = 27,
};

// Enum Pal.EPalMapObjectRankUpCharacterResult
// NumValues: 0x0007
enum class EPalMapObjectRankUpCharacterResult : uint8
{
	Success                                  = 0,
	FailedNotValidIndividualHandle           = 1,
	FailedNotValidIndividualParameter        = 2,
	FailedNotValidPlayerState                = 3,
	FailedNotValidPlayerPalStorage           = 4,
	FailedNotExistsResourceCharacterInPalStorage = 5,
	EPalMapObjectRankUpCharacterResult_MAX   = 6,
};

// Enum Pal.EPalUISelectNumResult
// NumValues: 0x0003
enum class EPalUISelectNumResult : uint8
{
	Canceled                                 = 0,
	Complate                                 = 1,
	EPalUISelectNumResult_MAX                = 2,
};

// Enum Pal.EPalBodyLocationType
// NumValues: 0x0007
enum class EPalBodyLocationType : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Mouth                                    = 2,
	BulletMuzzle                             = 3,
	BodyCenter                               = 4,
	JumpEffect                               = 5,
	EPalBodyLocationType_MAX                 = 6,
};

// Enum Pal.EPalWorkType
// NumValues: 0x0023
enum class EPalWorkType : uint8
{
	None                                     = 0,
	CommonTemp                               = 1,
	ReviveCharacter                          = 2,
	Architecture                             = 3,
	RepairBuildObject                        = 4,
	FarmHarvest                              = 5,
	HarvestLevelObject                       = 6,
	TransportFoodItemInBaseCamp              = 7,
	Seeding                                  = 8,
	Watering                                 = 9,
	Cooking                                  = 10,
	TransportDisposableItemInBaseCamp        = 11,
	ConvertItem                              = 12,
	ProductItem                              = 13,
	Smelting                                 = 14,
	ProductMedicine                          = 15,
	TransportItemInBaseCamp                  = 16,
	CollectResourcePickable                  = 17,
	ProductResource_Deforest                 = 18,
	ProductResource_Mining                   = 19,
	ProductResource_Deforest_OnFacility      = 20,
	ProductResource_Mining_OnFacility        = 21,
	GenerateEnergy                           = 22,
	Ignition                                 = 23,
	Defense                                  = 24,
	BreedFarm                                = 25,
	MonsterFarm                              = 26,
	ExtinguishBurn                           = 27,
	Cool                                     = 28,
	Attack                                   = 29,
	CollectItemToStorage                     = 30,
	TransportItem                            = 31,
	CollectResource                          = 32,
	GrowupPromotion                          = 33,
	EPalWorkType_MAX                         = 34,
};

// Enum Pal.EPalPassiveTriggerType
// NumValues: 0x0008
enum class EPalPassiveTriggerType : uint32
{
	None                                     = 0,
	ActiveOtomo                              = 1,
	Worker                                   = 2,
	Ride                                     = 4,
	Reserve                                  = 8,
	InOtomo                                  = 16,
	Always                                   = 32,
	EPalPassiveTriggerType_MAX               = 33,
};

// Enum Pal.EPalPassiveAbilitySkillState
// NumValues: 0x0006
enum class EPalPassiveAbilitySkillState : uint8
{
	None                                     = 0,
	Active                                   = 1,
	ActivateDelay                            = 2,
	Inactive                                 = 3,
	ActivateLocked                           = 4,
	EPalPassiveAbilitySkillState_MAX         = 5,
};

// Enum Pal.EPalActionType
// NumValues: 0x0050
enum class EPalActionType : uint8
{
	None                                     = 0,
	Sleep                                    = 1,
	WakeUp                                   = 2,
	Death                                    = 3,
	Revive                                   = 4,
	Menace                                   = 5,
	Eat                                      = 6,
	Stan                                     = 7,
	KnockBack                                = 8,
	BlowAway                                 = 9,
	GeneralAttack                            = 10,
	MeleeSkill                               = 11,
	ShootSkill                               = 12,
	JumpAction                               = 13,
	RollingAction                            = 14,
	FullRideAction                           = 15,
	Turn90R                                  = 16,
	Turn90L                                  = 17,
	Turn180R                                 = 18,
	Turn180L                                 = 19,
	TurnToTarget                             = 20,
	DiscoverySomething                       = 21,
	ForwardWalk                              = 22,
	BackwardWalk                             = 23,
	Provocation                              = 24,
	CommonWork                               = 25,
	Architecture                             = 26,
	Deforest                                 = 27,
	Mining                                   = 28,
	Feeding                                  = 29,
	GrowupPromotion                          = 30,
	Watering                                 = 31,
	WateringOneshot                          = 32,
	Harvest                                  = 33,
	GenerateEnergy                           = 34,
	GenerateEnergyFire                       = 35,
	GenerateEnergyElectric                   = 36,
	Cooking                                  = 37,
	Happy                                    = 38,
	IdleInSpa                                = 39,
	Ignition                                 = 40,
	TransportItem                            = 41,
	Cool                                     = 42,
	SpawnItem                                = 43,
	Resuscitation                            = 44,
	Liftup                                   = 45,
	BeLiftup                                 = 46,
	Throw                                    = 47,
	BeThrown                                 = 48,
	HumanFeeding                             = 49,
	HumanFeeding_DoMotion                    = 50,
	GetupUtubuse_orRight                     = 51,
	GetupAomuke_orRight                      = 52,
	ReturnToBaseCamp                         = 53,
	WaitLoadingAction                        = 54,
	HumanPetting                             = 55,
	PalPetting                               = 56,
	Talk                                     = 57,
	Listen_A                                 = 58,
	Listen_B                                 = 59,
	ChairSit                                 = 60,
	ChairSitMeal                             = 61,
	ChairSitDrink                            = 62,
	ChairSitMeat                             = 63,
	GroundSit                                = 64,
	SpawnOtomoPal                            = 65,
	PartnerSkill                             = 66,
	CommandPal                               = 67,
	ReturnOtomoPal                           = 68,
	Step_Forward                             = 69,
	Step_Back                                = 70,
	Step_Left                                = 71,
	Step_Right                               = 72,
	ElectricShock                            = 73,
	UnlockCagePalLock                        = 74,
	CutPalMeat                               = 75,
	Grappling                                = 76,
	PalRandomRest                            = 77,
	LargeDown                                = 78,
	EPalActionType_MAX                       = 79,
};

// Enum Pal.EPalMovementSpeedType
// NumValues: 0x0005
enum class EPalMovementSpeedType : uint8
{
	SlowWalk                                 = 0,
	Walk                                     = 1,
	Run                                      = 2,
	TransportMove                            = 3,
	EPalMovementSpeedType_MAX                = 4,
};

// Enum Pal.EPalAIActionCategory
// NumValues: 0x0005
enum class EPalAIActionCategory : uint8
{
	Undefined                                = 0,
	Call                                     = 1,
	Coop                                     = 2,
	NullAction                               = 3,
	EPalAIActionCategory_MAX                 = 4,
};

// Enum Pal.EPalAIResponseType
// NumValues: 0x0005
enum class EPalAIResponseType : uint8
{
	Ignore                                   = 0,
	Escape                                   = 1,
	Battle                                   = 2,
	Special                                  = 3,
	EPalAIResponseType_MAX                   = 4,
};

// Enum Pal.EPalAISightJudgementType
// NumValues: 0x0003
enum class EPalAISightJudgementType : uint8
{
	None                                     = 0,
	AimedByPlayer                            = 1,
	EPalAISightJudgementType_MAX             = 2,
};

// Enum Pal.EPalFootType
// NumValues: 0x0006
enum class EPalFootType : uint8
{
	None                                     = 0,
	ForeFootLeft                             = 1,
	ForeFootRight                            = 2,
	HindFootLeft                             = 3,
	HindFootRight                            = 4,
	MAX                                      = 5,
};

// Enum Pal.EPalGeneralBlendSpaceType
// NumValues: 0x0007
enum class EPalGeneralBlendSpaceType : uint8
{
	None                                     = 0,
	GeneralMove                              = 1,
	RidingMove                               = 2,
	FlyingMove                               = 3,
	FlyingRidingMove                         = 4,
	TransportingObjectMove                   = 5,
	EPalGeneralBlendSpaceType_MAX            = 6,
};

// Enum Pal.EPalGeneralAnimSequenceType
// NumValues: 0x0005
enum class EPalGeneralAnimSequenceType : uint8
{
	None                                     = 0,
	JumpStart                                = 1,
	JumpLoop                                 = 2,
	JumpEnd                                  = 3,
	EPalGeneralAnimSequenceType_MAX          = 4,
};

// Enum Pal.EPalBlowVelocityOwner
// NumValues: 0x0005
enum class EPalBlowVelocityOwner : uint8
{
	None                                     = 0,
	AttackCharacter                          = 1,
	HitComponent                             = 2,
	HitLocation                              = 3,
	EPalBlowVelocityOwner_MAX                = 4,
};

// Enum Pal.EPalStatusID
// NumValues: 0x0020
enum class EPalStatusID : uint8
{
	None                                     = 0,
	ControlSP                                = 1,
	GainHP                                   = 2,
	StepCooldown                             = 3,
	DrownCheck                               = 4,
	Poison                                   = 5,
	UNKOTimer                                = 6,
	Stan                                     = 7,
	Coma                                     = 8,
	Sleep                                    = 9,
	Overwork                                 = 10,
	Happiness                                = 11,
	Resistance                               = 12,
	Moratorium                               = 13,
	Drown                                    = 14,
	Dying                                    = 15,
	ShieldRecovery                           = 16,
	FallDamage                               = 17,
	LavaDamage                               = 18,
	Burn                                     = 19,
	Wetness                                  = 20,
	Freeze                                   = 21,
	Electrical                               = 22,
	Muddy                                    = 23,
	IvyCling                                 = 24,
	Darkness                                 = 25,
	AttackUp                                 = 26,
	DefenseUp                                = 27,
	CollectItem                              = 28,
	LifeSteal                                = 29,
	RaidBossStatusChange                     = 30,
	EPalStatusID_MAX                         = 31,
};

// Enum Pal.EPalBaseCampState
// NumValues: 0x0003
enum class EPalBaseCampState : uint8
{
	NotAvailable                             = 0,
	Normal                                   = 1,
	EPalBaseCampState_MAX                    = 2,
};

// Enum Pal.EPalBaseCampModuleEnergyState
// NumValues: 0x0003
enum class EPalBaseCampModuleEnergyState : uint8
{
	Providable                               = 0,
	Waiting                                  = 1,
	EPalBaseCampModuleEnergyState_MAX        = 2,
};

// Enum Pal.EPalBaseCampItemContainerType
// NumValues: 0x0004
enum class EPalBaseCampItemContainerType : uint8
{
	HomeChest                                = 0,
	Chest                                    = 1,
	Other                                    = 2,
	EPalBaseCampItemContainerType_MAX        = 3,
};

// Enum Pal.EPalBaseCampPassiveEffectWorkHardType
// NumValues: 0x0005
enum class EPalBaseCampPassiveEffectWorkHardType : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	VeryHard                                 = 3,
	EPalBaseCampPassiveEffectWorkHardType_MAX = 4,
};

// Enum Pal.EPalLogFormatType
// NumValues: 0x0003
enum class EPalLogFormatType : uint8
{
	Text                                     = 0,
	Json                                     = 1,
	EPalLogFormatType_MAX                    = 2,
};

// Enum Pal.EPalAllowConnectPlatform
// NumValues: 0x0003
enum class EPalAllowConnectPlatform : uint8
{
	Steam                                    = 0,
	Xbox                                     = 1,
	EPalAllowConnectPlatform_MAX             = 2,
};

// Enum Pal.EPalOptionWorldDeathPenalty
// NumValues: 0x0005
enum class EPalOptionWorldDeathPenalty : uint8
{
	None                                     = 0,
	Item                                     = 1,
	ItemAndEquipment                         = 2,
	All                                      = 3,
	EPalOptionWorldDeathPenalty_MAX          = 4,
};

// Enum Pal.EPalOptionWorldDifficulty
// NumValues: 0x0006
enum class EPalOptionWorldDifficulty : uint8
{
	None                                     = 0,
	Easy                                     = 1,
	Normal                                   = 2,
	Hard                                     = 3,
	Custom                                   = 4,
	EPalOptionWorldDifficulty_MAX            = 5,
};

// Enum Pal.EPalMapBaseCampWorkerOrderType
// NumValues: 0x0004
enum class EPalMapBaseCampWorkerOrderType : uint8
{
	Work                                     = 0,
	BattleFighter                            = 1,
	BattleAllWorker                          = 2,
	EPalMapBaseCampWorkerOrderType_MAX       = 3,
};

// Enum Pal.EPalBaseCampWorkerDirectorState
// NumValues: 0x0004
enum class EPalBaseCampWorkerDirectorState : uint8
{
	Init                                     = 0,
	WaitForLoadingAround                     = 1,
	Active                                   = 2,
	EPalBaseCampWorkerDirectorState_MAX      = 3,
};

// Enum Pal.EPalBaseCampWorkerDirectionBattleType
// NumValues: 0x0005
enum class EPalBaseCampWorkerDirectionBattleType : uint8
{
	AttackToEnemyInBaseCamp                  = 0,
	NoBattle                                 = 1,
	Num                                      = 2,
	FirstValue                               = 0,
	EPalBaseCampWorkerDirectionBattleType_MAX = 3,
};

// Enum Pal.EPalBodyTemperatureState
// NumValues: 0x0004
enum class EPalBodyTemperatureState : uint8
{
	Default                                  = 0,
	Cold                                     = 1,
	Heat                                     = 2,
	EPalBodyTemperatureState_MAX             = 3,
};

// Enum Pal.EPalPlayerEquipItemSlotType
// NumValues: 0x0007
enum class EPalPlayerEquipItemSlotType : uint8
{
	Head                                     = 0,
	Body                                     = 1,
	Accessory1                               = 2,
	Accessory2                               = 3,
	Shield                                   = 4,
	Glider                                   = 5,
	Max                                      = 6,
};

// Enum Pal.EPalBossBattleCombatResult
// NumValues: 0x0005
enum class EPalBossBattleCombatResult : uint8
{
	None                                     = 0,
	Won                                      = 1,
	TimeUp                                   = 2,
	AllDead                                  = 3,
	EPalBossBattleCombatResult_MAX           = 4,
};

// Enum Pal.EPalBossBattleSequenceType
// NumValues: 0x0006
enum class EPalBossBattleSequenceType : uint8
{
	None                                     = 0,
	Opening                                  = 1,
	Combat                                   = 2,
	Ending                                   = 3,
	Completed                                = 4,
	EPalBossBattleSequenceType_MAX           = 5,
};

// Enum Pal.EPalMapObjectOperationResult
// NumValues: 0x002C
enum class EPalMapObjectOperationResult : uint8
{
	None                                     = 0,
	Canceled                                 = 1,
	FailedInLimitVolume                      = 2,
	FailedInDungeon                          = 3,
	FailedOverflowBaseCampNumInGuild         = 4,
	FailedOverflowBaseCampNumInWorld         = 5,
	FailedTooNearOtherBaseCampArea           = 6,
	FailedOtherGuildBaseCampArea             = 7,
	FailedExceedMaxZ                         = 8,
	FailedCannotInstallNotInDoor             = 9,
	FailedCannotInstallNotOnBase             = 10,
	FailNotFoundBaseCampWorkerDirectorBelongTo = 11,
	FailedNotEnoughMaterials                 = 12,
	FailedInValidWeakSelf                    = 13,
	FailedInValidRequestHandler              = 14,
	FailedCannotDismantleNotAuthenticatedPasswordLock = 15,
	FailedNotReady                           = 16,
	FailNotFoundClass                        = 17,
	FailLackSupportedLevel                   = 18,
	FailNotConnectToOther                    = 19,
	FailedNotInstallOnBackground             = 20,
	FailOverlap                              = 21,
	FailedIntersectOtherObject               = 22,
	FailNotAttachToWall                      = 23,
	FailNotAttachToCeil                      = 24,
	FailNotFoundBuildObjectData              = 25,
	FailNotAvailableBaseCampBelongTo         = 26,
	FailNotFoundBaseCampBelongTo             = 27,
	FailSpawnNotFoundBaseCampBelongTo        = 28,
	FailedExceedMaxNumInBaseCamp             = 29,
	FailedNotFoundModel                      = 30,
	FailedNotBuildObject                     = 31,
	FailedNotFoundBuildProcess               = 32,
	FailedNotBuildingState                   = 33,
	FailNotFoundRequestPlayerPalStorage      = 34,
	FailNotEnoughPalBoxEmptySlot             = 35,
	FailedNotInstallBySurface                = 36,
	FailedTooSteepSlopeAngle                 = 37,
	FailedAccessPointCannotGrounded          = 38,
	FailedChestCannotGrounded                = 39,
	FailedNotCanDismantleState               = 40,
	FailedNotExistRequestPlayer              = 41,
	Success                                  = 42,
	EPalMapObjectOperationResult_MAX         = 43,
};

// Enum Pal.EPalEnergyType
// NumValues: 0x0003
enum class EPalEnergyType : uint8
{
	None                                     = 0,
	Electric                                 = 1,
	EPalEnergyType_MAX                       = 2,
};

// Enum Pal.EPalBuildObjectTypeB
// NumValues: 0x0015
enum class EPalBuildObjectTypeB : uint8
{
	Prod_Craft                               = 0,
	Prod_Resource                            = 1,
	Prod_Furnace                             = 2,
	Prod_Medicine                            = 3,
	Pal_Capture                              = 4,
	Pal_Breed                                = 5,
	Pal_Modify                               = 6,
	Infra_Medical                            = 7,
	Infra_Storage                            = 8,
	Infra_Trade                              = 9,
	Infra_GeneratePower                      = 10,
	Infra_Defense                            = 11,
	Infra_Environment                        = 12,
	Food_Basic                               = 13,
	Food_Agriculture                         = 14,
	Food_Cooking                             = 15,
	Food_Livestock                           = 16,
	Found_Basic                              = 17,
	Found_House                              = 18,
	Other                                    = 19,
	EPalBuildObjectTypeB_MAX                 = 20,
};

// Enum Pal.EPalBuildObjectTypeA
// NumValues: 0x000C
enum class EPalBuildObjectTypeA : uint8
{
	Product                                  = 0,
	Pal                                      = 1,
	Storage                                  = 2,
	Food                                     = 3,
	Infrastructure                           = 4,
	Light                                    = 5,
	Foundation                               = 6,
	Defense                                  = 7,
	Other                                    = 8,
	Furniture                                = 9,
	Dismantle                                = 10,
	EPalBuildObjectTypeA_MAX                 = 11,
};

// Enum Pal.EPalBuildProcessState
// NumValues: 0x0003
enum class EPalBuildProcessState : uint8
{
	Building                                 = 0,
	Completed                                = 1,
	EPalBuildProcessState_MAX                = 2,
};

// Enum Pal.EPalWalkableFloorAnglePriority
// NumValues: 0x0005
enum class EPalWalkableFloorAnglePriority : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Ride                                     = 2,
	Action                                   = 3,
	EPalWalkableFloorAnglePriority_MAX       = 4,
};

// Enum Pal.EEnterWaterFlag
// NumValues: 0x0004
enum class EEnterWaterFlag : uint8
{
	None                                     = 0,
	OverlapWaterVolume                       = 1,
	RaycastWaterPlane                        = 2,
	EEnterWaterFlag_MAX                      = 3,
};

// Enum Pal.EPalWorkAssignType
// NumValues: 0x0005
enum class EPalWorkAssignType : uint8
{
	None                                     = 0,
	Work                                     = 1,
	WorkAttack                               = 2,
	Defense                                  = 3,
	EPalWorkAssignType_MAX                   = 4,
};

// Enum Pal.EPalContainerOperationRestrictType
// NumValues: 0x0003
enum class EPalContainerOperationRestrictType : uint8
{
	None                                     = 0,
	CannotInject                             = 1,
	EPalContainerOperationRestrictType_MAX   = 2,
};

// Enum Pal.EHumanBone
// NumValues: 0x0016
enum class EHumanBone : uint8
{
	Pelvis                                   = 0,
	Spine1                                   = 1,
	Spine2                                   = 2,
	Spine3                                   = 3,
	Neck                                     = 4,
	Head                                     = 5,
	LeftThigh                                = 6,
	LeftCalf                                 = 7,
	LeftFoot                                 = 8,
	RightThigh                               = 9,
	RightCalf                                = 10,
	RightFoot                                = 11,
	LeftClavicle                             = 12,
	LeftUpperArm                             = 13,
	LeftLowerArm                             = 14,
	LeftHand                                 = 15,
	RightClavicle                            = 16,
	RightUpperArm                            = 17,
	RightLowerArm                            = 18,
	RightHand                                = 19,
	EnumCount                                = 20,
	EHumanBone_MAX                           = 21,
};

// Enum Pal.EPalBiomeType
// NumValues: 0x000A
enum class EPalBiomeType : uint8
{
	Undefined                                = 0,
	Meadow                                   = 1,
	Desert                                   = 2,
	Coast                                    = 3,
	IceSnow                                  = 4,
	Volcano                                  = 5,
	CentralCity                              = 6,
	SkyCityCity                              = 7,
	WorldTree                                = 8,
	EPalBiomeType_MAX                        = 9,
};

// Enum Pal.EPalAudioBus
// NumValues: 0x000A
enum class EPalAudioBus : uint8
{
	None                                     = 0,
	Master                                   = 1,
	BGM                                      = 2,
	JINGLE                                   = 3,
	SE                                       = 4,
	Ambient                                  = 5,
	PalVoice                                 = 6,
	HumanVoice                               = 7,
	UI                                       = 8,
	MAX                                      = 9,
};

// Enum Pal.EPalACEWordFilterAPIType
// NumValues: 0x0004
enum class EPalACEWordFilterAPIType : uint8
{
	Unknown                                  = 0,
	China                                    = 1,
	Global                                   = 2,
	EPalACEWordFilterAPIType_MAX             = 3,
};

// Enum Pal.EPalLanguageType
// NumValues: 0x000C
enum class EPalLanguageType : uint8
{
	JP                                       = 0,
	EN                                       = 1,
	ZH_HANS                                  = 2,
	ZH_HANT                                  = 3,
	FR                                       = 4,
	IT                                       = 5,
	DE                                       = 6,
	ES                                       = 7,
	KO                                       = 8,
	PT_BR                                    = 9,
	RU                                       = 10,
	EPalLanguageType_MAX                     = 11,
};

// Enum Pal.EPalDungeonInstanceBossState
// NumValues: 0x0003
enum class EPalDungeonInstanceBossState : uint8
{
	Spawned                                  = 0,
	Dead                                     = 1,
	EPalDungeonInstanceBossState_MAX         = 2,
};

// Enum Pal.EPalMapObjectConcreteModelModuleType
// NumValues: 0x000C
enum class EPalMapObjectConcreteModelModuleType : uint8
{
	None                                     = 0,
	ItemContainer                            = 1,
	CharacterContainer                       = 2,
	Workee                                   = 3,
	Energy                                   = 4,
	StatusObserver                           = 5,
	ItemStack                                = 6,
	Switch                                   = 7,
	PlayerRecord                             = 8,
	BaseCampPassiveEffect                    = 9,
	PasswordLock                             = 10,
	EPalMapObjectConcreteModelModuleType_MAX = 11,
};

// Enum Pal.EPalOrganizationType
// NumValues: 0x0009
enum class EPalOrganizationType : uint8
{
	None                                     = 0,
	Guild                                    = 1,
	Police                                   = 2,
	City                                     = 3,
	Brigade                                  = 4,
	TeamBlackHunter                          = 5,
	TeamFireCult                             = 6,
	TeamWelfareGroup                         = 7,
	MAX                                      = 8,
};

// Enum Pal.EPalFadeWidgetType
// NumValues: 0x0004
enum class EPalFadeWidgetType : uint8
{
	Invalid                                  = 0,
	SimpleColor                              = 1,
	Loading                                  = 2,
	EPalFadeWidgetType_MAX                   = 3,
};

// Enum Pal.EPalHUDWidgetPriority
// NumValues: 0x000D
enum class EPalHUDWidgetPriority : uint8
{
	Default                                  = 0,
	EnemyMark                                = 1,
	DamagePopUp                              = 2,
	PlayerInputGuard                         = 3,
	PlayerUI                                 = 4,
	CaptureingLoupe                          = 5,
	CaptureReticle                           = 6,
	InteractIndicator                        = 7,
	BuildingUI                               = 8,
	RadialMenu                               = 9,
	GameOverUI                               = 10,
	DebugInfo                                = 11,
	EPalHUDWidgetPriority_MAX                = 12,
};

// Enum Pal.EPalWorldHUDWidgetBlueprintType
// NumValues: 0x0012
enum class EPalWorldHUDWidgetBlueprintType : uint8
{
	Undefined                                = 0,
	ConvertItem                              = 1,
	ProductItem                              = 2,
	FarmCrop                                 = 3,
	FarmBlockV2                              = 4,
	BuildProgress                            = 5,
	LackElectricity                          = 6,
	RecoverPal                               = 7,
	HatchingPalEgg                           = 8,
	GenerateEnergy                           = 9,
	HeadupWantFood                           = 10,
	HeadupPossessItem                        = 11,
	HeadupInvader                            = 12,
	BossEntryWait                            = 13,
	BreedFarm                                = 14,
	MapObjectHP                              = 15,
	CommonWorkRequirement                    = 16,
	EPalWorldHUDWidgetBlueprintType_MAX      = 17,
};

// Enum Pal.EPalUIRewardDisplayType
// NumValues: 0x0006
enum class EPalUIRewardDisplayType : uint8
{
	Default                                  = 0,
	GetItem                                  = 1,
	HatchedPal                               = 2,
	FastTravel                               = 3,
	DefeatBoss                               = 4,
	EPalUIRewardDisplayType_MAX              = 5,
};

// Enum Pal.EPalWidgetBlueprintType
// NumValues: 0x0015
enum class EPalWidgetBlueprintType : uint8
{
	Undefined                                = 0,
	Dialog                                   = 1,
	MonsterDetail                            = 2,
	WorldMap                                 = 3,
	ConvertItemDetail                        = 4,
	CharacterRankUp                          = 5,
	RecoverOtomo                             = 6,
	ItemChest                                = 7,
	WorkerRadialMenu                         = 8,
	FoodBox                                  = 9,
	SelectItem_PlayerInventory               = 10,
	PlayerStatusOperation                    = 11,
	PalStatusOperation                       = 12,
	CommonReward                             = 13,
	MapObjectSecuritySetting                 = 14,
	PasswordSetting                          = 15,
	BaseCampWorkHard                         = 16,
	WorkSuitabilityPreference                = 17,
	ItemChestPreference                      = 18,
	CutsceneOverlay                          = 19,
	EPalWidgetBlueprintType_MAX              = 20,
};

// Enum Pal.EPalFadeWidgetLayerType
// NumValues: 0x0008
enum class EPalFadeWidgetLayerType : uint8
{
	Invalid                                  = 0,
	Common_Lowest                            = 1,
	Common_Mid                               = 2,
	Common_Highest                           = 3,
	Loading                                  = 4,
	Loading_WorldPartition                   = 5,
	Loading_SucceedRequestEnterExitStageInClient = 6,
	EPalFadeWidgetLayerType_MAX              = 7,
};

// Enum Pal.EPalIncidentState
// NumValues: 0x0007
enum class EPalIncidentState : uint8
{
	None                                     = 0,
	Initialized                              = 1,
	Executing                                = 2,
	Completed                                = 3,
	Canceled                                 = 4,
	InstanceCreateFailed                     = 255,
	EPalIncidentState_MAX                    = 256,
};

// Enum Pal.EPalTribeID
// NumValues: 0x00C3
enum class EPalTribeID : uint8
{
	None                                     = 0,
	Anubis                                   = 1,
	Baphomet                                 = 2,
	Baphomet_Dark                            = 3,
	Bastet                                   = 4,
	Bastet_Ice                               = 5,
	Boar                                     = 6,
	Carbunclo                                = 7,
	ColorfulBird                             = 8,
	Deer                                     = 9,
	DrillGame                                = 10,
	Eagle                                    = 11,
	ElecPanda                                = 12,
	Ganesha                                  = 13,
	Garm                                     = 14,
	Gorilla                                  = 15,
	Hedgehog                                 = 16,
	Hedgehog_Ice                             = 17,
	Kirin                                    = 18,
	Kitsunebi                                = 19,
	LittleBriarRose                          = 20,
	Mutant                                   = 21,
	Owl                                      = 22,
	Penguin                                  = 23,
	RaijinDaughter                           = 24,
	SharkKid                                 = 25,
	SheepBall                                = 26,
	Umihebi                                  = 27,
	Werewolf                                 = 28,
	WindChimes                               = 29,
	Suzaku                                   = 30,
	Suzaku_Water                             = 31,
	FireKirin                                = 32,
	FairyDragon                              = 33,
	FairyDragon_Water                        = 34,
	SweetsSheep                              = 35,
	WhiteTiger                               = 36,
	Alpaca                                   = 37,
	Serpent                                  = 38,
	Serpent_Ground                           = 39,
	DarkCrow                                 = 40,
	BlueDragon                               = 41,
	PinkCat                                  = 42,
	NegativeKoala                            = 43,
	FengyunDeeper                            = 44,
	VolcanicMonster                          = 45,
	VolcanicMonster_Ice                      = 46,
	GhostBeast                               = 47,
	RobinHood                                = 48,
	LazyDragon                               = 49,
	LazyDragon_Electric                      = 50,
	AmaterasuWolf                            = 51,
	LizardMan                                = 52,
	Blueplatypus                             = 53,
	BlackFurDragon                           = 54,
	BeardedDragon                            = 55,
	BirdDragon                               = 56,
	BirdDragon_Ice                           = 57,
	PinkKangaroo                             = 58,
	ChickenPal                               = 59,
	FlowerDinosaur                           = 60,
	FlowerDinosaur_Electric                  = 61,
	ElecCat                                  = 62,
	IceHorse                                 = 63,
	IceHorse_Dark                            = 64,
	GrassMammoth                             = 65,
	CatVampire                               = 66,
	SakuraSaurus                             = 67,
	SakuraSaurus_Water                       = 68,
	Horus                                    = 69,
	KingBahamut                              = 70,
	BerryGoat                                = 71,
	IceDeer                                  = 72,
	BlackGriffon                             = 73,
	WhiteMoth                                = 74,
	CuteFox                                  = 75,
	FoxMage                                  = 76,
	PinkLizard                               = 77,
	WaterLizard                              = 78,
	ElecLion                                 = 79,
	GuardianDog                              = 80,
	GrassDragon                              = 81,
	WizardOwl                                = 82,
	Kelpie                                   = 83,
	NegativeOctopus                          = 84,
	CowPal                                   = 85,
	Yeti                                     = 86,
	Yeti_Grass                               = 87,
	VioletFairy                              = 88,
	HawkBird                                 = 89,
	FlowerRabbit                             = 90,
	LilyQueen                                = 91,
	LilyQueen_Dark                           = 92,
	QueenBee                                 = 93,
	SoldierBee                               = 94,
	CatBat                                   = 95,
	GrassPanda                               = 96,
	GrassPanda_Electric                      = 97,
	FlameBuffalo                             = 98,
	ThunderDog                               = 99,
	CuteMole                                 = 100,
	BlackMetalDragon                         = 101,
	GrassRabbitMan                           = 102,
	IceFox                                   = 103,
	JetDragon                                = 104,
	DreamDemon                               = 105,
	Monkey                                   = 106,
	Manticore                                = 107,
	Manticore_Dark                           = 108,
	KingAlpaca                               = 109,
	PlantSlime                               = 110,
	DarkMutant                               = 111,
	MopBaby                                  = 112,
	MopKing                                  = 113,
	CatMage                                  = 114,
	PinkRabbit                               = 115,
	ThunderBird                              = 116,
	HerculesBeetle                           = 117,
	SaintCentaur                             = 118,
	NightFox                                 = 119,
	CaptainPenguin                           = 120,
	WeaselDragon                             = 121,
	SkyDragon                                = 122,
	HadesBird                                = 123,
	RedArmorBird                             = 124,
	Ronin                                    = 125,
	FlyingManta                              = 126,
	BlackCentaur                             = 127,
	FlowerDoll                               = 128,
	NaughtyCat                               = 129,
	CuteButterfly                            = 130,
	DarkScorpion                             = 131,
	ThunderDragonMan                         = 132,
	WoolFox                                  = 133,
	SifuDog                                  = 134,
	TentacleTurtle                           = 135,
	GoldenHorse                              = 136,
	BadCatgirl                               = 137,
	BrownRabbit                              = 138,
	FeatherOstrich                           = 139,
	WingGolem                                = 140,
	ScorpionMan                              = 141,
	BlueberryFairy                           = 142,
	LazyCatfish                              = 143,
	Deer_Ground                              = 144,
	FireKirin_Dark                           = 145,
	KingAlpaca_Ice                           = 146,
	RobinHood_Ground                         = 147,
	GrassMammoth_Ice                         = 148,
	Kelpie_Fire                              = 149,
	SharkKid_Fire                            = 150,
	LizardMan_Fire                           = 151,
	LavaGirl                                 = 152,
	FlameBambi                               = 153,
	Umihebi_Fire                             = 154,
	WindChimes_Ice                           = 155,
	NightLady                                = 156,
	VolcanoDragon                            = 157,
	DarkAlien                                = 158,
	DarkMechaDragon                          = 159,
	LeafPrincess                             = 160,
	GhostRabbit                              = 161,
	NightBlueHorse                           = 162,
	WhiteAlienDragon                         = 163,
	WhiteShieldDragon                        = 164,
	MushroomDragon                           = 165,
	SmallArmadillo                           = 166,
	BlackPuppy                               = 167,
	KendoFrog                                = 168,
	CandleGhost                              = 169,
	WhiteDeer                                = 170,
	KingWhale                                = 171,
	MysteryMask                              = 172,
	HoodGhost                                = 173,
	Sekhmet                                  = 174,
	ElecLizard                               = 175,
	MoonQueen                                = 176,
	NightLady_Dark                           = 177,
	GrimGirl                                 = 178,
	PurpleSpider                             = 179,
	BlueThunderHorse                         = 180,
	RockBeast                                = 181,
	KingBahamut_Dragon                       = 182,
	HerculesBeetle_Ground                    = 183,
	Gorilla_Ground                           = 184,
	HadesBird_Electric                       = 185,
	MushroomDragon_Dark                      = 186,
	DarkScorpion_Ground                      = 187,
	Ronin_Dark                               = 188,
	CatMage_Fire                             = 189,
	FoxMage_Dark                             = 190,
	SkyDragon_Grass                          = 191,
	WeaselDragon_Fire                        = 192,
	Human                                    = 193,
	EPalTribeID_MAX                          = 194,
};

// Enum Pal.EPalGenusCategoryType
// NumValues: 0x0009
enum class EPalGenusCategoryType : uint8
{
	None                                     = 0,
	Humanoid                                 = 1,
	FourLegged                               = 2,
	Dragon                                   = 3,
	Fish                                     = 4,
	Bird                                     = 5,
	Monster                                  = 6,
	Other                                    = 7,
	EPalGenusCategoryType_MAX                = 8,
};

// Enum Pal.EPalCharacterNaturalUpdateType
// NumValues: 0x0004
enum class EPalCharacterNaturalUpdateType : uint8
{
	Player                                   = 0,
	OtomoPal                                 = 1,
	BaseCampPal                              = 2,
	EPalCharacterNaturalUpdateType_MAX       = 3,
};

// Enum Pal.EPalInteractiveObjectActionType
// NumValues: 0x0006
enum class EPalInteractiveObjectActionType : uint8
{
	None                                     = 0,
	Interact1                                = 1,
	Interact2                                = 2,
	Interact3                                = 3,
	Interact4                                = 4,
	EPalInteractiveObjectActionType_MAX      = 5,
};

// Enum Pal.EPalLogType
// NumValues: 0x0044
enum class EPalLogType : uint8
{
	None                                     = 0,
	CaptureSuccess                           = 1,
	CaptureFailed_LowBallLevel               = 2,
	CaptureFailed_HighHP                     = 3,
	CaptureFailed_BounceBall                 = 4,
	CaptureFailed_OutOfBall                  = 5,
	CaptureFailed_TowerBoss                  = 6,
	CaptureFailed_PlayerPal                  = 7,
	StartInvaderMarch                        = 8,
	EndInvaderMarch_Win                      = 9,
	EndInvaderMarch_Timeout                  = 10,
	DropPal                                  = 11,
	OtomoLowHealth_Phase1                    = 12,
	OtomoLowHealth_Phase2                    = 13,
	OtomoLowHealth_Phase3                    = 14,
	OtomoEatFood                             = 15,
	OtomoPalDown                             = 16,
	OtomoPalDeath                            = 17,
	OtomoPalEffectiveAttack                  = 18,
	OtomoPalDefeatEnemy                      = 19,
	GetItem                                  = 20,
	ShippingItem                             = 21,
	FullInventoryNotice                      = 22,
	StartWorldDataAutoSave                   = 23,
	SuccessedWorldDataAutoSave               = 24,
	FailedWorldDataAutoSave                  = 25,
	StartPlayerDataAutoSave                  = 26,
	SuccessedPlayerDataAutoSave              = 27,
	FailedPlayerDataAutoSave                 = 28,
	WorkerPalSanityLowWarning                = 29,
	WorkerPalComplateItemConvert             = 30,
	WorkerPalComplateBuild                   = 31,
	WorkerPalStartBuild                      = 32,
	WorkerPalStartRepair                     = 33,
	WorkerPalStartWork                       = 34,
	WorkerPalStartWork_CollectResource       = 35,
	WorkerPalStartWork_ProductResource_Deforest = 36,
	WorkerPalStartWork_ProductResource_Mining = 37,
	WorkerEvent_DestroyBuilding              = 38,
	WorkerEvent_DodgeWork                    = 39,
	WorkerEvent_DodgeWork_Short              = 40,
	WorkerEvent_DodgeWork_Sleep              = 41,
	WorkerEvent_EatTooMuch                   = 42,
	WorkerEvent_Escape                       = 43,
	WorkerEvent_FightWithFriend              = 44,
	WorkerEvent_OverworkDeath                = 45,
	WorkerEvent_Sick                         = 46,
	WorkerEvent_Trantrum                     = 47,
	WorkerEvent_TurnFoodBox                  = 48,
	BaseCampTask_Progress_BuildObject        = 49,
	BaseCampTask_Complete                    = 50,
	VisitorSpawn                             = 51,
	VisitorArrived                           = 52,
	VisitorReturn                            = 53,
	OverWeightInventory                      = 54,
	SkillTargetNotFound                      = 55,
	SkillNotAvailable                        = 56,
	SkillExecute                             = 57,
	SkillExecuteInBaseCamp                   = 58,
	SkillExecuteHealing                      = 59,
	SurvivorExp                              = 60,
	PartnerSkillExecute_Berserk              = 61,
	PartnerSkillExecute_NightRunner          = 62,
	ObtainNote                               = 63,
	OutdoorBedNortice                        = 64,
	FullPalBox                               = 65,
	FireBaseCamp                             = 66,
	EPalLogType_MAX                          = 67,
};

// Enum Pal.EPalPlayerInventoryType
// NumValues: 0x0008
enum class EPalPlayerInventoryType : uint8
{
	Common                                   = 0,
	DropSlot                                 = 1,
	Essential                                = 2,
	WeaponLoadout                            = 3,
	PlayerEquipArmor                         = 4,
	FoodEquip                                = 5,
	None                                     = 6,
	EPalPlayerInventoryType_MAX              = 7,
};

// Enum Pal.EPalLocationType
// NumValues: 0x0011
enum class EPalLocationType : uint8
{
	Undefined                                = 0,
	Point                                    = 1,
	PointStatic                              = 2,
	PointFastTravel                          = 3,
	PointBaseCamp                            = 4,
	PointPlayer                              = 5,
	PointMapObject                           = 6,
	PointCharacter                           = 7,
	PointDungeonPortal                       = 8,
	PointStaticRespawn                       = 9,
	PointBossTower                           = 10,
	DroppedCharacter                         = 11,
	DroppedChest                             = 12,
	Area                                     = 13,
	CustomMarker                             = 14,
	FieldBoss                                = 15,
	EPalLocationType_MAX                     = 16,
};

// Enum Pal.EPalItemOperationResult
// NumValues: 0x0024
enum class EPalItemOperationResult : uint8
{
	Success                                  = 0,
	SuccessNoOperation                       = 1,
	FailedTerminatedManager                  = 2,
	FailedNotExistsInventoryData             = 3,
	FailedContainerOverflowSlotNum           = 4,
	FailedContainerItemInfoOverSlotNum       = 5,
	FailedContainerOverflowItemsInSlot       = 6,
	FailedContainerNotFoundContainer         = 7,
	FailedContainerNotFoundSlot              = 8,
	FailedContainerIsLocalOnly               = 9,
	FailedContainerNotEqualsId               = 10,
	FailedCreateDynamicItemData              = 11,
	FailedNoDynamicItemIds                   = 12,
	FailedNotFoundContainer                  = 13,
	FailedNotFoundSlot                       = 14,
	FailedNotFoundStaticItemData             = 15,
	FailedNotEnoughSlotSpace                 = 16,
	FailedSameSlotUseProduceAndConsume       = 17,
	FailedNotEnoughConsumes                  = 18,
	FailedInValidItemInSlot                  = 19,
	FailedNotEnoughNumInSlot                 = 20,
	FailedNotEqualRequiredItemInSlot         = 21,
	FailedGetLocalSlotInServer               = 22,
	FailedEmptyConsumeItemInfo               = 23,
	FailedSlotCountIsZero                    = 24,
	FailedCannotAggregateSlotItem            = 25,
	FailedInvalidPermission                  = 26,
	FailedNotAllowedByFilter                 = 27,
	FailedNotControllable                    = 28,
	FailedRestrictedOperation                = 29,
	FailedRecievedItemNotEqual               = 30,
	FailedTransactionLockedOperation         = 31,
	FailedNotFoundRowNameOrHash              = 32,
	FailedUnknown                            = 33,
	FailedUnknownLogOutput                   = 34,
	EPalItemOperationResult_MAX              = 35,
};

// Enum Pal.EPalMapObjectConvertItemModelRequestResult
// NumValues: 0x0003
enum class EPalMapObjectConvertItemModelRequestResult : uint8
{
	Success                                  = 0,
	FailedInvalidRecipeId                    = 1,
	EPalMapObjectConvertItemModelRequestResult_MAX = 2,
};

// Enum Pal.EPalMapObjectEnergyModuleStatusType
// NumValues: 0x0003
enum class EPalMapObjectEnergyModuleStatusType : uint8
{
	Providable                               = 0,
	Waiting                                  = 1,
	EPalMapObjectEnergyModuleStatusType_MAX  = 2,
};

// Enum Pal.EPalFarmCropState
// NumValues: 0x0007
enum class EPalFarmCropState : uint8
{
	None                                     = 0,
	NoSelect                                 = 1,
	Watered                                  = 2,
	Growup                                   = 3,
	Harvestable                              = 4,
	Seeding                                  = 5,
	EPalFarmCropState_MAX                    = 6,
};

// Enum Pal.EPalFoliagePresetType
// NumValues: 0x0007
enum class EPalFoliagePresetType : uint8
{
	None                                     = 0,
	NormalTree_L                             = 1,
	LowTree                                  = 2,
	NormalTree_L_CherryBlossom               = 3,
	Mushroom_L                               = 4,
	Mushroom_S                               = 5,
	EPalFoliagePresetType_MAX                = 6,
};

// Enum Pal.EPalContainerUsageType
// NumValues: 0x0003
enum class EPalContainerUsageType : uint8
{
	None                                     = 0,
	ItemStorage                              = 1,
	EPalContainerUsageType_MAX               = 2,
};

// Enum Pal.EPalMapObjectItemContainerSlotAttribute
// NumValues: 0x0006
enum class EPalMapObjectItemContainerSlotAttribute : uint8
{
	Undefined                                = 0,
	Input                                    = 1,
	PublicOutput                             = 2,
	FoodProvidable                           = 3,
	CannotTransport                          = 4,
	EPalMapObjectItemContainerSlotAttribute_MAX = 5,
};

// Enum Pal.EPalMapObjectTreasureGradeType
// NumValues: 0x0007
enum class EPalMapObjectTreasureGradeType : uint8
{
	Grade1                                   = 0,
	Grade2                                   = 1,
	Grade3                                   = 2,
	Grade4                                   = 3,
	Grade5                                   = 4,
	Grade6                                   = 5,
	EPalMapObjectTreasureGradeType_MAX       = 6,
};

// Enum Pal.EPalMapObjectVisualEffectType
// NumValues: 0x0002
enum class EPalMapObjectVisualEffectType : uint8
{
	Burn                                     = 0,
	EPalMapObjectVisualEffectType_MAX        = 1,
};

// Enum Pal.EPalMapObjectPasswordLockState
// NumValues: 0x0003
enum class EPalMapObjectPasswordLockState : uint8
{
	Lock                                     = 0,
	Unlock                                   = 1,
	EPalMapObjectPasswordLockState_MAX       = 2,
};

// Enum Pal.EPalMapObjectSwitchState
// NumValues: 0x0003
enum class EPalMapObjectSwitchState : uint8
{
	On                                       = 0,
	Off                                      = 1,
	EPalMapObjectSwitchState_MAX             = 2,
};

// Enum Pal.EPalNPCTalkUIType
// NumValues: 0x0008
enum class EPalNPCTalkUIType : uint8
{
	None                                     = 0,
	FreeTalk                                 = 1,
	NormalShop                               = 2,
	WeaponShop                               = 3,
	PalShop                                  = 4,
	QuestOrder                               = 5,
	RandomEventShop                          = 6,
	EPalNPCTalkUIType_MAX                    = 7,
};

// Enum Pal.EPalOptionGraphicsLevel
// NumValues: 0x0007
enum class EPalOptionGraphicsLevel : uint8
{
	None                                     = 0,
	VeryLow                                  = 1,
	Low                                      = 2,
	Medium                                   = 3,
	High                                     = 4,
	VeryHigh                                 = 5,
	EPalOptionGraphicsLevel_MAX              = 6,
};

// Enum Pal.EPalKeyConfigAxisFilterType
// NumValues: 0x0004
enum class EPalKeyConfigAxisFilterType : uint8
{
	All                                      = 0,
	Plus                                     = 1,
	Minus                                    = 2,
	EPalKeyConfigAxisFilterType_MAX          = 3,
};

// Enum Pal.EPalOtomoPalOrderType
// NumValues: 0x0004
enum class EPalOtomoPalOrderType : uint8
{
	Default                                  = 0,
	Warlike                                  = 1,
	NotCombat                                = 2,
	EPalOtomoPalOrderType_MAX                = 3,
};

// Enum Pal.EPalPassivePartnerSkillState
// NumValues: 0x0006
enum class EPalPassivePartnerSkillState : uint8
{
	None                                     = 0,
	Active                                   = 1,
	ActivateDelay                            = 2,
	Inactive                                 = 3,
	ActivateLocked                           = 4,
	EPalPassivePartnerSkillState_MAX         = 5,
};

// Enum Pal.EPalKeyConfigCategory
// NumValues: 0x0003
enum class EPalKeyConfigCategory : uint8
{
	MouseAndKeyboard                         = 0,
	GamePad                                  = 1,
	EPalKeyConfigCategory_MAX                = 2,
};

// Enum Pal.EPalRaidBossBattleFinishType
// NumValues: 0x0004
enum class EPalRaidBossBattleFinishType : uint8
{
	Success                                  = 0,
	TimeUp                                   = 1,
	BaseCampDestroyed                        = 2,
	EPalRaidBossBattleFinishType_MAX         = 3,
};

// Enum Pal.EPalRandomIncidentActionNotifyType
// NumValues: 0x0003
enum class EPalRandomIncidentActionNotifyType : uint8
{
	None                                     = 0,
	RestartExcludedSpawner                   = 1,
	EPalRandomIncidentActionNotifyType_MAX   = 2,
};

// Enum Pal.EPalRandomIncidentSpawnerAreaType
// NumValues: 0x0006
enum class EPalRandomIncidentSpawnerAreaType : uint8
{
	Unknown                                  = 0,
	Spawn                                    = 1,
	Exclusion                                = 2,
	Action                                   = 3,
	End                                      = 4,
	EPalRandomIncidentSpawnerAreaType_MAX    = 5,
};

// Enum Pal.EPalRidePositionType
// NumValues: 0x0006
enum class EPalRidePositionType : uint8
{
	None                                     = 0,
	HorseRide                                = 1,
	BiggerHorseRide                          = 2,
	SitRide                                  = 3,
	BackRide                                 = 4,
	EPalRidePositionType_MAX                 = 5,
};

// Enum Pal.EPalWorldBaseInfoSaveDataType
// NumValues: 0x0003
enum class EPalWorldBaseInfoSaveDataType : uint8
{
	NoProblem                                = 0,
	NotExistBaseInfo                         = 1,
	EPalWorldBaseInfoSaveDataType_MAX        = 2,
};

// Enum Pal.EPalInLoadCollectionType
// NumValues: 0x0005
enum class EPalInLoadCollectionType : uint8
{
	None                                     = 0,
	InstanceID                               = 1,
	ContainerID                              = 2,
	DynamicItemID                            = 3,
	MAX                                      = 4,
};

// Enum Pal.EPalAsyncSaveProcessState
// NumValues: 0x0004
enum class EPalAsyncSaveProcessState : uint8
{
	Saving                                   = 0,
	Completed                                = 1,
	Failed                                   = 2,
	EPalAsyncSaveProcessState_MAX            = 3,
};

// Enum Pal.EWeaponAnimationType
// NumValues: 0x0005
enum class EWeaponAnimationType : uint8
{
	None                                     = 0,
	PullTrigger                              = 1,
	Aiming                                   = 2,
	Shoot                                    = 3,
	EWeaponAnimationType_MAX                 = 4,
};

// Enum Pal.EWeaponAnimationPoseType
// NumValues: 0x0005
enum class EWeaponAnimationPoseType : uint8
{
	None                                     = 0,
	Stand                                    = 1,
	Crouch                                   = 2,
	Riding                                   = 3,
	EWeaponAnimationPoseType_MAX             = 4,
};

// Enum Pal.EPalShopBuyResultType
// NumValues: 0x000F
enum class EPalShopBuyResultType : uint8
{
	Successed                                = 0,
	Failed_InvalidBuyNum                     = 1,
	Failed_NotEnoughStock                    = 2,
	Failed_NotEnoughMoney                    = 3,
	Failed_NotEnoughItemSlot                 = 4,
	Failed_NotEnoughCharacterSlot            = 5,
	Failed_ExistReservedProcess              = 6,
	Failed_NotFoundItemContainer             = 7,
	Failed_NotFoundPlayerInventoryData       = 8,
	Failed_NotFoundPlayerMoneyData           = 9,
	Failed_NotFoundProduct                   = 10,
	Failed_NotFoundShop                      = 11,
	Failed_NotFoundStoredPal                 = 12,
	Unknown                                  = 13,
	EPalShopBuyResultType_MAX                = 14,
};

// Enum Pal.EPalSkeletalTickLayer
// NumValues: 0x0003
enum class EPalSkeletalTickLayer : uint8
{
	Default                                  = 0,
	Ragdoll                                  = 1,
	EPalSkeletalTickLayer_MAX                = 2,
};

// Enum Pal.EPalSkeletalMeshType
// NumValues: 0x0006
enum class EPalSkeletalMeshType : uint8
{
	Normal                                   = 0,
	Head                                     = 1,
	Hair                                     = 2,
	Body                                     = 3,
	HairAttachAccessory                      = 4,
	EPalSkeletalMeshType_MAX                 = 5,
};

// Enum Pal.EPalTutorialTriggerConditionType
// NumValues: 0x0018
enum class EPalTutorialTriggerConditionType : uint8
{
	None                                     = 0,
	GetItem                                  = 1,
	MeetBuildRequirement                     = 2,
	NewPal                                   = 3,
	SamePal                                  = 4,
	PalCount                                 = 5,
	HighLevel                                = 6,
	RarePal                                  = 7,
	CaptureFail                              = 8,
	OverWeight                               = 9,
	Night                                    = 10,
	PalDeath                                 = 11,
	BuildAppointment                         = 12,
	SummonCampPal                            = 13,
	LearnSkill                               = 14,
	AttackNoWeapon                           = 15,
	ObtainNote                               = 16,
	LevelUp                                  = 17,
	Hunger                                   = 18,
	PalHunger                                = 19,
	SAN                                      = 20,
	Sick                                     = 21,
	SkipWork                                 = 22,
	EPalTutorialTriggerConditionType_MAX     = 23,
};

// Enum Pal.EPalItemSlotPressType
// NumValues: 0x0004
enum class EPalItemSlotPressType : uint8
{
	Normal                                   = 0,
	LiftHalf                                 = 1,
	LiftOne                                  = 2,
	EPalItemSlotPressType_MAX                = 3,
};

// Enum Pal.EPalWidgetInputMode
// NumValues: 0x0005
enum class EPalWidgetInputMode : uint8
{
	Default                                  = 0,
	GameAndMenu                              = 1,
	Game                                     = 2,
	Menu                                     = 3,
	EPalWidgetInputMode_MAX                  = 4,
};

// Enum Pal.EPalUIConvertItemRequestStartResponse
// NumValues: 0x0007
enum class EPalUIConvertItemRequestStartResponse : uint8
{
	Enable                                   = 0,
	FailedNotSelectedRecipe                  = 1,
	FailedNotExistConcreteModel              = 2,
	FailedNotExistEnergyModule               = 3,
	FailedNotEnoughItems                     = 4,
	FailedNotEnoughEnergy                    = 5,
	EPalUIConvertItemRequestStartResponse_MAX = 6,
};

// Enum Pal.EPalDamageTextSeq
// NumValues: 0x0004
enum class EPalDamageTextSeq : uint8
{
	WaitStart                                = 0,
	Displaying                               = 1,
	WaitClose                                = 2,
	EPalDamageTextSeq_MAX                    = 3,
};

// Enum Pal.EPalUIPalCharacterRankUpRequestResult
// NumValues: 0x0006
enum class EPalUIPalCharacterRankUpRequestResult : uint8
{
	Success                                  = 0,
	FailedNotValidMapObject                  = 1,
	FailedNotSetTarget                       = 2,
	FailedCannotRankUp                       = 3,
	FailedNotEnoughResources                 = 4,
	EPalUIPalCharacterRankUpRequestResult_MAX = 5,
};

// Enum Pal.EPalUIPalCharacterRankUpSelectResourceType
// NumValues: 0x0003
enum class EPalUIPalCharacterRankUpSelectResourceType : uint8
{
	Newer                                    = 0,
	Older                                    = 1,
	EPalUIPalCharacterRankUpSelectResourceType_MAX = 2,
};

// Enum Pal.EPalUIPalCharacterRankUpSelectMode
// NumValues: 0x0003
enum class EPalUIPalCharacterRankUpSelectMode : uint8
{
	SelectReferenceSlot                      = 0,
	SelectIndividualSlot                     = 1,
	EPalUIPalCharacterRankUpSelectMode_MAX   = 2,
};

// Enum Pal.EPalPalStorageManageRightType
// NumValues: 0x0003
enum class EPalPalStorageManageRightType : uint8
{
	BaseCamp                                 = 0,
	Party                                    = 1,
	EPalPalStorageManageRightType_MAX        = 2,
};

// Enum Pal.EPalLimitVolumeFlag
// NumValues: 0x0005
enum class EPalLimitVolumeFlag : uint32
{
	Build                                    = 1,
	EnemySpawn                               = 2,
	MapObjectSpawn                           = 4,
	BaseCampArea                             = 8,
	EPalLimitVolumeFlag_MAX                  = 9,
};

// Enum Pal.EPalObjectTypeQuery
// NumValues: 0x0009
enum class EPalObjectTypeQuery : uint8
{
	Water                                    = 0,
	Attack                                   = 1,
	PlayerPawn                               = 2,
	Temperature                              = 3,
	SystemVolume                             = 4,
	LiftedupPawn                             = 5,
	AroundInfoCollect                        = 6,
	AttackHitOnly                            = 7,
	EPalObjectTypeQuery_MAX                  = 8,
};

// Enum Pal.EPalPhysicalSurface
// NumValues: 0x0009
enum class EPalPhysicalSurface : uint8
{
	Default                                  = 0,
	Ground                                   = 1,
	Wood                                     = 2,
	Grass                                    = 3,
	Stone                                    = 4,
	Water                                    = 5,
	Snow                                     = 6,
	Lava                                     = 7,
	EPalPhysicalSurface_MAX                  = 8,
};

// Enum Pal.EPalTraceTypeQuery
// NumValues: 0x0008
enum class EPalTraceTypeQuery : uint8
{
	FluidTrace                               = 0,
	ReticleRayCast                           = 1,
	AISightRayCast                           = 2,
	VsGroundRayCast                          = 3,
	WaterPlaneRayCast                        = 4,
	ClimbRayCast                             = 5,
	RollingRayCast                           = 6,
	EPalTraceTypeQuery_MAX                   = 7,
};

// Enum Pal.EPalDialogType
// NumValues: 0x0004
enum class EPalDialogType : uint8
{
	Alert                                    = 0,
	YesNo                                    = 1,
	OkCancel                                 = 2,
	EPalDialogType_MAX                       = 3,
};

// Enum Pal.EPalLocalizeTextCategory
// NumValues: 0x001B
enum class EPalLocalizeTextCategory : uint8
{
	None                                     = 0,
	UICommon                                 = 1,
	NpcTalk                                  = 2,
	BaseCampWorkerEvent                      = 3,
	PalMonsterName                           = 4,
	PalHumanName                             = 5,
	UniqueNPCName                            = 6,
	PrefixName                               = 7,
	PalShortDescription                      = 8,
	PalLongDescription                       = 9,
	PalFirstActivatedInfo                    = 10,
	ItemName                                 = 11,
	ItemDescription                          = 12,
	MapObjectName                            = 13,
	BuildObjectDescription                   = 14,
	BuildObjectCategory                      = 15,
	SkillName                                = 16,
	SkillDesc                                = 17,
	TechnologyName                           = 18,
	TechnologyDescription                    = 19,
	WorldMapRegionAndPlace                   = 20,
	DungeonName                              = 21,
	NoteDescription                          = 22,
	TutorialMessage                          = 23,
	HelpGuide                                = 24,
	MapRespawnPoint                          = 25,
	EPalLocalizeTextCategory_MAX             = 26,
};

// Enum Pal.EPalPhysicsBoneType
// NumValues: 0x0004
enum class EPalPhysicsBoneType : uint8
{
	None                                     = 0,
	AttachRope                               = 1,
	AttachRopeTrapLeg                        = 2,
	EPalPhysicsBoneType_MAX                  = 3,
};

// Enum Pal.EPalSupportedPlatformType
// NumValues: 0x0007
enum class EPalSupportedPlatformType : uint8
{
	Unknown                                  = 0,
	Windows                                  = 1,
	WinGDK                                   = 2,
	XB1                                      = 3,
	XSX                                      = 4,
	Linux                                    = 5,
	EPalSupportedPlatformType_MAX            = 6,
};

// Enum Pal.EPalShopLotteryBiomeType
// NumValues: 0x0003
enum class EPalShopLotteryBiomeType : uint8
{
	None                                     = 0,
	Plain                                    = 1,
	EPalShopLotteryBiomeType_MAX             = 2,
};

// Enum Pal.EPalShopLotteryType
// NumValues: 0x0004
enum class EPalShopLotteryType : uint8
{
	None                                     = 0,
	SimpleLottery                            = 1,
	BiomeLottery                             = 2,
	EPalShopLotteryType_MAX                  = 3,
};

// Enum Pal.EPalVisualEffectID
// NumValues: 0x001F
enum class EPalVisualEffectID : uint8
{
	None                                     = 0,
	CaptureEmissive                          = 1,
	SpawnFromBallEmissive                    = 2,
	ReturnToBallEmissive                     = 3,
	FadeOut                                  = 4,
	FadeIn                                   = 5,
	PalOutlineFadeIn                         = 6,
	PalOutlineFadeOut                        = 7,
	PalBattleOutline                         = 8,
	Poison                                   = 9,
	PowerUp                                  = 10,
	DeadEffect                               = 11,
	FireCondition                            = 12,
	WaterCondition                           = 13,
	IceCondition                             = 14,
	ElectricityCondition                     = 15,
	EarthCondition                           = 16,
	LeafCondition                            = 17,
	DarkCondition                            = 18,
	Swimming                                 = 19,
	CameraVignette                           = 20,
	PalEffectFadeIn                          = 21,
	PalEffectFadeOut                         = 22,
	RarePal                                  = 23,
	FunnelStartEmissive                      = 24,
	FunnelEndEmissive                        = 25,
	SelfDestructEmissive                     = 26,
	Mosaic                                   = 27,
	ChangeElement_Ice                        = 28,
	DebugRefresh                             = 29,
	EPalVisualEffectID_MAX                   = 30,
};

// Enum Pal.EPalWorkAssignableFixedType
// NumValues: 0x0005
enum class EPalWorkAssignableFixedType : uint8
{
	Both                                     = 0,
	FreeOnly                                 = 1,
	FixedOnly                                = 2,
	Cannot                                   = 3,
	EPalWorkAssignableFixedType_MAX          = 4,
};

// Enum Pal.EPalWorkProgressState
// NumValues: 0x0006
enum class EPalWorkProgressState : uint8
{
	Init                                     = 0,
	Workable                                 = 1,
	NotWorkable                              = 2,
	Finish                                   = 3,
	Dispose                                  = 4,
	EPalWorkProgressState_MAX                = 5,
};

// Enum Pal.EPalWorkBehaviourType
// NumValues: 0x0004
enum class EPalWorkBehaviourType : uint8
{
	Undefined                                = 0,
	StackAmount                              = 1,
	Participate                              = 2,
	EPalWorkBehaviourType_MAX                = 3,
};

// Enum Pal.EPalAIActionBaseCampRecoverHungryEatState
// NumValues: 0x0003
enum class EPalAIActionBaseCampRecoverHungryEatState : uint8
{
	TurnToFood                               = 0,
	Eat                                      = 1,
	EPalAIActionBaseCampRecoverHungryEatState_MAX = 2,
};

// Enum Pal.EPalAIActionBaseCampSleepActivelyMode
// NumValues: 0x0003
enum class EPalAIActionBaseCampSleepActivelyMode : uint8
{
	ApproachToBed                            = 0,
	WalkAround                               = 1,
	EPalAIActionBaseCampSleepActivelyMode_MAX = 2,
};

// Enum Pal.EPalRequestSoftScriptPriorityAdd
// NumValues: 0x000B
enum class EPalRequestSoftScriptPriorityAdd : uint8
{
	SoftScript                               = 0,
	SoftScriptInterrupt                      = 1,
	SoftScript_2                             = 2,
	SoftScript_3                             = 3,
	SoftScript_4                             = 4,
	SoftScript_5                             = 5,
	SoftScript_6                             = 6,
	SoftScript_7                             = 7,
	SoftScript_8                             = 8,
	SoftScript_9                             = 9,
	EPalRequestSoftScriptPriorityAdd_MAX     = 10,
};

// Enum Pal.EPalBiologicalGradeComparedResult
// NumValues: 0x0004
enum class EPalBiologicalGradeComparedResult : uint8
{
	Greater                                  = 0,
	Equal                                    = 1,
	Smaller                                  = 2,
	EPalBiologicalGradeComparedResult_MAX    = 3,
};

// Enum Pal.EPalAISensorSearchQueryPlayer
// NumValues: 0x0004
enum class EPalAISensorSearchQueryPlayer : uint8
{
	IncludePlayer                            = 0,
	IgnorePlayer                             = 1,
	PlayerOnly                               = 2,
	EPalAISensorSearchQueryPlayer_MAX        = 3,
};

// Enum Pal.EPalArenaSetupState
// NumValues: 0x0004
enum class EPalArenaSetupState : uint8
{
	None                                     = 0,
	Running                                  = 1,
	Completed                                = 2,
	EPalArenaSetupState_MAX                  = 3,
};

// Enum Pal.EPalArenaPlayer
// NumValues: 0x0003
enum class EPalArenaPlayer : uint8
{
	Player1                                  = 0,
	Player2                                  = 1,
	EPalArenaPlayer_MAX                      = 2,
};

// Enum Pal.EPalAudioStateGroup
// NumValues: 0x0015
enum class EPalAudioStateGroup : uint8
{
	InRaid                                   = 0,
	InExplore                                = 1,
	InSpot                                   = 2,
	InField                                  = 3,
	InBattle                                 = 4,
	Battle_Cute                              = 5,
	Battle_Cool                              = 6,
	Battle_Strong                            = 7,
	Battle_Human_Common                      = 8,
	Battle_Human_Villain                     = 9,
	Battle_FieldBoss                         = 10,
	Battle_Legend                            = 11,
	Battle_RaidBoss                          = 12,
	Battle_TowerBoss                         = 13,
	SpotName                                 = 14,
	Biome                                    = 15,
	RaidState                                = 16,
	Player_MainState                         = 17,
	Player_BattleState                       = 18,
	Player_Life                              = 19,
	EPalAudioStateGroup_MAX                  = 20,
};

// Enum Pal.EPalAudioState
// NumValues: 0x0012
enum class EPalAudioState : uint8
{
	None                                     = 0,
	VillageA                                 = 1,
	VillageB                                 = 2,
	BaseCamp                                 = 3,
	InDoor                                   = 4,
	BossRoom                                 = 5,
	Grassland                                = 6,
	Forest                                   = 7,
	Desert                                   = 8,
	Mountain                                 = 9,
	Caution                                  = 10,
	Fight                                    = 11,
	End                                      = 12,
	Explore                                  = 13,
	Battle                                   = 14,
	Alive                                    = 15,
	Dead                                     = 16,
	EPalAudioState_MAX                       = 17,
};

// Enum Pal.EPalAudioRTPC
// NumValues: 0x0003
enum class EPalAudioRTPC : uint8
{
	Field_Time                               = 0,
	Sliding_Speed                            = 1,
	EPalAudioRTPC_MAX                        = 2,
};

// Enum Pal.EPalAudioTrigger
// NumValues: 0x0006
enum class EPalAudioTrigger : uint8
{
	None                                     = 0,
	BattleWin                                = 1,
	RaidEnd                                  = 2,
	Captured                                 = 3,
	GameOver                                 = 4,
	EPalAudioTrigger_MAX                     = 5,
};

// Enum Pal.EPalAudioFadeType
// NumValues: 0x0004
enum class EPalAudioFadeType : uint8
{
	None                                     = 0,
	FadeIn                                   = 1,
	FadeOut                                  = 2,
	EPalAudioFadeType_MAX                    = 3,
};

// Enum Pal.EPalBaseCampAssignType
// NumValues: 0x0005
enum class EPalBaseCampAssignType : uint8
{
	None                                     = 0,
	Work                                     = 1,
	WorkAttack                               = 2,
	Defense                                  = 3,
	EPalBaseCampAssignType_MAX               = 4,
};

// Enum Pal.EPalBaseCampOperationResult
// NumValues: 0x0007
enum class EPalBaseCampOperationResult : uint8
{
	Success                                  = 0,
	FailedNotFoundNetworkTransmitter         = 1,
	FailedNotFoundBaseCamp                   = 2,
	FailedNotRequestedFromBaseCampPoint      = 3,
	FailedNotFoundOwnerMapObjectModel        = 4,
	FailedDismantleMapObject                 = 5,
	EPalBaseCampOperationResult_MAX          = 6,
};

// Enum Pal.EPalBaseCampWorkerAssignResult
// NumValues: 0x0006
enum class EPalBaseCampWorkerAssignResult : uint8
{
	Success                                  = 0,
	FailedNotFoundBaseCamp                   = 1,
	FailedNotFoundWork                       = 2,
	FailedOverflowAssignCount                = 3,
	FailedCharacterHandleMissing             = 4,
	EPalBaseCampWorkerAssignResult_MAX       = 5,
};

// Enum Pal.EPalBaseCampWorkResult
// NumValues: 0x0005
enum class EPalBaseCampWorkResult : uint8
{
	Success                                  = 0,
	FailedNotFoundBaseCamp                   = 1,
	FailedNotFoundWork                       = 2,
	FailedNotMatchWorkType                   = 3,
	EPalBaseCampWorkResult_MAX               = 4,
};

// Enum Pal.EPalBaseCampModuleType
// NumValues: 0x000A
enum class EPalBaseCampModuleType : uint8
{
	None                                     = 0,
	Energy                                   = 1,
	Medical                                  = 2,
	TransportItemDirector                    = 3,
	ResourceCollector                        = 4,
	ItemStorages                             = 5,
	FacilityReservation                      = 6,
	ObjectMaintenance                        = 7,
	PassiveEffect                            = 8,
	EPalBaseCampModuleType_MAX               = 9,
};

// Enum Pal.EPalBaseCampWorkerTaskType
// NumValues: 0x0003
enum class EPalBaseCampWorkerTaskType : uint8
{
	Undefined                                = 0,
	IgnitionTorchAtNight                     = 1,
	EPalBaseCampWorkerTaskType_MAX           = 2,
};

// Enum Pal.EPalBaseCampWorkerTaskCheck
// NumValues: 0x0003
enum class EPalBaseCampWorkerTaskCheck : uint8
{
	None                                     = 0,
	SleepAtNight                             = 1,
	EPalBaseCampWorkerTaskCheck_MAX          = 2,
};

// Enum Pal.EPalBaseCampWorkerTaskCheckResponse
// NumValues: 0x0002
enum class EPalBaseCampWorkerTaskCheckResponse : uint8
{
	ExistsTask                               = 0,
	EPalBaseCampWorkerTaskCheckResponse_MAX  = 1,
};

// Enum Pal.EPalBaseCampWorkerEventPriority
// NumValues: 0x0003
enum class EPalBaseCampWorkerEventPriority : uint8
{
	Top                                      = 0,
	Default                                  = 1,
	EPalBaseCampWorkerEventPriority_MAX      = 2,
};

// Enum Pal.EPalBaseCampPassiveEffectType
// NumValues: 0x0004
enum class EPalBaseCampPassiveEffectType : uint8
{
	None                                     = 0,
	WorkSuitability                          = 1,
	WorkHard                                 = 2,
	EPalBaseCampPassiveEffectType_MAX        = 3,
};

// Enum Pal.EPalBaseCampModuleTransportItemTransportPriority
// NumValues: 0x0006
enum class EPalBaseCampModuleTransportItemTransportPriority : uint8
{
	None                                     = 0,
	BaseCampChest                            = 1,
	BaseCampChestHigh                        = 2,
	Requirement                              = 3,
	FoodBox                                  = 4,
	EPalBaseCampModuleTransportItemTransportPriority_MAX = 5,
};

// Enum Pal.EPalBaseCampModuleTransportItemTransportableItemExtraType
// NumValues: 0x0003
enum class EPalBaseCampModuleTransportItemTransportableItemExtraType : uint8
{
	None                                     = 0,
	OnlyCorruptible                          = 1,
	EPalBaseCampModuleTransportItemTransportableItemExtraType_MAX = 2,
};

// Enum Pal.EPalBaseCampFacilityRequestResult
// NumValues: 0x0005
enum class EPalBaseCampFacilityRequestResult : uint8
{
	FailedNotExistsAnyFacilities             = 0,
	FailedNotExistsTheFacility               = 1,
	FailedAlreadyUsing                       = 2,
	Success                                  = 3,
	EPalBaseCampFacilityRequestResult_MAX    = 4,
};

// Enum Pal.EPalBuildInstallCheckModeType
// NumValues: 0x0003
enum class EPalBuildInstallCheckModeType : uint8
{
	Normal                                   = 0,
	InstallAtReticle                         = 1,
	EPalBuildInstallCheckModeType_MAX        = 2,
};

// Enum Pal.EPalBuildObjectVisualType
// NumValues: 0x000A
enum class EPalBuildObjectVisualType : uint8
{
	Invisible                                = 0,
	Normal                                   = 1,
	Simulation                               = 2,
	CannotInstall                            = 3,
	Building                                 = 4,
	BuildComplete                            = 5,
	DismantleTarget                          = 6,
	Damage                                   = 7,
	Repair                                   = 8,
	EPalBuildObjectVisualType_MAX            = 9,
};

// Enum Pal.EFailedCaptureType
// NumValues: 0x0004
enum class EFailedCaptureType : uint8
{
	None                                     = 0,
	NoMPZero                                 = 1,
	TestFailed                               = 2,
	EFailedCaptureType_MAX                   = 3,
};

// Enum Pal.EPalCharacterContainerOperationResult
// NumValues: 0x0014
enum class EPalCharacterContainerOperationResult : uint8
{
	Success                                  = 0,
	FailedTerminatedManager                  = 1,
	FailedIssueContainerId                   = 2,
	FailedOverflowSlotNum                    = 3,
	FailedNotFoundContainer                  = 4,
	FailedNotFoundSlot                       = 5,
	FailedNotFoundCharacter                  = 6,
	FailedNotFoundCharacterParameter         = 7,
	FailedIsLocalOnlyContainer               = 8,
	FailedNoContainerInfoInResponse          = 9,
	FailedNotEnoughSlotSpace                 = 10,
	FailedCannotGetSlotInfo                  = 11,
	FailedChangedSlotInfoRequestedOne        = 12,
	FailedCannotSetTargetHandle              = 13,
	FailedAlreadyLocked                      = 14,
	FailedNotJoinedPlayer                    = 15,
	FailedTransactionLocked                  = 16,
	FailedSimple                             = 17,
	FailedServerCode                         = 18,
	EPalCharacterContainerOperationResult_MAX = 19,
};

// Enum Pal.EPalCharacterContainerSortType
// NumValues: 0x0005
enum class EPalCharacterContainerSortType : uint8
{
	PaldexNo_Asc                             = 0,
	Level_Desc                               = 1,
	ElementType                              = 2,
	BossFlag                                 = 3,
	EPalCharacterContainerSortType_MAX       = 4,
};

// Enum Pal.EPalCoopSkillSearchType
// NumValues: 0x0005
enum class EPalCoopSkillSearchType : uint8
{
	Undefined                                = 0,
	MapObject                                = 1,
	Character                                = 2,
	DungeonPortal                            = 3,
	EPalCoopSkillSearchType_MAX              = 4,
};

// Enum Pal.EPalDungeonType
// NumValues: 0x0003
enum class EPalDungeonType : uint8
{
	Normal                                   = 0,
	Fixed                                    = 1,
	EPalDungeonType_MAX                      = 2,
};

// Enum Pal.EPalDungeonItemSpawnerType
// NumValues: 0x0003
enum class EPalDungeonItemSpawnerType : uint8
{
	Normal                                   = 0,
	Special                                  = 1,
	EPalDungeonItemSpawnerType_MAX           = 2,
};

// Enum Pal.EPalFlyHeightType
// NumValues: 0x0004
enum class EPalFlyHeightType : uint8
{
	Stop                                     = 0,
	ToFly                                    = 1,
	ToLand                                   = 2,
	EPalFlyHeightType_MAX                    = 3,
};

// Enum Pal.EPalGameModeType
// NumValues: 0x0003
enum class EPalGameModeType : uint8
{
	Title                                    = 0,
	InGame                                   = 1,
	EPalGameModeType_MAX                     = 2,
};

// Enum Pal.EPalGameSystemInitState
// NumValues: 0x0005
enum class EPalGameSystemInitState : uint8
{
	Init                                     = 0,
	InProgress                               = 1,
	Complete                                 = 2,
	Failed                                   = 3,
	EPalGameSystemInitState_MAX              = 4,
};

// Enum Pal.EPalGameSystemInitFailedReason
// NumValues: 0x0003
enum class EPalGameSystemInitFailedReason : uint8
{
	None                                     = 0,
	WatchLog                                 = 1,
	EPalGameSystemInitFailedReason_MAX       = 2,
};

// Enum Pal.EPalGameSystemInitProcessType
// NumValues: 0x0005
enum class EPalGameSystemInitProcessType : uint8
{
	Init                                     = 0,
	WaitForInitSystems                       = 1,
	ApplyWorldSaveData                       = 2,
	ApplyPlayerSaveData                      = 3,
	EPalGameSystemInitProcessType_MAX        = 4,
};

// Enum Pal.EPalGroupType
// NumValues: 0x0006
enum class EPalGroupType : uint8
{
	Undefined                                = 0,
	Neutral                                  = 1,
	Organization                             = 2,
	IndependentGuild                         = 3,
	Guild                                    = 4,
	EPalGroupType_MAX                        = 5,
};

// Enum Pal.EPalGuildRequestResult
// NumValues: 0x0012
enum class EPalGuildRequestResult : uint8
{
	FailedNotValidGroupManager               = 0,
	FailedNotValidApplicantPlayerCharacter   = 1,
	FailedNotValidRespondentPlayerCharacter  = 2,
	FailedNotValidRespondentPlayerController = 3,
	FailedCannotJoinOtherGuildApplicant      = 4,
	FailedRequestAlreadyInProgressOtherProcess = 5,
	Failed_RefuseByRespondent                = 6,
	Failed_CancelByApplicant                 = 7,
	Failed_OverBaseCampNum_Applicant         = 8,
	Failed_OverBaseCampNum_Respondent        = 9,
	Failed_NotEnoughSpaceStoreBackBaseCampWorkers_Applicant = 10,
	Failed_NotEnoughSpaceStoreBackBaseCampWorkers_Respondent = 11,
	Succcess_MergePalBox_Applicant           = 12,
	Succcess_MergePalBox_Respondent          = 13,
	Succcess_NoMerge_Applicant               = 14,
	Succcess_NoMerge_Respondent              = 15,
	Success                                  = 16,
	EPalGuildRequestResult_MAX               = 17,
};

// Enum Pal.EPalGuildEnterRequestFlowResult
// NumValues: 0x0006
enum class EPalGuildEnterRequestFlowResult : uint8
{
	Undefined                                = 0,
	ConfirmEnterGuildToApplicant_No          = 1,
	ConfirmEnterGuildToApplicant_LoseBaseCamp_No = 2,
	OfferEnterGuildToRespondent_No           = 3,
	Success                                  = 4,
	EPalGuildEnterRequestFlowResult_MAX      = 5,
};

// Enum Pal.EPalWorkerRadialMenuResult
// NumValues: 0x0007
enum class EPalWorkerRadialMenuResult : uint8
{
	Cancel                                   = 0,
	Feed                                     = 1,
	ShowDetail                               = 2,
	MoveToBox                                = 3,
	MoveToOtomo                              = 4,
	Pet                                      = 5,
	EPalWorkerRadialMenuResult_MAX           = 6,
};

// Enum Pal.EPalIncidentTalkType
// NumValues: 0x0005
enum class EPalIncidentTalkType : uint8
{
	None                                     = 0,
	OneTalk                                  = 1,
	MultiTalk                                = 2,
	CharacterTalk                            = 3,
	EPalIncidentTalkType_MAX                 = 4,
};

// Enum Pal.EPalInteractiveObjectButtonType
// NumValues: 0x0005
enum class EPalInteractiveObjectButtonType : uint8
{
	OnePush                                  = 0,
	LongPush_WithGauge                       = 1,
	LongPush_WithoutGauge                    = 2,
	LongPush_Infinity                        = 3,
	EPalInteractiveObjectButtonType_MAX      = 4,
};

// Enum Pal.EPalIVisitorNPCAction
// NumValues: 0x0004
enum class EPalIVisitorNPCAction : uint8
{
	None                                     = 0,
	ReturnToSpawnedPoint                     = 1,
	Raid                                     = 2,
	EPalIVisitorNPCAction_MAX                = 3,
};

// Enum Pal.EPalDropItemType
// NumValues: 0x0003
enum class EPalDropItemType : uint8
{
	None                                     = 0,
	UNKO                                     = 1,
	Max                                      = 2,
};

// Enum Pal.EPalItemOperationType
// NumValues: 0x0005
enum class EPalItemOperationType : uint8
{
	Undefined                                = 0,
	Product                                  = 1,
	Move                                     = 2,
	Dispose                                  = 3,
	EPalItemOperationType_MAX                = 4,
};

// Enum Pal.EPalCharacterLocationType
// NumValues: 0x0004
enum class EPalCharacterLocationType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Warning                                  = 2,
	EPalCharacterLocationType_MAX            = 3,
};

// Enum Pal.EPalMonsterControllerBaseCampLogType
// NumValues: 0x0009
enum class EPalMonsterControllerBaseCampLogType : uint8
{
	SuccessFixedAssign                       = 0,
	FailedFixedAssignSimple                  = 1,
	FailedFixedAssignWithTargetWork          = 2,
	FailedFixedAssignOverflowWorkers         = 3,
	FailedFixedAssignNoWorkInRange           = 4,
	FailedFixedAssignNotAssignableOtomo      = 5,
	FailedFixedAssignNoSuitability           = 6,
	FailedFixedAssignNotWantToDo             = 7,
	EPalMonsterControllerBaseCampLogType_MAX = 8,
};

// Enum Pal.EPalLogWidgetState
// NumValues: 0x0005
enum class EPalLogWidgetState : uint8
{
	In                                       = 0,
	Wait                                     = 1,
	Out                                      = 2,
	End                                      = 3,
	EPalLogWidgetState_MAX                   = 4,
};

// Enum Pal.EPalMapObjectType
// NumValues: 0x0003
enum class EPalMapObjectType : uint8
{
	OnlyExist                                = 0,
	Foliage                                  = 1,
	EPalMapObjectType_MAX                    = 2,
};

// Enum Pal.EPalMapObjectSpawnRequestType
// NumValues: 0x0003
enum class EPalMapObjectSpawnRequestType : uint8
{
	MapObject                                = 0,
	PlayerBuild                              = 1,
	EPalMapObjectSpawnRequestType_MAX        = 2,
};

// Enum Pal.EPalMapObjectConcreteModelAccessResult
// NumValues: 0x0004
enum class EPalMapObjectConcreteModelAccessResult : uint8
{
	Success                                  = 0,
	FailedMissing                            = 1,
	FailedInBuilding                         = 2,
	EPalMapObjectConcreteModelAccessResult_MAX = 3,
};

// Enum Pal.EPalMapObjectDefenseType
// NumValues: 0x0003
enum class EPalMapObjectDefenseType : uint8
{
	Wait                                     = 0,
	StationaryLauncher                       = 1,
	EPalMapObjectDefenseType_MAX             = 2,
};

// Enum Pal.EPalMapObjectMaterialType
// NumValues: 0x0004
enum class EPalMapObjectMaterialType : uint8
{
	None                                     = 0,
	Wood                                     = 1,
	Stone                                    = 2,
	EPalMapObjectMaterialType_MAX            = 3,
};

// Enum Pal.EPalMapObjectDisposeOptionType
// NumValues: 0x0009
enum class EPalMapObjectDisposeOptionType : uint8
{
	NoDropItems                              = 0,
	NotAutoPickup                            = 1,
	OpenTreasureBox                          = 2,
	Immediately                              = 3,
	NotNotifyOwnerSpawnerLevelObject         = 4,
	ByUnloadStage                            = 5,
	DropBuildMaterials                       = 6,
	RequireRespawnImmediately                = 7,
	EPalMapObjectDisposeOptionType_MAX       = 8,
};

// Enum Pal.EPalMapObjectItemCollectableType
// NumValues: 0x0003
enum class EPalMapObjectItemCollectableType : uint8
{
	Pickup                                   = 0,
	Work                                     = 1,
	EPalMapObjectItemCollectableType_MAX     = 2,
};

// Enum Pal.EPalMapObjectInteractRestrictType
// NumValues: 0x0003
enum class EPalMapObjectInteractRestrictType : uint8
{
	SameGuildOnly                            = 0,
	Anyone                                   = 1,
	EPalMapObjectInteractRestrictType_MAX    = 2,
};

// Enum Pal.EPalMapObjectConcreteModelThrowableType
// NumValues: 0x0003
enum class EPalMapObjectConcreteModelThrowableType : uint8
{
	None                                     = 0,
	Rest                                     = 1,
	EPalMapObjectConcreteModelThrowableType_MAX = 2,
};

// Enum Pal.EPalMapObjectFoodProviderPriority
// NumValues: 0x0003
enum class EPalMapObjectFoodProviderPriority : uint8
{
	Normal                                   = 0,
	Farm                                     = 1,
	EPalMapObjectFoodProviderPriority_MAX    = 2,
};

// Enum Pal.EPalMapObjectWorkerAvailableFacilityType
// NumValues: 0x0004
enum class EPalMapObjectWorkerAvailableFacilityType : uint8
{
	PalBed                                   = 0,
	Amusement                                = 1,
	Undefined                                = 2,
	EPalMapObjectWorkerAvailableFacilityType_MAX = 3,
};

// Enum Pal.EPalBaseCampFacilityUsageState
// NumValues: 0x0004
enum class EPalBaseCampFacilityUsageState : uint8
{
	Vacant                                   = 0,
	Reserved                                 = 1,
	Using                                    = 2,
	EPalBaseCampFacilityUsageState_MAX       = 3,
};

// Enum Pal.EPalMapObjectModelConnectIndex
// NumValues: 0x0009
enum class EPalMapObjectModelConnectIndex : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Back                                     = 4,
	Front                                    = 5,
	AnyPlace                                 = 254,
	None                                     = 255,
	EPalMapObjectModelConnectIndex_MAX       = 256,
};

// Enum Pal.EPalMapObjectModelInitializeExtraParameterType
// NumValues: 0x0012
enum class EPalMapObjectModelInitializeExtraParameterType : uint8
{
	Undefined                                = 0,
	Build                                    = 1,
	SpawnedBy                                = 2,
	Spawner                                  = 3,
	Item                                     = 4,
	TreasureBox                              = 5,
	DropItem                                 = 6,
	ItemDropObject                           = 7,
	Location                                 = 8,
	InitialItem                              = 9,
	InitialCharacter                         = 10,
	PalEgg                                   = 11,
	Note                                     = 12,
	Interact                                 = 13,
	ItemContainerAttribute                   = 14,
	ByPlayerUId                              = 15,
	InstanceId                               = 16,
	EPalMapObjectModelInitializeExtraParameterType_MAX = 17,
};

// Enum Pal.EPalMasterDataExecPinType
// NumValues: 0x0003
enum class EPalMasterDataExecPinType : uint8
{
	Success                                  = 0,
	RowNotFound                              = 1,
	EPalMasterDataExecPinType_MAX            = 2,
};

// Enum Pal.EPalNiagaraDataIterfaceSoundPlayerCommand
// NumValues: 0x0003
enum class EPalNiagaraDataIterfaceSoundPlayerCommand : uint8
{
	None                                     = 0,
	PlaySoundOneShot                         = 1,
	EPalNiagaraDataIterfaceSoundPlayerCommand_MAX = 2,
};

// Enum Pal.EPalNPCTalkProceedResult
// NumValues: 0x0005
enum class EPalNPCTalkProceedResult : uint8
{
	Failed                                   = 0,
	CommandExecuted                          = 1,
	AllCommandComplete                       = 2,
	CommandExecutedAndContinueProcess        = 3,
	EPalNPCTalkProceedResult_MAX             = 4,
};

// Enum Pal.EPalNPCTalkCustomFunctionResult
// NumValues: 0x0004
enum class EPalNPCTalkCustomFunctionResult : uint8
{
	None                                     = 0,
	ContinueProcess                          = 1,
	BreakProcess                             = 2,
	EPalNPCTalkCustomFunctionResult_MAX      = 3,
};

// Enum Pal.EPalNPCTalkSelectedChoiceResult
// NumValues: 0x0003
enum class EPalNPCTalkSelectedChoiceResult : uint8
{
	ExecutedBySystem                         = 0,
	RequestClose                             = 1,
	EPalNPCTalkSelectedChoiceResult_MAX      = 2,
};

// Enum Pal.EPalNPCTalkCommand
// NumValues: 0x0007
enum class EPalNPCTalkCommand : uint8
{
	SimpleMessages                           = 0,
	ChoiceYesNo                              = 1,
	CustomChoice                             = 2,
	TalkerNameChange                         = 3,
	CustomFunc                               = 4,
	CustomFuncBranch                         = 5,
	EPalNPCTalkCommand_MAX                   = 6,
};

// Enum Pal.EPalNPCTalkSelectedChoiceCommand
// NumValues: 0x0004
enum class EPalNPCTalkSelectedChoiceCommand : uint8
{
	EndTalk                                  = 0,
	ChangeSeqence                            = 1,
	CustomFunc                               = 2,
	EPalNPCTalkSelectedChoiceCommand_MAX     = 3,
};

// Enum Pal.EPalNPCSkinColor
// NumValues: 0x0009
enum class EPalNPCSkinColor : uint8
{
	None                                     = 0,
	White                                    = 1,
	ReddishLight                             = 2,
	Light                                    = 3,
	Default                                  = 4,
	YellowishBrown                           = 5,
	Brown                                    = 6,
	DarkBrown                                = 7,
	EPalNPCSkinColor_MAX                     = 8,
};

// Enum Pal.EPalNPCFaceType
// NumValues: 0x0008
enum class EPalNPCFaceType : uint8
{
	None                                     = 0,
	Mobu_A                                   = 1,
	Mobu_B                                   = 2,
	Mobu_C                                   = 3,
	Pocile                                   = 4,
	Hunter                                   = 5,
	Shop                                     = 6,
	EPalNPCFaceType_MAX                      = 7,
};

// Enum Pal.EPalNPCHairStyleType
// NumValues: 0x000A
enum class EPalNPCHairStyleType : uint8
{
	None                                     = 0,
	Mobu_A                                   = 1,
	Mobu_B                                   = 2,
	Mobu_C                                   = 3,
	Mobu_D                                   = 4,
	Mobu_E                                   = 5,
	Pocile                                   = 6,
	Hunter                                   = 7,
	Shop                                     = 8,
	EPalNPCHairStyleType_MAX                 = 9,
};

// Enum Pal.EPalNPCHairColorType
// NumValues: 0x000C
enum class EPalNPCHairColorType : uint8
{
	None                                     = 0,
	Black                                    = 1,
	Silver                                   = 2,
	LightBrown                               = 3,
	DarkBrown                                = 4,
	Beige                                    = 5,
	Gold                                     = 6,
	Ash                                      = 7,
	Pink                                     = 8,
	Red                                      = 9,
	Violet                                   = 10,
	EPalNPCHairColorType_MAX                 = 11,
};

// Enum Pal.EPalNPCClothesType
// NumValues: 0x000A
enum class EPalNPCClothesType : uint8
{
	None                                     = 0,
	Mobu_A                                   = 1,
	Mobu_B                                   = 2,
	Mobu_C                                   = 3,
	Mobu_D                                   = 4,
	Mobu_E                                   = 5,
	Pocile                                   = 6,
	Hunter                                   = 7,
	Shop                                     = 8,
	EPalNPCClothesType_MAX                   = 9,
};

// Enum Pal.EPalNPCScaleType
// NumValues: 0x0007
enum class EPalNPCScaleType : uint8
{
	None                                     = 0,
	S2                                       = 1,
	S1                                       = 2,
	M                                        = 3,
	L1                                       = 4,
	L2                                       = 5,
	EPalNPCScaleType_MAX                     = 6,
};

// Enum Pal.EPalPlatformType
// NumValues: 0x0009
enum class EPalPlatformType : uint8
{
	Undefined                                = 0,
	XboxOne                                  = 1,
	PS4                                      = 2,
	XboxSeries                               = 3,
	PS5                                      = 4,
	PC                                       = 5,
	DedicatedServer                          = 6,
	CoopHost                                 = 7,
	EPalPlatformType_MAX                     = 8,
};

// Enum Pal.EPalOptionWorldMode
// NumValues: 0x0006
enum class EPalOptionWorldMode : uint8
{
	None                                     = 0,
	Single                                   = 1,
	ListenMulti                              = 2,
	Dedicated_PvE                            = 3,
	Dedicated_PvP                            = 4,
	EPalOptionWorldMode_MAX                  = 5,
};

// Enum Pal.EPalPartnerSkillParameterQueryTag
// NumValues: 0x0002
enum class EPalPartnerSkillParameterQueryTag : uint8
{
	MainDamage                               = 0,
	EPalPartnerSkillParameterQueryTag_MAX    = 1,
};

// Enum Pal.EPalPassiveSkillEffectTargetType
// NumValues: 0x0005
enum class EPalPassiveSkillEffectTargetType : uint8
{
	None                                     = 0,
	ToSelf                                   = 1,
	ToTrainer                                = 2,
	ToSelfAndTrainer                         = 3,
	EPalPassiveSkillEffectTargetType_MAX     = 4,
};

// Enum Pal.EPalPlayerAccountState
// NumValues: 0x0006
enum class EPalPlayerAccountState : uint8
{
	Uninitialized                            = 0,
	Initialized                              = 1,
	InNewCreation                            = 2,
	Login                                    = 3,
	Logout                                   = 4,
	EPalPlayerAccountState_MAX               = 5,
};

// Enum Pal.EPalPlayerInputButtonType
// NumValues: 0x0004
enum class EPalPlayerInputButtonType : uint8
{
	None                                     = 0,
	OnPress                                  = 1,
	OnRelease                                = 2,
	EPalPlayerInputButtonType_MAX            = 3,
};

// Enum Pal.EPalRadarChartDrawType
// NumValues: 0x0004
enum class EPalRadarChartDrawType : uint8
{
	Polygon                                  = 0,
	Polygon_Bordered                         = 1,
	OnlyBorder                               = 2,
	EPalRadarChartDrawType_MAX               = 3,
};

// Enum Pal.EPalRaidBossBattleStateType
// NumValues: 0x0004
enum class EPalRaidBossBattleStateType : uint8
{
	Standy                                   = 0,
	Combat                                   = 1,
	Finished                                 = 2,
	EPalRaidBossBattleStateType_MAX          = 3,
};

// Enum Pal.EPalRaidBossBattleStartRequestResult
// NumValues: 0x0004
enum class EPalRaidBossBattleStartRequestResult : uint8
{
	FailedNotValidBaseCampId                 = 0,
	FailedAlreadyStarted                     = 1,
	Success                                  = 2,
	EPalRaidBossBattleStartRequestResult_MAX = 3,
};

// Enum Pal.EPalRandomIncidentSpawnerStatus
// NumValues: 0x0006
enum class EPalRandomIncidentSpawnerStatus : uint8
{
	Unknown                                  = 0,
	Idle                                     = 1,
	CoolDown                                 = 2,
	Executing                                = 3,
	WaitPlayerOutside                        = 4,
	EPalRandomIncidentSpawnerStatus_MAX      = 5,
};

// Enum Pal.EClassRepNodeMapping
// NumValues: 0x0006
enum class EClassRepNodeMapping : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	Spatialize_Static                        = 2,
	Spatialize_Dynamic                       = 3,
	Spatialize_Dormancy                      = 4,
	EClassRepNodeMapping_MAX                 = 5,
};

// Enum Pal.EPalApplySaveDataOrder
// NumValues: 0x0005
enum class EPalApplySaveDataOrder : uint8
{
	Early                                    = 0,
	Normal                                   = 1,
	Late                                     = 2,
	Num                                      = 3,
	EPalApplySaveDataOrder_MAX               = 4,
};

// Enum Pal.EPalSaveError
// NumValues: 0x0004
enum class EPalSaveError : uint8
{
	Success                                  = 0,
	NotFound                                 = 1,
	Unknown                                  = 2,
	EPalSaveError_MAX                        = 3,
};

// Enum Pal.EPalSaveDataRestoreResultType
// NumValues: 0x0006
enum class EPalSaveDataRestoreResultType : uint8
{
	Success_AllSave                          = 0,
	Succcess_NotExistLocalSaveBackup         = 1,
	Failed_NotExistWorldSaveBackup           = 2,
	Failed_NotExistAllSave                   = 3,
	Failed_Unknown                           = 4,
	EPalSaveDataRestoreResultType_MAX        = 5,
};

// Enum Pal.EPalShopSellResultType
// NumValues: 0x0003
enum class EPalShopSellResultType : uint8
{
	Successed                                = 0,
	Failed                                   = 1,
	EPalShopSellResultType_MAX               = 2,
};

// Enum Pal.EPalStageType
// NumValues: 0x0004
enum class EPalStageType : uint8
{
	Undefined                                = 0,
	Dungeon                                  = 1,
	BossBattle                               = 2,
	EPalStageType_MAX                        = 3,
};

// Enum Pal.EPalStageRequestResult
// NumValues: 0x000D
enum class EPalStageRequestResult : uint8
{
	FailedNotValidStage                      = 0,
	FailedNotValidPlayerUId                  = 1,
	FailedNotValidPlayerState                = 2,
	FailedNotValidPlayerController           = 3,
	FailedNotValidPlayerCharacter            = 4,
	FailedNotValidLoginPlayer                = 5,
	FailedNotValidNetworkPlayerComponent     = 6,
	FailedPlayerIsDead                       = 7,
	FailedNotValidStageWorldSubsystem        = 8,
	FailedGetStartPointTransform             = 9,
	FailedGetReturnToFieldPointTransform     = 10,
	Success                                  = 11,
	EPalStageRequestResult_MAX               = 12,
};

// Enum Pal.EPalStagePlayerState
// NumValues: 0x0005
enum class EPalStagePlayerState : uint8
{
	Init                                     = 0,
	WaitingStageLoad                         = 1,
	Login                                    = 2,
	InExiting                                = 3,
	EPalStagePlayerState_MAX                 = 4,
};

// Enum Pal.EPalTutorialTriggerType
// NumValues: 0x0007
enum class EPalTutorialTriggerType : uint8
{
	None                                     = 0,
	AddItem                                  = 1,
	IndividualParam                          = 2,
	PlayerDeath                              = 3,
	Capture                                  = 4,
	Common                                   = 5,
	EPalTutorialTriggerType_MAX              = 6,
};

// Enum Pal.EPalAIActionType
// NumValues: 0x0007
enum class EPalAIActionType : uint8
{
	None                                     = 0,
	Action1                                  = 1,
	Leave                                    = 2,
	Cooperation                              = 3,
	Warning                                  = 4,
	SideMove                                 = 5,
	EPalAIActionType_MAX                     = 6,
};

// Enum Pal.EPalGeneralMontageType
// NumValues: 0x0027
enum class EPalGeneralMontageType : uint8
{
	None                                     = 0,
	GeneralAttackReady_Near                  = 1,
	GeneralAttackReadyLoop_Near              = 2,
	GeneralAttackProcess_Near                = 3,
	GeneralAttackProcessLoop_Near            = 4,
	GeneralAttackAfter_Near                  = 5,
	GeneralAttackReady_Far                   = 6,
	GeneralAttackReadyLoop_Far               = 7,
	GeneralAttackProcess_Far                 = 8,
	GeneralAttackProcessLoop_Far             = 9,
	GeneralAttackAfter_Far                   = 10,
	Rolling                                  = 11,
	Step_Forward                             = 12,
	Step_Back                                = 13,
	Step_Right                               = 14,
	Step_Left                                = 15,
	JumpPreliminary                          = 16,
	JumpStart                                = 17,
	SleepStart                               = 18,
	SleepLoop                                = 19,
	SleepEnd                                 = 20,
	BeLiftupStart                            = 21,
	BeLiftupLoop                             = 22,
	DamageAdditive                           = 23,
	HumanPetting_Standby_S                   = 24,
	HumanPetting_Standby_L                   = 25,
	HumanPetting_DoStroke_S                  = 26,
	HumanPetting_DoStroke_SM                 = 27,
	HumanPetting_DoStroke_M                  = 28,
	HumanPetting_DoStroke_L                  = 29,
	Climbing_ClimbUpAtTop                    = 30,
	Grappling                                = 31,
	EatUpper                                 = 32,
	Defense_Wait                             = 33,
	Ragdoll                                  = 34,
	LargeDown_Start                          = 35,
	LargeDown_Loop                           = 36,
	LargeDown_End                            = 37,
	EPalGeneralMontageType_MAX               = 38,
};

// Enum Pal.EPalRagdollPresetType
// NumValues: 0x0003
enum class EPalRagdollPresetType : uint8
{
	None                                     = 0,
	BeLiftup                                 = 1,
	EPalRagdollPresetType_MAX                = 2,
};

// Enum Pal.EPalCurrentActionNotifyType
// NumValues: 0x0004
enum class EPalCurrentActionNotifyType : uint8
{
	Attack                                   = 0,
	Spawn                                    = 1,
	Other                                    = 2,
	EPalCurrentActionNotifyType_MAX          = 3,
};

// Enum Pal.EPalMonsterMovementType
// NumValues: 0x0006
enum class EPalMonsterMovementType : uint8
{
	GroundOnly                               = 0,
	Fly                                      = 1,
	FlyAndLanding                            = 2,
	Swim                                     = 3,
	SwimGroundDamage                         = 4,
	EPalMonsterMovementType_MAX              = 5,
};

// Enum Pal.EPalEnemySpawnActorType
// NumValues: 0x0005
enum class EPalEnemySpawnActorType : uint8
{
	Rifle                                    = 0,
	ShotGun                                  = 1,
	Bat                                      = 2,
	RPG                                      = 3,
	EPalEnemySpawnActorType_MAX              = 4,
};

// Enum Pal.EPalEnemySpawnDefaultAction
// NumValues: 0x0006
enum class EPalEnemySpawnDefaultAction : uint8
{
	None                                     = 0,
	StopStand                                = 1,
	Turn90                                   = 2,
	Turn180                                  = 3,
	PointPathWalk                            = 4,
	EPalEnemySpawnDefaultAction_MAX          = 5,
};

// Enum Pal.EPalFacialEyeType
// NumValues: 0x000A
enum class EPalFacialEyeType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Close                                    = 2,
	HalfClose                                = 3,
	Pain                                     = 4,
	Smile                                    = 5,
	Anger                                    = 6,
	Trouble                                  = 7,
	GuruGuru                                 = 8,
	EPalFacialEyeType_MAX                    = 9,
};

// Enum Pal.EPalFacialMouthType
// NumValues: 0x0006
enum class EPalFacialMouthType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Pain                                     = 2,
	Smile                                    = 3,
	Anger                                    = 4,
	EPalFacialMouthType_MAX                  = 5,
};

// Enum Pal.EPalPettingSizeType
// NumValues: 0x0005
enum class EPalPettingSizeType : uint8
{
	Small                                    = 0,
	SmallMiddle                              = 1,
	Medium                                   = 2,
	Large                                    = 3,
	EPalPettingSizeType_MAX                  = 4,
};

// Enum Pal.EPalLandingType
// NumValues: 0x000F
enum class EPalLandingType : uint8
{
	None                                     = 0,
	FootStep                                 = 1,
	FootStep_S                               = 2,
	JumpLanding                              = 3,
	RollStep_Fwd                             = 4,
	RollStep_L                               = 5,
	RollStep_R                               = 6,
	RollStep_Bwd                             = 7,
	FootStep_Index_Begin                     = 1,
	FootStep_Index_End                       = 2,
	JumpLanding_Index_Begin                  = 3,
	JumpLanding_Index_End                    = 3,
	RollStep_Index_Begin                     = 4,
	RollStep_Index_End                       = 7,
	EPalLandingType_MAX                      = 8,
};

// Enum Pal.EPalTalentType
// NumValues: 0x0004
enum class EPalTalentType : uint8
{
	HP                                       = 0,
	Attack                                   = 1,
	Defense                                  = 2,
	EPalTalentType_MAX                       = 3,
};

// Enum Pal.EPalAIMoveResultFailedType
// NumValues: 0x0003
enum class EPalAIMoveResultFailedType : uint8
{
	Undefined                                = 0,
	PartialNavMesh                           = 1,
	EPalAIMoveResultFailedType_MAX           = 2,
};

// Enum Pal.EPalActiveSkillSlotId
// NumValues: 0x0003
enum class EPalActiveSkillSlotId : uint8
{
	Default                                  = 0,
	PartnerSkill                             = 100,
	EPalActiveSkillSlotId_MAX                = 101,
};

// Enum Pal.EPalSpawnedCharacterType
// NumValues: 0x0008
enum class EPalSpawnedCharacterType : uint8
{
	Common                                   = 0,
	Rare                                     = 1,
	FieldBoss                                = 2,
	RandomDungeonBoss                        = 3,
	ImprisonmentBoss                         = 4,
	TowerBoss                                = 5,
	RaidBoss                                 = 6,
	EPalSpawnedCharacterType_MAX             = 7,
};

// Enum Pal.EPalMonsterEquipWeaponSocketType
// NumValues: 0x0005
enum class EPalMonsterEquipWeaponSocketType : uint8
{
	None                                     = 0,
	Socket_EquipWeapon_1                     = 1,
	Socket_EquipWeapon_2                     = 2,
	Socket_EquipWeapon_3                     = 3,
	EPalMonsterEquipWeaponSocketType_MAX     = 4,
};

// Enum Pal.EPalCaptureSphereLevelType
// NumValues: 0x0008
enum class EPalCaptureSphereLevelType : uint8
{
	Undefined                                = 0,
	Normal                                   = 1,
	Mega                                     = 2,
	Giga                                     = 3,
	Master                                   = 4,
	Tera                                     = 5,
	Legend                                   = 6,
	EPalCaptureSphereLevelType_MAX           = 7,
};

// Enum Pal.EPalPlayerSprintStaminaDecreaseType
// NumValues: 0x0004
enum class EPalPlayerSprintStaminaDecreaseType : uint8
{
	Ignore                                   = 0,
	OnlyBattleMode                           = 1,
	Always                                   = 2,
	EPalPlayerSprintStaminaDecreaseType_MAX  = 3,
};

// Enum Pal.EPalDamageTextType
// NumValues: 0x0006
enum class EPalDamageTextType : uint8
{
	DoubleRegist                             = 0,
	SingleRegist                             = 1,
	Normal                                   = 2,
	SignelWeak                               = 3,
	DoubleWeak                               = 4,
	EPalDamageTextType_MAX                   = 5,
};

// Enum Pal.EPalUIConditionType
// NumValues: 0x0011
enum class EPalUIConditionType : uint8
{
	None                                     = 0,
	Happy                                    = 1,
	Unhappy                                  = 2,
	MinorInjury                              = 3,
	Severe                                   = 4,
	Dying                                    = 5,
	Hunger                                   = 6,
	Starvation                               = 7,
	Cold                                     = 8,
	Sprain                                   = 9,
	Bulimia                                  = 10,
	GastricUlcer                             = 11,
	Fracture                                 = 12,
	Weakness                                 = 13,
	DepressionSprain                         = 14,
	DisturbingElement                        = 15,
	EPalUIConditionType_MAX                  = 16,
};

// Enum Pal.EPalUIWorkerCommentType
// NumValues: 0x0016
enum class EPalUIWorkerCommentType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Normal_Craftsman                         = 2,
	Normal_Sabotage                          = 3,
	Dying                                    = 4,
	Hungry_Half                              = 5,
	Hungry_Low                               = 6,
	Hungry_Starvation                        = 7,
	LowSanity_Half                           = 8,
	LowSanity_Warning                        = 9,
	LowSanity_Emergency                      = 10,
	Illnesses                                = 11,
	Injuries                                 = 12,
	Bulimia                                  = 13,
	Weakness                                 = 14,
	DisturbingElement                        = 15,
	DodgeWork                                = 16,
	DodgeWork_Short                          = 17,
	DodgeWork_Sleep                          = 18,
	EatTooMuch                               = 19,
	Trantrum                                 = 20,
	EPalUIWorkerCommentType_MAX              = 21,
};

// Enum Pal.EPalUIServerListSortType
// NumValues: 0x0006
enum class EPalUIServerListSortType : uint8
{
	Latest                                   = 0,
	DaysAsc                                  = 1,
	DaysDesc                                 = 2,
	CurrentPlayerAsc                         = 3,
	CurrentPlayerDesc                        = 4,
	EPalUIServerListSortType_MAX             = 5,
};

// Enum Pal.EPalUIServerListFilterType
// NumValues: 0x0004
enum class EPalUIServerListFilterType : uint8
{
	Official                                 = 0,
	Community                                = 1,
	History                                  = 2,
	EPalUIServerListFilterType_MAX           = 3,
};

// Enum Pal.EPalUIJoinGameInputCodeType
// NumValues: 0x0003
enum class EPalUIJoinGameInputCodeType : uint8
{
	Password                                 = 0,
	InviteCode                               = 1,
	EPalUIJoinGameInputCodeType_MAX          = 2,
};

// Enum Pal.EPalUILiftSlotType
// NumValues: 0x0004
enum class EPalUILiftSlotType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	CharacterHandle                          = 2,
	EPalUILiftSlotType_MAX                   = 3,
};

// Enum Pal.EPalUIPaldexPanelDetailType
// NumValues: 0x0005
enum class EPalUIPaldexPanelDetailType : uint8
{
	None                                     = 0,
	NotEncount                               = 1,
	Encounted                                = 2,
	Captured                                 = 3,
	EPalUIPaldexPanelDetailType_MAX          = 4,
};

// Enum Pal.EPalWorldMapType
// NumValues: 0x0003
enum class EPalWorldMapType : uint8
{
	Normal                                   = 0,
	RealtimeCapture                          = 1,
	EPalWorldMapType_MAX                     = 2,
};

// Enum Pal.EPalACEWordFilterSceneType
// NumValues: 0x0007
enum class EPalACEWordFilterSceneType : uint8
{
	PlayerName                               = 0,
	PalName                                  = 1,
	WorldName                                = 2,
	GuildName                                = 3,
	SignBoard                                = 4,
	TextChat                                 = 5,
	EPalACEWordFilterSceneType_MAX           = 6,
};

// Enum Pal.EPalWorkRequestResult
// NumValues: 0x0014
enum class EPalWorkRequestResult : uint8
{
	Success                                  = 0,
	FailedNotFoundBaseCamp                   = 1,
	FailedNotFoundOwnerMapObject             = 2,
	FailedNotFoundWork                       = 3,
	FailedNotFoundWorkAssign                 = 4,
	FailedNotFoundWorkAssignLocation         = 5,
	FailedDisableToAssignForAssignInfo       = 6,
	FailedOverflowAssignCount                = 7,
	FailedCharacterHandleMissing             = 8,
	FailedCharacterParameterMissing          = 9,
	FailedNotFoundCharacter                  = 10,
	FailedNotFoundCharacterAIController      = 11,
	FailedNotMatchWorkType                   = 12,
	FailedNotWorkBase                        = 13,
	FailedNotSameWorker                      = 14,
	FailedNotFoundNetworkTransmitter         = 15,
	FailedInvokeingInClientForServerInternalFunction = 16,
	FailedTransportNotExistDirector          = 17,
	FailedTransportNotExistPathToMoveFor     = 18,
	EPalWorkRequestResult_MAX                = 19,
};

// Enum Pal.EPalWorkTransformType
// NumValues: 0x0005
enum class EPalWorkTransformType : uint8
{
	Undefined                                = 0,
	Static                                   = 1,
	MapObject                                = 2,
	Character                                = 3,
	EPalWorkTransformType_MAX                = 4,
};

// Enum Pal.EPalWorkTickResult
// NumValues: 0x0004
enum class EPalWorkTickResult : uint8
{
	Continue                                 = 0,
	WaitForWorkable                          = 1,
	Terminate                                = 2,
	EPalWorkTickResult_MAX                   = 3,
};

// Enum Pal.EPalWorkAssignableCheckResult
// NumValues: 0x000C
enum class EPalWorkAssignableCheckResult : uint8
{
	WorkerEvent                              = 0,
	Dead                                     = 1,
	Sleeping                                 = 2,
	RecoverHungry                            = 3,
	NotSuitable                              = 4,
	NotAssignableOtomo                       = 5,
	NotValidIndividualCharacterParameter     = 6,
	CannotReviveSelf                         = 7,
	NotExistsMapObject                       = 8,
	MapObjectEffect                          = 9,
	Enable                                   = 10,
	EPalWorkAssignableCheckResult_MAX        = 11,
};

// Enum Pal.EPalWorkTransportItemType
// NumValues: 0x0003
enum class EPalWorkTransportItemType : uint8
{
	TakeOut                                  = 0,
	PutIn                                    = 1,
	EPalWorkTransportItemType_MAX            = 2,
};

// Enum Pal.EPalWorkDefenseCombatType
// NumValues: 0x0004
enum class EPalWorkDefenseCombatType : uint8
{
	None                                     = 0,
	Wait                                     = 1,
	Gunner                                   = 2,
	EPalWorkDefenseCombatType_MAX            = 3,
};

// Enum Pal.EPalWorkAssignOptionType
// NumValues: 0x0002
enum class EPalWorkAssignOptionType : uint8
{
	HigherPriorityThanSleep                  = 0,
	EPalWorkAssignOptionType_MAX             = 1,
};

// Enum Pal.EPalWorkWorkerState
// NumValues: 0x0005
enum class EPalWorkWorkerState : uint8
{
	None                                     = 0,
	Reserve                                  = 1,
	Working                                  = 2,
	Leave                                    = 3,
	EPalWorkWorkerState_MAX                  = 4,
};

// Enum Pal.EPalWorkWorkerWorkingState
// NumValues: 0x0005
enum class EPalWorkWorkerWorkingState : uint8
{
	Wait                                     = 0,
	ApproachTo                               = 1,
	Working                                  = 2,
	WaitForWorkable                          = 3,
	EPalWorkWorkerWorkingState_MAX           = 4,
};

// Enum Pal.EPalWorkableType
// NumValues: 0x0011
enum class EPalWorkableType : uint8
{
	Illegal                                  = 0,
	Progress                                 = 1,
	CollectItem                              = 2,
	TransportItem                            = 3,
	TransportItemInBaseCamp                  = 4,
	ReviveCharacter                          = 5,
	CollectResource                          = 6,
	LevelObject                              = 7,
	Repair                                   = 8,
	Defense                                  = 9,
	BootUp                                   = 10,
	OnlyJoin                                 = 11,
	OnlyJoinAndWalkAround                    = 12,
	RemoveMapObjectEffect                    = 13,
	MonsterFarm                              = 14,
	DeforestFoliage                          = 15,
	EPalWorkableType_MAX                     = 16,
};

// Enum Pal.EPalWorkAssignRequirementWorkerFilter
// NumValues: 0x0002
enum class EPalWorkAssignRequirementWorkerFilter : uint8
{
	InSameMapObject                          = 0,
	EPalWorkAssignRequirementWorkerFilter_MAX = 1,
};

// Enum Pal.EPalWorkAssignRequirementWorkerPriority
// NumValues: 0x0004
enum class EPalWorkAssignRequirementWorkerPriority : uint8
{
	Normal                                   = 0,
	WorkSpeedASC                             = 1,
	WorkSpeedDESC                            = 2,
	EPalWorkAssignRequirementWorkerPriority_MAX = 3,
};

// Enum Pal.EPalWorkRepairState
// NumValues: 0x0008
enum class EPalWorkRepairState : uint8
{
	None                                     = 0,
	PathFindByOwner                          = 1,
	PathFindByConnector                      = 2,
	ApproachToChest                          = 3,
	ApproachToOwner                          = 4,
	ApproachToConnectOwner                   = 5,
	InProgress                               = 6,
	EPalWorkRepairState_MAX                  = 7,
};

// Enum Pal.EPalMapObjectMaterialSubType
// NumValues: 0x0007
enum class EPalMapObjectMaterialSubType : uint8
{
	None                                     = 0,
	Wood                                     = 1,
	Stone                                    = 2,
	Copper                                   = 3,
	Iron                                     = 4,
	Platinum                                 = 5,
	EPalMapObjectMaterialSubType_MAX         = 6,
};

// Enum Pal.EPalWorldSecurityLawTriggerType
// NumValues: 0x0006
enum class EPalWorldSecurityLawTriggerType : uint8
{
	Undefined                                = 0,
	Item_Move                                = 1,
	Character_Damaged                        = 2,
	Character_Dead                           = 3,
	Area_Invasion                            = 4,
	EPalWorldSecurityLawTriggerType_MAX      = 5,
};

// Enum Pal.ESequentialProcessState
// NumValues: 0x0005
enum class ESequentialProcessState : uint8
{
	Init                                     = 0,
	InProgress                               = 1,
	Complete                                 = 2,
	Failed                                   = 3,
	ESequentialProcessState_MAX              = 4,
};

// Enum Pal.EPalDescendantScrollDestination
// NumValues: 0x0004
enum class EPalDescendantScrollDestination : uint8
{
	IntoView                                 = 0,
	TopOrLeft                                = 1,
	Center                                   = 2,
	EPalDescendantScrollDestination_MAX      = 3,
};

// Enum Pal.EPalScrollWhenFocusChanges
// NumValues: 0x0004
enum class EPalScrollWhenFocusChanges : uint8
{
	NoScroll                                 = 0,
	InstantScroll                            = 1,
	AnimatedScroll                           = 2,
	EPalScrollWhenFocusChanges_MAX           = 3,
};

// ScriptStruct Pal.PalFoliageInstanceId
// 0x0010 (0x0010 - 0x0000)
struct FPalFoliageInstanceId final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageInstanceId) == 0x000004, "Wrong alignment on FPalFoliageInstanceId");
static_assert(sizeof(FPalFoliageInstanceId) == 0x000010, "Wrong size on FPalFoliageInstanceId");
static_assert(offsetof(FPalFoliageInstanceId, Guid) == 0x000000, "Member 'FPalFoliageInstanceId::Guid' has a wrong offset!");

// ScriptStruct Pal.PalSpecialAttackRateInfo
// 0x0008 (0x0008 - 0x0000)
struct FPalSpecialAttackRateInfo final
{
public:
	EPalSpecialAttackRateType                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_255C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rate;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSpecialAttackRateInfo) == 0x000004, "Wrong alignment on FPalSpecialAttackRateInfo");
static_assert(sizeof(FPalSpecialAttackRateInfo) == 0x000008, "Wrong size on FPalSpecialAttackRateInfo");
static_assert(offsetof(FPalSpecialAttackRateInfo, Type) == 0x000000, "Member 'FPalSpecialAttackRateInfo::Type' has a wrong offset!");
static_assert(offsetof(FPalSpecialAttackRateInfo, Rate) == 0x000004, "Member 'FPalSpecialAttackRateInfo::Rate' has a wrong offset!");

// ScriptStruct Pal.PalDamageInfo
// 0x00D0 (0x00D0 - 0x0000)
struct FPalDamageInfo final
{
public:
	int32                                         NativeDamageValue;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaCategory                              Category;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlowAttack;                                      // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeanBack;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_255D[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlowVelocity;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBodyPartsType                             BodyPartsType;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_255E[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackerLevel;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               AttackElementType;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_255F[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  AttackerGroupID;                                   // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2560[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OverrideNetworkOwner;                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAttackType                                AttackType;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2561[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FoliageModelId;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalFoliageInstanceId>          FoliageInstanceIds;                                // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	EPalAdditionalEffectType                      EffectType1;                                       // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2562[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue1;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValueEx1;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAdditionalEffectType                      EffectType2;                                       // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2563[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue2;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValueEx2;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakAttackRate;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaySneakAttackEffect;                             // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2564[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageRatePerCollision;                            // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2565[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalSpecialAttackRateInfo>      SpecialAttackRateInfos;                            // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	EPalDamageAnimationReactionType               DamageReactionAnimationType;                       // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackableToFriend;                               // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoDamage;                                          // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreShield;                                      // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UIDamageTextOverride_DoubleRegist;                 // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPlayerDamageCameraShakeCategory           CameraShake;                                       // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalSizeType                                  ForceRagdollSize;                                  // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyNativeDamageValue;                           // 0x00C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnorePlayerEquipItemDamage;                       // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2566[0x7];                                     // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDamageInfo) == 0x000008, "Wrong alignment on FPalDamageInfo");
static_assert(sizeof(FPalDamageInfo) == 0x0000D0, "Wrong size on FPalDamageInfo");
static_assert(offsetof(FPalDamageInfo, NativeDamageValue) == 0x000000, "Member 'FPalDamageInfo::NativeDamageValue' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, Category) == 0x000004, "Member 'FPalDamageInfo::Category' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, IsBlowAttack) == 0x000005, "Member 'FPalDamageInfo::IsBlowAttack' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, IsLeanBack) == 0x000006, "Member 'FPalDamageInfo::IsLeanBack' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, BlowVelocity) == 0x000008, "Member 'FPalDamageInfo::BlowVelocity' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, BodyPartsType) == 0x000020, "Member 'FPalDamageInfo::BodyPartsType' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, AttackerLevel) == 0x000024, "Member 'FPalDamageInfo::AttackerLevel' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, AttackElementType) == 0x000028, "Member 'FPalDamageInfo::AttackElementType' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, AttackerGroupID) == 0x00002C, "Member 'FPalDamageInfo::AttackerGroupID' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, Attacker) == 0x000040, "Member 'FPalDamageInfo::Attacker' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, OverrideNetworkOwner) == 0x000048, "Member 'FPalDamageInfo::OverrideNetworkOwner' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, AttackType) == 0x000050, "Member 'FPalDamageInfo::AttackType' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, HitLocation) == 0x000058, "Member 'FPalDamageInfo::HitLocation' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, FoliageModelId) == 0x000070, "Member 'FPalDamageInfo::FoliageModelId' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, FoliageInstanceIds) == 0x000078, "Member 'FPalDamageInfo::FoliageInstanceIds' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, EffectType1) == 0x000088, "Member 'FPalDamageInfo::EffectType1' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, EffectValue1) == 0x00008C, "Member 'FPalDamageInfo::EffectValue1' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, EffectValueEx1) == 0x000090, "Member 'FPalDamageInfo::EffectValueEx1' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, EffectType2) == 0x000094, "Member 'FPalDamageInfo::EffectType2' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, EffectValue2) == 0x000098, "Member 'FPalDamageInfo::EffectValue2' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, EffectValueEx2) == 0x00009C, "Member 'FPalDamageInfo::EffectValueEx2' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, SneakAttackRate) == 0x0000A0, "Member 'FPalDamageInfo::SneakAttackRate' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, PlaySneakAttackEffect) == 0x0000A4, "Member 'FPalDamageInfo::PlaySneakAttackEffect' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, DamageRatePerCollision) == 0x0000A8, "Member 'FPalDamageInfo::DamageRatePerCollision' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, SpecialAttackRateInfos) == 0x0000B0, "Member 'FPalDamageInfo::SpecialAttackRateInfos' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, DamageReactionAnimationType) == 0x0000C0, "Member 'FPalDamageInfo::DamageReactionAnimationType' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, bAttackableToFriend) == 0x0000C1, "Member 'FPalDamageInfo::bAttackableToFriend' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, NoDamage) == 0x0000C2, "Member 'FPalDamageInfo::NoDamage' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, IgnoreShield) == 0x0000C3, "Member 'FPalDamageInfo::IgnoreShield' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, UIDamageTextOverride_DoubleRegist) == 0x0000C4, "Member 'FPalDamageInfo::UIDamageTextOverride_DoubleRegist' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, CameraShake) == 0x0000C5, "Member 'FPalDamageInfo::CameraShake' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, ForceRagdollSize) == 0x0000C6, "Member 'FPalDamageInfo::ForceRagdollSize' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, bApplyNativeDamageValue) == 0x0000C7, "Member 'FPalDamageInfo::bApplyNativeDamageValue' has a wrong offset!");
static_assert(offsetof(FPalDamageInfo, IgnorePlayerEquipItemDamage) == 0x0000C8, "Member 'FPalDamageInfo::IgnorePlayerEquipItemDamage' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_MapObjectData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_MapObjectData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_MapObjectData) == 0x000004, "Wrong alignment on FPalDataTableRowName_MapObjectData");
static_assert(sizeof(FPalDataTableRowName_MapObjectData) == 0x000008, "Wrong size on FPalDataTableRowName_MapObjectData");
static_assert(offsetof(FPalDataTableRowName_MapObjectData, Key) == 0x000000, "Member 'FPalDataTableRowName_MapObjectData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_ItemData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_ItemData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_ItemData) == 0x000004, "Wrong alignment on FPalDataTableRowName_ItemData");
static_assert(sizeof(FPalDataTableRowName_ItemData) == 0x000008, "Wrong size on FPalDataTableRowName_ItemData");
static_assert(offsetof(FPalDataTableRowName_ItemData, Key) == 0x000000, "Member 'FPalDataTableRowName_ItemData::Key' has a wrong offset!");

// ScriptStruct Pal.PalPassiveAbilitySkillParameters
// 0x0038 (0x0038 - 0x0000)
struct FPalPassiveAbilitySkillParameters final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorkType                                  WorkType;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2567[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalDataTableRowName_MapObjectData> MapObjectId;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDataTableRowName_ItemData>  ItemId;                                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          AssignOthers;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               TargetElementType;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2568[0xE];                                     // 0x002A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPassiveAbilitySkillParameters) == 0x000008, "Wrong alignment on FPalPassiveAbilitySkillParameters");
static_assert(sizeof(FPalPassiveAbilitySkillParameters) == 0x000038, "Wrong size on FPalPassiveAbilitySkillParameters");
static_assert(offsetof(FPalPassiveAbilitySkillParameters, DelayTime) == 0x000000, "Member 'FPalPassiveAbilitySkillParameters::DelayTime' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillParameters, WorkType) == 0x000004, "Member 'FPalPassiveAbilitySkillParameters::WorkType' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillParameters, MapObjectId) == 0x000008, "Member 'FPalPassiveAbilitySkillParameters::MapObjectId' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillParameters, ItemId) == 0x000018, "Member 'FPalPassiveAbilitySkillParameters::ItemId' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillParameters, AssignOthers) == 0x000028, "Member 'FPalPassiveAbilitySkillParameters::AssignOthers' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillParameters, TargetElementType) == 0x000029, "Member 'FPalPassiveAbilitySkillParameters::TargetElementType' has a wrong offset!");

// ScriptStruct Pal.PalObjectCollectorCalcNearestCharacterTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FPalObjectCollectorCalcNearestCharacterTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_2569[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalObjectCollectorCalcNearestCharacterTickFunction) == 0x000008, "Wrong alignment on FPalObjectCollectorCalcNearestCharacterTickFunction");
static_assert(sizeof(FPalObjectCollectorCalcNearestCharacterTickFunction) == 0x000030, "Wrong size on FPalObjectCollectorCalcNearestCharacterTickFunction");

// ScriptStruct Pal.PalUICaptureCameraOffsetData
// 0x00A8 (0x00B0 - 0x0008)
struct FPalUICaptureCameraOffsetData final : public FTableRowBase
{
public:
	struct FVector                                LocationOffset;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PointLightOffset_1;                                // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointLightIntensity_1;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointLightSize_1;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointLightOffset_2;                                // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointLightIntensity_2;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointLightSize_2;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RectLightOffset;                                   // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RectLightRotator;                                  // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RectLightIntensity;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RectLightSize;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalUICaptureCameraOffsetData) == 0x000008, "Wrong alignment on FPalUICaptureCameraOffsetData");
static_assert(sizeof(FPalUICaptureCameraOffsetData) == 0x0000B0, "Wrong size on FPalUICaptureCameraOffsetData");
static_assert(offsetof(FPalUICaptureCameraOffsetData, LocationOffset) == 0x000008, "Member 'FPalUICaptureCameraOffsetData::LocationOffset' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, Rotator) == 0x000020, "Member 'FPalUICaptureCameraOffsetData::Rotator' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, PointLightOffset_1) == 0x000038, "Member 'FPalUICaptureCameraOffsetData::PointLightOffset_1' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, PointLightIntensity_1) == 0x000050, "Member 'FPalUICaptureCameraOffsetData::PointLightIntensity_1' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, PointLightSize_1) == 0x000054, "Member 'FPalUICaptureCameraOffsetData::PointLightSize_1' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, PointLightOffset_2) == 0x000058, "Member 'FPalUICaptureCameraOffsetData::PointLightOffset_2' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, PointLightIntensity_2) == 0x000070, "Member 'FPalUICaptureCameraOffsetData::PointLightIntensity_2' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, PointLightSize_2) == 0x000074, "Member 'FPalUICaptureCameraOffsetData::PointLightSize_2' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, RectLightOffset) == 0x000078, "Member 'FPalUICaptureCameraOffsetData::RectLightOffset' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, RectLightRotator) == 0x000090, "Member 'FPalUICaptureCameraOffsetData::RectLightRotator' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, RectLightIntensity) == 0x0000A8, "Member 'FPalUICaptureCameraOffsetData::RectLightIntensity' has a wrong offset!");
static_assert(offsetof(FPalUICaptureCameraOffsetData, RectLightSize) == 0x0000AC, "Member 'FPalUICaptureCameraOffsetData::RectLightSize' has a wrong offset!");

// ScriptStruct Pal.PalEnemyCampStatus
// 0x0028 (0x0028 - 0x0000)
struct FPalEnemyCampStatus final
{
public:
	bool                                          bIsSpawned;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnemyAllDead;                                   // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClear;                                          // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRewardReceived;                                   // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardPalId;                                       // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPalLevel;                                    // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ClearDate;                                         // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastCalcDate;                                      // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEnemyCampStatus) == 0x000008, "Wrong alignment on FPalEnemyCampStatus");
static_assert(sizeof(FPalEnemyCampStatus) == 0x000028, "Wrong size on FPalEnemyCampStatus");
static_assert(offsetof(FPalEnemyCampStatus, bIsSpawned) == 0x000000, "Member 'FPalEnemyCampStatus::bIsSpawned' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, bIsEnemyAllDead) == 0x000001, "Member 'FPalEnemyCampStatus::bIsEnemyAllDead' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, bIsClear) == 0x000002, "Member 'FPalEnemyCampStatus::bIsClear' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, bRewardReceived) == 0x000003, "Member 'FPalEnemyCampStatus::bRewardReceived' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, RewardPalId) == 0x000004, "Member 'FPalEnemyCampStatus::RewardPalId' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, RewardPalLevel) == 0x00000C, "Member 'FPalEnemyCampStatus::RewardPalLevel' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, ClearDate) == 0x000010, "Member 'FPalEnemyCampStatus::ClearDate' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, ElapsedTime) == 0x000018, "Member 'FPalEnemyCampStatus::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FPalEnemyCampStatus, LastCalcDate) == 0x000020, "Member 'FPalEnemyCampStatus::LastCalcDate' has a wrong offset!");

// ScriptStruct Pal.PalEnemyCampSaveData
// 0x0050 (0x0050 - 0x0000)
struct FPalEnemyCampSaveData final
{
public:
	TMap<class FName, struct FPalEnemyCampStatus> EnemyCampStatusMap;                                // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEnemyCampSaveData) == 0x000008, "Wrong alignment on FPalEnemyCampSaveData");
static_assert(sizeof(FPalEnemyCampSaveData) == 0x000050, "Wrong size on FPalEnemyCampSaveData");
static_assert(offsetof(FPalEnemyCampSaveData, EnemyCampStatusMap) == 0x000000, "Member 'FPalEnemyCampSaveData::EnemyCampStatusMap' has a wrong offset!");

// ScriptStruct Pal.PalItemData
// 0x0010 (0x0010 - 0x0000)
struct FPalItemData final
{
public:
	class UPalStaticItemDataBase*                 StaticData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPalDynamicItemDataBase*                DynamicData;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemData) == 0x000008, "Wrong alignment on FPalItemData");
static_assert(sizeof(FPalItemData) == 0x000010, "Wrong size on FPalItemData");
static_assert(offsetof(FPalItemData, StaticData) == 0x000000, "Member 'FPalItemData::StaticData' has a wrong offset!");
static_assert(offsetof(FPalItemData, DynamicData) == 0x000008, "Member 'FPalItemData::DynamicData' has a wrong offset!");

// ScriptStruct Pal.PalPlayerDataCharacterMakeInfo
// 0x0094 (0x0094 - 0x0000)
struct FPalPlayerDataCharacterMakeInfo final
{
public:
	class FName                                   BodyMeshName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadMeshName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HairMeshName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipmentBodyMeshName;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipmentHeadMeshName;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableEquipmentHeadFlag;                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256B[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmVolume;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorsoVolume;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegVolume;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HairColor;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BrowColor;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BodyColor;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BodySubsurfaceColor;                               // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EyeColor;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyeMaterialName;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceID;                                           // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerDataCharacterMakeInfo) == 0x000004, "Wrong alignment on FPalPlayerDataCharacterMakeInfo");
static_assert(sizeof(FPalPlayerDataCharacterMakeInfo) == 0x000094, "Wrong size on FPalPlayerDataCharacterMakeInfo");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, BodyMeshName) == 0x000000, "Member 'FPalPlayerDataCharacterMakeInfo::BodyMeshName' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, HeadMeshName) == 0x000008, "Member 'FPalPlayerDataCharacterMakeInfo::HeadMeshName' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, HairMeshName) == 0x000010, "Member 'FPalPlayerDataCharacterMakeInfo::HairMeshName' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, EquipmentBodyMeshName) == 0x000018, "Member 'FPalPlayerDataCharacterMakeInfo::EquipmentBodyMeshName' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, EquipmentHeadMeshName) == 0x000020, "Member 'FPalPlayerDataCharacterMakeInfo::EquipmentHeadMeshName' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, DisableEquipmentHeadFlag) == 0x000028, "Member 'FPalPlayerDataCharacterMakeInfo::DisableEquipmentHeadFlag' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, ArmVolume) == 0x00002C, "Member 'FPalPlayerDataCharacterMakeInfo::ArmVolume' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, TorsoVolume) == 0x000030, "Member 'FPalPlayerDataCharacterMakeInfo::TorsoVolume' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, LegVolume) == 0x000034, "Member 'FPalPlayerDataCharacterMakeInfo::LegVolume' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, HairColor) == 0x000038, "Member 'FPalPlayerDataCharacterMakeInfo::HairColor' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, BrowColor) == 0x000048, "Member 'FPalPlayerDataCharacterMakeInfo::BrowColor' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, BodyColor) == 0x000058, "Member 'FPalPlayerDataCharacterMakeInfo::BodyColor' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, BodySubsurfaceColor) == 0x000068, "Member 'FPalPlayerDataCharacterMakeInfo::BodySubsurfaceColor' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, EyeColor) == 0x000078, "Member 'FPalPlayerDataCharacterMakeInfo::EyeColor' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, EyeMaterialName) == 0x000088, "Member 'FPalPlayerDataCharacterMakeInfo::EyeMaterialName' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataCharacterMakeInfo, VoiceID) == 0x000090, "Member 'FPalPlayerDataCharacterMakeInfo::VoiceID' has a wrong offset!");

// ScriptStruct Pal.PalDynamicItemId
// 0x0020 (0x0020 - 0x0000)
struct FPalDynamicItemId final
{
public:
	struct FGuid                                  CreatedWorldId;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LocalIdInCreatedWorld;                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDynamicItemId) == 0x000004, "Wrong alignment on FPalDynamicItemId");
static_assert(sizeof(FPalDynamicItemId) == 0x000020, "Wrong size on FPalDynamicItemId");
static_assert(offsetof(FPalDynamicItemId, CreatedWorldId) == 0x000000, "Member 'FPalDynamicItemId::CreatedWorldId' has a wrong offset!");
static_assert(offsetof(FPalDynamicItemId, LocalIdInCreatedWorld) == 0x000010, "Member 'FPalDynamicItemId::LocalIdInCreatedWorld' has a wrong offset!");

// ScriptStruct Pal.PalItemId
// 0x0028 (0x0028 - 0x0000)
struct FPalItemId final
{
public:
	class FName                                   StaticId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDynamicItemId                      DynamicId;                                         // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemId) == 0x000004, "Wrong alignment on FPalItemId");
static_assert(sizeof(FPalItemId) == 0x000028, "Wrong size on FPalItemId");
static_assert(offsetof(FPalItemId, StaticId) == 0x000000, "Member 'FPalItemId::StaticId' has a wrong offset!");
static_assert(offsetof(FPalItemId, DynamicId) == 0x000008, "Member 'FPalItemId::DynamicId' has a wrong offset!");

// ScriptStruct Pal.PalItemAndNum
// 0x002C (0x002C - 0x0000)
struct FPalItemAndNum final
{
public:
	struct FPalItemId                             ItemId;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemAndNum) == 0x000004, "Wrong alignment on FPalItemAndNum");
static_assert(sizeof(FPalItemAndNum) == 0x00002C, "Wrong size on FPalItemAndNum");
static_assert(offsetof(FPalItemAndNum, ItemId) == 0x000000, "Member 'FPalItemAndNum::ItemId' has a wrong offset!");
static_assert(offsetof(FPalItemAndNum, Num) == 0x000028, "Member 'FPalItemAndNum::Num' has a wrong offset!");

// ScriptStruct Pal.PalDeathPenaltyInfo
// 0x0060 (0x0060 - 0x0000)
struct FPalDeathPenaltyInfo final
{
public:
	struct FGuid                                  DeathPenaID;                                       // 0x0000(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  DeathPlayerID;                                     // 0x0010(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerDeathLocation;                               // 0x0020(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DropItemLocation;                                  // 0x0038(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalItemAndNum>                 DropItemList;                                      // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDeathPenaltyInfo) == 0x000008, "Wrong alignment on FPalDeathPenaltyInfo");
static_assert(sizeof(FPalDeathPenaltyInfo) == 0x000060, "Wrong size on FPalDeathPenaltyInfo");
static_assert(offsetof(FPalDeathPenaltyInfo, DeathPenaID) == 0x000000, "Member 'FPalDeathPenaltyInfo::DeathPenaID' has a wrong offset!");
static_assert(offsetof(FPalDeathPenaltyInfo, DeathPlayerID) == 0x000010, "Member 'FPalDeathPenaltyInfo::DeathPlayerID' has a wrong offset!");
static_assert(offsetof(FPalDeathPenaltyInfo, PlayerDeathLocation) == 0x000020, "Member 'FPalDeathPenaltyInfo::PlayerDeathLocation' has a wrong offset!");
static_assert(offsetof(FPalDeathPenaltyInfo, DropItemLocation) == 0x000038, "Member 'FPalDeathPenaltyInfo::DropItemLocation' has a wrong offset!");
static_assert(offsetof(FPalDeathPenaltyInfo, DropItemList) == 0x000050, "Member 'FPalDeathPenaltyInfo::DropItemList' has a wrong offset!");

// ScriptStruct Pal.PalDeathPenaltyList
// 0x0010 (0x0010 - 0x0000)
struct FPalDeathPenaltyList final
{
public:
	TArray<struct FPalDeathPenaltyInfo>           DeathPenaArray;                                    // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDeathPenaltyList) == 0x000008, "Wrong alignment on FPalDeathPenaltyList");
static_assert(sizeof(FPalDeathPenaltyList) == 0x000010, "Wrong size on FPalDeathPenaltyList");
static_assert(offsetof(FPalDeathPenaltyList, DeathPenaArray) == 0x000000, "Member 'FPalDeathPenaltyList::DeathPenaArray' has a wrong offset!");

// ScriptStruct Pal.PalUILocalWorldDisplayData
// 0x0058 (0x0058 - 0x0000)
struct FPalUILocalWorldDisplayData final
{
public:
	class FString                                 WorldName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorldDirectoryName;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLevel;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DirectoryPath;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanMultiplay;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorldBaseInfoSaveDataType                 BaseInfoSaveDataType;                              // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256C[0x6];                                     // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUILocalWorldDisplayData) == 0x000008, "Wrong alignment on FPalUILocalWorldDisplayData");
static_assert(sizeof(FPalUILocalWorldDisplayData) == 0x000058, "Wrong size on FPalUILocalWorldDisplayData");
static_assert(offsetof(FPalUILocalWorldDisplayData, WorldName) == 0x000000, "Member 'FPalUILocalWorldDisplayData::WorldName' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, WorldDirectoryName) == 0x000010, "Member 'FPalUILocalWorldDisplayData::WorldDirectoryName' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, PlayerName) == 0x000020, "Member 'FPalUILocalWorldDisplayData::PlayerName' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, PlayerLevel) == 0x000030, "Member 'FPalUILocalWorldDisplayData::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, Day) == 0x000034, "Member 'FPalUILocalWorldDisplayData::Day' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, Timestamp) == 0x000038, "Member 'FPalUILocalWorldDisplayData::Timestamp' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, DirectoryPath) == 0x000040, "Member 'FPalUILocalWorldDisplayData::DirectoryPath' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, CanMultiplay) == 0x000050, "Member 'FPalUILocalWorldDisplayData::CanMultiplay' has a wrong offset!");
static_assert(offsetof(FPalUILocalWorldDisplayData, BaseInfoSaveDataType) == 0x000051, "Member 'FPalUILocalWorldDisplayData::BaseInfoSaveDataType' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_PalMonsterData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_PalMonsterData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_PalMonsterData) == 0x000004, "Wrong alignment on FPalDataTableRowName_PalMonsterData");
static_assert(sizeof(FPalDataTableRowName_PalMonsterData) == 0x000008, "Wrong size on FPalDataTableRowName_PalMonsterData");
static_assert(offsetof(FPalDataTableRowName_PalMonsterData, Key) == 0x000000, "Member 'FPalDataTableRowName_PalMonsterData::Key' has a wrong offset!");

// ScriptStruct Pal.PalPassivePartnerSkillItemParameter
// 0x0018 (0x0018 - 0x0000)
struct FPalPassivePartnerSkillItemParameter final
{
public:
	EPalItemTypeA                                 ItemTypeA;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalItemTypeB                                 ItemTypeB;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalDataTableRowName_ItemData>  ItemIds;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassivePartnerSkillItemParameter) == 0x000008, "Wrong alignment on FPalPassivePartnerSkillItemParameter");
static_assert(sizeof(FPalPassivePartnerSkillItemParameter) == 0x000018, "Wrong size on FPalPassivePartnerSkillItemParameter");
static_assert(offsetof(FPalPassivePartnerSkillItemParameter, ItemTypeA) == 0x000000, "Member 'FPalPassivePartnerSkillItemParameter::ItemTypeA' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillItemParameter, ItemTypeB) == 0x000001, "Member 'FPalPassivePartnerSkillItemParameter::ItemTypeB' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillItemParameter, ItemIds) == 0x000008, "Member 'FPalPassivePartnerSkillItemParameter::ItemIds' has a wrong offset!");

// ScriptStruct Pal.PalPassivePartnerSkillParameters
// 0x0070 (0x0070 - 0x0000)
struct FPalPassivePartnerSkillParameters final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerTypeFlags;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorkType                                  WorkType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalDataTableRowName_MapObjectData> MapObjectId;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDataTableRowName_ItemData>  ItemId;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          AssignOthers;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               TargetElementType;                                 // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256F[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalDataTableRowName_PalMonsterData> PalIds;                                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNotAssignSelf;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2570[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalPassivePartnerSkillItemParameter   ItemParam;                                         // 0x0050(0x0018)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_2571[0x8];                                     // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPassivePartnerSkillParameters) == 0x000008, "Wrong alignment on FPalPassivePartnerSkillParameters");
static_assert(sizeof(FPalPassivePartnerSkillParameters) == 0x000070, "Wrong size on FPalPassivePartnerSkillParameters");
static_assert(offsetof(FPalPassivePartnerSkillParameters, DelayTime) == 0x000000, "Member 'FPalPassivePartnerSkillParameters::DelayTime' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, TriggerTypeFlags) == 0x000004, "Member 'FPalPassivePartnerSkillParameters::TriggerTypeFlags' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, WorkType) == 0x000008, "Member 'FPalPassivePartnerSkillParameters::WorkType' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, MapObjectId) == 0x000010, "Member 'FPalPassivePartnerSkillParameters::MapObjectId' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, ItemId) == 0x000020, "Member 'FPalPassivePartnerSkillParameters::ItemId' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, AssignOthers) == 0x000030, "Member 'FPalPassivePartnerSkillParameters::AssignOthers' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, TargetElementType) == 0x000031, "Member 'FPalPassivePartnerSkillParameters::TargetElementType' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, PalIds) == 0x000038, "Member 'FPalPassivePartnerSkillParameters::PalIds' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, bNotAssignSelf) == 0x000048, "Member 'FPalPassivePartnerSkillParameters::bNotAssignSelf' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillParameters, ItemParam) == 0x000050, "Member 'FPalPassivePartnerSkillParameters::ItemParam' has a wrong offset!");

// ScriptStruct Pal.PalGotStatusPoint
// 0x000C (0x000C - 0x0000)
struct FPalGotStatusPoint final
{
public:
	class FName                                   StatusName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusPoint;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGotStatusPoint) == 0x000004, "Wrong alignment on FPalGotStatusPoint");
static_assert(sizeof(FPalGotStatusPoint) == 0x00000C, "Wrong size on FPalGotStatusPoint");
static_assert(offsetof(FPalGotStatusPoint, StatusName) == 0x000000, "Member 'FPalGotStatusPoint::StatusName' has a wrong offset!");
static_assert(offsetof(FPalGotStatusPoint, StatusPoint) == 0x000008, "Member 'FPalGotStatusPoint::StatusPoint' has a wrong offset!");

// ScriptStruct Pal.PalContainerId
// 0x0010 (0x0010 - 0x0000)
struct FPalContainerId final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalContainerId) == 0x000004, "Wrong alignment on FPalContainerId");
static_assert(sizeof(FPalContainerId) == 0x000010, "Wrong size on FPalContainerId");
static_assert(offsetof(FPalContainerId, ID) == 0x000000, "Member 'FPalContainerId::ID' has a wrong offset!");

// ScriptStruct Pal.FixedPoint64
// 0x0008 (0x0008 - 0x0000)
struct FFixedPoint64 final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFixedPoint64) == 0x000008, "Wrong alignment on FFixedPoint64");
static_assert(sizeof(FFixedPoint64) == 0x000008, "Wrong size on FFixedPoint64");
static_assert(offsetof(FFixedPoint64, Value) == 0x000000, "Member 'FFixedPoint64::Value' has a wrong offset!");

// ScriptStruct Pal.PalWorkSuitabilityInfo
// 0x0008 (0x0008 - 0x0000)
struct FPalWorkSuitabilityInfo final
{
public:
	EPalWorkSuitability                           WorkSuitability;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2572[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkSuitabilityInfo) == 0x000004, "Wrong alignment on FPalWorkSuitabilityInfo");
static_assert(sizeof(FPalWorkSuitabilityInfo) == 0x000008, "Wrong size on FPalWorkSuitabilityInfo");
static_assert(offsetof(FPalWorkSuitabilityInfo, WorkSuitability) == 0x000000, "Member 'FPalWorkSuitabilityInfo::WorkSuitability' has a wrong offset!");
static_assert(offsetof(FPalWorkSuitabilityInfo, Rank) == 0x000004, "Member 'FPalWorkSuitabilityInfo::Rank' has a wrong offset!");

// ScriptStruct Pal.PalWorkSuitabilityPreferenceInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalWorkSuitabilityPreferenceInfo final
{
public:
	TArray<EPalWorkSuitability>                   OffWorkSuitabilityList;                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bAllowBaseCampBattle;                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2573[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorkSuitabilityPreferenceInfo) == 0x000008, "Wrong alignment on FPalWorkSuitabilityPreferenceInfo");
static_assert(sizeof(FPalWorkSuitabilityPreferenceInfo) == 0x000018, "Wrong size on FPalWorkSuitabilityPreferenceInfo");
static_assert(offsetof(FPalWorkSuitabilityPreferenceInfo, OffWorkSuitabilityList) == 0x000000, "Member 'FPalWorkSuitabilityPreferenceInfo::OffWorkSuitabilityList' has a wrong offset!");
static_assert(offsetof(FPalWorkSuitabilityPreferenceInfo, bAllowBaseCampBattle) == 0x000010, "Member 'FPalWorkSuitabilityPreferenceInfo::bAllowBaseCampBattle' has a wrong offset!");

// ScriptStruct Pal.PalCharacterSlotId
// 0x0014 (0x0014 - 0x0000)
struct FPalCharacterSlotId final
{
public:
	struct FPalContainerId                        ContainerId;                                       // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterSlotId) == 0x000004, "Wrong alignment on FPalCharacterSlotId");
static_assert(sizeof(FPalCharacterSlotId) == 0x000014, "Wrong size on FPalCharacterSlotId");
static_assert(offsetof(FPalCharacterSlotId, ContainerId) == 0x000000, "Member 'FPalCharacterSlotId::ContainerId' has a wrong offset!");
static_assert(offsetof(FPalCharacterSlotId, SlotIndex) == 0x000010, "Member 'FPalCharacterSlotId::SlotIndex' has a wrong offset!");

// ScriptStruct Pal.FloatContainer_FloatPair
// 0x000C (0x000C - 0x0000)
struct FFloatContainer_FloatPair final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatContainer_FloatPair) == 0x000004, "Wrong alignment on FFloatContainer_FloatPair");
static_assert(sizeof(FFloatContainer_FloatPair) == 0x00000C, "Wrong size on FFloatContainer_FloatPair");
static_assert(offsetof(FFloatContainer_FloatPair, Key) == 0x000000, "Member 'FFloatContainer_FloatPair::Key' has a wrong offset!");
static_assert(offsetof(FFloatContainer_FloatPair, Value) == 0x000008, "Member 'FFloatContainer_FloatPair::Value' has a wrong offset!");

// ScriptStruct Pal.FloatContainer
// 0x0010 (0x0010 - 0x0000)
struct FFloatContainer final
{
public:
	TArray<struct FFloatContainer_FloatPair>      Values;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFloatContainer) == 0x000008, "Wrong alignment on FFloatContainer");
static_assert(sizeof(FFloatContainer) == 0x000010, "Wrong size on FFloatContainer");
static_assert(offsetof(FFloatContainer, Values) == 0x000000, "Member 'FFloatContainer::Values' has a wrong offset!");

// ScriptStruct Pal.PalFoodRegeneEffectParameter
// 0x000C (0x000C - 0x0000)
struct FPalFoodRegeneEffectParameter final
{
public:
	EPalFoodStatusEffectType                      EffectType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2574[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interval;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoodRegeneEffectParameter) == 0x000004, "Wrong alignment on FPalFoodRegeneEffectParameter");
static_assert(sizeof(FPalFoodRegeneEffectParameter) == 0x00000C, "Wrong size on FPalFoodRegeneEffectParameter");
static_assert(offsetof(FPalFoodRegeneEffectParameter, EffectType) == 0x000000, "Member 'FPalFoodRegeneEffectParameter::EffectType' has a wrong offset!");
static_assert(offsetof(FPalFoodRegeneEffectParameter, Value) == 0x000004, "Member 'FPalFoodRegeneEffectParameter::Value' has a wrong offset!");
static_assert(offsetof(FPalFoodRegeneEffectParameter, Interval) == 0x000008, "Member 'FPalFoodRegeneEffectParameter::Interval' has a wrong offset!");

// ScriptStruct Pal.PalFoodRegeneInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalFoodRegeneInfo final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectTime;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingTime;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalFoodRegeneEffectParameter>  RegeneEfectParameters;                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoodRegeneInfo) == 0x000008, "Wrong alignment on FPalFoodRegeneInfo");
static_assert(sizeof(FPalFoodRegeneInfo) == 0x000020, "Wrong size on FPalFoodRegeneInfo");
static_assert(offsetof(FPalFoodRegeneInfo, ItemId) == 0x000000, "Member 'FPalFoodRegeneInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FPalFoodRegeneInfo, EffectTime) == 0x000008, "Member 'FPalFoodRegeneInfo::EffectTime' has a wrong offset!");
static_assert(offsetof(FPalFoodRegeneInfo, RemainingTime) == 0x00000C, "Member 'FPalFoodRegeneInfo::RemainingTime' has a wrong offset!");
static_assert(offsetof(FPalFoodRegeneInfo, RegeneEfectParameters) == 0x000010, "Member 'FPalFoodRegeneInfo::RegeneEfectParameters' has a wrong offset!");

// ScriptStruct Pal.PalIndividualCharacterCacheParameter
// 0x0040 (0x0040 - 0x0000)
struct FPalIndividualCharacterCacheParameter final
{
public:
	struct FGuid                                  GroupID;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSleeping;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2575[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InvaderTargetBaseCampId;                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalInvaderType                               InvaderType;                                       // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2576[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilteredNickName;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIndividualCharacterCacheParameter) == 0x000008, "Wrong alignment on FPalIndividualCharacterCacheParameter");
static_assert(sizeof(FPalIndividualCharacterCacheParameter) == 0x000040, "Wrong size on FPalIndividualCharacterCacheParameter");
static_assert(offsetof(FPalIndividualCharacterCacheParameter, GroupID) == 0x000000, "Member 'FPalIndividualCharacterCacheParameter::GroupID' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterCacheParameter, bSleeping) == 0x000010, "Member 'FPalIndividualCharacterCacheParameter::bSleeping' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterCacheParameter, InvaderTargetBaseCampId) == 0x000018, "Member 'FPalIndividualCharacterCacheParameter::InvaderTargetBaseCampId' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterCacheParameter, InvaderType) == 0x000028, "Member 'FPalIndividualCharacterCacheParameter::InvaderType' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterCacheParameter, FilteredNickName) == 0x000030, "Member 'FPalIndividualCharacterCacheParameter::FilteredNickName' has a wrong offset!");

// ScriptStruct Pal.PalIndividualCharacterSaveParameter
// 0x0280 (0x0280 - 0x0000)
struct FPalIndividualCharacterSaveParameter final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueNPCID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalGenderType                                Gender;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2577[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APalCharacter>              CharacterClass;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankUpExp;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_HP;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_Attack;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_Defence;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank_CraftSpeed;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NickName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRarePal;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2578[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPalWazaID>                            EquipWaza;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPalWazaID>                            MasteredWaza;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFixedPoint64                          HP;                                                // 0x0078(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Talent_HP;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Talent_Melee;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Talent_Shot;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Talent_Defense;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStomach;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalStatusPhysicalHealthType                  PhysicalHealth;                                    // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBaseCampWorkerSickType                    WorkerSick;                                        // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2579[0x2];                                     // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PassiveSkillList;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DyingTimer;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257A[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFixedPoint64                          MP;                                                // 0x00B0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsPlayer;                                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257B[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              OwnedTime;                                         // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerPlayerUId;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          OldOwnerPlayerUIds;                                // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FFixedPoint64                          MaxHP;                                             // 0x00E8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Support;                                           // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftSpeed;                                        // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalWorkSuitabilityInfo>        CraftSpeeds;                                       // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFixedPoint64                          ShieldHP;                                          // 0x0108(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFixedPoint64                          ShieldMaxHP;                                       // 0x0110(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFixedPoint64                          MaxMP;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFixedPoint64                          MaxSP;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EPalStatusHungerType                          HungerType;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257C[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SanityValue;                                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBaseCampWorkerEventType                   BaseCampWorkerEventType;                           // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257D[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseCampWorkerEventProgressTime;                   // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalContainerId                        ItemContainerId;                                   // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalContainerId                        EquipItemContainerId;                              // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalCharacterSlotId                    SlotID;                                            // 0x0158(0x0014)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxFullStomach;                                    // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStomachDecreaseRate_Tribe;                     // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedStatusPoint;                                 // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalGotStatusPoint>             GotStatusPointList;                                // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalGotStatusPoint>             GotExStatusPointList;                              // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFloatContainer                        DecreaseFullStomachRates;                          // 0x0198(0x0010)(NativeAccessSpecifierPublic)
	struct FFloatContainer                        AffectSanityRates;                                 // 0x01A8(0x0010)(NativeAccessSpecifierPublic)
	struct FFloatContainer                        CraftSpeedRates;                                   // 0x01B8(0x0010)(NativeAccessSpecifierPublic)
	struct FVector                                LastJumpedLocation;                                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FoodWithStatusEffect;                              // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tiemr_FoodWithStatusEffect;                        // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257E[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalFoodRegeneInfo                     FoodRegeneEffectInfo;                              // 0x01F0(0x0020)(NativeAccessSpecifierPublic)
	EPalWorkSuitability                           CurrentWorkSuitability;                            // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257F[0x7];                                     // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalWorkSuitabilityPreferenceInfo      WorkSuitabilityOptionInfo;                         // 0x0218(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bAppliedDeathPenarty;                              // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2580[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PalReviveTimer;                                    // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceID;                                           // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2581[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalIndividualCharacterCacheParameter  Dynamic;                                           // 0x0240(0x0040)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIndividualCharacterSaveParameter) == 0x000008, "Wrong alignment on FPalIndividualCharacterSaveParameter");
static_assert(sizeof(FPalIndividualCharacterSaveParameter) == 0x000280, "Wrong size on FPalIndividualCharacterSaveParameter");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, CharacterID) == 0x000000, "Member 'FPalIndividualCharacterSaveParameter::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, UniqueNPCID) == 0x000008, "Member 'FPalIndividualCharacterSaveParameter::UniqueNPCID' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Gender) == 0x000010, "Member 'FPalIndividualCharacterSaveParameter::Gender' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, CharacterClass) == 0x000018, "Member 'FPalIndividualCharacterSaveParameter::CharacterClass' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Level) == 0x000020, "Member 'FPalIndividualCharacterSaveParameter::Level' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Rank) == 0x000024, "Member 'FPalIndividualCharacterSaveParameter::Rank' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, RankUpExp) == 0x000028, "Member 'FPalIndividualCharacterSaveParameter::RankUpExp' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Rank_HP) == 0x00002C, "Member 'FPalIndividualCharacterSaveParameter::Rank_HP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Rank_Attack) == 0x000030, "Member 'FPalIndividualCharacterSaveParameter::Rank_Attack' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Rank_Defence) == 0x000034, "Member 'FPalIndividualCharacterSaveParameter::Rank_Defence' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Rank_CraftSpeed) == 0x000038, "Member 'FPalIndividualCharacterSaveParameter::Rank_CraftSpeed' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Exp) == 0x00003C, "Member 'FPalIndividualCharacterSaveParameter::Exp' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, NickName) == 0x000040, "Member 'FPalIndividualCharacterSaveParameter::NickName' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, IsRarePal) == 0x000050, "Member 'FPalIndividualCharacterSaveParameter::IsRarePal' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, EquipWaza) == 0x000058, "Member 'FPalIndividualCharacterSaveParameter::EquipWaza' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, MasteredWaza) == 0x000068, "Member 'FPalIndividualCharacterSaveParameter::MasteredWaza' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, HP) == 0x000078, "Member 'FPalIndividualCharacterSaveParameter::HP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Talent_HP) == 0x000080, "Member 'FPalIndividualCharacterSaveParameter::Talent_HP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Talent_Melee) == 0x000084, "Member 'FPalIndividualCharacterSaveParameter::Talent_Melee' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Talent_Shot) == 0x000088, "Member 'FPalIndividualCharacterSaveParameter::Talent_Shot' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Talent_Defense) == 0x00008C, "Member 'FPalIndividualCharacterSaveParameter::Talent_Defense' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, FullStomach) == 0x000090, "Member 'FPalIndividualCharacterSaveParameter::FullStomach' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, PhysicalHealth) == 0x000094, "Member 'FPalIndividualCharacterSaveParameter::PhysicalHealth' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, WorkerSick) == 0x000095, "Member 'FPalIndividualCharacterSaveParameter::WorkerSick' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, PassiveSkillList) == 0x000098, "Member 'FPalIndividualCharacterSaveParameter::PassiveSkillList' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, DyingTimer) == 0x0000A8, "Member 'FPalIndividualCharacterSaveParameter::DyingTimer' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, MP) == 0x0000B0, "Member 'FPalIndividualCharacterSaveParameter::MP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, IsPlayer) == 0x0000B8, "Member 'FPalIndividualCharacterSaveParameter::IsPlayer' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, OwnedTime) == 0x0000C0, "Member 'FPalIndividualCharacterSaveParameter::OwnedTime' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, OwnerPlayerUId) == 0x0000C8, "Member 'FPalIndividualCharacterSaveParameter::OwnerPlayerUId' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, OldOwnerPlayerUIds) == 0x0000D8, "Member 'FPalIndividualCharacterSaveParameter::OldOwnerPlayerUIds' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, MaxHP) == 0x0000E8, "Member 'FPalIndividualCharacterSaveParameter::MaxHP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Support) == 0x0000F0, "Member 'FPalIndividualCharacterSaveParameter::Support' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, CraftSpeed) == 0x0000F4, "Member 'FPalIndividualCharacterSaveParameter::CraftSpeed' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, CraftSpeeds) == 0x0000F8, "Member 'FPalIndividualCharacterSaveParameter::CraftSpeeds' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, ShieldHP) == 0x000108, "Member 'FPalIndividualCharacterSaveParameter::ShieldHP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, ShieldMaxHP) == 0x000110, "Member 'FPalIndividualCharacterSaveParameter::ShieldMaxHP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, MaxMP) == 0x000118, "Member 'FPalIndividualCharacterSaveParameter::MaxMP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, MaxSP) == 0x000120, "Member 'FPalIndividualCharacterSaveParameter::MaxSP' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, HungerType) == 0x000128, "Member 'FPalIndividualCharacterSaveParameter::HungerType' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, SanityValue) == 0x00012C, "Member 'FPalIndividualCharacterSaveParameter::SanityValue' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, BaseCampWorkerEventType) == 0x000130, "Member 'FPalIndividualCharacterSaveParameter::BaseCampWorkerEventType' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, BaseCampWorkerEventProgressTime) == 0x000134, "Member 'FPalIndividualCharacterSaveParameter::BaseCampWorkerEventProgressTime' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, ItemContainerId) == 0x000138, "Member 'FPalIndividualCharacterSaveParameter::ItemContainerId' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, EquipItemContainerId) == 0x000148, "Member 'FPalIndividualCharacterSaveParameter::EquipItemContainerId' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, SlotID) == 0x000158, "Member 'FPalIndividualCharacterSaveParameter::SlotID' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, MaxFullStomach) == 0x00016C, "Member 'FPalIndividualCharacterSaveParameter::MaxFullStomach' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, FullStomachDecreaseRate_Tribe) == 0x000170, "Member 'FPalIndividualCharacterSaveParameter::FullStomachDecreaseRate_Tribe' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, UnusedStatusPoint) == 0x000174, "Member 'FPalIndividualCharacterSaveParameter::UnusedStatusPoint' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, GotStatusPointList) == 0x000178, "Member 'FPalIndividualCharacterSaveParameter::GotStatusPointList' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, GotExStatusPointList) == 0x000188, "Member 'FPalIndividualCharacterSaveParameter::GotExStatusPointList' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, DecreaseFullStomachRates) == 0x000198, "Member 'FPalIndividualCharacterSaveParameter::DecreaseFullStomachRates' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, AffectSanityRates) == 0x0001A8, "Member 'FPalIndividualCharacterSaveParameter::AffectSanityRates' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, CraftSpeedRates) == 0x0001B8, "Member 'FPalIndividualCharacterSaveParameter::CraftSpeedRates' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, LastJumpedLocation) == 0x0001C8, "Member 'FPalIndividualCharacterSaveParameter::LastJumpedLocation' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, FoodWithStatusEffect) == 0x0001E0, "Member 'FPalIndividualCharacterSaveParameter::FoodWithStatusEffect' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Tiemr_FoodWithStatusEffect) == 0x0001E8, "Member 'FPalIndividualCharacterSaveParameter::Tiemr_FoodWithStatusEffect' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, FoodRegeneEffectInfo) == 0x0001F0, "Member 'FPalIndividualCharacterSaveParameter::FoodRegeneEffectInfo' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, CurrentWorkSuitability) == 0x000210, "Member 'FPalIndividualCharacterSaveParameter::CurrentWorkSuitability' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, WorkSuitabilityOptionInfo) == 0x000218, "Member 'FPalIndividualCharacterSaveParameter::WorkSuitabilityOptionInfo' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, bAppliedDeathPenarty) == 0x000230, "Member 'FPalIndividualCharacterSaveParameter::bAppliedDeathPenarty' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, PalReviveTimer) == 0x000234, "Member 'FPalIndividualCharacterSaveParameter::PalReviveTimer' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, VoiceID) == 0x000238, "Member 'FPalIndividualCharacterSaveParameter::VoiceID' has a wrong offset!");
static_assert(offsetof(FPalIndividualCharacterSaveParameter, Dynamic) == 0x000240, "Member 'FPalIndividualCharacterSaveParameter::Dynamic' has a wrong offset!");

// ScriptStruct Pal.PalPlayerInitializeParameter
// 0x0280 (0x0280 - 0x0000)
struct FPalPlayerInitializeParameter final
{
public:
	struct FPalIndividualCharacterSaveParameter   InitParam;                                         // 0x0000(0x0280)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerInitializeParameter) == 0x000008, "Wrong alignment on FPalPlayerInitializeParameter");
static_assert(sizeof(FPalPlayerInitializeParameter) == 0x000280, "Wrong size on FPalPlayerInitializeParameter");
static_assert(offsetof(FPalPlayerInitializeParameter, InitParam) == 0x000000, "Member 'FPalPlayerInitializeParameter::InitParam' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_PassiveSkillData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_PassiveSkillData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_PassiveSkillData) == 0x000004, "Wrong alignment on FPalDataTableRowName_PassiveSkillData");
static_assert(sizeof(FPalDataTableRowName_PassiveSkillData) == 0x000008, "Wrong size on FPalDataTableRowName_PassiveSkillData");
static_assert(offsetof(FPalDataTableRowName_PassiveSkillData, Key) == 0x000000, "Member 'FPalDataTableRowName_PassiveSkillData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDebugAttachPassiveSkillInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalDebugAttachPassiveSkillInfo final
{
public:
	TArray<struct FPalDataTableRowName_PassiveSkillData> Skill;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDebugAttachPassiveSkillInfo) == 0x000008, "Wrong alignment on FPalDebugAttachPassiveSkillInfo");
static_assert(sizeof(FPalDebugAttachPassiveSkillInfo) == 0x000010, "Wrong size on FPalDebugAttachPassiveSkillInfo");
static_assert(offsetof(FPalDebugAttachPassiveSkillInfo, Skill) == 0x000000, "Member 'FPalDebugAttachPassiveSkillInfo::Skill' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampPassiveEffectRepInfo
// 0x000C (0x0018 - 0x000C)
struct FPalBaseCampPassiveEffectRepInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_2582[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalBaseCampPassiveEffectBase*          Effect;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampPassiveEffectRepInfo) == 0x000008, "Wrong alignment on FPalBaseCampPassiveEffectRepInfo");
static_assert(sizeof(FPalBaseCampPassiveEffectRepInfo) == 0x000018, "Wrong size on FPalBaseCampPassiveEffectRepInfo");
static_assert(offsetof(FPalBaseCampPassiveEffectRepInfo, Effect) == 0x000010, "Member 'FPalBaseCampPassiveEffectRepInfo::Effect' has a wrong offset!");

// ScriptStruct Pal.PalFastBaseCampPassiveEffectRepInfoArray
// 0x0010 (0x0118 - 0x0108)
struct FPalFastBaseCampPassiveEffectRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalBaseCampPassiveEffectRepInfo> Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFastBaseCampPassiveEffectRepInfoArray) == 0x000008, "Wrong alignment on FPalFastBaseCampPassiveEffectRepInfoArray");
static_assert(sizeof(FPalFastBaseCampPassiveEffectRepInfoArray) == 0x000118, "Wrong size on FPalFastBaseCampPassiveEffectRepInfoArray");
static_assert(offsetof(FPalFastBaseCampPassiveEffectRepInfoArray, Items) == 0x000108, "Member 'FPalFastBaseCampPassiveEffectRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.DelegateTickFunction
// 0x0010 (0x0038 - 0x0028)
struct FDelegateTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_2583[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelegateTickFunction) == 0x000008, "Wrong alignment on FDelegateTickFunction");
static_assert(sizeof(FDelegateTickFunction) == 0x000038, "Wrong size on FDelegateTickFunction");

// ScriptStruct Pal.PalMapObjectDisposeOptions
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPalMapObjectDisposeOptions final
{
public:
	uint8                                         Pad_2584[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectDisposeOptions) == 0x000008, "Wrong alignment on FPalMapObjectDisposeOptions");
static_assert(sizeof(FPalMapObjectDisposeOptions) == 0x000010, "Wrong size on FPalMapObjectDisposeOptions");

// ScriptStruct Pal.PalMapObjectMeshVisibleData
// 0x0030 (0x0030 - 0x0000)
struct FPalMapObjectMeshVisibleData final
{
public:
	struct FComponentReference                    MeshComponentRef;                                  // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         VisibleHpPercentageThreshold;                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2585[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectMeshVisibleData) == 0x000008, "Wrong alignment on FPalMapObjectMeshVisibleData");
static_assert(sizeof(FPalMapObjectMeshVisibleData) == 0x000030, "Wrong size on FPalMapObjectMeshVisibleData");
static_assert(offsetof(FPalMapObjectMeshVisibleData, MeshComponentRef) == 0x000000, "Member 'FPalMapObjectMeshVisibleData::MeshComponentRef' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMeshVisibleData, VisibleHpPercentageThreshold) == 0x000028, "Member 'FPalMapObjectMeshVisibleData::VisibleHpPercentageThreshold' has a wrong offset!");

// ScriptStruct Pal.PalCharacterCreationColorPresetDataRow
// 0x0010 (0x0018 - 0x0008)
struct FPalCharacterCreationColorPresetDataRow final : public FTableRowBase
{
public:
	TArray<struct FLinearColor>                   Colors;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterCreationColorPresetDataRow) == 0x000008, "Wrong alignment on FPalCharacterCreationColorPresetDataRow");
static_assert(sizeof(FPalCharacterCreationColorPresetDataRow) == 0x000018, "Wrong size on FPalCharacterCreationColorPresetDataRow");
static_assert(offsetof(FPalCharacterCreationColorPresetDataRow, Colors) == 0x000008, "Member 'FPalCharacterCreationColorPresetDataRow::Colors' has a wrong offset!");

// ScriptStruct Pal.PalBuildObjectMeshDefaultSetting
// 0x0008 (0x0008 - 0x0000)
struct FPalBuildObjectMeshDefaultSetting final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBuildObjectMeshDefaultSetting) == 0x000004, "Wrong alignment on FPalBuildObjectMeshDefaultSetting");
static_assert(sizeof(FPalBuildObjectMeshDefaultSetting) == 0x000008, "Wrong size on FPalBuildObjectMeshDefaultSetting");
static_assert(offsetof(FPalBuildObjectMeshDefaultSetting, ProfileName) == 0x000000, "Member 'FPalBuildObjectMeshDefaultSetting::ProfileName' has a wrong offset!");

// ScriptStruct Pal.PalCharacterStoredParameterId
// 0x0010 (0x0010 - 0x0000)
struct FPalCharacterStoredParameterId final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterStoredParameterId) == 0x000004, "Wrong alignment on FPalCharacterStoredParameterId");
static_assert(sizeof(FPalCharacterStoredParameterId) == 0x000010, "Wrong size on FPalCharacterStoredParameterId");
static_assert(offsetof(FPalCharacterStoredParameterId, ID) == 0x000000, "Member 'FPalCharacterStoredParameterId::ID' has a wrong offset!");

// ScriptStruct Pal.PalPassiveSkillEffect
// 0x0030 (0x0030 - 0x0000)
struct FPalPassiveSkillEffect final
{
public:
	EPalPassiveSkillEffectType                    Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2586[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Flags;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPalPassivePartnerSkillItemParameter   ItemParam;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassiveSkillEffect) == 0x000008, "Wrong alignment on FPalPassiveSkillEffect");
static_assert(sizeof(FPalPassiveSkillEffect) == 0x000030, "Wrong size on FPalPassiveSkillEffect");
static_assert(offsetof(FPalPassiveSkillEffect, Type) == 0x000000, "Member 'FPalPassiveSkillEffect::Type' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillEffect, Value) == 0x000004, "Member 'FPalPassiveSkillEffect::Value' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillEffect, Flags) == 0x000008, "Member 'FPalPassiveSkillEffect::Flags' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillEffect, ItemParam) == 0x000018, "Member 'FPalPassiveSkillEffect::ItemParam' has a wrong offset!");

// ScriptStruct Pal.PalOptionWorldPresetRow
// 0x0088 (0x0090 - 0x0008)
struct FPalOptionWorldPresetRow final : public FTableRowBase
{
public:
	EPalOptionWorldDifficulty                     Diffculty;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2587[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DayTimeSpeedRate;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightTimeSpeedRate;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpRate;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalCaptureRate;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalSpawnNumRate;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalDamageRateAttack;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalDamageRateDefense;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerDamageRateAttack;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerDamageRateDefense;                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerStomachDecreaceRate;                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerStaminaDecreaceRate;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerAutoHPRegeneRate;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerAutoHpRegeneRateInSleep;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalStomachDecreaceRate;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalStaminaDecreaceRate;                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalAutoHPRegeneRate;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalAutoHpRegeneRateInSleep;                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildObjectDamageRate;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildObjectDeteriorationDamageRate;                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollectionDropRate;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollectionObjectHpRate;                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollectionObjectRespawnSpeedRate;                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyDropItemRate;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalOptionWorldDeathPenalty                   DeathPenalty;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveUNKO;                                       // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2588[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DropItemMaxNum_UNKO;                               // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInvaderEnemy;                               // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2589[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DropItemMaxNum;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoResetGuildNoOnlinePlayers;                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258A[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoResetGuildTimeNoOnlinePlayers;                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildPlayerMaxNum;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalEggDefaultHatchingTime;                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseCampWorkerMaxNum;                              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258B[0x4];                                     // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalOptionWorldPresetRow) == 0x000008, "Wrong alignment on FPalOptionWorldPresetRow");
static_assert(sizeof(FPalOptionWorldPresetRow) == 0x000090, "Wrong size on FPalOptionWorldPresetRow");
static_assert(offsetof(FPalOptionWorldPresetRow, Diffculty) == 0x000008, "Member 'FPalOptionWorldPresetRow::Diffculty' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, DayTimeSpeedRate) == 0x00000C, "Member 'FPalOptionWorldPresetRow::DayTimeSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, NightTimeSpeedRate) == 0x000010, "Member 'FPalOptionWorldPresetRow::NightTimeSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, ExpRate) == 0x000014, "Member 'FPalOptionWorldPresetRow::ExpRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalCaptureRate) == 0x000018, "Member 'FPalOptionWorldPresetRow::PalCaptureRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalSpawnNumRate) == 0x00001C, "Member 'FPalOptionWorldPresetRow::PalSpawnNumRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalDamageRateAttack) == 0x000020, "Member 'FPalOptionWorldPresetRow::PalDamageRateAttack' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalDamageRateDefense) == 0x000024, "Member 'FPalOptionWorldPresetRow::PalDamageRateDefense' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PlayerDamageRateAttack) == 0x000028, "Member 'FPalOptionWorldPresetRow::PlayerDamageRateAttack' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PlayerDamageRateDefense) == 0x00002C, "Member 'FPalOptionWorldPresetRow::PlayerDamageRateDefense' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PlayerStomachDecreaceRate) == 0x000030, "Member 'FPalOptionWorldPresetRow::PlayerStomachDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PlayerStaminaDecreaceRate) == 0x000034, "Member 'FPalOptionWorldPresetRow::PlayerStaminaDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PlayerAutoHPRegeneRate) == 0x000038, "Member 'FPalOptionWorldPresetRow::PlayerAutoHPRegeneRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PlayerAutoHpRegeneRateInSleep) == 0x00003C, "Member 'FPalOptionWorldPresetRow::PlayerAutoHpRegeneRateInSleep' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalStomachDecreaceRate) == 0x000040, "Member 'FPalOptionWorldPresetRow::PalStomachDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalStaminaDecreaceRate) == 0x000044, "Member 'FPalOptionWorldPresetRow::PalStaminaDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalAutoHPRegeneRate) == 0x000048, "Member 'FPalOptionWorldPresetRow::PalAutoHPRegeneRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalAutoHpRegeneRateInSleep) == 0x00004C, "Member 'FPalOptionWorldPresetRow::PalAutoHpRegeneRateInSleep' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, BuildObjectDamageRate) == 0x000050, "Member 'FPalOptionWorldPresetRow::BuildObjectDamageRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, BuildObjectDeteriorationDamageRate) == 0x000054, "Member 'FPalOptionWorldPresetRow::BuildObjectDeteriorationDamageRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, CollectionDropRate) == 0x000058, "Member 'FPalOptionWorldPresetRow::CollectionDropRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, CollectionObjectHpRate) == 0x00005C, "Member 'FPalOptionWorldPresetRow::CollectionObjectHpRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, CollectionObjectRespawnSpeedRate) == 0x000060, "Member 'FPalOptionWorldPresetRow::CollectionObjectRespawnSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, EnemyDropItemRate) == 0x000064, "Member 'FPalOptionWorldPresetRow::EnemyDropItemRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, DeathPenalty) == 0x000068, "Member 'FPalOptionWorldPresetRow::DeathPenalty' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, bActiveUNKO) == 0x000069, "Member 'FPalOptionWorldPresetRow::bActiveUNKO' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, DropItemMaxNum_UNKO) == 0x00006C, "Member 'FPalOptionWorldPresetRow::DropItemMaxNum_UNKO' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, bEnableInvaderEnemy) == 0x000070, "Member 'FPalOptionWorldPresetRow::bEnableInvaderEnemy' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, DropItemMaxNum) == 0x000074, "Member 'FPalOptionWorldPresetRow::DropItemMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, bAutoResetGuildNoOnlinePlayers) == 0x000078, "Member 'FPalOptionWorldPresetRow::bAutoResetGuildNoOnlinePlayers' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, AutoResetGuildTimeNoOnlinePlayers) == 0x00007C, "Member 'FPalOptionWorldPresetRow::AutoResetGuildTimeNoOnlinePlayers' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, GuildPlayerMaxNum) == 0x000080, "Member 'FPalOptionWorldPresetRow::GuildPlayerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, PalEggDefaultHatchingTime) == 0x000084, "Member 'FPalOptionWorldPresetRow::PalEggDefaultHatchingTime' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldPresetRow, BaseCampWorkerMaxNum) == 0x000088, "Member 'FPalOptionWorldPresetRow::BaseCampWorkerMaxNum' has a wrong offset!");

// ScriptStruct Pal.PalInstanceID
// 0x0030 (0x0030 - 0x0000)
struct FPalInstanceID final
{
public:
	struct FGuid                                  PlayerUId;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InstanceId;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugName;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInstanceID) == 0x000008, "Wrong alignment on FPalInstanceID");
static_assert(sizeof(FPalInstanceID) == 0x000030, "Wrong size on FPalInstanceID");
static_assert(offsetof(FPalInstanceID, PlayerUId) == 0x000000, "Member 'FPalInstanceID::PlayerUId' has a wrong offset!");
static_assert(offsetof(FPalInstanceID, InstanceId) == 0x000010, "Member 'FPalInstanceID::InstanceId' has a wrong offset!");
static_assert(offsetof(FPalInstanceID, DebugName) == 0x000020, "Member 'FPalInstanceID::DebugName' has a wrong offset!");

// ScriptStruct Pal.PalTalentUpItemDataRow
// 0x0008 (0x0010 - 0x0008)
struct FPalTalentUpItemDataRow final : public FTableRowBase
{
public:
	EPalTalentType                                TalentType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddValue;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalTalentUpItemDataRow) == 0x000008, "Wrong alignment on FPalTalentUpItemDataRow");
static_assert(sizeof(FPalTalentUpItemDataRow) == 0x000010, "Wrong size on FPalTalentUpItemDataRow");
static_assert(offsetof(FPalTalentUpItemDataRow, TalentType) == 0x000008, "Member 'FPalTalentUpItemDataRow::TalentType' has a wrong offset!");
static_assert(offsetof(FPalTalentUpItemDataRow, AddValue) == 0x00000C, "Member 'FPalTalentUpItemDataRow::AddValue' has a wrong offset!");

// ScriptStruct Pal.PalGuildPlayerInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalGuildPlayerInfo final
{
public:
	EPalGuildPlayerStatus                         Status;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastOnlineRealTime;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGuildPlayerInfo) == 0x000008, "Wrong alignment on FPalGuildPlayerInfo");
static_assert(sizeof(FPalGuildPlayerInfo) == 0x000020, "Wrong size on FPalGuildPlayerInfo");
static_assert(offsetof(FPalGuildPlayerInfo, Status) == 0x000000, "Member 'FPalGuildPlayerInfo::Status' has a wrong offset!");
static_assert(offsetof(FPalGuildPlayerInfo, LastOnlineRealTime) == 0x000008, "Member 'FPalGuildPlayerInfo::LastOnlineRealTime' has a wrong offset!");
static_assert(offsetof(FPalGuildPlayerInfo, PlayerName) == 0x000010, "Member 'FPalGuildPlayerInfo::PlayerName' has a wrong offset!");

// ScriptStruct Pal.PalPettingParameter
// 0x000C (0x000C - 0x0000)
struct FPalPettingParameter final
{
public:
	float                                         CameraCenterDistance;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraHeight;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraArmLength;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPettingParameter) == 0x000004, "Wrong alignment on FPalPettingParameter");
static_assert(sizeof(FPalPettingParameter) == 0x00000C, "Wrong size on FPalPettingParameter");
static_assert(offsetof(FPalPettingParameter, CameraCenterDistance) == 0x000000, "Member 'FPalPettingParameter::CameraCenterDistance' has a wrong offset!");
static_assert(offsetof(FPalPettingParameter, CameraHeight) == 0x000004, "Member 'FPalPettingParameter::CameraHeight' has a wrong offset!");
static_assert(offsetof(FPalPettingParameter, CameraArmLength) == 0x000008, "Member 'FPalPettingParameter::CameraArmLength' has a wrong offset!");

// ScriptStruct Pal.BulletHoleDecalInfo
// 0x0030 (0x0030 - 0x0000)
struct FBulletHoleDecalInfo final
{
public:
	TArray<class UMaterialInterface*>             BulletHoleDecals;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                Decal_Size;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Decal_Size_RandomMin;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Decal_Size_RandomMax;                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulletHoleDecalInfo) == 0x000008, "Wrong alignment on FBulletHoleDecalInfo");
static_assert(sizeof(FBulletHoleDecalInfo) == 0x000030, "Wrong size on FBulletHoleDecalInfo");
static_assert(offsetof(FBulletHoleDecalInfo, BulletHoleDecals) == 0x000000, "Member 'FBulletHoleDecalInfo::BulletHoleDecals' has a wrong offset!");
static_assert(offsetof(FBulletHoleDecalInfo, Decal_Size) == 0x000010, "Member 'FBulletHoleDecalInfo::Decal_Size' has a wrong offset!");
static_assert(offsetof(FBulletHoleDecalInfo, Decal_Size_RandomMin) == 0x000028, "Member 'FBulletHoleDecalInfo::Decal_Size_RandomMin' has a wrong offset!");
static_assert(offsetof(FBulletHoleDecalInfo, Decal_Size_RandomMax) == 0x00002C, "Member 'FBulletHoleDecalInfo::Decal_Size_RandomMax' has a wrong offset!");

// ScriptStruct Pal.PalIncidentIdParameter
// 0x0038 (0x0038 - 0x0000)
struct FPalIncidentIdParameter final
{
public:
	class FName                                   IncidentId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IncidentType;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Option;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Args;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Options;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIncidentIdParameter) == 0x000008, "Wrong alignment on FPalIncidentIdParameter");
static_assert(sizeof(FPalIncidentIdParameter) == 0x000038, "Wrong size on FPalIncidentIdParameter");
static_assert(offsetof(FPalIncidentIdParameter, IncidentId) == 0x000000, "Member 'FPalIncidentIdParameter::IncidentId' has a wrong offset!");
static_assert(offsetof(FPalIncidentIdParameter, IncidentType) == 0x000008, "Member 'FPalIncidentIdParameter::IncidentType' has a wrong offset!");
static_assert(offsetof(FPalIncidentIdParameter, Option) == 0x000010, "Member 'FPalIncidentIdParameter::Option' has a wrong offset!");
static_assert(offsetof(FPalIncidentIdParameter, Args) == 0x000018, "Member 'FPalIncidentIdParameter::Args' has a wrong offset!");
static_assert(offsetof(FPalIncidentIdParameter, Options) == 0x000028, "Member 'FPalIncidentIdParameter::Options' has a wrong offset!");

// ScriptStruct Pal.PalPlayerRecordCountMapStruct
// 0x0050 (0x0050 - 0x0000)
struct FPalPlayerRecordCountMapStruct final
{
public:
	TMap<class FName, int64>                      CountMap;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerRecordCountMapStruct) == 0x000008, "Wrong alignment on FPalPlayerRecordCountMapStruct");
static_assert(sizeof(FPalPlayerRecordCountMapStruct) == 0x000050, "Wrong size on FPalPlayerRecordCountMapStruct");
static_assert(offsetof(FPalPlayerRecordCountMapStruct, CountMap) == 0x000000, "Member 'FPalPlayerRecordCountMapStruct::CountMap' has a wrong offset!");

// ScriptStruct Pal.PalPlayerRecordFlagMapStruct
// 0x0050 (0x0050 - 0x0000)
struct FPalPlayerRecordFlagMapStruct final
{
public:
	TMap<class FName, bool>                       FlagMap;                                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerRecordFlagMapStruct) == 0x000008, "Wrong alignment on FPalPlayerRecordFlagMapStruct");
static_assert(sizeof(FPalPlayerRecordFlagMapStruct) == 0x000050, "Wrong size on FPalPlayerRecordFlagMapStruct");
static_assert(offsetof(FPalPlayerRecordFlagMapStruct, FlagMap) == 0x000000, "Member 'FPalPlayerRecordFlagMapStruct::FlagMap' has a wrong offset!");

// ScriptStruct Pal.PalPlayerRecordDataStruct
// 0x0140 (0x0140 - 0x0000)
struct FPalPlayerRecordDataStruct final
{
public:
	TMap<class FName, int64>                      SimpleCountRecordMap;                              // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       SimpleFlagMap;                                     // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FPalPlayerRecordCountMapStruct> CountMapRecordMap;                                 // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FPalPlayerRecordFlagMapStruct> FlagMapRecordMap;                                  // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerRecordDataStruct) == 0x000008, "Wrong alignment on FPalPlayerRecordDataStruct");
static_assert(sizeof(FPalPlayerRecordDataStruct) == 0x000140, "Wrong size on FPalPlayerRecordDataStruct");
static_assert(offsetof(FPalPlayerRecordDataStruct, SimpleCountRecordMap) == 0x000000, "Member 'FPalPlayerRecordDataStruct::SimpleCountRecordMap' has a wrong offset!");
static_assert(offsetof(FPalPlayerRecordDataStruct, SimpleFlagMap) == 0x000050, "Member 'FPalPlayerRecordDataStruct::SimpleFlagMap' has a wrong offset!");
static_assert(offsetof(FPalPlayerRecordDataStruct, CountMapRecordMap) == 0x0000A0, "Member 'FPalPlayerRecordDataStruct::CountMapRecordMap' has a wrong offset!");
static_assert(offsetof(FPalPlayerRecordDataStruct, FlagMapRecordMap) == 0x0000F0, "Member 'FPalPlayerRecordDataStruct::FlagMapRecordMap' has a wrong offset!");

// ScriptStruct Pal.PalPassiveAbilitySkillStatus
// 0x0020 (0x0020 - 0x0000)
struct FPalPassiveAbilitySkillStatus final
{
public:
	EPalPassiveAbilitySkillState                  State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Flags;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EPalPassiveTriggerType                        TriggerType;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258F[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPassiveAbilitySkillStatus) == 0x000008, "Wrong alignment on FPalPassiveAbilitySkillStatus");
static_assert(sizeof(FPalPassiveAbilitySkillStatus) == 0x000020, "Wrong size on FPalPassiveAbilitySkillStatus");
static_assert(offsetof(FPalPassiveAbilitySkillStatus, State) == 0x000000, "Member 'FPalPassiveAbilitySkillStatus::State' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillStatus, ElapsedTime) == 0x000004, "Member 'FPalPassiveAbilitySkillStatus::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillStatus, Flags) == 0x000008, "Member 'FPalPassiveAbilitySkillStatus::Flags' has a wrong offset!");
static_assert(offsetof(FPalPassiveAbilitySkillStatus, TriggerType) == 0x000018, "Member 'FPalPassiveAbilitySkillStatus::TriggerType' has a wrong offset!");

// ScriptStruct Pal.FixedPoint
// 0x0004 (0x0004 - 0x0000)
struct FFixedPoint final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFixedPoint) == 0x000004, "Wrong alignment on FFixedPoint");
static_assert(sizeof(FFixedPoint) == 0x000004, "Wrong size on FFixedPoint");
static_assert(offsetof(FFixedPoint, Value) == 0x000000, "Member 'FFixedPoint::Value' has a wrong offset!");

// ScriptStruct Pal.PalBinaryMemory
// 0x0010 (0x0010 - 0x0000)
struct FPalBinaryMemory
{
public:
	TArray<uint8>                                 RawData;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBinaryMemory) == 0x000008, "Wrong alignment on FPalBinaryMemory");
static_assert(sizeof(FPalBinaryMemory) == 0x000010, "Wrong size on FPalBinaryMemory");
static_assert(offsetof(FPalBinaryMemory, RawData) == 0x000000, "Member 'FPalBinaryMemory::RawData' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectBuildProcessSaveData
// 0x0000 (0x0010 - 0x0010)
struct FPalMapObjectBuildProcessSaveData final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalMapObjectBuildProcessSaveData) == 0x000008, "Wrong alignment on FPalMapObjectBuildProcessSaveData");
static_assert(sizeof(FPalMapObjectBuildProcessSaveData) == 0x000010, "Wrong size on FPalMapObjectBuildProcessSaveData");

// ScriptStruct Pal.PalInsideBaseCampUI_DisplayItemInfo
// 0x0001 (0x0001 - 0x0000)
struct FPalInsideBaseCampUI_DisplayItemInfo final
{
public:
	bool                                          IsShowWhenNothingItem;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInsideBaseCampUI_DisplayItemInfo) == 0x000001, "Wrong alignment on FPalInsideBaseCampUI_DisplayItemInfo");
static_assert(sizeof(FPalInsideBaseCampUI_DisplayItemInfo) == 0x000001, "Wrong size on FPalInsideBaseCampUI_DisplayItemInfo");
static_assert(offsetof(FPalInsideBaseCampUI_DisplayItemInfo, IsShowWhenNothingItem) == 0x000000, "Member 'FPalInsideBaseCampUI_DisplayItemInfo::IsShowWhenNothingItem' has a wrong offset!");

// ScriptStruct Pal.PalCharacterSlotUpdateInfo
// 0x0048 (0x0048 - 0x0000)
struct FPalCharacterSlotUpdateInfo final
{
public:
	struct FPalContainerId                        ContainerId;                                       // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2590[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalInstanceID                         InstanceId;                                        // 0x0018(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterSlotUpdateInfo) == 0x000008, "Wrong alignment on FPalCharacterSlotUpdateInfo");
static_assert(sizeof(FPalCharacterSlotUpdateInfo) == 0x000048, "Wrong size on FPalCharacterSlotUpdateInfo");
static_assert(offsetof(FPalCharacterSlotUpdateInfo, ContainerId) == 0x000000, "Member 'FPalCharacterSlotUpdateInfo::ContainerId' has a wrong offset!");
static_assert(offsetof(FPalCharacterSlotUpdateInfo, SlotIndex) == 0x000010, "Member 'FPalCharacterSlotUpdateInfo::SlotIndex' has a wrong offset!");
static_assert(offsetof(FPalCharacterSlotUpdateInfo, InstanceId) == 0x000018, "Member 'FPalCharacterSlotUpdateInfo::InstanceId' has a wrong offset!");

// ScriptStruct Pal.FlagContainer
// 0x0050 (0x0050 - 0x0000)
struct FFlagContainer final
{
public:
	TMap<class FName, bool>                       Flags;                                             // 0x0000(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFlagContainer) == 0x000008, "Wrong alignment on FFlagContainer");
static_assert(sizeof(FFlagContainer) == 0x000050, "Wrong size on FFlagContainer");
static_assert(offsetof(FFlagContainer, Flags) == 0x000000, "Member 'FFlagContainer::Flags' has a wrong offset!");

// ScriptStruct Pal.PalPlayerInfoForMap
// 0x0070 (0x0070 - 0x0000)
struct FPalPlayerInfoForMap final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerInfoForMap) == 0x000010, "Wrong alignment on FPalPlayerInfoForMap");
static_assert(sizeof(FPalPlayerInfoForMap) == 0x000070, "Wrong size on FPalPlayerInfoForMap");
static_assert(offsetof(FPalPlayerInfoForMap, PlayerName) == 0x000000, "Member 'FPalPlayerInfoForMap::PlayerName' has a wrong offset!");
static_assert(offsetof(FPalPlayerInfoForMap, Transform) == 0x000010, "Member 'FPalPlayerInfoForMap::Transform' has a wrong offset!");

// ScriptStruct Pal.PalGroupCreateParameter
// 0x0028 (0x0028 - 0x0000)
struct FPalGroupCreateParameter final
{
public:
	EPalGroupType                                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalOrganizationType                          OrganizationType;                                  // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2591[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupName;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AdminPlayerUId;                                    // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGroupCreateParameter) == 0x000008, "Wrong alignment on FPalGroupCreateParameter");
static_assert(sizeof(FPalGroupCreateParameter) == 0x000028, "Wrong size on FPalGroupCreateParameter");
static_assert(offsetof(FPalGroupCreateParameter, Type) == 0x000000, "Member 'FPalGroupCreateParameter::Type' has a wrong offset!");
static_assert(offsetof(FPalGroupCreateParameter, OrganizationType) == 0x000001, "Member 'FPalGroupCreateParameter::OrganizationType' has a wrong offset!");
static_assert(offsetof(FPalGroupCreateParameter, GroupName) == 0x000008, "Member 'FPalGroupCreateParameter::GroupName' has a wrong offset!");
static_assert(offsetof(FPalGroupCreateParameter, AdminPlayerUId) == 0x000018, "Member 'FPalGroupCreateParameter::AdminPlayerUId' has a wrong offset!");

// ScriptStruct Pal.PalTimerGaugeWidgetCreateInfo
// 0x0078 (0x0078 - 0x0000)
struct FPalTimerGaugeWidgetCreateInfo final
{
public:
	uint8                                         Pad_2592[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalUserWidgetTimerGaugeBase> TimerGaugeWidgetClass;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DisplayOffset;                                     // 0x0030(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayRange;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2593[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FunctionName;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2594[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialStartDelay;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialStartDelayVariance;                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2595[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalTimerGaugeWidgetCreateInfo) == 0x000008, "Wrong alignment on FPalTimerGaugeWidgetCreateInfo");
static_assert(sizeof(FPalTimerGaugeWidgetCreateInfo) == 0x000078, "Wrong size on FPalTimerGaugeWidgetCreateInfo");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, TargetActor) == 0x000008, "Member 'FPalTimerGaugeWidgetCreateInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, TargetLocation) == 0x000010, "Member 'FPalTimerGaugeWidgetCreateInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, TimerGaugeWidgetClass) == 0x000028, "Member 'FPalTimerGaugeWidgetCreateInfo::TimerGaugeWidgetClass' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, DisplayOffset) == 0x000030, "Member 'FPalTimerGaugeWidgetCreateInfo::DisplayOffset' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, DisplayRange) == 0x000048, "Member 'FPalTimerGaugeWidgetCreateInfo::DisplayRange' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, FunctionName) == 0x000050, "Member 'FPalTimerGaugeWidgetCreateInfo::FunctionName' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, Time) == 0x000060, "Member 'FPalTimerGaugeWidgetCreateInfo::Time' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, bLooping) == 0x000064, "Member 'FPalTimerGaugeWidgetCreateInfo::bLooping' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, InitialStartDelay) == 0x000068, "Member 'FPalTimerGaugeWidgetCreateInfo::InitialStartDelay' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, InitialStartDelayVariance) == 0x00006C, "Member 'FPalTimerGaugeWidgetCreateInfo::InitialStartDelayVariance' has a wrong offset!");
static_assert(offsetof(FPalTimerGaugeWidgetCreateInfo, IsHide) == 0x000070, "Member 'FPalTimerGaugeWidgetCreateInfo::IsHide' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampSaveData_Module_PassiveEffect
// 0x0000 (0x0010 - 0x0010)
struct FPalBaseCampSaveData_Module_PassiveEffect final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalBaseCampSaveData_Module_PassiveEffect) == 0x000008, "Wrong alignment on FPalBaseCampSaveData_Module_PassiveEffect");
static_assert(sizeof(FPalBaseCampSaveData_Module_PassiveEffect) == 0x000010, "Wrong size on FPalBaseCampSaveData_Module_PassiveEffect");

// ScriptStruct Pal.PalChatMessage
// 0x0048 (0x0048 - 0x0000)
struct FPalChatMessage final
{
public:
	EPalChatCategory                              Category;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2596[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sender;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SenderPlayerUId;                                   // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ReceiverPlayerUId;                                 // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalChatMessage) == 0x000008, "Wrong alignment on FPalChatMessage");
static_assert(sizeof(FPalChatMessage) == 0x000048, "Wrong size on FPalChatMessage");
static_assert(offsetof(FPalChatMessage, Category) == 0x000000, "Member 'FPalChatMessage::Category' has a wrong offset!");
static_assert(offsetof(FPalChatMessage, Sender) == 0x000008, "Member 'FPalChatMessage::Sender' has a wrong offset!");
static_assert(offsetof(FPalChatMessage, SenderPlayerUId) == 0x000018, "Member 'FPalChatMessage::SenderPlayerUId' has a wrong offset!");
static_assert(offsetof(FPalChatMessage, Message) == 0x000028, "Member 'FPalChatMessage::Message' has a wrong offset!");
static_assert(offsetof(FPalChatMessage, ReceiverPlayerUId) == 0x000038, "Member 'FPalChatMessage::ReceiverPlayerUId' has a wrong offset!");

// ScriptStruct Pal.GameDateTime
// 0x0008 (0x0008 - 0x0000)
struct FGameDateTime final
{
public:
	int64                                         Ticks;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameDateTime) == 0x000008, "Wrong alignment on FGameDateTime");
static_assert(sizeof(FGameDateTime) == 0x000008, "Wrong size on FGameDateTime");
static_assert(offsetof(FGameDateTime, Ticks) == 0x000000, "Member 'FGameDateTime::Ticks' has a wrong offset!");

// ScriptStruct Pal.PalGuildPalStorageInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FPalGuildPalStorageInfo final
{
public:
	uint8                                         Pad_2597[0x38];                                    // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalGuildPalStorageInfo) == 0x000008, "Wrong alignment on FPalGuildPalStorageInfo");
static_assert(sizeof(FPalGuildPalStorageInfo) == 0x000038, "Wrong size on FPalGuildPalStorageInfo");

// ScriptStruct Pal.PalPlayerClassStructSet
// 0x0028 (0x0028 - 0x0000)
struct FPalPlayerClassStructSet final
{
public:
	TSubclassOf<class UPalPlayerDataCharacterMake> CharacterMakeDataClass;                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalPlayerRecordData>       RecordDataClass;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalWorldMapUIData>         WorldMapUIDataClass;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalQuestManager>           LocalQuestManagerClass;                            // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalPlayerInventoryData>    InventoryDataClass;                                // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerClassStructSet) == 0x000008, "Wrong alignment on FPalPlayerClassStructSet");
static_assert(sizeof(FPalPlayerClassStructSet) == 0x000028, "Wrong size on FPalPlayerClassStructSet");
static_assert(offsetof(FPalPlayerClassStructSet, CharacterMakeDataClass) == 0x000000, "Member 'FPalPlayerClassStructSet::CharacterMakeDataClass' has a wrong offset!");
static_assert(offsetof(FPalPlayerClassStructSet, RecordDataClass) == 0x000008, "Member 'FPalPlayerClassStructSet::RecordDataClass' has a wrong offset!");
static_assert(offsetof(FPalPlayerClassStructSet, WorldMapUIDataClass) == 0x000010, "Member 'FPalPlayerClassStructSet::WorldMapUIDataClass' has a wrong offset!");
static_assert(offsetof(FPalPlayerClassStructSet, LocalQuestManagerClass) == 0x000018, "Member 'FPalPlayerClassStructSet::LocalQuestManagerClass' has a wrong offset!");
static_assert(offsetof(FPalPlayerClassStructSet, InventoryDataClass) == 0x000020, "Member 'FPalPlayerClassStructSet::InventoryDataClass' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_PalHumanData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_PalHumanData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_PalHumanData) == 0x000004, "Wrong alignment on FPalDataTableRowName_PalHumanData");
static_assert(sizeof(FPalDataTableRowName_PalHumanData) == 0x000008, "Wrong size on FPalDataTableRowName_PalHumanData");
static_assert(offsetof(FPalDataTableRowName_PalHumanData, Key) == 0x000000, "Member 'FPalDataTableRowName_PalHumanData::Key' has a wrong offset!");

// ScriptStruct Pal.PalSpawnerOneTribeInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalSpawnerOneTribeInfo final
{
public:
	struct FPalDataTableRowName_PalMonsterData    PalID;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_PalHumanData      NPCID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_Max;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num_Max;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSpawnerOneTribeInfo) == 0x000004, "Wrong alignment on FPalSpawnerOneTribeInfo");
static_assert(sizeof(FPalSpawnerOneTribeInfo) == 0x000020, "Wrong size on FPalSpawnerOneTribeInfo");
static_assert(offsetof(FPalSpawnerOneTribeInfo, PalID) == 0x000000, "Member 'FPalSpawnerOneTribeInfo::PalID' has a wrong offset!");
static_assert(offsetof(FPalSpawnerOneTribeInfo, NPCID) == 0x000008, "Member 'FPalSpawnerOneTribeInfo::NPCID' has a wrong offset!");
static_assert(offsetof(FPalSpawnerOneTribeInfo, Level) == 0x000010, "Member 'FPalSpawnerOneTribeInfo::Level' has a wrong offset!");
static_assert(offsetof(FPalSpawnerOneTribeInfo, Level_Max) == 0x000014, "Member 'FPalSpawnerOneTribeInfo::Level_Max' has a wrong offset!");
static_assert(offsetof(FPalSpawnerOneTribeInfo, Num) == 0x000018, "Member 'FPalSpawnerOneTribeInfo::Num' has a wrong offset!");
static_assert(offsetof(FPalSpawnerOneTribeInfo, Num_Max) == 0x00001C, "Member 'FPalSpawnerOneTribeInfo::Num_Max' has a wrong offset!");

// ScriptStruct Pal.PalSpawnerGroupInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalSpawnerGroupInfo final
{
public:
	int32                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalOneDayTimeType                            OnlyTime;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWeatherConditionType                      OnlyWeather;                                       // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2598[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalSpawnerOneTribeInfo>        PalList;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSpawnerGroupInfo) == 0x000008, "Wrong alignment on FPalSpawnerGroupInfo");
static_assert(sizeof(FPalSpawnerGroupInfo) == 0x000018, "Wrong size on FPalSpawnerGroupInfo");
static_assert(offsetof(FPalSpawnerGroupInfo, Weight) == 0x000000, "Member 'FPalSpawnerGroupInfo::Weight' has a wrong offset!");
static_assert(offsetof(FPalSpawnerGroupInfo, OnlyTime) == 0x000004, "Member 'FPalSpawnerGroupInfo::OnlyTime' has a wrong offset!");
static_assert(offsetof(FPalSpawnerGroupInfo, OnlyWeather) == 0x000005, "Member 'FPalSpawnerGroupInfo::OnlyWeather' has a wrong offset!");
static_assert(offsetof(FPalSpawnerGroupInfo, PalList) == 0x000008, "Member 'FPalSpawnerGroupInfo::PalList' has a wrong offset!");

// ScriptStruct Pal.PalNPCTalkSystemCustomFunctionParameters
// 0x0028 (0x0028 - 0x0000)
struct FPalNPCTalkSystemCustomFunctionParameters final
{
public:
	TScriptInterface<class IPalNPCTalkSystemCustomFunctionInterface> Interface;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FuncParameter;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkDataIndex;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkDataSeqenceName;                               // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2599[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNPCTalkSystemCustomFunctionParameters) == 0x000008, "Wrong alignment on FPalNPCTalkSystemCustomFunctionParameters");
static_assert(sizeof(FPalNPCTalkSystemCustomFunctionParameters) == 0x000028, "Wrong size on FPalNPCTalkSystemCustomFunctionParameters");
static_assert(offsetof(FPalNPCTalkSystemCustomFunctionParameters, Interface) == 0x000000, "Member 'FPalNPCTalkSystemCustomFunctionParameters::Interface' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkSystemCustomFunctionParameters, FuncParameter) == 0x000010, "Member 'FPalNPCTalkSystemCustomFunctionParameters::FuncParameter' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkSystemCustomFunctionParameters, TalkDataIndex) == 0x000018, "Member 'FPalNPCTalkSystemCustomFunctionParameters::TalkDataIndex' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkSystemCustomFunctionParameters, TalkDataSeqenceName) == 0x00001C, "Member 'FPalNPCTalkSystemCustomFunctionParameters::TalkDataSeqenceName' has a wrong offset!");

// ScriptStruct Pal.PalItemSlotId
// 0x0014 (0x0014 - 0x0000)
struct FPalItemSlotId final
{
public:
	struct FPalContainerId                        ContainerId;                                       // 0x0000(0x0010)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemSlotId) == 0x000004, "Wrong alignment on FPalItemSlotId");
static_assert(sizeof(FPalItemSlotId) == 0x000014, "Wrong size on FPalItemSlotId");
static_assert(offsetof(FPalItemSlotId, ContainerId) == 0x000000, "Member 'FPalItemSlotId::ContainerId' has a wrong offset!");
static_assert(offsetof(FPalItemSlotId, SlotIndex) == 0x000010, "Member 'FPalItemSlotId::SlotIndex' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampLevelMasterData
// 0x0010 (0x0018 - 0x0008)
struct FPalBaseCampLevelMasterData final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkerMaxNum;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseCampMaxNumInGuild;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampLevelMasterData) == 0x000008, "Wrong alignment on FPalBaseCampLevelMasterData");
static_assert(sizeof(FPalBaseCampLevelMasterData) == 0x000018, "Wrong size on FPalBaseCampLevelMasterData");
static_assert(offsetof(FPalBaseCampLevelMasterData, Level) == 0x000008, "Member 'FPalBaseCampLevelMasterData::Level' has a wrong offset!");
static_assert(offsetof(FPalBaseCampLevelMasterData, WorkerMaxNum) == 0x00000C, "Member 'FPalBaseCampLevelMasterData::WorkerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalBaseCampLevelMasterData, BaseCampMaxNumInGuild) == 0x000010, "Member 'FPalBaseCampLevelMasterData::BaseCampMaxNumInGuild' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_NPCUniqueData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_NPCUniqueData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_NPCUniqueData) == 0x000004, "Wrong alignment on FPalDataTableRowName_NPCUniqueData");
static_assert(sizeof(FPalDataTableRowName_NPCUniqueData) == 0x000008, "Wrong size on FPalDataTableRowName_NPCUniqueData");
static_assert(offsetof(FPalDataTableRowName_NPCUniqueData, Key) == 0x000000, "Member 'FPalDataTableRowName_NPCUniqueData::Key' has a wrong offset!");

// ScriptStruct Pal.PalCharacterCreationPresetDataRow
// 0x00C8 (0x00D0 - 0x0008)
struct FPalCharacterCreationPresetDataRow final : public FTableRowBase
{
public:
	struct FPalPlayerDataCharacterMakeInfo        MakeInfo;                                          // 0x0008(0x0094)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_259B[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x00A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterCreationPresetDataRow) == 0x000008, "Wrong alignment on FPalCharacterCreationPresetDataRow");
static_assert(sizeof(FPalCharacterCreationPresetDataRow) == 0x0000D0, "Wrong size on FPalCharacterCreationPresetDataRow");
static_assert(offsetof(FPalCharacterCreationPresetDataRow, MakeInfo) == 0x000008, "Member 'FPalCharacterCreationPresetDataRow::MakeInfo' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationPresetDataRow, IconTexture) == 0x0000A0, "Member 'FPalCharacterCreationPresetDataRow::IconTexture' has a wrong offset!");

// ScriptStruct Pal.PalOptionValueFloat
// 0x0008 (0x0008 - 0x0000)
struct FPalOptionValueFloat final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionValueFloat) == 0x000004, "Wrong alignment on FPalOptionValueFloat");
static_assert(sizeof(FPalOptionValueFloat) == 0x000008, "Wrong size on FPalOptionValueFloat");
static_assert(offsetof(FPalOptionValueFloat, Min) == 0x000000, "Member 'FPalOptionValueFloat::Min' has a wrong offset!");
static_assert(offsetof(FPalOptionValueFloat, Max) == 0x000004, "Member 'FPalOptionValueFloat::Max' has a wrong offset!");

// ScriptStruct Pal.PalOptionLocalStaticSettings
// 0x0050 (0x0050 - 0x0000)
struct FPalOptionLocalStaticSettings final
{
public:
	struct FPalOptionValueFloat                   MouseSensitivity;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   MouseAimSensitivity;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   LeftStickThreshold;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   RightStickSensitivity;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   RightStickAimSensitivity;                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   RightStickThreshold;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalRideCameraLengthRate;                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   FOV;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   DamageTextScale;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   DamageTextMaxNum;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionLocalStaticSettings) == 0x000004, "Wrong alignment on FPalOptionLocalStaticSettings");
static_assert(sizeof(FPalOptionLocalStaticSettings) == 0x000050, "Wrong size on FPalOptionLocalStaticSettings");
static_assert(offsetof(FPalOptionLocalStaticSettings, MouseSensitivity) == 0x000000, "Member 'FPalOptionLocalStaticSettings::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, MouseAimSensitivity) == 0x000008, "Member 'FPalOptionLocalStaticSettings::MouseAimSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, LeftStickThreshold) == 0x000010, "Member 'FPalOptionLocalStaticSettings::LeftStickThreshold' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, RightStickSensitivity) == 0x000018, "Member 'FPalOptionLocalStaticSettings::RightStickSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, RightStickAimSensitivity) == 0x000020, "Member 'FPalOptionLocalStaticSettings::RightStickAimSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, RightStickThreshold) == 0x000028, "Member 'FPalOptionLocalStaticSettings::RightStickThreshold' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, PalRideCameraLengthRate) == 0x000030, "Member 'FPalOptionLocalStaticSettings::PalRideCameraLengthRate' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, FOV) == 0x000038, "Member 'FPalOptionLocalStaticSettings::FOV' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, DamageTextScale) == 0x000040, "Member 'FPalOptionLocalStaticSettings::DamageTextScale' has a wrong offset!");
static_assert(offsetof(FPalOptionLocalStaticSettings, DamageTextMaxNum) == 0x000048, "Member 'FPalOptionLocalStaticSettings::DamageTextMaxNum' has a wrong offset!");

// ScriptStruct Pal.PalFoliageInstanceRepInfo
// 0x0024 (0x0030 - 0x000C)
struct FPalFoliageInstanceRepInfo final : public FFastArraySerializerItem
{
public:
	class FName                                   FoliageTypeId;                                     // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalFoliageInstanceId                  InstanceId;                                        // 0x0014(0x0010)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalFoliageInstance*                    Instance;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageInstanceRepInfo) == 0x000008, "Wrong alignment on FPalFoliageInstanceRepInfo");
static_assert(sizeof(FPalFoliageInstanceRepInfo) == 0x000030, "Wrong size on FPalFoliageInstanceRepInfo");
static_assert(offsetof(FPalFoliageInstanceRepInfo, FoliageTypeId) == 0x00000C, "Member 'FPalFoliageInstanceRepInfo::FoliageTypeId' has a wrong offset!");
static_assert(offsetof(FPalFoliageInstanceRepInfo, InstanceId) == 0x000014, "Member 'FPalFoliageInstanceRepInfo::InstanceId' has a wrong offset!");
static_assert(offsetof(FPalFoliageInstanceRepInfo, Instance) == 0x000028, "Member 'FPalFoliageInstanceRepInfo::Instance' has a wrong offset!");

// ScriptStruct Pal.PalMealLogDisplayData
// 0x0038 (0x0038 - 0x0000)
struct FPalMealLogDisplayData final
{
public:
	struct FPalInstanceID                         InstanceId;                                        // 0x0000(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MealItemID;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMealLogDisplayData) == 0x000008, "Wrong alignment on FPalMealLogDisplayData");
static_assert(sizeof(FPalMealLogDisplayData) == 0x000038, "Wrong size on FPalMealLogDisplayData");
static_assert(offsetof(FPalMealLogDisplayData, InstanceId) == 0x000000, "Member 'FPalMealLogDisplayData::InstanceId' has a wrong offset!");
static_assert(offsetof(FPalMealLogDisplayData, MealItemID) == 0x000030, "Member 'FPalMealLogDisplayData::MealItemID' has a wrong offset!");

// ScriptStruct Pal.PalKeyAction
// 0x000C (0x000C - 0x0000)
struct FPalKeyAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalKeyConfigAxisFilterType                   FilterType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalKeyAction) == 0x000004, "Wrong alignment on FPalKeyAction");
static_assert(sizeof(FPalKeyAction) == 0x00000C, "Wrong size on FPalKeyAction");
static_assert(offsetof(FPalKeyAction, ActionName) == 0x000000, "Member 'FPalKeyAction::ActionName' has a wrong offset!");
static_assert(offsetof(FPalKeyAction, FilterType) == 0x000008, "Member 'FPalKeyAction::FilterType' has a wrong offset!");

// ScriptStruct Pal.PalPassiveSkillAssignInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalPassiveSkillAssignInfo final
{
public:
	bool                                          IsDoNotSetSkills;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ForceSetSkillList;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassiveSkillAssignInfo) == 0x000008, "Wrong alignment on FPalPassiveSkillAssignInfo");
static_assert(sizeof(FPalPassiveSkillAssignInfo) == 0x000018, "Wrong size on FPalPassiveSkillAssignInfo");
static_assert(offsetof(FPalPassiveSkillAssignInfo, IsDoNotSetSkills) == 0x000000, "Member 'FPalPassiveSkillAssignInfo::IsDoNotSetSkills' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillAssignInfo, ForceSetSkillList) == 0x000008, "Member 'FPalPassiveSkillAssignInfo::ForceSetSkillList' has a wrong offset!");

// ScriptStruct Pal.PalDamageResult
// 0x0050 (0x0050 - 0x0000)
struct FPalDamageResult final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Defender;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlowVelocity;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalDamageAnimationReactionType               DamageReactionAnimationType;                       // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreShield;                                      // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayedLeanBack;                                  // 0x004A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPlayerDamageCameraShakeCategory           CameraShake;                                       // 0x004B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnorePlayerEquipItemDamage;                       // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               AttackElementType;                                 // 0x004D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A0[0x2];                                     // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDamageResult) == 0x000008, "Wrong alignment on FPalDamageResult");
static_assert(sizeof(FPalDamageResult) == 0x000050, "Wrong size on FPalDamageResult");
static_assert(offsetof(FPalDamageResult, Damage) == 0x000000, "Member 'FPalDamageResult::Damage' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, Attacker) == 0x000008, "Member 'FPalDamageResult::Attacker' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, Defender) == 0x000010, "Member 'FPalDamageResult::Defender' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, BlowVelocity) == 0x000018, "Member 'FPalDamageResult::BlowVelocity' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, HitLocation) == 0x000030, "Member 'FPalDamageResult::HitLocation' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, DamageReactionAnimationType) == 0x000048, "Member 'FPalDamageResult::DamageReactionAnimationType' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, IgnoreShield) == 0x000049, "Member 'FPalDamageResult::IgnoreShield' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, IsPlayedLeanBack) == 0x00004A, "Member 'FPalDamageResult::IsPlayedLeanBack' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, CameraShake) == 0x00004B, "Member 'FPalDamageResult::CameraShake' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, IgnorePlayerEquipItemDamage) == 0x00004C, "Member 'FPalDamageResult::IgnorePlayerEquipItemDamage' has a wrong offset!");
static_assert(offsetof(FPalDamageResult, AttackElementType) == 0x00004D, "Member 'FPalDamageResult::AttackElementType' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectDropItemData
// 0x000C (0x000C - 0x0000)
struct FPalMapObjectDropItemData final
{
public:
	struct FPalDataTableRowName_ItemData          StaticItemId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectDropItemData) == 0x000004, "Wrong alignment on FPalMapObjectDropItemData");
static_assert(sizeof(FPalMapObjectDropItemData) == 0x00000C, "Wrong size on FPalMapObjectDropItemData");
static_assert(offsetof(FPalMapObjectDropItemData, StaticItemId) == 0x000000, "Member 'FPalMapObjectDropItemData::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectDropItemData, Num) == 0x000008, "Member 'FPalMapObjectDropItemData::Num' has a wrong offset!");

// ScriptStruct Pal.PalOptionKeyboardSettings
// 0x0014 (0x0014 - 0x0000)
struct FPalOptionKeyboardSettings final
{
public:
	bool                                          bIsDashHold;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseSensitivity;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseAimSensitivity;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReverseYaw;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReversePitch;                                   // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAimAssist;                                  // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowChat;                                         // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToggleInteract;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A2[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalOptionKeyboardSettings) == 0x000004, "Wrong alignment on FPalOptionKeyboardSettings");
static_assert(sizeof(FPalOptionKeyboardSettings) == 0x000014, "Wrong size on FPalOptionKeyboardSettings");
static_assert(offsetof(FPalOptionKeyboardSettings, bIsDashHold) == 0x000000, "Member 'FPalOptionKeyboardSettings::bIsDashHold' has a wrong offset!");
static_assert(offsetof(FPalOptionKeyboardSettings, MouseSensitivity) == 0x000004, "Member 'FPalOptionKeyboardSettings::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionKeyboardSettings, MouseAimSensitivity) == 0x000008, "Member 'FPalOptionKeyboardSettings::MouseAimSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionKeyboardSettings, bIsReverseYaw) == 0x00000C, "Member 'FPalOptionKeyboardSettings::bIsReverseYaw' has a wrong offset!");
static_assert(offsetof(FPalOptionKeyboardSettings, bIsReversePitch) == 0x00000D, "Member 'FPalOptionKeyboardSettings::bIsReversePitch' has a wrong offset!");
static_assert(offsetof(FPalOptionKeyboardSettings, bEnableAimAssist) == 0x00000E, "Member 'FPalOptionKeyboardSettings::bEnableAimAssist' has a wrong offset!");
static_assert(offsetof(FPalOptionKeyboardSettings, bShowChat) == 0x00000F, "Member 'FPalOptionKeyboardSettings::bShowChat' has a wrong offset!");
static_assert(offsetof(FPalOptionKeyboardSettings, bIsToggleInteract) == 0x000010, "Member 'FPalOptionKeyboardSettings::bIsToggleInteract' has a wrong offset!");

// ScriptStruct Pal.PalCharacterUpgradeMasterData
// 0x0018 (0x0020 - 0x0008)
struct FPalCharacterUpgradeMasterData final : public FTableRowBase
{
public:
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequiredStaticItemId;                              // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredItemNum;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetRequiredMoney;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A3[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCharacterUpgradeMasterData) == 0x000008, "Wrong alignment on FPalCharacterUpgradeMasterData");
static_assert(sizeof(FPalCharacterUpgradeMasterData) == 0x000020, "Wrong size on FPalCharacterUpgradeMasterData");
static_assert(offsetof(FPalCharacterUpgradeMasterData, Rank) == 0x000008, "Member 'FPalCharacterUpgradeMasterData::Rank' has a wrong offset!");
static_assert(offsetof(FPalCharacterUpgradeMasterData, RequiredStaticItemId) == 0x00000C, "Member 'FPalCharacterUpgradeMasterData::RequiredStaticItemId' has a wrong offset!");
static_assert(offsetof(FPalCharacterUpgradeMasterData, RequiredItemNum) == 0x000014, "Member 'FPalCharacterUpgradeMasterData::RequiredItemNum' has a wrong offset!");
static_assert(offsetof(FPalCharacterUpgradeMasterData, ResetRequiredMoney) == 0x000018, "Member 'FPalCharacterUpgradeMasterData::ResetRequiredMoney' has a wrong offset!");

// ScriptStruct Pal.PalOptionPadSettings
// 0x001C (0x001C - 0x0000)
struct FPalOptionPadSettings final
{
public:
	bool                                          bIsDashHold;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftStickThreshold;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightStickSensitivity;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightStickAimSensitivity;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightStickThreshold;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightStickReverseYaw;                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightStickReversePitch;                         // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVibration;                                  // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAimAssist;                                  // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToggleInteract;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A5[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalOptionPadSettings) == 0x000004, "Wrong alignment on FPalOptionPadSettings");
static_assert(sizeof(FPalOptionPadSettings) == 0x00001C, "Wrong size on FPalOptionPadSettings");
static_assert(offsetof(FPalOptionPadSettings, bIsDashHold) == 0x000000, "Member 'FPalOptionPadSettings::bIsDashHold' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, LeftStickThreshold) == 0x000004, "Member 'FPalOptionPadSettings::LeftStickThreshold' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, RightStickSensitivity) == 0x000008, "Member 'FPalOptionPadSettings::RightStickSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, RightStickAimSensitivity) == 0x00000C, "Member 'FPalOptionPadSettings::RightStickAimSensitivity' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, RightStickThreshold) == 0x000010, "Member 'FPalOptionPadSettings::RightStickThreshold' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, bIsRightStickReverseYaw) == 0x000014, "Member 'FPalOptionPadSettings::bIsRightStickReverseYaw' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, bIsRightStickReversePitch) == 0x000015, "Member 'FPalOptionPadSettings::bIsRightStickReversePitch' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, bEnableVibration) == 0x000016, "Member 'FPalOptionPadSettings::bEnableVibration' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, bEnableAimAssist) == 0x000017, "Member 'FPalOptionPadSettings::bEnableAimAssist' has a wrong offset!");
static_assert(offsetof(FPalOptionPadSettings, bIsToggleInteract) == 0x000018, "Member 'FPalOptionPadSettings::bIsToggleInteract' has a wrong offset!");

// ScriptStruct Pal.PalArenaTestParameter
// 0x0050 (0x0050 - 0x0000)
struct FPalArenaTestParameter final
{
public:
	class UPalArenaPartyAsset*                    Player1Data;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPalArenaPartyAsset*                    Player2Data;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Player1StartPoint;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Player2StartPoint;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Player1PalPoint;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Player2PalPoint;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EPalAudioStateGroup                           BattleBGMStateGroup;                               // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A6[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RideDelayTime;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomPartyMode;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A7[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomPartyPalLevel;                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalArenaTestParameter) == 0x000008, "Wrong alignment on FPalArenaTestParameter");
static_assert(sizeof(FPalArenaTestParameter) == 0x000050, "Wrong size on FPalArenaTestParameter");
static_assert(offsetof(FPalArenaTestParameter, Player1Data) == 0x000000, "Member 'FPalArenaTestParameter::Player1Data' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, Player2Data) == 0x000008, "Member 'FPalArenaTestParameter::Player2Data' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, Player1StartPoint) == 0x000010, "Member 'FPalArenaTestParameter::Player1StartPoint' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, Player2StartPoint) == 0x000018, "Member 'FPalArenaTestParameter::Player2StartPoint' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, Player1PalPoint) == 0x000020, "Member 'FPalArenaTestParameter::Player1PalPoint' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, Player2PalPoint) == 0x000030, "Member 'FPalArenaTestParameter::Player2PalPoint' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, BattleBGMStateGroup) == 0x000040, "Member 'FPalArenaTestParameter::BattleBGMStateGroup' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, RideDelayTime) == 0x000044, "Member 'FPalArenaTestParameter::RideDelayTime' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, bRandomPartyMode) == 0x000048, "Member 'FPalArenaTestParameter::bRandomPartyMode' has a wrong offset!");
static_assert(offsetof(FPalArenaTestParameter, RandomPartyPalLevel) == 0x00004C, "Member 'FPalArenaTestParameter::RandomPartyPalLevel' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectRepairInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalMapObjectRepairInfo final
{
public:
	struct FPalDataTableRowName_ItemData          RepairKitItemName;                                 // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepairKitRequiredNum;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairRequiredWorkAmount;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectRepairInfo) == 0x000004, "Wrong alignment on FPalMapObjectRepairInfo");
static_assert(sizeof(FPalMapObjectRepairInfo) == 0x000010, "Wrong size on FPalMapObjectRepairInfo");
static_assert(offsetof(FPalMapObjectRepairInfo, RepairKitItemName) == 0x000000, "Member 'FPalMapObjectRepairInfo::RepairKitItemName' has a wrong offset!");
static_assert(offsetof(FPalMapObjectRepairInfo, RepairKitRequiredNum) == 0x000008, "Member 'FPalMapObjectRepairInfo::RepairKitRequiredNum' has a wrong offset!");
static_assert(offsetof(FPalMapObjectRepairInfo, RepairRequiredWorkAmount) == 0x00000C, "Member 'FPalMapObjectRepairInfo::RepairRequiredWorkAmount' has a wrong offset!");

// ScriptStruct Pal.ActorArray
// 0x0010 (0x0010 - 0x0000)
struct FActorArray final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorArray) == 0x000008, "Wrong alignment on FActorArray");
static_assert(sizeof(FActorArray) == 0x000010, "Wrong size on FActorArray");
static_assert(offsetof(FActorArray, Actors) == 0x000000, "Member 'FActorArray::Actors' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampCreateParameter
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FPalBaseCampCreateParameter final
{
public:
	uint8                                         Pad_25A8[0x170];                                   // 0x0000(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampCreateParameter) == 0x000010, "Wrong alignment on FPalBaseCampCreateParameter");
static_assert(sizeof(FPalBaseCampCreateParameter) == 0x000170, "Wrong size on FPalBaseCampCreateParameter");

// ScriptStruct Pal.PalRandomIncidentSpawnNPCData
// 0x0060 (0x0068 - 0x0008)
struct FPalRandomIncidentSpawnNPCData final : public FTableRowBase
{
public:
	struct FPalDataTableRowName_PalHumanData      CharacterID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_NPCUniqueData     UniqueNPCID;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_PalMonsterData    OtomoName;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSquad;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A9[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SpawnLocation;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRadius;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotZ_Degree;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WalkPathName;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkRadius;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AA[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APalAIController>           ControllerClass;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalAIActionBase>           DefaultAIActionClass;                              // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomIncidentSpawnNPCData) == 0x000008, "Wrong alignment on FPalRandomIncidentSpawnNPCData");
static_assert(sizeof(FPalRandomIncidentSpawnNPCData) == 0x000068, "Wrong size on FPalRandomIncidentSpawnNPCData");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, CharacterID) == 0x000008, "Member 'FPalRandomIncidentSpawnNPCData::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, UniqueNPCID) == 0x000010, "Member 'FPalRandomIncidentSpawnNPCData::UniqueNPCID' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, OtomoName) == 0x000018, "Member 'FPalRandomIncidentSpawnNPCData::OtomoName' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, Level) == 0x000020, "Member 'FPalRandomIncidentSpawnNPCData::Level' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, Group) == 0x000024, "Member 'FPalRandomIncidentSpawnNPCData::Group' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, IsSquad) == 0x000028, "Member 'FPalRandomIncidentSpawnNPCData::IsSquad' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, SpawnLocation) == 0x000030, "Member 'FPalRandomIncidentSpawnNPCData::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, SpawnRadius) == 0x000040, "Member 'FPalRandomIncidentSpawnNPCData::SpawnRadius' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, RotZ_Degree) == 0x000044, "Member 'FPalRandomIncidentSpawnNPCData::RotZ_Degree' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, WalkPathName) == 0x000048, "Member 'FPalRandomIncidentSpawnNPCData::WalkPathName' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, WalkRadius) == 0x000050, "Member 'FPalRandomIncidentSpawnNPCData::WalkRadius' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, ControllerClass) == 0x000058, "Member 'FPalRandomIncidentSpawnNPCData::ControllerClass' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnNPCData, DefaultAIActionClass) == 0x000060, "Member 'FPalRandomIncidentSpawnNPCData::DefaultAIActionClass' has a wrong offset!");

// ScriptStruct Pal.PalBuildInstallOtherOptions
// 0x0002 (0x0002 - 0x0000)
struct FPalBuildInstallOtherOptions final
{
public:
	uint8                                         Pad_25AB[0x2];                                     // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBuildInstallOtherOptions) == 0x000001, "Wrong alignment on FPalBuildInstallOtherOptions");
static_assert(sizeof(FPalBuildInstallOtherOptions) == 0x000002, "Wrong size on FPalBuildInstallOtherOptions");

// ScriptStruct Pal.PalPlayerDataPalStorageSlotSaveData
// 0x02C8 (0x02C8 - 0x0000)
struct FPalPlayerDataPalStorageSlotSaveData final
{
public:
	struct FPalInstanceID                         IndividualId;                                      // 0x0000(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalIndividualCharacterSaveParameter   CharacterSaveParameter;                            // 0x0030(0x0280)(NativeAccessSpecifierPublic)
	struct FPalCharacterSlotId                    SlotID;                                            // 0x02B0(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AC[0x4];                                     // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPlayerDataPalStorageSlotSaveData) == 0x000008, "Wrong alignment on FPalPlayerDataPalStorageSlotSaveData");
static_assert(sizeof(FPalPlayerDataPalStorageSlotSaveData) == 0x0002C8, "Wrong size on FPalPlayerDataPalStorageSlotSaveData");
static_assert(offsetof(FPalPlayerDataPalStorageSlotSaveData, IndividualId) == 0x000000, "Member 'FPalPlayerDataPalStorageSlotSaveData::IndividualId' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataPalStorageSlotSaveData, CharacterSaveParameter) == 0x000030, "Member 'FPalPlayerDataPalStorageSlotSaveData::CharacterSaveParameter' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataPalStorageSlotSaveData, SlotID) == 0x0002B0, "Member 'FPalPlayerDataPalStorageSlotSaveData::SlotID' has a wrong offset!");

// ScriptStruct Pal.PalStaticItemIdAndNum
// 0x000C (0x000C - 0x0000)
struct FPalStaticItemIdAndNum final
{
public:
	class FName                                   StaticItemId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalStaticItemIdAndNum) == 0x000004, "Wrong alignment on FPalStaticItemIdAndNum");
static_assert(sizeof(FPalStaticItemIdAndNum) == 0x00000C, "Wrong size on FPalStaticItemIdAndNum");
static_assert(offsetof(FPalStaticItemIdAndNum, StaticItemId) == 0x000000, "Member 'FPalStaticItemIdAndNum::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalStaticItemIdAndNum, Num) == 0x000008, "Member 'FPalStaticItemIdAndNum::Num' has a wrong offset!");

// ScriptStruct Pal.PalLogAdditionalData
// 0x0038 (0x0038 - 0x0000)
struct FPalLogAdditionalData final
{
public:
	TArray<TSoftObjectPtr<class UTexture2D>>      SoftTextures;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EPalLogContentToneType                        LogToneType;                                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AD[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultFontStyleName;                              // 0x0014(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UPalLogWidgetBase>          OverrideWidgetClass;                               // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalStaticItemIdAndNum                 ItemIDAndNum;                                      // 0x0028(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AF[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalLogAdditionalData) == 0x000008, "Wrong alignment on FPalLogAdditionalData");
static_assert(sizeof(FPalLogAdditionalData) == 0x000038, "Wrong size on FPalLogAdditionalData");
static_assert(offsetof(FPalLogAdditionalData, SoftTextures) == 0x000000, "Member 'FPalLogAdditionalData::SoftTextures' has a wrong offset!");
static_assert(offsetof(FPalLogAdditionalData, LogToneType) == 0x000010, "Member 'FPalLogAdditionalData::LogToneType' has a wrong offset!");
static_assert(offsetof(FPalLogAdditionalData, DefaultFontStyleName) == 0x000014, "Member 'FPalLogAdditionalData::DefaultFontStyleName' has a wrong offset!");
static_assert(offsetof(FPalLogAdditionalData, OverrideWidgetClass) == 0x000020, "Member 'FPalLogAdditionalData::OverrideWidgetClass' has a wrong offset!");
static_assert(offsetof(FPalLogAdditionalData, ItemIDAndNum) == 0x000028, "Member 'FPalLogAdditionalData::ItemIDAndNum' has a wrong offset!");

// ScriptStruct Pal.PalTimerHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FPalTimerHandle final
{
public:
	uint8                                         Pad_25B0[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalTimerHandle) == 0x000004, "Wrong alignment on FPalTimerHandle");
static_assert(sizeof(FPalTimerHandle) == 0x000010, "Wrong size on FPalTimerHandle");

// ScriptStruct Pal.PalDeadInfo
// 0x0050 (0x0050 - 0x0000)
struct FPalDeadInfo final
{
public:
	int32                                         LastDamage;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastAttacker;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SelfActor;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlowVelocity;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaID                                    SelfDestructWaza;                                  // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalDeadType                                  DeadType;                                          // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B2[0x6];                                     // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDeadInfo) == 0x000008, "Wrong alignment on FPalDeadInfo");
static_assert(sizeof(FPalDeadInfo) == 0x000050, "Wrong size on FPalDeadInfo");
static_assert(offsetof(FPalDeadInfo, LastDamage) == 0x000000, "Member 'FPalDeadInfo::LastDamage' has a wrong offset!");
static_assert(offsetof(FPalDeadInfo, LastAttacker) == 0x000008, "Member 'FPalDeadInfo::LastAttacker' has a wrong offset!");
static_assert(offsetof(FPalDeadInfo, SelfActor) == 0x000010, "Member 'FPalDeadInfo::SelfActor' has a wrong offset!");
static_assert(offsetof(FPalDeadInfo, BlowVelocity) == 0x000018, "Member 'FPalDeadInfo::BlowVelocity' has a wrong offset!");
static_assert(offsetof(FPalDeadInfo, HitLocation) == 0x000030, "Member 'FPalDeadInfo::HitLocation' has a wrong offset!");
static_assert(offsetof(FPalDeadInfo, SelfDestructWaza) == 0x000048, "Member 'FPalDeadInfo::SelfDestructWaza' has a wrong offset!");
static_assert(offsetof(FPalDeadInfo, DeadType) == 0x000049, "Member 'FPalDeadInfo::DeadType' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_BaseCampWorkerEventData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_BaseCampWorkerEventData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_BaseCampWorkerEventData) == 0x000004, "Wrong alignment on FPalDataTableRowName_BaseCampWorkerEventData");
static_assert(sizeof(FPalDataTableRowName_BaseCampWorkerEventData) == 0x000008, "Wrong size on FPalDataTableRowName_BaseCampWorkerEventData");
static_assert(offsetof(FPalDataTableRowName_BaseCampWorkerEventData, Key) == 0x000000, "Member 'FPalDataTableRowName_BaseCampWorkerEventData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDungeonPointMarkerSaveData
// 0x0028 (0x0028 - 0x0000)
struct FPalDungeonPointMarkerSaveData final
{
public:
	struct FGuid                                  MarkerPointId;                                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameDateTime                          NextRespawnGameTime;                               // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ConnectedDungeonInstanceId;                        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonPointMarkerSaveData) == 0x000008, "Wrong alignment on FPalDungeonPointMarkerSaveData");
static_assert(sizeof(FPalDungeonPointMarkerSaveData) == 0x000028, "Wrong size on FPalDungeonPointMarkerSaveData");
static_assert(offsetof(FPalDungeonPointMarkerSaveData, MarkerPointId) == 0x000000, "Member 'FPalDungeonPointMarkerSaveData::MarkerPointId' has a wrong offset!");
static_assert(offsetof(FPalDungeonPointMarkerSaveData, NextRespawnGameTime) == 0x000010, "Member 'FPalDungeonPointMarkerSaveData::NextRespawnGameTime' has a wrong offset!");
static_assert(offsetof(FPalDungeonPointMarkerSaveData, ConnectedDungeonInstanceId) == 0x000018, "Member 'FPalDungeonPointMarkerSaveData::ConnectedDungeonInstanceId' has a wrong offset!");

// ScriptStruct Pal.PalUIPalCaptureInfo
// 0x0028 (0x0028 - 0x0000)
struct FPalUIPalCaptureInfo final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureCount;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PassiveSkillNameList;                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsRarePal;                                         // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnlockedPaldeck;                                 // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B3[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUIPalCaptureInfo) == 0x000008, "Wrong alignment on FPalUIPalCaptureInfo");
static_assert(sizeof(FPalUIPalCaptureInfo) == 0x000028, "Wrong size on FPalUIPalCaptureInfo");
static_assert(offsetof(FPalUIPalCaptureInfo, CharacterID) == 0x000000, "Member 'FPalUIPalCaptureInfo::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalUIPalCaptureInfo, CaptureCount) == 0x000008, "Member 'FPalUIPalCaptureInfo::CaptureCount' has a wrong offset!");
static_assert(offsetof(FPalUIPalCaptureInfo, Level) == 0x00000C, "Member 'FPalUIPalCaptureInfo::Level' has a wrong offset!");
static_assert(offsetof(FPalUIPalCaptureInfo, PassiveSkillNameList) == 0x000010, "Member 'FPalUIPalCaptureInfo::PassiveSkillNameList' has a wrong offset!");
static_assert(offsetof(FPalUIPalCaptureInfo, IsRarePal) == 0x000020, "Member 'FPalUIPalCaptureInfo::IsRarePal' has a wrong offset!");
static_assert(offsetof(FPalUIPalCaptureInfo, IsUnlockedPaldeck) == 0x000021, "Member 'FPalUIPalCaptureInfo::IsUnlockedPaldeck' has a wrong offset!");

// ScriptStruct Pal.PalFoliagePresetData
// 0x0040 (0x0040 - 0x0000)
struct FPalFoliagePresetData final
{
public:
	struct FPalDataTableRowName_MapObjectData     FoliageMapObjectId;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalMapObjectDropItemData>      DamagedDropItems;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_ItemData          DropItemId;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropItemNum;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropEXP;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectDestroyFXType                    DestroyFXType;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B5[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceFromPlayerNotRespawn;                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RespawnIntervalRealMinutes;                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetryRespawnIntervalRealMinutes;                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliagePresetData) == 0x000008, "Wrong alignment on FPalFoliagePresetData");
static_assert(sizeof(FPalFoliagePresetData) == 0x000040, "Wrong size on FPalFoliagePresetData");
static_assert(offsetof(FPalFoliagePresetData, FoliageMapObjectId) == 0x000000, "Member 'FPalFoliagePresetData::FoliageMapObjectId' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, HP) == 0x000008, "Member 'FPalFoliagePresetData::HP' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, DamagedDropItems) == 0x000010, "Member 'FPalFoliagePresetData::DamagedDropItems' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, DropItemId) == 0x000020, "Member 'FPalFoliagePresetData::DropItemId' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, DropItemNum) == 0x000028, "Member 'FPalFoliagePresetData::DropItemNum' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, DropEXP) == 0x00002C, "Member 'FPalFoliagePresetData::DropEXP' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, DestroyFXType) == 0x000030, "Member 'FPalFoliagePresetData::DestroyFXType' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, DistanceFromPlayerNotRespawn) == 0x000034, "Member 'FPalFoliagePresetData::DistanceFromPlayerNotRespawn' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, RespawnIntervalRealMinutes) == 0x000038, "Member 'FPalFoliagePresetData::RespawnIntervalRealMinutes' has a wrong offset!");
static_assert(offsetof(FPalFoliagePresetData, RetryRespawnIntervalRealMinutes) == 0x00003C, "Member 'FPalFoliagePresetData::RetryRespawnIntervalRealMinutes' has a wrong offset!");

// ScriptStruct Pal.PalDebugCharacterStatusRank
// 0x0008 (0x0008 - 0x0000)
struct FPalDebugCharacterStatusRank final
{
public:
	EPalCharacterStatusOperationName              OperationName;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDebugCharacterStatusRank) == 0x000004, "Wrong alignment on FPalDebugCharacterStatusRank");
static_assert(sizeof(FPalDebugCharacterStatusRank) == 0x000008, "Wrong size on FPalDebugCharacterStatusRank");
static_assert(offsetof(FPalDebugCharacterStatusRank, OperationName) == 0x000000, "Member 'FPalDebugCharacterStatusRank::OperationName' has a wrong offset!");
static_assert(offsetof(FPalDebugCharacterStatusRank, Rank) == 0x000004, "Member 'FPalDebugCharacterStatusRank::Rank' has a wrong offset!");

// ScriptStruct Pal.PalDebugOtomoPalInfo
// 0x0040 (0x0040 - 0x0000)
struct FPalDebugOtomoPalInfo final
{
public:
	struct FPalDataTableRowName_PalMonsterData    PalName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPalWazaID>                            WazaList;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDataTableRowName_PassiveSkillData> PassiveSkill;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDebugCharacterStatusRank>   StatusRank;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDebugOtomoPalInfo) == 0x000008, "Wrong alignment on FPalDebugOtomoPalInfo");
static_assert(sizeof(FPalDebugOtomoPalInfo) == 0x000040, "Wrong size on FPalDebugOtomoPalInfo");
static_assert(offsetof(FPalDebugOtomoPalInfo, PalName) == 0x000000, "Member 'FPalDebugOtomoPalInfo::PalName' has a wrong offset!");
static_assert(offsetof(FPalDebugOtomoPalInfo, Level) == 0x000008, "Member 'FPalDebugOtomoPalInfo::Level' has a wrong offset!");
static_assert(offsetof(FPalDebugOtomoPalInfo, Rank) == 0x00000C, "Member 'FPalDebugOtomoPalInfo::Rank' has a wrong offset!");
static_assert(offsetof(FPalDebugOtomoPalInfo, WazaList) == 0x000010, "Member 'FPalDebugOtomoPalInfo::WazaList' has a wrong offset!");
static_assert(offsetof(FPalDebugOtomoPalInfo, PassiveSkill) == 0x000020, "Member 'FPalDebugOtomoPalInfo::PassiveSkill' has a wrong offset!");
static_assert(offsetof(FPalDebugOtomoPalInfo, StatusRank) == 0x000030, "Member 'FPalDebugOtomoPalInfo::StatusRank' has a wrong offset!");

// ScriptStruct Pal.PalPathFollowingBlockDetectionParams
// 0x000C (0x000C - 0x0000)
struct FPalPathFollowingBlockDetectionParams final
{
public:
	float                                         BlockDetectionDistance;                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockDetectionInterval;                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockDetectionSampleCount;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPathFollowingBlockDetectionParams) == 0x000004, "Wrong alignment on FPalPathFollowingBlockDetectionParams");
static_assert(sizeof(FPalPathFollowingBlockDetectionParams) == 0x00000C, "Wrong size on FPalPathFollowingBlockDetectionParams");
static_assert(offsetof(FPalPathFollowingBlockDetectionParams, BlockDetectionDistance) == 0x000000, "Member 'FPalPathFollowingBlockDetectionParams::BlockDetectionDistance' has a wrong offset!");
static_assert(offsetof(FPalPathFollowingBlockDetectionParams, BlockDetectionInterval) == 0x000004, "Member 'FPalPathFollowingBlockDetectionParams::BlockDetectionInterval' has a wrong offset!");
static_assert(offsetof(FPalPathFollowingBlockDetectionParams, BlockDetectionSampleCount) == 0x000008, "Member 'FPalPathFollowingBlockDetectionParams::BlockDetectionSampleCount' has a wrong offset!");

// ScriptStruct Pal.PalAIActionBaseCampSleepActivelyParameter
// 0x0004 (0x0004 - 0x0000)
struct FPalAIActionBaseCampSleepActivelyParameter final
{
public:
	float                                         WalkAroundTime;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalAIActionBaseCampSleepActivelyParameter) == 0x000004, "Wrong alignment on FPalAIActionBaseCampSleepActivelyParameter");
static_assert(sizeof(FPalAIActionBaseCampSleepActivelyParameter) == 0x000004, "Wrong size on FPalAIActionBaseCampSleepActivelyParameter");
static_assert(offsetof(FPalAIActionBaseCampSleepActivelyParameter, WalkAroundTime) == 0x000000, "Member 'FPalAIActionBaseCampSleepActivelyParameter::WalkAroundTime' has a wrong offset!");

// ScriptStruct Pal.PalRandomIncidentSpawnMonsterData
// 0x0040 (0x0048 - 0x0008)
struct FPalRandomIncidentSpawnMonsterData final : public FTableRowBase
{
public:
	struct FPalDataTableRowName_PalMonsterData    CharacterID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSquad;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B7[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SpawnLocation;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRadius;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotZ_Degree;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APalAIController>           ControllerClass;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalActionBase>             DefaultActionClass;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomIncidentSpawnMonsterData) == 0x000008, "Wrong alignment on FPalRandomIncidentSpawnMonsterData");
static_assert(sizeof(FPalRandomIncidentSpawnMonsterData) == 0x000048, "Wrong size on FPalRandomIncidentSpawnMonsterData");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, CharacterID) == 0x000008, "Member 'FPalRandomIncidentSpawnMonsterData::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, Level) == 0x000010, "Member 'FPalRandomIncidentSpawnMonsterData::Level' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, Group) == 0x000014, "Member 'FPalRandomIncidentSpawnMonsterData::Group' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, IsSquad) == 0x000018, "Member 'FPalRandomIncidentSpawnMonsterData::IsSquad' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, SpawnLocation) == 0x000020, "Member 'FPalRandomIncidentSpawnMonsterData::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, SpawnRadius) == 0x000030, "Member 'FPalRandomIncidentSpawnMonsterData::SpawnRadius' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, RotZ_Degree) == 0x000034, "Member 'FPalRandomIncidentSpawnMonsterData::RotZ_Degree' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, ControllerClass) == 0x000038, "Member 'FPalRandomIncidentSpawnMonsterData::ControllerClass' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterData, DefaultActionClass) == 0x000040, "Member 'FPalRandomIncidentSpawnMonsterData::DefaultActionClass' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_GameProgressPreset
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_GameProgressPreset final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_GameProgressPreset) == 0x000004, "Wrong alignment on FPalDataTableRowName_GameProgressPreset");
static_assert(sizeof(FPalDataTableRowName_GameProgressPreset) == 0x000008, "Wrong size on FPalDataTableRowName_GameProgressPreset");
static_assert(offsetof(FPalDataTableRowName_GameProgressPreset, Key) == 0x000000, "Member 'FPalDataTableRowName_GameProgressPreset::Key' has a wrong offset!");

// ScriptStruct Pal.ReactivePropertyFloat
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FReactivePropertyFloat final
{
public:
	uint8                                         Pad_25B8[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReactivePropertyFloat) == 0x000008, "Wrong alignment on FReactivePropertyFloat");
static_assert(sizeof(FReactivePropertyFloat) == 0x000018, "Wrong size on FReactivePropertyFloat");

// ScriptStruct Pal.PalNPCTalkSelectedChoiceCommandData
// 0x0020 (0x0020 - 0x0000)
struct FPalNPCTalkSelectedChoiceCommandData final
{
public:
	EPalNPCTalkSelectedChoiceCommand              SelectedChoiceCommand;                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SeqenceName;                                       // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomFuncName;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCloseWhenCalledCustomFunc;                       // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BA[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CustomFuncParam;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCTalkSelectedChoiceCommandData) == 0x000008, "Wrong alignment on FPalNPCTalkSelectedChoiceCommandData");
static_assert(sizeof(FPalNPCTalkSelectedChoiceCommandData) == 0x000020, "Wrong size on FPalNPCTalkSelectedChoiceCommandData");
static_assert(offsetof(FPalNPCTalkSelectedChoiceCommandData, SelectedChoiceCommand) == 0x000000, "Member 'FPalNPCTalkSelectedChoiceCommandData::SelectedChoiceCommand' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkSelectedChoiceCommandData, SeqenceName) == 0x000004, "Member 'FPalNPCTalkSelectedChoiceCommandData::SeqenceName' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkSelectedChoiceCommandData, CustomFuncName) == 0x00000C, "Member 'FPalNPCTalkSelectedChoiceCommandData::CustomFuncName' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkSelectedChoiceCommandData, IsCloseWhenCalledCustomFunc) == 0x000014, "Member 'FPalNPCTalkSelectedChoiceCommandData::IsCloseWhenCalledCustomFunc' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkSelectedChoiceCommandData, CustomFuncParam) == 0x000018, "Member 'FPalNPCTalkSelectedChoiceCommandData::CustomFuncParam' has a wrong offset!");

// ScriptStruct Pal.PalDebugItemCreateInfo
// 0x000C (0x000C - 0x0000)
struct FPalDebugItemCreateInfo final
{
public:
	struct FPalDataTableRowName_ItemData          ItemRowName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDebugItemCreateInfo) == 0x000004, "Wrong alignment on FPalDebugItemCreateInfo");
static_assert(sizeof(FPalDebugItemCreateInfo) == 0x00000C, "Wrong size on FPalDebugItemCreateInfo");
static_assert(offsetof(FPalDebugItemCreateInfo, ItemRowName) == 0x000000, "Member 'FPalDebugItemCreateInfo::ItemRowName' has a wrong offset!");
static_assert(offsetof(FPalDebugItemCreateInfo, ItemNum) == 0x000008, "Member 'FPalDebugItemCreateInfo::ItemNum' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampRepInfo
// 0x001C (0x0028 - 0x000C)
struct FPalBaseCampRepInfo final : public FFastArraySerializerItem
{
public:
	struct FGuid                                  ID;                                                // 0x000C(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BB[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalBaseCampModel*                      BaseCamp;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampRepInfo) == 0x000008, "Wrong alignment on FPalBaseCampRepInfo");
static_assert(sizeof(FPalBaseCampRepInfo) == 0x000028, "Wrong size on FPalBaseCampRepInfo");
static_assert(offsetof(FPalBaseCampRepInfo, ID) == 0x00000C, "Member 'FPalBaseCampRepInfo::ID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampRepInfo, BaseCamp) == 0x000020, "Member 'FPalBaseCampRepInfo::BaseCamp' has a wrong offset!");

// ScriptStruct Pal.FastPalBaseCampRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FFastPalBaseCampRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalBaseCampRepInfo>            Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BC[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFastPalBaseCampRepInfoArray) == 0x000008, "Wrong alignment on FFastPalBaseCampRepInfoArray");
static_assert(sizeof(FFastPalBaseCampRepInfoArray) == 0x000148, "Wrong size on FFastPalBaseCampRepInfoArray");
static_assert(offsetof(FFastPalBaseCampRepInfoArray, Items) == 0x000108, "Member 'FFastPalBaseCampRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalLogInfo_DropPal
// 0x0018 (0x0018 - 0x0000)
struct FPalLogInfo_DropPal final
{
public:
	class FString                                 NickName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterID;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLogInfo_DropPal) == 0x000008, "Wrong alignment on FPalLogInfo_DropPal");
static_assert(sizeof(FPalLogInfo_DropPal) == 0x000018, "Wrong size on FPalLogInfo_DropPal");
static_assert(offsetof(FPalLogInfo_DropPal, NickName) == 0x000000, "Member 'FPalLogInfo_DropPal::NickName' has a wrong offset!");
static_assert(offsetof(FPalLogInfo_DropPal, CharacterID) == 0x000010, "Member 'FPalLogInfo_DropPal::CharacterID' has a wrong offset!");

// ScriptStruct Pal.PalKeyConfigKeys
// 0x0030 (0x0030 - 0x0000)
struct FPalKeyConfigKeys
{
public:
	struct FKey                                   MainKey;                                           // 0x0000(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   SecondaryKey;                                      // 0x0018(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalKeyConfigKeys) == 0x000008, "Wrong alignment on FPalKeyConfigKeys");
static_assert(sizeof(FPalKeyConfigKeys) == 0x000030, "Wrong size on FPalKeyConfigKeys");
static_assert(offsetof(FPalKeyConfigKeys, MainKey) == 0x000000, "Member 'FPalKeyConfigKeys::MainKey' has a wrong offset!");
static_assert(offsetof(FPalKeyConfigKeys, SecondaryKey) == 0x000018, "Member 'FPalKeyConfigKeys::SecondaryKey' has a wrong offset!");

// ScriptStruct Pal.PalSoundSource
// 0x0008 (0x0010 - 0x0008)
struct FPalSoundSource final : public FTableRowBase
{
public:
	int32                                         Radius_Meter;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuteable;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BD[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalSoundSource) == 0x000008, "Wrong alignment on FPalSoundSource");
static_assert(sizeof(FPalSoundSource) == 0x000010, "Wrong size on FPalSoundSource");
static_assert(offsetof(FPalSoundSource, Radius_Meter) == 0x000008, "Member 'FPalSoundSource::Radius_Meter' has a wrong offset!");
static_assert(offsetof(FPalSoundSource, bIsMuteable) == 0x00000C, "Member 'FPalSoundSource::bIsMuteable' has a wrong offset!");

// ScriptStruct Pal.PalPlayerAccountInitData
// 0x00A8 (0x00A8 - 0x0000)
struct FPalPlayerAccountInitData final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalPlayerDataCharacterMakeInfo        CharacterMakeData;                                 // 0x0010(0x0094)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BE[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPlayerAccountInitData) == 0x000008, "Wrong alignment on FPalPlayerAccountInitData");
static_assert(sizeof(FPalPlayerAccountInitData) == 0x0000A8, "Wrong size on FPalPlayerAccountInitData");
static_assert(offsetof(FPalPlayerAccountInitData, CharacterName) == 0x000000, "Member 'FPalPlayerAccountInitData::CharacterName' has a wrong offset!");
static_assert(offsetof(FPalPlayerAccountInitData, CharacterMakeData) == 0x000010, "Member 'FPalPlayerAccountInitData::CharacterMakeData' has a wrong offset!");

// ScriptStruct Pal.PalCharacterParameterDatabaseRow
// 0x0128 (0x0130 - 0x0008)
struct FPalCharacterParameterDatabaseRow final : public FTableRowBase
{
public:
	class FName                                   OverrideNameTextID;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NamePrefixID;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverridePartnerSkillTextID;                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPal;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalTribeID                                   Tribe;                                             // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25BF[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BPClass;                                           // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZukanIndex;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZukanIndexSuffix;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalSizeType                                  Size;                                              // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C0[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rarity;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               ElementType1;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               ElementType2;                                      // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalGenusCategoryType                         GenusCategory;                                     // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalOrganizationType                          Organization;                                      // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWeaponType                                Weapon;                                            // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WeaponEquip;                                       // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C1[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeleeAttack;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotAttack;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defense;                                           // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Support;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftSpeed;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyMaxHPRate;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyReceiveDamageRate;                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyInflictDamageRate;                            // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CaptureRateCorrect;                                // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpRatio;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Price;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIResponse;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AISightResponse;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlowWalkSpeed;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WalkSpeed;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RunSpeed;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RideSprintSpeed;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransportSpeed;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBoss;                                            // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTowerBoss;                                       // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRaidBoss;                                        // 0x00A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBattleBGMType                             BattleBGM;                                         // 0x00A7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreLeanBack;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreBlowAway;                                    // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C2[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFullStomach;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStomachDecreaseRate;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoodAmount;                                        // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewingDistance;                                   // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewingAngle;                                      // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingRate;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NooseTrap;                                         // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Nocturnal;                                         // 0x00C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C3[0x2];                                     // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BiologicalGrade;                                   // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Predator;                                          // 0x00CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Edible;                                            // 0x00CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C4[0x2];                                     // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Stamina;                                           // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaleProbability;                                   // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombiRank;                                         // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_EmitFlame;                         // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Watering;                          // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Seeding;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_GenerateElectricity;               // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Handcraft;                         // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Collection;                        // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Deforest;                          // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Mining;                            // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_OilExtraction;                     // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_ProductMedicine;                   // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Cool;                              // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_Transport;                         // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSuitability_MonsterFarm;                       // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkill1;                                     // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkill2;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkill3;                                     // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkill4;                                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterParameterDatabaseRow) == 0x000008, "Wrong alignment on FPalCharacterParameterDatabaseRow");
static_assert(sizeof(FPalCharacterParameterDatabaseRow) == 0x000130, "Wrong size on FPalCharacterParameterDatabaseRow");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, OverrideNameTextID) == 0x000008, "Member 'FPalCharacterParameterDatabaseRow::OverrideNameTextID' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, NamePrefixID) == 0x000010, "Member 'FPalCharacterParameterDatabaseRow::NamePrefixID' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, OverridePartnerSkillTextID) == 0x000018, "Member 'FPalCharacterParameterDatabaseRow::OverridePartnerSkillTextID' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, IsPal) == 0x000020, "Member 'FPalCharacterParameterDatabaseRow::IsPal' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Tribe) == 0x000021, "Member 'FPalCharacterParameterDatabaseRow::Tribe' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, BPClass) == 0x000024, "Member 'FPalCharacterParameterDatabaseRow::BPClass' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ZukanIndex) == 0x00002C, "Member 'FPalCharacterParameterDatabaseRow::ZukanIndex' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ZukanIndexSuffix) == 0x000030, "Member 'FPalCharacterParameterDatabaseRow::ZukanIndexSuffix' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Size) == 0x000040, "Member 'FPalCharacterParameterDatabaseRow::Size' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Rarity) == 0x000044, "Member 'FPalCharacterParameterDatabaseRow::Rarity' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ElementType1) == 0x000048, "Member 'FPalCharacterParameterDatabaseRow::ElementType1' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ElementType2) == 0x000049, "Member 'FPalCharacterParameterDatabaseRow::ElementType2' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, GenusCategory) == 0x00004A, "Member 'FPalCharacterParameterDatabaseRow::GenusCategory' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Organization) == 0x00004B, "Member 'FPalCharacterParameterDatabaseRow::Organization' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Weapon) == 0x00004C, "Member 'FPalCharacterParameterDatabaseRow::Weapon' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WeaponEquip) == 0x00004D, "Member 'FPalCharacterParameterDatabaseRow::WeaponEquip' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, HP) == 0x000050, "Member 'FPalCharacterParameterDatabaseRow::HP' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, MeleeAttack) == 0x000054, "Member 'FPalCharacterParameterDatabaseRow::MeleeAttack' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ShotAttack) == 0x000058, "Member 'FPalCharacterParameterDatabaseRow::ShotAttack' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Defense) == 0x00005C, "Member 'FPalCharacterParameterDatabaseRow::Defense' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Support) == 0x000060, "Member 'FPalCharacterParameterDatabaseRow::Support' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, CraftSpeed) == 0x000064, "Member 'FPalCharacterParameterDatabaseRow::CraftSpeed' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, EnemyMaxHPRate) == 0x000068, "Member 'FPalCharacterParameterDatabaseRow::EnemyMaxHPRate' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, EnemyReceiveDamageRate) == 0x00006C, "Member 'FPalCharacterParameterDatabaseRow::EnemyReceiveDamageRate' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, EnemyInflictDamageRate) == 0x000070, "Member 'FPalCharacterParameterDatabaseRow::EnemyInflictDamageRate' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, CaptureRateCorrect) == 0x000074, "Member 'FPalCharacterParameterDatabaseRow::CaptureRateCorrect' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ExpRatio) == 0x000078, "Member 'FPalCharacterParameterDatabaseRow::ExpRatio' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Price) == 0x00007C, "Member 'FPalCharacterParameterDatabaseRow::Price' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, AIResponse) == 0x000080, "Member 'FPalCharacterParameterDatabaseRow::AIResponse' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, AISightResponse) == 0x000088, "Member 'FPalCharacterParameterDatabaseRow::AISightResponse' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, SlowWalkSpeed) == 0x000090, "Member 'FPalCharacterParameterDatabaseRow::SlowWalkSpeed' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WalkSpeed) == 0x000094, "Member 'FPalCharacterParameterDatabaseRow::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, RunSpeed) == 0x000098, "Member 'FPalCharacterParameterDatabaseRow::RunSpeed' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, RideSprintSpeed) == 0x00009C, "Member 'FPalCharacterParameterDatabaseRow::RideSprintSpeed' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, TransportSpeed) == 0x0000A0, "Member 'FPalCharacterParameterDatabaseRow::TransportSpeed' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, IsBoss) == 0x0000A4, "Member 'FPalCharacterParameterDatabaseRow::IsBoss' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, IsTowerBoss) == 0x0000A5, "Member 'FPalCharacterParameterDatabaseRow::IsTowerBoss' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, IsRaidBoss) == 0x0000A6, "Member 'FPalCharacterParameterDatabaseRow::IsRaidBoss' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, BattleBGM) == 0x0000A7, "Member 'FPalCharacterParameterDatabaseRow::BattleBGM' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, IgnoreLeanBack) == 0x0000A8, "Member 'FPalCharacterParameterDatabaseRow::IgnoreLeanBack' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, IgnoreBlowAway) == 0x0000A9, "Member 'FPalCharacterParameterDatabaseRow::IgnoreBlowAway' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, MaxFullStomach) == 0x0000AC, "Member 'FPalCharacterParameterDatabaseRow::MaxFullStomach' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, FullStomachDecreaseRate) == 0x0000B0, "Member 'FPalCharacterParameterDatabaseRow::FullStomachDecreaseRate' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, FoodAmount) == 0x0000B4, "Member 'FPalCharacterParameterDatabaseRow::FoodAmount' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ViewingDistance) == 0x0000B8, "Member 'FPalCharacterParameterDatabaseRow::ViewingDistance' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, ViewingAngle) == 0x0000BC, "Member 'FPalCharacterParameterDatabaseRow::ViewingAngle' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, HearingRate) == 0x0000C0, "Member 'FPalCharacterParameterDatabaseRow::HearingRate' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, NooseTrap) == 0x0000C4, "Member 'FPalCharacterParameterDatabaseRow::NooseTrap' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Nocturnal) == 0x0000C5, "Member 'FPalCharacterParameterDatabaseRow::Nocturnal' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, BiologicalGrade) == 0x0000C8, "Member 'FPalCharacterParameterDatabaseRow::BiologicalGrade' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Predator) == 0x0000CC, "Member 'FPalCharacterParameterDatabaseRow::Predator' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Edible) == 0x0000CD, "Member 'FPalCharacterParameterDatabaseRow::Edible' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, Stamina) == 0x0000D0, "Member 'FPalCharacterParameterDatabaseRow::Stamina' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, MaleProbability) == 0x0000D4, "Member 'FPalCharacterParameterDatabaseRow::MaleProbability' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, CombiRank) == 0x0000D8, "Member 'FPalCharacterParameterDatabaseRow::CombiRank' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_EmitFlame) == 0x0000DC, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_EmitFlame' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Watering) == 0x0000E0, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Watering' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Seeding) == 0x0000E4, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Seeding' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_GenerateElectricity) == 0x0000E8, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_GenerateElectricity' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Handcraft) == 0x0000EC, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Handcraft' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Collection) == 0x0000F0, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Collection' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Deforest) == 0x0000F4, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Deforest' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Mining) == 0x0000F8, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Mining' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_OilExtraction) == 0x0000FC, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_OilExtraction' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_ProductMedicine) == 0x000100, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_ProductMedicine' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Cool) == 0x000104, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Cool' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_Transport) == 0x000108, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_Transport' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, WorkSuitability_MonsterFarm) == 0x00010C, "Member 'FPalCharacterParameterDatabaseRow::WorkSuitability_MonsterFarm' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, PassiveSkill1) == 0x000110, "Member 'FPalCharacterParameterDatabaseRow::PassiveSkill1' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, PassiveSkill2) == 0x000118, "Member 'FPalCharacterParameterDatabaseRow::PassiveSkill2' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, PassiveSkill3) == 0x000120, "Member 'FPalCharacterParameterDatabaseRow::PassiveSkill3' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameterDatabaseRow, PassiveSkill4) == 0x000128, "Member 'FPalCharacterParameterDatabaseRow::PassiveSkill4' has a wrong offset!");

// ScriptStruct Pal.PalRadialCatalog
// 0x0050 (0x0050 - 0x0000)
struct FPalRadialCatalog final
{
public:
	TMap<int32, int32>                            Catalog;                                           // 0x0000(0x0050)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRadialCatalog) == 0x000008, "Wrong alignment on FPalRadialCatalog");
static_assert(sizeof(FPalRadialCatalog) == 0x000050, "Wrong size on FPalRadialCatalog");
static_assert(offsetof(FPalRadialCatalog, Catalog) == 0x000000, "Member 'FPalRadialCatalog::Catalog' has a wrong offset!");

// ScriptStruct Pal.PalBoundsTransform
// 0x0080 (0x0080 - 0x0000)
struct FPalBoundsTransform final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C5[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Edit, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       Bounds;                                            // 0x0040(0x0038)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C6[0x8];                                     // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBoundsTransform) == 0x000010, "Wrong alignment on FPalBoundsTransform");
static_assert(sizeof(FPalBoundsTransform) == 0x000080, "Wrong size on FPalBoundsTransform");
static_assert(offsetof(FPalBoundsTransform, Location) == 0x000000, "Member 'FPalBoundsTransform::Location' has a wrong offset!");
static_assert(offsetof(FPalBoundsTransform, Rotation) == 0x000020, "Member 'FPalBoundsTransform::Rotation' has a wrong offset!");
static_assert(offsetof(FPalBoundsTransform, Bounds) == 0x000040, "Member 'FPalBoundsTransform::Bounds' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectModelStaticData
// 0x00D0 (0x00D0 - 0x0000)
struct FPalMapObjectModelStaticData final
{
public:
	struct FPalBoundsTransform                    WorkableBounds;                                    // 0x0000(0x0080)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   MeshBoxBounds;                                     // 0x0080(0x0038)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EPalMapObjectDamagableType                    DamagableType;                                     // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C7[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BuildObjectId;                                     // 0x00BC(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C8[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APalMapObject>              BlueprintClass;                                    // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectModelStaticData) == 0x000010, "Wrong alignment on FPalMapObjectModelStaticData");
static_assert(sizeof(FPalMapObjectModelStaticData) == 0x0000D0, "Wrong size on FPalMapObjectModelStaticData");
static_assert(offsetof(FPalMapObjectModelStaticData, WorkableBounds) == 0x000000, "Member 'FPalMapObjectModelStaticData::WorkableBounds' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelStaticData, MeshBoxBounds) == 0x000080, "Member 'FPalMapObjectModelStaticData::MeshBoxBounds' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelStaticData, DamagableType) == 0x0000B8, "Member 'FPalMapObjectModelStaticData::DamagableType' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelStaticData, BuildObjectId) == 0x0000BC, "Member 'FPalMapObjectModelStaticData::BuildObjectId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelStaticData, BlueprintClass) == 0x0000C8, "Member 'FPalMapObjectModelStaticData::BlueprintClass' has a wrong offset!");

// ScriptStruct Pal.PalPlayerStatusRankMasterData
// 0x0010 (0x0018 - 0x0008)
struct FPalPlayerStatusRankMasterData final : public FTableRowBase
{
public:
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredRelicNum;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetRequiredMoney;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C9[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPlayerStatusRankMasterData) == 0x000008, "Wrong alignment on FPalPlayerStatusRankMasterData");
static_assert(sizeof(FPalPlayerStatusRankMasterData) == 0x000018, "Wrong size on FPalPlayerStatusRankMasterData");
static_assert(offsetof(FPalPlayerStatusRankMasterData, Rank) == 0x000008, "Member 'FPalPlayerStatusRankMasterData::Rank' has a wrong offset!");
static_assert(offsetof(FPalPlayerStatusRankMasterData, RequiredRelicNum) == 0x00000C, "Member 'FPalPlayerStatusRankMasterData::RequiredRelicNum' has a wrong offset!");
static_assert(offsetof(FPalPlayerStatusRankMasterData, ResetRequiredMoney) == 0x000010, "Member 'FPalPlayerStatusRankMasterData::ResetRequiredMoney' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_SoundID
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_SoundID final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_SoundID) == 0x000004, "Wrong alignment on FPalDataTableRowName_SoundID");
static_assert(sizeof(FPalDataTableRowName_SoundID) == 0x000008, "Wrong size on FPalDataTableRowName_SoundID");
static_assert(offsetof(FPalDataTableRowName_SoundID, Key) == 0x000000, "Member 'FPalDataTableRowName_SoundID::Key' has a wrong offset!");

// ScriptStruct Pal.PalSoundOptions
// 0x0004 (0x0004 - 0x0000)
struct FPalSoundOptions final
{
public:
	int32                                         FadeInTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSoundOptions) == 0x000004, "Wrong alignment on FPalSoundOptions");
static_assert(sizeof(FPalSoundOptions) == 0x000004, "Wrong size on FPalSoundOptions");
static_assert(offsetof(FPalSoundOptions, FadeInTime) == 0x000000, "Member 'FPalSoundOptions::FadeInTime' has a wrong offset!");

// ScriptStruct Pal.RidingAimingAnimationInfo
// 0x0010 (0x0010 - 0x0000)
struct FRidingAimingAnimationInfo final
{
public:
	class UAnimSequence*                          ShootingAnimation;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   ShootingAO;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRidingAimingAnimationInfo) == 0x000008, "Wrong alignment on FRidingAimingAnimationInfo");
static_assert(sizeof(FRidingAimingAnimationInfo) == 0x000010, "Wrong size on FRidingAimingAnimationInfo");
static_assert(offsetof(FRidingAimingAnimationInfo, ShootingAnimation) == 0x000000, "Member 'FRidingAimingAnimationInfo::ShootingAnimation' has a wrong offset!");
static_assert(offsetof(FRidingAimingAnimationInfo, ShootingAO) == 0x000008, "Member 'FRidingAimingAnimationInfo::ShootingAO' has a wrong offset!");

// ScriptStruct Pal.PalItemOperationInfo_Move
// 0x0070 (0x0070 - 0x0000)
struct FPalItemOperationInfo_Move final
{
public:
	struct FPalInstanceID                         ExecutorIndividualId;                              // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalItemId>                     ItemIds;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FPalItemSlotId>                 FromSlotIds;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FPalContainerId                        ToContainerId;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalItemSlotId>                 ToSlotIds;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemOperationInfo_Move) == 0x000008, "Wrong alignment on FPalItemOperationInfo_Move");
static_assert(sizeof(FPalItemOperationInfo_Move) == 0x000070, "Wrong size on FPalItemOperationInfo_Move");
static_assert(offsetof(FPalItemOperationInfo_Move, ExecutorIndividualId) == 0x000000, "Member 'FPalItemOperationInfo_Move::ExecutorIndividualId' has a wrong offset!");
static_assert(offsetof(FPalItemOperationInfo_Move, ItemIds) == 0x000030, "Member 'FPalItemOperationInfo_Move::ItemIds' has a wrong offset!");
static_assert(offsetof(FPalItemOperationInfo_Move, FromSlotIds) == 0x000040, "Member 'FPalItemOperationInfo_Move::FromSlotIds' has a wrong offset!");
static_assert(offsetof(FPalItemOperationInfo_Move, ToContainerId) == 0x000050, "Member 'FPalItemOperationInfo_Move::ToContainerId' has a wrong offset!");
static_assert(offsetof(FPalItemOperationInfo_Move, ToSlotIds) == 0x000060, "Member 'FPalItemOperationInfo_Move::ToSlotIds' has a wrong offset!");

// ScriptStruct Pal.SkillEffectSpawnParameter
// 0x0038 (0x0038 - 0x0000)
struct FSkillEffectSpawnParameter final
{
public:
	float                                         TimeOffset;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APalSkillEffectBase>        SkillEffectClass;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToOwner;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CB[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBodyLocationType                          AttachLocationType;                                // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CC[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillEffectSpawnParameter) == 0x000008, "Wrong alignment on FSkillEffectSpawnParameter");
static_assert(sizeof(FSkillEffectSpawnParameter) == 0x000038, "Wrong size on FSkillEffectSpawnParameter");
static_assert(offsetof(FSkillEffectSpawnParameter, TimeOffset) == 0x000000, "Member 'FSkillEffectSpawnParameter::TimeOffset' has a wrong offset!");
static_assert(offsetof(FSkillEffectSpawnParameter, SkillEffectClass) == 0x000008, "Member 'FSkillEffectSpawnParameter::SkillEffectClass' has a wrong offset!");
static_assert(offsetof(FSkillEffectSpawnParameter, SpawnOffset) == 0x000010, "Member 'FSkillEffectSpawnParameter::SpawnOffset' has a wrong offset!");
static_assert(offsetof(FSkillEffectSpawnParameter, bAttachToOwner) == 0x000028, "Member 'FSkillEffectSpawnParameter::bAttachToOwner' has a wrong offset!");
static_assert(offsetof(FSkillEffectSpawnParameter, AttachSocketName) == 0x00002C, "Member 'FSkillEffectSpawnParameter::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FSkillEffectSpawnParameter, AttachLocationType) == 0x000034, "Member 'FSkillEffectSpawnParameter::AttachLocationType' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampPassiveEffectWorkHardInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalBaseCampPassiveEffectWorkHardInfo final
{
public:
	float                                         WorkSpeedRate;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeedRate;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AffectSanityRate;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseFullStomachRate;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampPassiveEffectWorkHardInfo) == 0x000004, "Wrong alignment on FPalBaseCampPassiveEffectWorkHardInfo");
static_assert(sizeof(FPalBaseCampPassiveEffectWorkHardInfo) == 0x000010, "Wrong size on FPalBaseCampPassiveEffectWorkHardInfo");
static_assert(offsetof(FPalBaseCampPassiveEffectWorkHardInfo, WorkSpeedRate) == 0x000000, "Member 'FPalBaseCampPassiveEffectWorkHardInfo::WorkSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalBaseCampPassiveEffectWorkHardInfo, MoveSpeedRate) == 0x000004, "Member 'FPalBaseCampPassiveEffectWorkHardInfo::MoveSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalBaseCampPassiveEffectWorkHardInfo, AffectSanityRate) == 0x000008, "Member 'FPalBaseCampPassiveEffectWorkHardInfo::AffectSanityRate' has a wrong offset!");
static_assert(offsetof(FPalBaseCampPassiveEffectWorkHardInfo, DecreaseFullStomachRate) == 0x00000C, "Member 'FPalBaseCampPassiveEffectWorkHardInfo::DecreaseFullStomachRate' has a wrong offset!");

// ScriptStruct Pal.PalPassiveAbilitySkills
// 0x0010 (0x0010 - 0x0000)
struct FPalPassiveAbilitySkills final
{
public:
	TArray<struct FPalPassiveAbilitySkillParameters> AllAbilityPassiveSkills;                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassiveAbilitySkills) == 0x000008, "Wrong alignment on FPalPassiveAbilitySkills");
static_assert(sizeof(FPalPassiveAbilitySkills) == 0x000010, "Wrong size on FPalPassiveAbilitySkills");
static_assert(offsetof(FPalPassiveAbilitySkills, AllAbilityPassiveSkills) == 0x000000, "Member 'FPalPassiveAbilitySkills::AllAbilityPassiveSkills' has a wrong offset!");

// ScriptStruct Pal.PalNetArchive
// 0x0010 (0x0010 - 0x0000)
struct FPalNetArchive final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNetArchive) == 0x000008, "Wrong alignment on FPalNetArchive");
static_assert(sizeof(FPalNetArchive) == 0x000010, "Wrong size on FPalNetArchive");
static_assert(offsetof(FPalNetArchive, Bytes) == 0x000000, "Member 'FPalNetArchive::Bytes' has a wrong offset!");

// ScriptStruct Pal.ActionDynamicParameter
// 0x00E0 (0x00E0 - 0x0000)
struct FActionDynamicParameter final
{
public:
	class AActor*                                 ActionTarget;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CD[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActionVelocity;                                    // 0x0070(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneralPurposeIndex;                               // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CE[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DummyTargetLocation;                               // 0x0090(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ActionID;                                          // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdjustTransform;                                // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CF[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalNetArchive                         Blackboard;                                        // 0x00C0(0x0010)(NativeAccessSpecifierPublic)
	int32                                         NetRandSeed;                                       // 0x00D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D0[0xC];                                     // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionDynamicParameter) == 0x000010, "Wrong alignment on FActionDynamicParameter");
static_assert(sizeof(FActionDynamicParameter) == 0x0000E0, "Wrong size on FActionDynamicParameter");
static_assert(offsetof(FActionDynamicParameter, ActionTarget) == 0x000000, "Member 'FActionDynamicParameter::ActionTarget' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, StartTransform) == 0x000010, "Member 'FActionDynamicParameter::StartTransform' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, ActionVelocity) == 0x000070, "Member 'FActionDynamicParameter::ActionVelocity' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, GeneralPurposeIndex) == 0x000088, "Member 'FActionDynamicParameter::GeneralPurposeIndex' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, DummyTargetLocation) == 0x000090, "Member 'FActionDynamicParameter::DummyTargetLocation' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, ActionID) == 0x0000A8, "Member 'FActionDynamicParameter::ActionID' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, bIsAdjustTransform) == 0x0000B8, "Member 'FActionDynamicParameter::bIsAdjustTransform' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, Blackboard) == 0x0000C0, "Member 'FActionDynamicParameter::Blackboard' has a wrong offset!");
static_assert(offsetof(FActionDynamicParameter, NetRandSeed) == 0x0000D0, "Member 'FActionDynamicParameter::NetRandSeed' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleTransportItemDirection
// 0x0028 (0x0028 - 0x0000)
struct FPalBaseCampModuleTransportItemDirection final
{
public:
	struct FGuid                                  RequiredMapObjectConcreteModelInstanceId;          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TransportTargetMapObjectConcreteModelInstanceId;   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemStackNum;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetunring;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D1[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampModuleTransportItemDirection) == 0x000004, "Wrong alignment on FPalBaseCampModuleTransportItemDirection");
static_assert(sizeof(FPalBaseCampModuleTransportItemDirection) == 0x000028, "Wrong size on FPalBaseCampModuleTransportItemDirection");
static_assert(offsetof(FPalBaseCampModuleTransportItemDirection, RequiredMapObjectConcreteModelInstanceId) == 0x000000, "Member 'FPalBaseCampModuleTransportItemDirection::RequiredMapObjectConcreteModelInstanceId' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemDirection, TransportTargetMapObjectConcreteModelInstanceId) == 0x000010, "Member 'FPalBaseCampModuleTransportItemDirection::TransportTargetMapObjectConcreteModelInstanceId' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemDirection, MaxItemStackNum) == 0x000020, "Member 'FPalBaseCampModuleTransportItemDirection::MaxItemStackNum' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemDirection, bRetunring) == 0x000024, "Member 'FPalBaseCampModuleTransportItemDirection::bRetunring' has a wrong offset!");

// ScriptStruct Pal.PalAIActionDynamicParameter
// 0x0050 (0x0050 - 0x0000)
struct FPalAIActionDynamicParameter final
{
public:
	class AActor*                                 GeneralActor1;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GeneralVector1;                                    // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GeneralVector2;                                    // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneralIndex1;                                     // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GeneralBool1;                                      // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D2[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeneralInteger1;                                   // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneralInteger2;                                   // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaID                                    SelfDestructWaza;                                  // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D3[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalAIActionDynamicParameter) == 0x000008, "Wrong alignment on FPalAIActionDynamicParameter");
static_assert(sizeof(FPalAIActionDynamicParameter) == 0x000050, "Wrong size on FPalAIActionDynamicParameter");
static_assert(offsetof(FPalAIActionDynamicParameter, GeneralActor1) == 0x000000, "Member 'FPalAIActionDynamicParameter::GeneralActor1' has a wrong offset!");
static_assert(offsetof(FPalAIActionDynamicParameter, GeneralVector1) == 0x000008, "Member 'FPalAIActionDynamicParameter::GeneralVector1' has a wrong offset!");
static_assert(offsetof(FPalAIActionDynamicParameter, GeneralVector2) == 0x000020, "Member 'FPalAIActionDynamicParameter::GeneralVector2' has a wrong offset!");
static_assert(offsetof(FPalAIActionDynamicParameter, GeneralIndex1) == 0x000038, "Member 'FPalAIActionDynamicParameter::GeneralIndex1' has a wrong offset!");
static_assert(offsetof(FPalAIActionDynamicParameter, GeneralBool1) == 0x00003C, "Member 'FPalAIActionDynamicParameter::GeneralBool1' has a wrong offset!");
static_assert(offsetof(FPalAIActionDynamicParameter, GeneralInteger1) == 0x000040, "Member 'FPalAIActionDynamicParameter::GeneralInteger1' has a wrong offset!");
static_assert(offsetof(FPalAIActionDynamicParameter, GeneralInteger2) == 0x000044, "Member 'FPalAIActionDynamicParameter::GeneralInteger2' has a wrong offset!");
static_assert(offsetof(FPalAIActionDynamicParameter, SelfDestructWaza) == 0x000048, "Member 'FPalAIActionDynamicParameter::SelfDestructWaza' has a wrong offset!");

// ScriptStruct Pal.ReserveMontage
// 0x0010 (0x0010 - 0x0000)
struct FReserveMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReserveMontage) == 0x000008, "Wrong alignment on FReserveMontage");
static_assert(sizeof(FReserveMontage) == 0x000010, "Wrong size on FReserveMontage");
static_assert(offsetof(FReserveMontage, Montage) == 0x000000, "Member 'FReserveMontage::Montage' has a wrong offset!");
static_assert(offsetof(FReserveMontage, PlayRate) == 0x000008, "Member 'FReserveMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(FReserveMontage, StartTime) == 0x00000C, "Member 'FReserveMontage::StartTime' has a wrong offset!");

// ScriptStruct Pal.GeneralAnimationParameter
// 0x0168 (0x0168 - 0x0000)
struct FGeneralAnimationParameter final
{
public:
	float                                         MoveSpeed;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeedXY;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InputVelocity;                                     // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClimbingVelocity;                                  // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAir;                                          // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSliding;                                        // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSwimming;                                       // 0x0052(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D4[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RangeForGround;                                    // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNearGround;                                     // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D5[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPalGeneralAnimSequenceType, class UAnimSequence*> GeneralAnimSequenceMap;                            // 0x0060(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TMap<EPalGeneralBlendSpaceType, class UBlendSpace*> GeneralBlendSpaceMap;                              // 0x00B0(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	float                                         FootIKRootOffset;                                  // 0x0100(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D6[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPalFootType, float>                     FootIKOffset;                                      // 0x0108(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	float                                         MoveSpeedPlusByRotateYaw;                          // 0x0158(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawSpeed;                                          // 0x015C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveAnimationRate;                             // 0x0160(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableUpperOverrideFlag;                          // 0x0164(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransportingObject;                               // 0x0165(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D7[0x2];                                     // 0x0166(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneralAnimationParameter) == 0x000008, "Wrong alignment on FGeneralAnimationParameter");
static_assert(sizeof(FGeneralAnimationParameter) == 0x000168, "Wrong size on FGeneralAnimationParameter");
static_assert(offsetof(FGeneralAnimationParameter, MoveSpeed) == 0x000000, "Member 'FGeneralAnimationParameter::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, MoveSpeedXY) == 0x000004, "Member 'FGeneralAnimationParameter::MoveSpeedXY' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, Velocity) == 0x000008, "Member 'FGeneralAnimationParameter::Velocity' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, InputVelocity) == 0x000020, "Member 'FGeneralAnimationParameter::InputVelocity' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, ClimbingVelocity) == 0x000038, "Member 'FGeneralAnimationParameter::ClimbingVelocity' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, bIsInAir) == 0x000050, "Member 'FGeneralAnimationParameter::bIsInAir' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, bIsSliding) == 0x000051, "Member 'FGeneralAnimationParameter::bIsSliding' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, bIsSwimming) == 0x000052, "Member 'FGeneralAnimationParameter::bIsSwimming' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, RangeForGround) == 0x000054, "Member 'FGeneralAnimationParameter::RangeForGround' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, bIsNearGround) == 0x000058, "Member 'FGeneralAnimationParameter::bIsNearGround' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, GeneralAnimSequenceMap) == 0x000060, "Member 'FGeneralAnimationParameter::GeneralAnimSequenceMap' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, GeneralBlendSpaceMap) == 0x0000B0, "Member 'FGeneralAnimationParameter::GeneralBlendSpaceMap' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, FootIKRootOffset) == 0x000100, "Member 'FGeneralAnimationParameter::FootIKRootOffset' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, FootIKOffset) == 0x000108, "Member 'FGeneralAnimationParameter::FootIKOffset' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, MoveSpeedPlusByRotateYaw) == 0x000158, "Member 'FGeneralAnimationParameter::MoveSpeedPlusByRotateYaw' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, YawSpeed) == 0x00015C, "Member 'FGeneralAnimationParameter::YawSpeed' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, AdditiveAnimationRate) == 0x000160, "Member 'FGeneralAnimationParameter::AdditiveAnimationRate' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, DisableUpperOverrideFlag) == 0x000164, "Member 'FGeneralAnimationParameter::DisableUpperOverrideFlag' has a wrong offset!");
static_assert(offsetof(FGeneralAnimationParameter, bTransportingObject) == 0x000165, "Member 'FGeneralAnimationParameter::bTransportingObject' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampSignificanceInfo
// 0x0008 (0x0008 - 0x0000)
struct FPalBaseCampSignificanceInfo final
{
public:
	float                                         DistanceInRangeFromPlayer;                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampSignificanceInfo) == 0x000004, "Wrong alignment on FPalBaseCampSignificanceInfo");
static_assert(sizeof(FPalBaseCampSignificanceInfo) == 0x000008, "Wrong size on FPalBaseCampSignificanceInfo");
static_assert(offsetof(FPalBaseCampSignificanceInfo, DistanceInRangeFromPlayer) == 0x000000, "Member 'FPalBaseCampSignificanceInfo::DistanceInRangeFromPlayer' has a wrong offset!");
static_assert(offsetof(FPalBaseCampSignificanceInfo, TickInterval) == 0x000004, "Member 'FPalBaseCampSignificanceInfo::TickInterval' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampItemExistsInfo
// 0x0014 (0x0014 - 0x0000)
struct FPalBaseCampItemExistsInfo final
{
public:
	struct FGuid                                  MapObjectModelInstanceId;                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampItemExistsInfo) == 0x000004, "Wrong alignment on FPalBaseCampItemExistsInfo");
static_assert(sizeof(FPalBaseCampItemExistsInfo) == 0x000014, "Wrong size on FPalBaseCampItemExistsInfo");
static_assert(offsetof(FPalBaseCampItemExistsInfo, MapObjectModelInstanceId) == 0x000000, "Member 'FPalBaseCampItemExistsInfo::MapObjectModelInstanceId' has a wrong offset!");
static_assert(offsetof(FPalBaseCampItemExistsInfo, ItemNum) == 0x000010, "Member 'FPalBaseCampItemExistsInfo::ItemNum' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampWorkerFindPreferredWorkInfoCache
// 0x0010 (0x0010 - 0x0000)
struct FPalBaseCampWorkerFindPreferredWorkInfoCache final
{
public:
	TArray<class UPalWorkBase*>                   SortedByPriorityDescWorks;                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampWorkerFindPreferredWorkInfoCache) == 0x000008, "Wrong alignment on FPalBaseCampWorkerFindPreferredWorkInfoCache");
static_assert(sizeof(FPalBaseCampWorkerFindPreferredWorkInfoCache) == 0x000010, "Wrong size on FPalBaseCampWorkerFindPreferredWorkInfoCache");
static_assert(offsetof(FPalBaseCampWorkerFindPreferredWorkInfoCache, SortedByPriorityDescWorks) == 0x000000, "Member 'FPalBaseCampWorkerFindPreferredWorkInfoCache::SortedByPriorityDescWorks' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampItemContainerInfo
// 0x0014 (0x0014 - 0x0000)
struct FPalBaseCampItemContainerInfo final
{
public:
	struct FPalContainerId                        ContainerId;                                       // 0x0000(0x0010)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBaseCampItemContainerType                 Type;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D8[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampItemContainerInfo) == 0x000004, "Wrong alignment on FPalBaseCampItemContainerInfo");
static_assert(sizeof(FPalBaseCampItemContainerInfo) == 0x000014, "Wrong size on FPalBaseCampItemContainerInfo");
static_assert(offsetof(FPalBaseCampItemContainerInfo, ContainerId) == 0x000000, "Member 'FPalBaseCampItemContainerInfo::ContainerId' has a wrong offset!");
static_assert(offsetof(FPalBaseCampItemContainerInfo, Type) == 0x000010, "Member 'FPalBaseCampItemContainerInfo::Type' has a wrong offset!");

// ScriptStruct Pal.PalBuildObjectData
// 0x0078 (0x0080 - 0x0008)
struct FPalBuildObjectData final : public FTableRowBase
{
public:
	class FName                                   MapObjectId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBuildObjectTypeA                          TypeA;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D9[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RedialIndex;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBuildObjectTypeB                          TypeB;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DA[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildCapacity;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequiredBuildWorkAmount;                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssetValue;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalEnergyType                                RequiredEnergyType;                                // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DB[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConsumeEnergySpeed;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material1_Id;                                      // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material1_Count;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material2_Id;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material2_Count;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material3_Id;                                      // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material3_Count;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material4_Id;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material4_Count;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideDescMsgID;                                 // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstallAtReticle;                                 // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DC[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InstallNeighborThreshold;                          // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInstallOnlyOnBase;                              // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInstallOnlyInDoor;                              // 0x0075(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInstallOnlyHubAround;                           // 0x0076(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DD[0x1];                                     // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstallMaxNumInBaseCamp;                           // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstallableNoObstacleFromCamera;                  // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25DE[0x3];                                     // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBuildObjectData) == 0x000008, "Wrong alignment on FPalBuildObjectData");
static_assert(sizeof(FPalBuildObjectData) == 0x000080, "Wrong size on FPalBuildObjectData");
static_assert(offsetof(FPalBuildObjectData, MapObjectId) == 0x000008, "Member 'FPalBuildObjectData::MapObjectId' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, TypeA) == 0x000010, "Member 'FPalBuildObjectData::TypeA' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, RedialIndex) == 0x000014, "Member 'FPalBuildObjectData::RedialIndex' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, TypeB) == 0x000018, "Member 'FPalBuildObjectData::TypeB' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Rank) == 0x00001C, "Member 'FPalBuildObjectData::Rank' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, BuildCapacity) == 0x000020, "Member 'FPalBuildObjectData::BuildCapacity' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, RequiredBuildWorkAmount) == 0x000024, "Member 'FPalBuildObjectData::RequiredBuildWorkAmount' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, AssetValue) == 0x000028, "Member 'FPalBuildObjectData::AssetValue' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, RequiredEnergyType) == 0x00002C, "Member 'FPalBuildObjectData::RequiredEnergyType' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, ConsumeEnergySpeed) == 0x000030, "Member 'FPalBuildObjectData::ConsumeEnergySpeed' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material1_Id) == 0x000034, "Member 'FPalBuildObjectData::Material1_Id' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material1_Count) == 0x00003C, "Member 'FPalBuildObjectData::Material1_Count' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material2_Id) == 0x000040, "Member 'FPalBuildObjectData::Material2_Id' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material2_Count) == 0x000048, "Member 'FPalBuildObjectData::Material2_Count' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material3_Id) == 0x00004C, "Member 'FPalBuildObjectData::Material3_Id' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material3_Count) == 0x000054, "Member 'FPalBuildObjectData::Material3_Count' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material4_Id) == 0x000058, "Member 'FPalBuildObjectData::Material4_Id' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, Material4_Count) == 0x000060, "Member 'FPalBuildObjectData::Material4_Count' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, OverrideDescMsgID) == 0x000064, "Member 'FPalBuildObjectData::OverrideDescMsgID' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, bInstallAtReticle) == 0x00006C, "Member 'FPalBuildObjectData::bInstallAtReticle' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, InstallNeighborThreshold) == 0x000070, "Member 'FPalBuildObjectData::InstallNeighborThreshold' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, bIsInstallOnlyOnBase) == 0x000074, "Member 'FPalBuildObjectData::bIsInstallOnlyOnBase' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, bIsInstallOnlyInDoor) == 0x000075, "Member 'FPalBuildObjectData::bIsInstallOnlyInDoor' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, bIsInstallOnlyHubAround) == 0x000076, "Member 'FPalBuildObjectData::bIsInstallOnlyHubAround' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, InstallMaxNumInBaseCamp) == 0x000078, "Member 'FPalBuildObjectData::InstallMaxNumInBaseCamp' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectData, bInstallableNoObstacleFromCamera) == 0x00007C, "Member 'FPalBuildObjectData::bInstallableNoObstacleFromCamera' has a wrong offset!");

// ScriptStruct Pal.RiderActionInfo
// 0x0010 (0x0010 - 0x0000)
struct FRiderActionInfo final
{
public:
	TSubclassOf<class UPalActionBase>             RideAction;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalActionBase>             GetOffAction;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRiderActionInfo) == 0x000008, "Wrong alignment on FRiderActionInfo");
static_assert(sizeof(FRiderActionInfo) == 0x000010, "Wrong size on FRiderActionInfo");
static_assert(offsetof(FRiderActionInfo, RideAction) == 0x000000, "Member 'FRiderActionInfo::RideAction' has a wrong offset!");
static_assert(offsetof(FRiderActionInfo, GetOffAction) == 0x000008, "Member 'FRiderActionInfo::GetOffAction' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampPassiveEffectMapObjectInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalBaseCampPassiveEffectMapObjectInfo final
{
public:
	TArray<struct FGuid>                          ConcreteModelInstanceIds;                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampPassiveEffectMapObjectInfo) == 0x000008, "Wrong alignment on FPalBaseCampPassiveEffectMapObjectInfo");
static_assert(sizeof(FPalBaseCampPassiveEffectMapObjectInfo) == 0x000010, "Wrong size on FPalBaseCampPassiveEffectMapObjectInfo");
static_assert(offsetof(FPalBaseCampPassiveEffectMapObjectInfo, ConcreteModelInstanceIds) == 0x000000, "Member 'FPalBaseCampPassiveEffectMapObjectInfo::ConcreteModelInstanceIds' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignRequirementParameter
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPalWorkAssignRequirementParameter final
{
public:
	uint8                                         Pad_25DF[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorkAssignRequirementParameter) == 0x000008, "Wrong alignment on FPalWorkAssignRequirementParameter");
static_assert(sizeof(FPalWorkAssignRequirementParameter) == 0x000018, "Wrong size on FPalWorkAssignRequirementParameter");

// ScriptStruct Pal.PalBaseCampWorkCollectionStashInfo
// 0x0008 (0x0008 - 0x0000)
struct FPalBaseCampWorkCollectionStashInfo final
{
public:
	struct FGameDateTime                          StashAtTime;                                       // 0x0000(0x0008)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampWorkCollectionStashInfo) == 0x000008, "Wrong alignment on FPalBaseCampWorkCollectionStashInfo");
static_assert(sizeof(FPalBaseCampWorkCollectionStashInfo) == 0x000008, "Wrong size on FPalBaseCampWorkCollectionStashInfo");
static_assert(offsetof(FPalBaseCampWorkCollectionStashInfo, StashAtTime) == 0x000000, "Member 'FPalBaseCampWorkCollectionStashInfo::StashAtTime' has a wrong offset!");

// ScriptStruct Pal.PalCommonQuestRewardData
// 0x0058 (0x0058 - 0x0000)
struct FPalCommonQuestRewardData final
{
public:
	int32                                         Exp;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TechnologyPoint;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FPalDataTableRowName_ItemData, int32> Items;                                             // 0x0008(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCommonQuestRewardData) == 0x000008, "Wrong alignment on FPalCommonQuestRewardData");
static_assert(sizeof(FPalCommonQuestRewardData) == 0x000058, "Wrong size on FPalCommonQuestRewardData");
static_assert(offsetof(FPalCommonQuestRewardData, Exp) == 0x000000, "Member 'FPalCommonQuestRewardData::Exp' has a wrong offset!");
static_assert(offsetof(FPalCommonQuestRewardData, TechnologyPoint) == 0x000004, "Member 'FPalCommonQuestRewardData::TechnologyPoint' has a wrong offset!");
static_assert(offsetof(FPalCommonQuestRewardData, Items) == 0x000008, "Member 'FPalCommonQuestRewardData::Items' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectItemProductData
// 0x0010 (0x0018 - 0x0008)
struct FPalMapObjectItemProductData final : public FTableRowBase
{
public:
	class FName                                   Product_Id;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequiredWorkAmount;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoWorkAmountBySec;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectItemProductData) == 0x000008, "Wrong alignment on FPalMapObjectItemProductData");
static_assert(sizeof(FPalMapObjectItemProductData) == 0x000018, "Wrong size on FPalMapObjectItemProductData");
static_assert(offsetof(FPalMapObjectItemProductData, Product_Id) == 0x000008, "Member 'FPalMapObjectItemProductData::Product_Id' has a wrong offset!");
static_assert(offsetof(FPalMapObjectItemProductData, RequiredWorkAmount) == 0x000010, "Member 'FPalMapObjectItemProductData::RequiredWorkAmount' has a wrong offset!");
static_assert(offsetof(FPalMapObjectItemProductData, AutoWorkAmountBySec) == 0x000014, "Member 'FPalMapObjectItemProductData::AutoWorkAmountBySec' has a wrong offset!");

// ScriptStruct Pal.PalOptionWorldSettings
// 0x0138 (0x0138 - 0x0000)
struct FPalOptionWorldSettings final
{
public:
	EPalOptionWorldDifficulty                     Difficulty;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DayTimeSpeedRate;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightTimeSpeedRate;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpRate;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalCaptureRate;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalSpawnNumRate;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalDamageRateAttack;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalDamageRateDefense;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerDamageRateAttack;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerDamageRateDefense;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerStomachDecreaceRate;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerStaminaDecreaceRate;                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerAutoHPRegeneRate;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerAutoHpRegeneRateInSleep;                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalStomachDecreaceRate;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalStaminaDecreaceRate;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalAutoHPRegeneRate;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalAutoHpRegeneRateInSleep;                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildObjectDamageRate;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildObjectDeteriorationDamageRate;                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollectionDropRate;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollectionObjectHpRate;                            // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollectionObjectRespawnSpeedRate;                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyDropItemRate;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalOptionWorldDeathPenalty                   DeathPenalty;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePlayerToPlayerDamage;                       // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFriendlyFire;                               // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInvaderEnemy;                               // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveUNKO;                                       // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAimAssistPad;                               // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAimAssistKeyboard;                          // 0x0066(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E1[0x1];                                     // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DropItemMaxNum;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropItemMaxNum_UNKO;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseCampMaxNum;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseCampWorkerMaxNum;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DropItemAliveMaxHours;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoResetGuildNoOnlinePlayers;                    // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E2[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoResetGuildTimeNoOnlinePlayers;                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildPlayerMaxNum;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalEggDefaultHatchingTime;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorkSpeedRate;                                     // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMultiplay;                                      // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPvP;                                            // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPickupOtherGuildDeathPenaltyDrop;              // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableNonLoginPenalty;                            // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFastTravel;                                 // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStartLocationSelectByMap;                       // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExistPlayerAfterLogout;                           // 0x0096(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDefenseOtherGuildPlayer;                    // 0x0097(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoopPlayerMaxNum;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPlayerMaxNum;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerDescription;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminPassword;                                     // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerPassword;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PublicPort;                                        // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E3[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PublicIP;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RCONEnabled;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E4[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RCONPort;                                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAuth;                                          // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E5[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BanListURL;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RESTAPIEnabled;                                    // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E6[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RESTAPIPort;                                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPlayerList;                                   // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAllowConnectPlatform                      AllowConnectPlatform;                              // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseBackupSaveData;                              // 0x0132(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalLogFormatType                             LogFormatType;                                     // 0x0133(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E7[0x4];                                     // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalOptionWorldSettings) == 0x000008, "Wrong alignment on FPalOptionWorldSettings");
static_assert(sizeof(FPalOptionWorldSettings) == 0x000138, "Wrong size on FPalOptionWorldSettings");
static_assert(offsetof(FPalOptionWorldSettings, Difficulty) == 0x000000, "Member 'FPalOptionWorldSettings::Difficulty' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, DayTimeSpeedRate) == 0x000004, "Member 'FPalOptionWorldSettings::DayTimeSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, NightTimeSpeedRate) == 0x000008, "Member 'FPalOptionWorldSettings::NightTimeSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, ExpRate) == 0x00000C, "Member 'FPalOptionWorldSettings::ExpRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalCaptureRate) == 0x000010, "Member 'FPalOptionWorldSettings::PalCaptureRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalSpawnNumRate) == 0x000014, "Member 'FPalOptionWorldSettings::PalSpawnNumRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalDamageRateAttack) == 0x000018, "Member 'FPalOptionWorldSettings::PalDamageRateAttack' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalDamageRateDefense) == 0x00001C, "Member 'FPalOptionWorldSettings::PalDamageRateDefense' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PlayerDamageRateAttack) == 0x000020, "Member 'FPalOptionWorldSettings::PlayerDamageRateAttack' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PlayerDamageRateDefense) == 0x000024, "Member 'FPalOptionWorldSettings::PlayerDamageRateDefense' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PlayerStomachDecreaceRate) == 0x000028, "Member 'FPalOptionWorldSettings::PlayerStomachDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PlayerStaminaDecreaceRate) == 0x00002C, "Member 'FPalOptionWorldSettings::PlayerStaminaDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PlayerAutoHPRegeneRate) == 0x000030, "Member 'FPalOptionWorldSettings::PlayerAutoHPRegeneRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PlayerAutoHpRegeneRateInSleep) == 0x000034, "Member 'FPalOptionWorldSettings::PlayerAutoHpRegeneRateInSleep' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalStomachDecreaceRate) == 0x000038, "Member 'FPalOptionWorldSettings::PalStomachDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalStaminaDecreaceRate) == 0x00003C, "Member 'FPalOptionWorldSettings::PalStaminaDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalAutoHPRegeneRate) == 0x000040, "Member 'FPalOptionWorldSettings::PalAutoHPRegeneRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalAutoHpRegeneRateInSleep) == 0x000044, "Member 'FPalOptionWorldSettings::PalAutoHpRegeneRateInSleep' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, BuildObjectDamageRate) == 0x000048, "Member 'FPalOptionWorldSettings::BuildObjectDamageRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, BuildObjectDeteriorationDamageRate) == 0x00004C, "Member 'FPalOptionWorldSettings::BuildObjectDeteriorationDamageRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, CollectionDropRate) == 0x000050, "Member 'FPalOptionWorldSettings::CollectionDropRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, CollectionObjectHpRate) == 0x000054, "Member 'FPalOptionWorldSettings::CollectionObjectHpRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, CollectionObjectRespawnSpeedRate) == 0x000058, "Member 'FPalOptionWorldSettings::CollectionObjectRespawnSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, EnemyDropItemRate) == 0x00005C, "Member 'FPalOptionWorldSettings::EnemyDropItemRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, DeathPenalty) == 0x000060, "Member 'FPalOptionWorldSettings::DeathPenalty' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnablePlayerToPlayerDamage) == 0x000061, "Member 'FPalOptionWorldSettings::bEnablePlayerToPlayerDamage' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnableFriendlyFire) == 0x000062, "Member 'FPalOptionWorldSettings::bEnableFriendlyFire' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnableInvaderEnemy) == 0x000063, "Member 'FPalOptionWorldSettings::bEnableInvaderEnemy' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bActiveUNKO) == 0x000064, "Member 'FPalOptionWorldSettings::bActiveUNKO' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnableAimAssistPad) == 0x000065, "Member 'FPalOptionWorldSettings::bEnableAimAssistPad' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnableAimAssistKeyboard) == 0x000066, "Member 'FPalOptionWorldSettings::bEnableAimAssistKeyboard' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, DropItemMaxNum) == 0x000068, "Member 'FPalOptionWorldSettings::DropItemMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, DropItemMaxNum_UNKO) == 0x00006C, "Member 'FPalOptionWorldSettings::DropItemMaxNum_UNKO' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, BaseCampMaxNum) == 0x000070, "Member 'FPalOptionWorldSettings::BaseCampMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, BaseCampWorkerMaxNum) == 0x000074, "Member 'FPalOptionWorldSettings::BaseCampWorkerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, DropItemAliveMaxHours) == 0x000078, "Member 'FPalOptionWorldSettings::DropItemAliveMaxHours' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bAutoResetGuildNoOnlinePlayers) == 0x00007C, "Member 'FPalOptionWorldSettings::bAutoResetGuildNoOnlinePlayers' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, AutoResetGuildTimeNoOnlinePlayers) == 0x000080, "Member 'FPalOptionWorldSettings::AutoResetGuildTimeNoOnlinePlayers' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, GuildPlayerMaxNum) == 0x000084, "Member 'FPalOptionWorldSettings::GuildPlayerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PalEggDefaultHatchingTime) == 0x000088, "Member 'FPalOptionWorldSettings::PalEggDefaultHatchingTime' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, WorkSpeedRate) == 0x00008C, "Member 'FPalOptionWorldSettings::WorkSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bIsMultiplay) == 0x000090, "Member 'FPalOptionWorldSettings::bIsMultiplay' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bIsPvP) == 0x000091, "Member 'FPalOptionWorldSettings::bIsPvP' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bCanPickupOtherGuildDeathPenaltyDrop) == 0x000092, "Member 'FPalOptionWorldSettings::bCanPickupOtherGuildDeathPenaltyDrop' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnableNonLoginPenalty) == 0x000093, "Member 'FPalOptionWorldSettings::bEnableNonLoginPenalty' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnableFastTravel) == 0x000094, "Member 'FPalOptionWorldSettings::bEnableFastTravel' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bIsStartLocationSelectByMap) == 0x000095, "Member 'FPalOptionWorldSettings::bIsStartLocationSelectByMap' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bExistPlayerAfterLogout) == 0x000096, "Member 'FPalOptionWorldSettings::bExistPlayerAfterLogout' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bEnableDefenseOtherGuildPlayer) == 0x000097, "Member 'FPalOptionWorldSettings::bEnableDefenseOtherGuildPlayer' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, CoopPlayerMaxNum) == 0x000098, "Member 'FPalOptionWorldSettings::CoopPlayerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, ServerPlayerMaxNum) == 0x00009C, "Member 'FPalOptionWorldSettings::ServerPlayerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, ServerName) == 0x0000A0, "Member 'FPalOptionWorldSettings::ServerName' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, ServerDescription) == 0x0000B0, "Member 'FPalOptionWorldSettings::ServerDescription' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, AdminPassword) == 0x0000C0, "Member 'FPalOptionWorldSettings::AdminPassword' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, ServerPassword) == 0x0000D0, "Member 'FPalOptionWorldSettings::ServerPassword' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PublicPort) == 0x0000E0, "Member 'FPalOptionWorldSettings::PublicPort' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, PublicIP) == 0x0000E8, "Member 'FPalOptionWorldSettings::PublicIP' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, RCONEnabled) == 0x0000F8, "Member 'FPalOptionWorldSettings::RCONEnabled' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, RCONPort) == 0x0000FC, "Member 'FPalOptionWorldSettings::RCONPort' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, Region) == 0x000100, "Member 'FPalOptionWorldSettings::Region' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bUseAuth) == 0x000110, "Member 'FPalOptionWorldSettings::bUseAuth' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, BanListURL) == 0x000118, "Member 'FPalOptionWorldSettings::BanListURL' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, RESTAPIEnabled) == 0x000128, "Member 'FPalOptionWorldSettings::RESTAPIEnabled' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, RESTAPIPort) == 0x00012C, "Member 'FPalOptionWorldSettings::RESTAPIPort' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bShowPlayerList) == 0x000130, "Member 'FPalOptionWorldSettings::bShowPlayerList' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, AllowConnectPlatform) == 0x000131, "Member 'FPalOptionWorldSettings::AllowConnectPlatform' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, bIsUseBackupSaveData) == 0x000132, "Member 'FPalOptionWorldSettings::bIsUseBackupSaveData' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldSettings, LogFormatType) == 0x000133, "Member 'FPalOptionWorldSettings::LogFormatType' has a wrong offset!");

// ScriptStruct Pal.PalUIBackupSaveDisplayData
// 0x0010 (0x0010 - 0x0000)
struct FPalUIBackupSaveDisplayData final
{
public:
	class FString                                 BackupName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalUIBackupSaveDisplayData) == 0x000008, "Wrong alignment on FPalUIBackupSaveDisplayData");
static_assert(sizeof(FPalUIBackupSaveDisplayData) == 0x000010, "Wrong size on FPalUIBackupSaveDisplayData");
static_assert(offsetof(FPalUIBackupSaveDisplayData, BackupName) == 0x000000, "Member 'FPalUIBackupSaveDisplayData::BackupName' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampWorkAssignRequest
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FPalBaseCampWorkAssignRequest final
{
public:
	uint8                                         Pad_25E8[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampWorkAssignRequest) == 0x000008, "Wrong alignment on FPalBaseCampWorkAssignRequest");
static_assert(sizeof(FPalBaseCampWorkAssignRequest) == 0x000030, "Wrong size on FPalBaseCampWorkAssignRequest");

// ScriptStruct Pal.PalHeatSourceInfo
// 0x0008 (0x0008 - 0x0000)
struct FPalHeatSourceInfo final
{
public:
	int32                                         HeatLevel_DayTime;                                 // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeatLevel_NightTime;                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalHeatSourceInfo) == 0x000004, "Wrong alignment on FPalHeatSourceInfo");
static_assert(sizeof(FPalHeatSourceInfo) == 0x000008, "Wrong size on FPalHeatSourceInfo");
static_assert(offsetof(FPalHeatSourceInfo, HeatLevel_DayTime) == 0x000000, "Member 'FPalHeatSourceInfo::HeatLevel_DayTime' has a wrong offset!");
static_assert(offsetof(FPalHeatSourceInfo, HeatLevel_NightTime) == 0x000004, "Member 'FPalHeatSourceInfo::HeatLevel_NightTime' has a wrong offset!");

// ScriptStruct Pal.PalTemperatureInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalTemperatureInfo final
{
public:
	int32                                         CurrentResistRank_Heat;                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentResistRank_Cold;                            // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTemperature;                                // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBodyTemperatureState                      CurrentBodyState;                                  // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E9[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalTemperatureInfo) == 0x000004, "Wrong alignment on FPalTemperatureInfo");
static_assert(sizeof(FPalTemperatureInfo) == 0x000010, "Wrong size on FPalTemperatureInfo");
static_assert(offsetof(FPalTemperatureInfo, CurrentResistRank_Heat) == 0x000000, "Member 'FPalTemperatureInfo::CurrentResistRank_Heat' has a wrong offset!");
static_assert(offsetof(FPalTemperatureInfo, CurrentResistRank_Cold) == 0x000004, "Member 'FPalTemperatureInfo::CurrentResistRank_Cold' has a wrong offset!");
static_assert(offsetof(FPalTemperatureInfo, CurrentTemperature) == 0x000008, "Member 'FPalTemperatureInfo::CurrentTemperature' has a wrong offset!");
static_assert(offsetof(FPalTemperatureInfo, CurrentBodyState) == 0x00000C, "Member 'FPalTemperatureInfo::CurrentBodyState' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectCreateParameter
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FPalMapObjectCreateParameter final
{
public:
	uint8                                         Pad_25EA[0x80];                                    // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectCreateParameter) == 0x000010, "Wrong alignment on FPalMapObjectCreateParameter");
static_assert(sizeof(FPalMapObjectCreateParameter) == 0x000080, "Wrong size on FPalMapObjectCreateParameter");

// ScriptStruct Pal.PalStageInstanceId
// 0x0014 (0x0014 - 0x0000)
struct FPalStageInstanceId final
{
public:
	struct FGuid                                  InternalId;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EB[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalStageInstanceId) == 0x000004, "Wrong alignment on FPalStageInstanceId");
static_assert(sizeof(FPalStageInstanceId) == 0x000014, "Wrong size on FPalStageInstanceId");
static_assert(offsetof(FPalStageInstanceId, InternalId) == 0x000000, "Member 'FPalStageInstanceId::InternalId' has a wrong offset!");
static_assert(offsetof(FPalStageInstanceId, bValid) == 0x000010, "Member 'FPalStageInstanceId::bValid' has a wrong offset!");

// ScriptStruct Pal.PalRaidBossSuccessAnyOneItemInfo
// 0x000C (0x000C - 0x0000)
struct FPalRaidBossSuccessAnyOneItemInfo final
{
public:
	struct FPalDataTableRowName_ItemData          ItemName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRaidBossSuccessAnyOneItemInfo) == 0x000004, "Wrong alignment on FPalRaidBossSuccessAnyOneItemInfo");
static_assert(sizeof(FPalRaidBossSuccessAnyOneItemInfo) == 0x00000C, "Wrong size on FPalRaidBossSuccessAnyOneItemInfo");
static_assert(offsetof(FPalRaidBossSuccessAnyOneItemInfo, ItemName) == 0x000000, "Member 'FPalRaidBossSuccessAnyOneItemInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSuccessAnyOneItemInfo, Num) == 0x000008, "Member 'FPalRaidBossSuccessAnyOneItemInfo::Num' has a wrong offset!");

// ScriptStruct Pal.PalBossBattleStaticInfo
// 0x0078 (0x0078 - 0x0000)
struct FPalBossBattleStaticInfo final
{
public:
	TSoftClassPtr<class UClass>                   IntroCutscene;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        DataLayerAsset;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_PalMonsterData    PalID;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EC[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAudioEvent>           BGMAudioEvent;                                     // 0x0048(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBossBattleStaticInfo) == 0x000008, "Wrong alignment on FPalBossBattleStaticInfo");
static_assert(sizeof(FPalBossBattleStaticInfo) == 0x000078, "Wrong size on FPalBossBattleStaticInfo");
static_assert(offsetof(FPalBossBattleStaticInfo, IntroCutscene) == 0x000000, "Member 'FPalBossBattleStaticInfo::IntroCutscene' has a wrong offset!");
static_assert(offsetof(FPalBossBattleStaticInfo, DataLayerAsset) == 0x000030, "Member 'FPalBossBattleStaticInfo::DataLayerAsset' has a wrong offset!");
static_assert(offsetof(FPalBossBattleStaticInfo, PalID) == 0x000038, "Member 'FPalBossBattleStaticInfo::PalID' has a wrong offset!");
static_assert(offsetof(FPalBossBattleStaticInfo, Level) == 0x000040, "Member 'FPalBossBattleStaticInfo::Level' has a wrong offset!");
static_assert(offsetof(FPalBossBattleStaticInfo, BGMAudioEvent) == 0x000048, "Member 'FPalBossBattleStaticInfo::BGMAudioEvent' has a wrong offset!");

// ScriptStruct Pal.PalContainerInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalContainerInfo
{
public:
	uint8                                         Pad_25ED[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalContainerId                        ContainerId;                                       // 0x0008(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNum;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EE[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalContainerInfo) == 0x000008, "Wrong alignment on FPalContainerInfo");
static_assert(sizeof(FPalContainerInfo) == 0x000020, "Wrong size on FPalContainerInfo");
static_assert(offsetof(FPalContainerInfo, ContainerId) == 0x000008, "Member 'FPalContainerInfo::ContainerId' has a wrong offset!");
static_assert(offsetof(FPalContainerInfo, SlotNum) == 0x000018, "Member 'FPalContainerInfo::SlotNum' has a wrong offset!");

// ScriptStruct Pal.PalBelongInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPalBelongInfo
{
public:
	uint8                                         Pad_25EF[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBelongInfo) == 0x000008, "Wrong alignment on FPalBelongInfo");
static_assert(sizeof(FPalBelongInfo) == 0x000008, "Wrong size on FPalBelongInfo");

// ScriptStruct Pal.PalContainerBelongInfo
// 0x0000 (0x0008 - 0x0008)
struct FPalContainerBelongInfo : public FPalBelongInfo
{
};
static_assert(alignof(FPalContainerBelongInfo) == 0x000008, "Wrong alignment on FPalContainerBelongInfo");
static_assert(sizeof(FPalContainerBelongInfo) == 0x000008, "Wrong size on FPalContainerBelongInfo");

// ScriptStruct Pal.PalItemContainerBelongInfo
// 0x0018 (0x0020 - 0x0008)
struct FPalItemContainerBelongInfo final : public FPalContainerBelongInfo
{
public:
	struct FGuid                                  GroupID;                                           // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControllableOthers;                               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F0[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalItemContainerBelongInfo) == 0x000008, "Wrong alignment on FPalItemContainerBelongInfo");
static_assert(sizeof(FPalItemContainerBelongInfo) == 0x000020, "Wrong size on FPalItemContainerBelongInfo");
static_assert(offsetof(FPalItemContainerBelongInfo, GroupID) == 0x000008, "Member 'FPalItemContainerBelongInfo::GroupID' has a wrong offset!");
static_assert(offsetof(FPalItemContainerBelongInfo, bControllableOthers) == 0x000018, "Member 'FPalItemContainerBelongInfo::bControllableOthers' has a wrong offset!");

// ScriptStruct Pal.PalItemPermission
// 0x0030 (0x0030 - 0x0000)
struct FPalItemPermission final
{
public:
	TArray<EPalItemTypeA>                         PermissionTypeA;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<EPalItemTypeB>                         PermissionTypeB;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           PermissionItemStaticIds;                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemPermission) == 0x000008, "Wrong alignment on FPalItemPermission");
static_assert(sizeof(FPalItemPermission) == 0x000030, "Wrong size on FPalItemPermission");
static_assert(offsetof(FPalItemPermission, PermissionTypeA) == 0x000000, "Member 'FPalItemPermission::PermissionTypeA' has a wrong offset!");
static_assert(offsetof(FPalItemPermission, PermissionTypeB) == 0x000010, "Member 'FPalItemPermission::PermissionTypeB' has a wrong offset!");
static_assert(offsetof(FPalItemPermission, PermissionItemStaticIds) == 0x000020, "Member 'FPalItemPermission::PermissionItemStaticIds' has a wrong offset!");

// ScriptStruct Pal.PalItemContainerInfo
// 0x0050 (0x0070 - 0x0020)
struct FPalItemContainerInfo final : public FPalContainerInfo
{
public:
	struct FPalItemContainerBelongInfo            BelongInfo;                                        // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	struct FPalItemPermission                     Permission;                                        // 0x0040(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemContainerInfo) == 0x000008, "Wrong alignment on FPalItemContainerInfo");
static_assert(sizeof(FPalItemContainerInfo) == 0x000070, "Wrong size on FPalItemContainerInfo");
static_assert(offsetof(FPalItemContainerInfo, BelongInfo) == 0x000020, "Member 'FPalItemContainerInfo::BelongInfo' has a wrong offset!");
static_assert(offsetof(FPalItemContainerInfo, Permission) == 0x000040, "Member 'FPalItemContainerInfo::Permission' has a wrong offset!");

// ScriptStruct Pal.PalBuildRequestDebugParameter
// 0x0001 (0x0001 - 0x0000)
struct FPalBuildRequestDebugParameter final
{
public:
	bool                                          bNotConsumeMaterials;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBuildRequestDebugParameter) == 0x000001, "Wrong alignment on FPalBuildRequestDebugParameter");
static_assert(sizeof(FPalBuildRequestDebugParameter) == 0x000001, "Wrong size on FPalBuildRequestDebugParameter");
static_assert(offsetof(FPalBuildRequestDebugParameter, bNotConsumeMaterials) == 0x000000, "Member 'FPalBuildRequestDebugParameter::bNotConsumeMaterials' has a wrong offset!");

// ScriptStruct Pal.PalWaitLoadingWorldPartitionParameter
// 0x0098 (0x0098 - 0x0000)
struct FPalWaitLoadingWorldPartitionParameter final
{
public:
	struct FWorldPartitionStreamingQuerySource    QuerySource;                                       // 0x0000(0x0088)(Transient, NativeAccessSpecifierPublic)
	EWorldPartitionRuntimeCellState               CellState;                                         // 0x0088(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F1[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntervalTime;                                      // 0x008C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFirstDelayTime;                                  // 0x0090(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F2[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWaitLoadingWorldPartitionParameter) == 0x000008, "Wrong alignment on FPalWaitLoadingWorldPartitionParameter");
static_assert(sizeof(FPalWaitLoadingWorldPartitionParameter) == 0x000098, "Wrong size on FPalWaitLoadingWorldPartitionParameter");
static_assert(offsetof(FPalWaitLoadingWorldPartitionParameter, QuerySource) == 0x000000, "Member 'FPalWaitLoadingWorldPartitionParameter::QuerySource' has a wrong offset!");
static_assert(offsetof(FPalWaitLoadingWorldPartitionParameter, CellState) == 0x000088, "Member 'FPalWaitLoadingWorldPartitionParameter::CellState' has a wrong offset!");
static_assert(offsetof(FPalWaitLoadingWorldPartitionParameter, IntervalTime) == 0x00008C, "Member 'FPalWaitLoadingWorldPartitionParameter::IntervalTime' has a wrong offset!");
static_assert(offsetof(FPalWaitLoadingWorldPartitionParameter, InFirstDelayTime) == 0x000090, "Member 'FPalWaitLoadingWorldPartitionParameter::InFirstDelayTime' has a wrong offset!");

// ScriptStruct Pal.BuildingSurfaceMaterialSet
// 0x0038 (0x0038 - 0x0000)
struct FBuildingSurfaceMaterialSet final
{
public:
	class UMaterialInstance*                      Highlight;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      Error;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      Building;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      BuildComplete;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      Dismantle;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      Damage;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BuildCompleteAnimationCurve;                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingSurfaceMaterialSet) == 0x000008, "Wrong alignment on FBuildingSurfaceMaterialSet");
static_assert(sizeof(FBuildingSurfaceMaterialSet) == 0x000038, "Wrong size on FBuildingSurfaceMaterialSet");
static_assert(offsetof(FBuildingSurfaceMaterialSet, Highlight) == 0x000000, "Member 'FBuildingSurfaceMaterialSet::Highlight' has a wrong offset!");
static_assert(offsetof(FBuildingSurfaceMaterialSet, Error) == 0x000008, "Member 'FBuildingSurfaceMaterialSet::Error' has a wrong offset!");
static_assert(offsetof(FBuildingSurfaceMaterialSet, Building) == 0x000010, "Member 'FBuildingSurfaceMaterialSet::Building' has a wrong offset!");
static_assert(offsetof(FBuildingSurfaceMaterialSet, BuildComplete) == 0x000018, "Member 'FBuildingSurfaceMaterialSet::BuildComplete' has a wrong offset!");
static_assert(offsetof(FBuildingSurfaceMaterialSet, Dismantle) == 0x000020, "Member 'FBuildingSurfaceMaterialSet::Dismantle' has a wrong offset!");
static_assert(offsetof(FBuildingSurfaceMaterialSet, Damage) == 0x000028, "Member 'FBuildingSurfaceMaterialSet::Damage' has a wrong offset!");
static_assert(offsetof(FBuildingSurfaceMaterialSet, BuildCompleteAnimationCurve) == 0x000030, "Member 'FBuildingSurfaceMaterialSet::BuildCompleteAnimationCurve' has a wrong offset!");

// ScriptStruct Pal.PalItemAndSlot
// 0x0040 (0x0040 - 0x0000)
struct FPalItemAndSlot final
{
public:
	struct FPalItemId                             ItemId;                                            // 0x0000(0x0028)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalItemSlotId                         SlotID;                                            // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemAndSlot) == 0x000004, "Wrong alignment on FPalItemAndSlot");
static_assert(sizeof(FPalItemAndSlot) == 0x000040, "Wrong size on FPalItemAndSlot");
static_assert(offsetof(FPalItemAndSlot, ItemId) == 0x000000, "Member 'FPalItemAndSlot::ItemId' has a wrong offset!");
static_assert(offsetof(FPalItemAndSlot, Num) == 0x000028, "Member 'FPalItemAndSlot::Num' has a wrong offset!");
static_assert(offsetof(FPalItemAndSlot, SlotID) == 0x00002C, "Member 'FPalItemAndSlot::SlotID' has a wrong offset!");

// ScriptStruct Pal.PalSlotItemAndNum
// 0x0044 (0x0044 - 0x0000)
struct FPalSlotItemAndNum final
{
public:
	struct FPalItemAndSlot                        ItemSlot;                                          // 0x0000(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSlotItemAndNum) == 0x000004, "Wrong alignment on FPalSlotItemAndNum");
static_assert(sizeof(FPalSlotItemAndNum) == 0x000044, "Wrong size on FPalSlotItemAndNum");
static_assert(offsetof(FPalSlotItemAndNum, ItemSlot) == 0x000000, "Member 'FPalSlotItemAndNum::ItemSlot' has a wrong offset!");
static_assert(offsetof(FPalSlotItemAndNum, Num) == 0x000040, "Member 'FPalSlotItemAndNum::Num' has a wrong offset!");

// ScriptStruct Pal.PalPlayerInventorySelectData
// 0x0010 (0x0010 - 0x0000)
struct FPalPlayerInventorySelectData final
{
public:
	int32                                         NowSelectedContainerIndex;                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalItemContainer*                      TargetItemContainer;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerInventorySelectData) == 0x000008, "Wrong alignment on FPalPlayerInventorySelectData");
static_assert(sizeof(FPalPlayerInventorySelectData) == 0x000010, "Wrong size on FPalPlayerInventorySelectData");
static_assert(offsetof(FPalPlayerInventorySelectData, NowSelectedContainerIndex) == 0x000000, "Member 'FPalPlayerInventorySelectData::NowSelectedContainerIndex' has a wrong offset!");
static_assert(offsetof(FPalPlayerInventorySelectData, TargetItemContainer) == 0x000008, "Member 'FPalPlayerInventorySelectData::TargetItemContainer' has a wrong offset!");

// ScriptStruct Pal.NetworkActorSpawnParameters
// 0x0070 (0x0070 - 0x0000)
struct FNetworkActorSpawnParameters final
{
public:
	class AActor*                                 NetworkOwner;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0030(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SpawnScale;                                        // 0x0048(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AController>                ControllerClass;                                   // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            SpawnCollisionHandlingOverride;                    // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysRelevant;                                   // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F4[0x6];                                     // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetworkActorSpawnParameters) == 0x000008, "Wrong alignment on FNetworkActorSpawnParameters");
static_assert(sizeof(FNetworkActorSpawnParameters) == 0x000070, "Wrong size on FNetworkActorSpawnParameters");
static_assert(offsetof(FNetworkActorSpawnParameters, NetworkOwner) == 0x000000, "Member 'FNetworkActorSpawnParameters::NetworkOwner' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, Name) == 0x000008, "Member 'FNetworkActorSpawnParameters::Name' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, Owner) == 0x000010, "Member 'FNetworkActorSpawnParameters::Owner' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, SpawnLocation) == 0x000018, "Member 'FNetworkActorSpawnParameters::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, SpawnRotation) == 0x000030, "Member 'FNetworkActorSpawnParameters::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, SpawnScale) == 0x000048, "Member 'FNetworkActorSpawnParameters::SpawnScale' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, ControllerClass) == 0x000060, "Member 'FNetworkActorSpawnParameters::ControllerClass' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, SpawnCollisionHandlingOverride) == 0x000068, "Member 'FNetworkActorSpawnParameters::SpawnCollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(FNetworkActorSpawnParameters, bAlwaysRelevant) == 0x000069, "Member 'FNetworkActorSpawnParameters::bAlwaysRelevant' has a wrong offset!");

// ScriptStruct Pal.PalNPCWeaponCombatInfo
// 0x0038 (0x0038 - 0x0000)
struct FPalNPCWeaponCombatInfo final
{
public:
	TSubclassOf<class UPalAIActionBase>           CombatAIActionClass;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCWeaponRange_Near_cm;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCWeaponRange_Far_cm;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShootInterval;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxShootCount;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTime;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomMoveTime_Min;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimOffset_Height;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSideDashMovement;                               // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReloadMotion;                                   // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MeleeAttackWithGun;                                // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F5[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimRotateSpeed;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F6[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UPalStateMachineStateBase>  FireStateClass;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCWeaponCombatInfo) == 0x000008, "Wrong alignment on FPalNPCWeaponCombatInfo");
static_assert(sizeof(FPalNPCWeaponCombatInfo) == 0x000038, "Wrong size on FPalNPCWeaponCombatInfo");
static_assert(offsetof(FPalNPCWeaponCombatInfo, CombatAIActionClass) == 0x000000, "Member 'FPalNPCWeaponCombatInfo::CombatAIActionClass' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, NPCWeaponRange_Near_cm) == 0x000008, "Member 'FPalNPCWeaponCombatInfo::NPCWeaponRange_Near_cm' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, NPCWeaponRange_Far_cm) == 0x00000C, "Member 'FPalNPCWeaponCombatInfo::NPCWeaponRange_Far_cm' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, ShootInterval) == 0x000010, "Member 'FPalNPCWeaponCombatInfo::ShootInterval' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, MaxShootCount) == 0x000014, "Member 'FPalNPCWeaponCombatInfo::MaxShootCount' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, ReloadTime) == 0x000018, "Member 'FPalNPCWeaponCombatInfo::ReloadTime' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, RandomMoveTime_Min) == 0x00001C, "Member 'FPalNPCWeaponCombatInfo::RandomMoveTime_Min' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, AimOffset_Height) == 0x000020, "Member 'FPalNPCWeaponCombatInfo::AimOffset_Height' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, UseSideDashMovement) == 0x000024, "Member 'FPalNPCWeaponCombatInfo::UseSideDashMovement' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, UseReloadMotion) == 0x000025, "Member 'FPalNPCWeaponCombatInfo::UseReloadMotion' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, MeleeAttackWithGun) == 0x000026, "Member 'FPalNPCWeaponCombatInfo::MeleeAttackWithGun' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, AimRotateSpeed) == 0x000028, "Member 'FPalNPCWeaponCombatInfo::AimRotateSpeed' has a wrong offset!");
static_assert(offsetof(FPalNPCWeaponCombatInfo, FireStateClass) == 0x000030, "Member 'FPalNPCWeaponCombatInfo::FireStateClass' has a wrong offset!");

// ScriptStruct Pal.PalStagePlayerInfo
// 0x0014 (0x0014 - 0x0000)
struct FPalStagePlayerInfo final
{
public:
	struct FGuid                                  PlayerUId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalStagePlayerState                          PlayerState;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F7[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalStagePlayerInfo) == 0x000004, "Wrong alignment on FPalStagePlayerInfo");
static_assert(sizeof(FPalStagePlayerInfo) == 0x000014, "Wrong size on FPalStagePlayerInfo");
static_assert(offsetof(FPalStagePlayerInfo, PlayerUId) == 0x000000, "Member 'FPalStagePlayerInfo::PlayerUId' has a wrong offset!");
static_assert(offsetof(FPalStagePlayerInfo, PlayerState) == 0x000010, "Member 'FPalStagePlayerInfo::PlayerState' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectAppearanceData
// 0x0008 (0x0008 - 0x0000)
struct FPalMapObjectAppearanceData final
{
public:
	struct FGameDateTime                          DateTime;                                          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectAppearanceData) == 0x000008, "Wrong alignment on FPalMapObjectAppearanceData");
static_assert(sizeof(FPalMapObjectAppearanceData) == 0x000008, "Wrong size on FPalMapObjectAppearanceData");
static_assert(offsetof(FPalMapObjectAppearanceData, DateTime) == 0x000000, "Member 'FPalMapObjectAppearanceData::DateTime' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectAppearanceDataWithId
// 0x0018 (0x0018 - 0x0000)
struct FPalMapObjectAppearanceDataWithId final
{
public:
	struct FGuid                                  InstanceId;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalMapObjectAppearanceData            AppearanceData;                                    // 0x0010(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectAppearanceDataWithId) == 0x000008, "Wrong alignment on FPalMapObjectAppearanceDataWithId");
static_assert(sizeof(FPalMapObjectAppearanceDataWithId) == 0x000018, "Wrong size on FPalMapObjectAppearanceDataWithId");
static_assert(offsetof(FPalMapObjectAppearanceDataWithId, InstanceId) == 0x000000, "Member 'FPalMapObjectAppearanceDataWithId::InstanceId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAppearanceDataWithId, AppearanceData) == 0x000010, "Member 'FPalMapObjectAppearanceDataWithId::AppearanceData' has a wrong offset!");

// ScriptStruct Pal.PalCrimeStateInfo
// 0x0060 (0x0060 - 0x0000)
struct FPalCrimeStateInfo final
{
public:
	TMap<struct FGuid, struct FDateTime>          CrimeStateFinishTimeMap;                           // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          CrimeStateArray;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCrimeStateInfo) == 0x000008, "Wrong alignment on FPalCrimeStateInfo");
static_assert(sizeof(FPalCrimeStateInfo) == 0x000060, "Wrong size on FPalCrimeStateInfo");
static_assert(offsetof(FPalCrimeStateInfo, CrimeStateFinishTimeMap) == 0x000000, "Member 'FPalCrimeStateInfo::CrimeStateFinishTimeMap' has a wrong offset!");
static_assert(offsetof(FPalCrimeStateInfo, CrimeStateArray) == 0x000050, "Member 'FPalCrimeStateInfo::CrimeStateArray' has a wrong offset!");

// ScriptStruct Pal.PlayerGenderParams
// 0x00A8 (0x00A8 - 0x0000)
struct FPlayerGenderParams final
{
public:
	TMap<EPalWeaponType, TSoftClassPtr<class UClass>> DefaultWeaponAnimeAssetBPSoftClassMap;             // 0x0000(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class UClass>, TSoftClassPtr<class UClass>> OtherWeaponAnimeAssetBPSoftClassMap;               // 0x0050(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         ClavicleAdjustDegree;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F8[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerGenderParams) == 0x000008, "Wrong alignment on FPlayerGenderParams");
static_assert(sizeof(FPlayerGenderParams) == 0x0000A8, "Wrong size on FPlayerGenderParams");
static_assert(offsetof(FPlayerGenderParams, DefaultWeaponAnimeAssetBPSoftClassMap) == 0x000000, "Member 'FPlayerGenderParams::DefaultWeaponAnimeAssetBPSoftClassMap' has a wrong offset!");
static_assert(offsetof(FPlayerGenderParams, OtherWeaponAnimeAssetBPSoftClassMap) == 0x000050, "Member 'FPlayerGenderParams::OtherWeaponAnimeAssetBPSoftClassMap' has a wrong offset!");
static_assert(offsetof(FPlayerGenderParams, ClavicleAdjustDegree) == 0x0000A0, "Member 'FPlayerGenderParams::ClavicleAdjustDegree' has a wrong offset!");

// ScriptStruct Pal.PalWorldSecurityWantedPoliceSettingData
// 0x0010 (0x0010 - 0x0000)
struct FPalWorldSecurityWantedPoliceSettingData final
{
public:
	struct FPalDataTableRowName_PalHumanData      PoliceType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoliceNum;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoliceLevel;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldSecurityWantedPoliceSettingData) == 0x000004, "Wrong alignment on FPalWorldSecurityWantedPoliceSettingData");
static_assert(sizeof(FPalWorldSecurityWantedPoliceSettingData) == 0x000010, "Wrong size on FPalWorldSecurityWantedPoliceSettingData");
static_assert(offsetof(FPalWorldSecurityWantedPoliceSettingData, PoliceType) == 0x000000, "Member 'FPalWorldSecurityWantedPoliceSettingData::PoliceType' has a wrong offset!");
static_assert(offsetof(FPalWorldSecurityWantedPoliceSettingData, PoliceNum) == 0x000008, "Member 'FPalWorldSecurityWantedPoliceSettingData::PoliceNum' has a wrong offset!");
static_assert(offsetof(FPalWorldSecurityWantedPoliceSettingData, PoliceLevel) == 0x00000C, "Member 'FPalWorldSecurityWantedPoliceSettingData::PoliceLevel' has a wrong offset!");

// ScriptStruct Pal.PalCharacterCreationMakeInfoPresetDataRow
// 0x0098 (0x00A0 - 0x0008)
struct FPalCharacterCreationMakeInfoPresetDataRow final : public FTableRowBase
{
public:
	struct FPalPlayerDataCharacterMakeInfo        PresetMakeInfo;                                    // 0x0008(0x0094)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F9[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCharacterCreationMakeInfoPresetDataRow) == 0x000008, "Wrong alignment on FPalCharacterCreationMakeInfoPresetDataRow");
static_assert(sizeof(FPalCharacterCreationMakeInfoPresetDataRow) == 0x0000A0, "Wrong size on FPalCharacterCreationMakeInfoPresetDataRow");
static_assert(offsetof(FPalCharacterCreationMakeInfoPresetDataRow, PresetMakeInfo) == 0x000008, "Member 'FPalCharacterCreationMakeInfoPresetDataRow::PresetMakeInfo' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignHandleId
// 0x0018 (0x0018 - 0x0000)
struct FPalWorkAssignHandleId final
{
public:
	struct FGuid                                  WorkId;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LocationIndex;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPalWorkAssignType                            AssignType;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25FA[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorkAssignHandleId) == 0x000004, "Wrong alignment on FPalWorkAssignHandleId");
static_assert(sizeof(FPalWorkAssignHandleId) == 0x000018, "Wrong size on FPalWorkAssignHandleId");
static_assert(offsetof(FPalWorkAssignHandleId, WorkId) == 0x000000, "Member 'FPalWorkAssignHandleId::WorkId' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignHandleId, LocationIndex) == 0x000010, "Member 'FPalWorkAssignHandleId::LocationIndex' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignHandleId, AssignType) == 0x000014, "Member 'FPalWorkAssignHandleId::AssignType' has a wrong offset!");

// ScriptStruct Pal.PalCharacterParameter_Work
// 0x0078 (0x0078 - 0x0000)
struct FPalCharacterParameter_Work final
{
public:
	struct FGuid                                  MapObjectInstanceIdApproachTo;                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bApproachToAssignedLocation;                       // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25FB[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepairRequiredWorkAmount;                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25FC[0x10];                                    // 0x0018(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFlagContainer                         NotWorkableFlag;                                   // 0x0028(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPalCharacterParameter_Work) == 0x000008, "Wrong alignment on FPalCharacterParameter_Work");
static_assert(sizeof(FPalCharacterParameter_Work) == 0x000078, "Wrong size on FPalCharacterParameter_Work");
static_assert(offsetof(FPalCharacterParameter_Work, MapObjectInstanceIdApproachTo) == 0x000000, "Member 'FPalCharacterParameter_Work::MapObjectInstanceIdApproachTo' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameter_Work, bApproachToAssignedLocation) == 0x000010, "Member 'FPalCharacterParameter_Work::bApproachToAssignedLocation' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameter_Work, RepairRequiredWorkAmount) == 0x000014, "Member 'FPalCharacterParameter_Work::RepairRequiredWorkAmount' has a wrong offset!");
static_assert(offsetof(FPalCharacterParameter_Work, NotWorkableFlag) == 0x000028, "Member 'FPalCharacterParameter_Work::NotWorkableFlag' has a wrong offset!");

// ScriptStruct Pal.PalStatusAccumulate
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FPalStatusAccumulate final
{
public:
	uint8                                         Pad_25FD[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalStatusAccumulate) == 0x000004, "Wrong alignment on FPalStatusAccumulate");
static_assert(sizeof(FPalStatusAccumulate) == 0x000010, "Wrong size on FPalStatusAccumulate");

// ScriptStruct Pal.PalCharacterStoredParameterInfo
// 0x0298 (0x0298 - 0x0000)
struct FPalCharacterStoredParameterInfo final
{
public:
	struct FPalIndividualCharacterSaveParameter   SaveParameter;                                     // 0x0000(0x0280)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FGameDateTime                          StoredAt;                                          // 0x0280(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LostPlayerUId;                                     // 0x0288(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterStoredParameterInfo) == 0x000008, "Wrong alignment on FPalCharacterStoredParameterInfo");
static_assert(sizeof(FPalCharacterStoredParameterInfo) == 0x000298, "Wrong size on FPalCharacterStoredParameterInfo");
static_assert(offsetof(FPalCharacterStoredParameterInfo, SaveParameter) == 0x000000, "Member 'FPalCharacterStoredParameterInfo::SaveParameter' has a wrong offset!");
static_assert(offsetof(FPalCharacterStoredParameterInfo, StoredAt) == 0x000280, "Member 'FPalCharacterStoredParameterInfo::StoredAt' has a wrong offset!");
static_assert(offsetof(FPalCharacterStoredParameterInfo, LostPlayerUId) == 0x000288, "Member 'FPalCharacterStoredParameterInfo::LostPlayerUId' has a wrong offset!");

// ScriptStruct Pal.FloatCounter
// 0x0008 (0x0008 - 0x0000)
struct FFloatCounter final
{
public:
	float                                         TriggerValue;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentStackValue;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFloatCounter) == 0x000004, "Wrong alignment on FFloatCounter");
static_assert(sizeof(FFloatCounter) == 0x000008, "Wrong size on FFloatCounter");
static_assert(offsetof(FFloatCounter, TriggerValue) == 0x000000, "Member 'FFloatCounter::TriggerValue' has a wrong offset!");
static_assert(offsetof(FFloatCounter, CurrentStackValue) == 0x000004, "Member 'FFloatCounter::CurrentStackValue' has a wrong offset!");

// ScriptStruct Pal.PalDamageRactionInfo
// 0x0040 (0x0040 - 0x0000)
struct FPalDamageRactionInfo final
{
public:
	bool                                          IsBlow;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25FE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlowVelocity;                                      // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeanBackAnime;                                   // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStan;                                            // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLargeDown;                                       // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25FF[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDamageRactionInfo) == 0x000008, "Wrong alignment on FPalDamageRactionInfo");
static_assert(sizeof(FPalDamageRactionInfo) == 0x000040, "Wrong size on FPalDamageRactionInfo");
static_assert(offsetof(FPalDamageRactionInfo, IsBlow) == 0x000000, "Member 'FPalDamageRactionInfo::IsBlow' has a wrong offset!");
static_assert(offsetof(FPalDamageRactionInfo, BlowVelocity) == 0x000008, "Member 'FPalDamageRactionInfo::BlowVelocity' has a wrong offset!");
static_assert(offsetof(FPalDamageRactionInfo, IsLeanBackAnime) == 0x000020, "Member 'FPalDamageRactionInfo::IsLeanBackAnime' has a wrong offset!");
static_assert(offsetof(FPalDamageRactionInfo, IsStan) == 0x000021, "Member 'FPalDamageRactionInfo::IsStan' has a wrong offset!");
static_assert(offsetof(FPalDamageRactionInfo, IsLargeDown) == 0x000022, "Member 'FPalDamageRactionInfo::IsLargeDown' has a wrong offset!");
static_assert(offsetof(FPalDamageRactionInfo, HitLocation) == 0x000028, "Member 'FPalDamageRactionInfo::HitLocation' has a wrong offset!");

// ScriptStruct Pal.PalUICommonRewardDisplayData
// 0x0058 (0x0058 - 0x0000)
struct FPalUICommonRewardDisplayData final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0020(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalUIRewardDisplayType                       DisplayType;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2600[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUICommonRewardDisplayData) == 0x000008, "Wrong alignment on FPalUICommonRewardDisplayData");
static_assert(sizeof(FPalUICommonRewardDisplayData) == 0x000058, "Wrong size on FPalUICommonRewardDisplayData");
static_assert(offsetof(FPalUICommonRewardDisplayData, Message) == 0x000000, "Member 'FPalUICommonRewardDisplayData::Message' has a wrong offset!");
static_assert(offsetof(FPalUICommonRewardDisplayData, Texture) == 0x000018, "Member 'FPalUICommonRewardDisplayData::Texture' has a wrong offset!");
static_assert(offsetof(FPalUICommonRewardDisplayData, SoftTexture) == 0x000020, "Member 'FPalUICommonRewardDisplayData::SoftTexture' has a wrong offset!");
static_assert(offsetof(FPalUICommonRewardDisplayData, DisplayType) == 0x000050, "Member 'FPalUICommonRewardDisplayData::DisplayType' has a wrong offset!");

// ScriptStruct Pal.PalEachDamageRactionInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalEachDamageRactionInfo final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlow;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeanBackAnime;                                   // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStan;                                            // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaCategory                              WazaCategory;                                      // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2601[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalEachDamageRactionInfo) == 0x000008, "Wrong alignment on FPalEachDamageRactionInfo");
static_assert(sizeof(FPalEachDamageRactionInfo) == 0x000010, "Wrong size on FPalEachDamageRactionInfo");
static_assert(offsetof(FPalEachDamageRactionInfo, Attacker) == 0x000000, "Member 'FPalEachDamageRactionInfo::Attacker' has a wrong offset!");
static_assert(offsetof(FPalEachDamageRactionInfo, IsBlow) == 0x000008, "Member 'FPalEachDamageRactionInfo::IsBlow' has a wrong offset!");
static_assert(offsetof(FPalEachDamageRactionInfo, IsLeanBackAnime) == 0x000009, "Member 'FPalEachDamageRactionInfo::IsLeanBackAnime' has a wrong offset!");
static_assert(offsetof(FPalEachDamageRactionInfo, IsStan) == 0x00000A, "Member 'FPalEachDamageRactionInfo::IsStan' has a wrong offset!");
static_assert(offsetof(FPalEachDamageRactionInfo, WazaCategory) == 0x00000B, "Member 'FPalEachDamageRactionInfo::WazaCategory' has a wrong offset!");

// ScriptStruct Pal.PalArrowSettings
// 0x000C (0x000C - 0x0000)
struct FPalArrowSettings final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalArrowSettings) == 0x000004, "Wrong alignment on FPalArrowSettings");
static_assert(sizeof(FPalArrowSettings) == 0x00000C, "Wrong size on FPalArrowSettings");
static_assert(offsetof(FPalArrowSettings, Color) == 0x000000, "Member 'FPalArrowSettings::Color' has a wrong offset!");
static_assert(offsetof(FPalArrowSettings, Size) == 0x000004, "Member 'FPalArrowSettings::Size' has a wrong offset!");
static_assert(offsetof(FPalArrowSettings, Thickness) == 0x000008, "Member 'FPalArrowSettings::Thickness' has a wrong offset!");

// ScriptStruct Pal.PalDebugPalCaptureInfo
// 0x000C (0x000C - 0x0000)
struct FPalDebugPalCaptureInfo final
{
public:
	struct FPalDataTableRowName_PalMonsterData    PalName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDebugPalCaptureInfo) == 0x000004, "Wrong alignment on FPalDebugPalCaptureInfo");
static_assert(sizeof(FPalDebugPalCaptureInfo) == 0x00000C, "Wrong size on FPalDebugPalCaptureInfo");
static_assert(offsetof(FPalDebugPalCaptureInfo, PalName) == 0x000000, "Member 'FPalDebugPalCaptureInfo::PalName' has a wrong offset!");
static_assert(offsetof(FPalDebugPalCaptureInfo, Num) == 0x000008, "Member 'FPalDebugPalCaptureInfo::Num' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectConnectorSaveData
// 0x0000 (0x0010 - 0x0010)
struct FPalMapObjectConnectorSaveData final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalMapObjectConnectorSaveData) == 0x000008, "Wrong alignment on FPalMapObjectConnectorSaveData");
static_assert(sizeof(FPalMapObjectConnectorSaveData) == 0x000010, "Wrong size on FPalMapObjectConnectorSaveData");

// ScriptStruct Pal.PalMapObjectEffectSaveData
// 0x0000 (0x0010 - 0x0010)
struct FPalMapObjectEffectSaveData final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalMapObjectEffectSaveData) == 0x000008, "Wrong alignment on FPalMapObjectEffectSaveData");
static_assert(sizeof(FPalMapObjectEffectSaveData) == 0x000010, "Wrong size on FPalMapObjectEffectSaveData");

// ScriptStruct Pal.PalMapObjectModelSaveData
// 0x0070 (0x0080 - 0x0010)
struct FPalMapObjectModelSaveData final : public FPalBinaryMemory
{
public:
	struct FPalMapObjectBuildProcessSaveData      BuildProcess;                                      // 0x0010(0x0010)(NativeAccessSpecifierPublic)
	struct FPalMapObjectConnectorSaveData         Connector;                                         // 0x0020(0x0010)(NativeAccessSpecifierPublic)
	TMap<EPalStatusID, struct FPalMapObjectEffectSaveData> EffectMap;                                         // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectModelSaveData) == 0x000008, "Wrong alignment on FPalMapObjectModelSaveData");
static_assert(sizeof(FPalMapObjectModelSaveData) == 0x000080, "Wrong size on FPalMapObjectModelSaveData");
static_assert(offsetof(FPalMapObjectModelSaveData, BuildProcess) == 0x000010, "Member 'FPalMapObjectModelSaveData::BuildProcess' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelSaveData, Connector) == 0x000020, "Member 'FPalMapObjectModelSaveData::Connector' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelSaveData, EffectMap) == 0x000030, "Member 'FPalMapObjectModelSaveData::EffectMap' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectConcreteModelModuleSaveData
// 0x0000 (0x0010 - 0x0010)
struct FPalMapObjectConcreteModelModuleSaveData final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalMapObjectConcreteModelModuleSaveData) == 0x000008, "Wrong alignment on FPalMapObjectConcreteModelModuleSaveData");
static_assert(sizeof(FPalMapObjectConcreteModelModuleSaveData) == 0x000010, "Wrong size on FPalMapObjectConcreteModelModuleSaveData");

// ScriptStruct Pal.PalMapObjectConcreteModelSaveData
// 0x0050 (0x0060 - 0x0010)
struct FPalMapObjectConcreteModelSaveData final : public FPalBinaryMemory
{
public:
	TMap<EPalMapObjectConcreteModelModuleType, struct FPalMapObjectConcreteModelModuleSaveData> ModuleMap;                                         // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectConcreteModelSaveData) == 0x000008, "Wrong alignment on FPalMapObjectConcreteModelSaveData");
static_assert(sizeof(FPalMapObjectConcreteModelSaveData) == 0x000060, "Wrong size on FPalMapObjectConcreteModelSaveData");
static_assert(offsetof(FPalMapObjectConcreteModelSaveData, ModuleMap) == 0x000010, "Member 'FPalMapObjectConcreteModelSaveData::ModuleMap' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectSaveData
// 0x0160 (0x0160 - 0x0000)
struct FPalMapObjectSaveData final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2602[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  WorldRotation;                                     // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale3D;                                      // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapObjectId;                                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MapObjectInstanceId;                               // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MapObjectConcreteModelInstanceId;                  // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalMapObjectModelSaveData             Model;                                             // 0x0080(0x0080)(NativeAccessSpecifierPublic)
	struct FPalMapObjectConcreteModelSaveData     ConcreteModel;                                     // 0x0100(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectSaveData) == 0x000010, "Wrong alignment on FPalMapObjectSaveData");
static_assert(sizeof(FPalMapObjectSaveData) == 0x000160, "Wrong size on FPalMapObjectSaveData");
static_assert(offsetof(FPalMapObjectSaveData, WorldLocation) == 0x000000, "Member 'FPalMapObjectSaveData::WorldLocation' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSaveData, WorldRotation) == 0x000020, "Member 'FPalMapObjectSaveData::WorldRotation' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSaveData, WorldScale3D) == 0x000040, "Member 'FPalMapObjectSaveData::WorldScale3D' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSaveData, MapObjectId) == 0x000058, "Member 'FPalMapObjectSaveData::MapObjectId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSaveData, MapObjectInstanceId) == 0x000060, "Member 'FPalMapObjectSaveData::MapObjectInstanceId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSaveData, MapObjectConcreteModelInstanceId) == 0x000070, "Member 'FPalMapObjectSaveData::MapObjectConcreteModelInstanceId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSaveData, Model) == 0x000080, "Member 'FPalMapObjectSaveData::Model' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSaveData, ConcreteModel) == 0x000100, "Member 'FPalMapObjectSaveData::ConcreteModel' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleTransportItemTargetReservedInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalBaseCampModuleTransportItemTargetReservedInfo final
{
public:
	TArray<struct FPalStaticItemIdAndNum>         ItemInfos;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  RequiredConcreteModelId;                           // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampModuleTransportItemTargetReservedInfo) == 0x000008, "Wrong alignment on FPalBaseCampModuleTransportItemTargetReservedInfo");
static_assert(sizeof(FPalBaseCampModuleTransportItemTargetReservedInfo) == 0x000020, "Wrong size on FPalBaseCampModuleTransportItemTargetReservedInfo");
static_assert(offsetof(FPalBaseCampModuleTransportItemTargetReservedInfo, ItemInfos) == 0x000000, "Member 'FPalBaseCampModuleTransportItemTargetReservedInfo::ItemInfos' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemTargetReservedInfo, RequiredConcreteModelId) == 0x000010, "Member 'FPalBaseCampModuleTransportItemTargetReservedInfo::RequiredConcreteModelId' has a wrong offset!");

// ScriptStruct Pal.PalDropCharacterExtraParameter
// 0x0010 (0x0010 - 0x0000)
struct FPalDropCharacterExtraParameter final
{
public:
	struct FGuid                                  DropPlayerUId;                                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDropCharacterExtraParameter) == 0x000004, "Wrong alignment on FPalDropCharacterExtraParameter");
static_assert(sizeof(FPalDropCharacterExtraParameter) == 0x000010, "Wrong size on FPalDropCharacterExtraParameter");
static_assert(offsetof(FPalDropCharacterExtraParameter, DropPlayerUId) == 0x000000, "Member 'FPalDropCharacterExtraParameter::DropPlayerUId' has a wrong offset!");

// ScriptStruct Pal.PalRespawnPointData
// 0x0018 (0x0020 - 0x0008)
struct FPalRespawnPointData final : public FTableRowBase
{
public:
	class FName                                   SpawnPointID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourcesAbundant;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalAbundant;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForPvP;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2603[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalRespawnPointData) == 0x000008, "Wrong alignment on FPalRespawnPointData");
static_assert(sizeof(FPalRespawnPointData) == 0x000020, "Wrong size on FPalRespawnPointData");
static_assert(offsetof(FPalRespawnPointData, SpawnPointID) == 0x000008, "Member 'FPalRespawnPointData::SpawnPointID' has a wrong offset!");
static_assert(offsetof(FPalRespawnPointData, ResourcesAbundant) == 0x000010, "Member 'FPalRespawnPointData::ResourcesAbundant' has a wrong offset!");
static_assert(offsetof(FPalRespawnPointData, PalAbundant) == 0x000014, "Member 'FPalRespawnPointData::PalAbundant' has a wrong offset!");
static_assert(offsetof(FPalRespawnPointData, ForPvP) == 0x000018, "Member 'FPalRespawnPointData::ForPvP' has a wrong offset!");

// ScriptStruct Pal.PalDynamicItemDisposeWaitNotifyInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalDynamicItemDisposeWaitNotifyInfo final
{
public:
	TArray<struct FPalDynamicItemId>              DynamicItemIds;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 WaitPlayerIds;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDynamicItemDisposeWaitNotifyInfo) == 0x000008, "Wrong alignment on FPalDynamicItemDisposeWaitNotifyInfo");
static_assert(sizeof(FPalDynamicItemDisposeWaitNotifyInfo) == 0x000020, "Wrong size on FPalDynamicItemDisposeWaitNotifyInfo");
static_assert(offsetof(FPalDynamicItemDisposeWaitNotifyInfo, DynamicItemIds) == 0x000000, "Member 'FPalDynamicItemDisposeWaitNotifyInfo::DynamicItemIds' has a wrong offset!");
static_assert(offsetof(FPalDynamicItemDisposeWaitNotifyInfo, WaitPlayerIds) == 0x000010, "Member 'FPalDynamicItemDisposeWaitNotifyInfo::WaitPlayerIds' has a wrong offset!");

// ScriptStruct Pal.PalItemCreateParameter
// 0x0020 (0x0020 - 0x0000)
struct FPalItemCreateParameter final
{
public:
	struct FPalPassiveSkillAssignInfo             PassiveSkillAssignInfo;                            // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FName                                   CharacterID;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemCreateParameter) == 0x000008, "Wrong alignment on FPalItemCreateParameter");
static_assert(sizeof(FPalItemCreateParameter) == 0x000020, "Wrong size on FPalItemCreateParameter");
static_assert(offsetof(FPalItemCreateParameter, PassiveSkillAssignInfo) == 0x000000, "Member 'FPalItemCreateParameter::PassiveSkillAssignInfo' has a wrong offset!");
static_assert(offsetof(FPalItemCreateParameter, CharacterID) == 0x000018, "Member 'FPalItemCreateParameter::CharacterID' has a wrong offset!");

// ScriptStruct Pal.PalFoliageGridInstanceMap
// 0x0050 (0x0050 - 0x0000)
struct FPalFoliageGridInstanceMap final
{
public:
	TMap<struct FPalFoliageInstanceId, class UPalFoliageInstance*> InstanceMap;                                       // 0x0000(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageGridInstanceMap) == 0x000008, "Wrong alignment on FPalFoliageGridInstanceMap");
static_assert(sizeof(FPalFoliageGridInstanceMap) == 0x000050, "Wrong size on FPalFoliageGridInstanceMap");
static_assert(offsetof(FPalFoliageGridInstanceMap, InstanceMap) == 0x000000, "Member 'FPalFoliageGridInstanceMap::InstanceMap' has a wrong offset!");

// ScriptStruct Pal.PalFoliageInstanceTransform
// 0x0038 (0x0038 - 0x0000)
struct FPalFoliageInstanceTransform final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0018(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2604[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFoliageInstanceTransform) == 0x000008, "Wrong alignment on FPalFoliageInstanceTransform");
static_assert(sizeof(FPalFoliageInstanceTransform) == 0x000038, "Wrong size on FPalFoliageInstanceTransform");
static_assert(offsetof(FPalFoliageInstanceTransform, Location) == 0x000000, "Member 'FPalFoliageInstanceTransform::Location' has a wrong offset!");
static_assert(offsetof(FPalFoliageInstanceTransform, Rotator) == 0x000018, "Member 'FPalFoliageInstanceTransform::Rotator' has a wrong offset!");
static_assert(offsetof(FPalFoliageInstanceTransform, ScaleX) == 0x000030, "Member 'FPalFoliageInstanceTransform::ScaleX' has a wrong offset!");

// ScriptStruct Pal.PalGliderPalInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalGliderPalInfo final
{
public:
	struct FPalDataTableRowName_PalMonsterData    PalName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           GliderPalArray;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGliderPalInfo) == 0x000008, "Wrong alignment on FPalGliderPalInfo");
static_assert(sizeof(FPalGliderPalInfo) == 0x000018, "Wrong size on FPalGliderPalInfo");
static_assert(offsetof(FPalGliderPalInfo, PalName) == 0x000000, "Member 'FPalGliderPalInfo::PalName' has a wrong offset!");
static_assert(offsetof(FPalGliderPalInfo, GliderPalArray) == 0x000008, "Member 'FPalGliderPalInfo::GliderPalArray' has a wrong offset!");

// ScriptStruct Pal.PalPlayerRecordDataRepInfo_BoolVal
// 0x000C (0x0018 - 0x000C)
struct FPalPlayerRecordDataRepInfo_BoolVal final : public FFastArraySerializerItem
{
public:
	class FName                                   Key;                                               // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2605[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPlayerRecordDataRepInfo_BoolVal) == 0x000004, "Wrong alignment on FPalPlayerRecordDataRepInfo_BoolVal");
static_assert(sizeof(FPalPlayerRecordDataRepInfo_BoolVal) == 0x000018, "Wrong size on FPalPlayerRecordDataRepInfo_BoolVal");
static_assert(offsetof(FPalPlayerRecordDataRepInfo_BoolVal, Key) == 0x00000C, "Member 'FPalPlayerRecordDataRepInfo_BoolVal::Key' has a wrong offset!");
static_assert(offsetof(FPalPlayerRecordDataRepInfo_BoolVal, Value) == 0x000014, "Member 'FPalPlayerRecordDataRepInfo_BoolVal::Value' has a wrong offset!");

// ScriptStruct Pal.PalPlayerRecordDataRepInfoArray_BoolVal
// 0x0070 (0x0178 - 0x0108)
struct FPalPlayerRecordDataRepInfoArray_BoolVal final : public FFastArraySerializer
{
public:
	uint8                                         Pad_2606[0x10];                                    // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalPlayerRecordDataRepInfo_BoolVal> Items;                                             // 0x0118(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2607[0x50];                                    // 0x0128(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPlayerRecordDataRepInfoArray_BoolVal) == 0x000008, "Wrong alignment on FPalPlayerRecordDataRepInfoArray_BoolVal");
static_assert(sizeof(FPalPlayerRecordDataRepInfoArray_BoolVal) == 0x000178, "Wrong size on FPalPlayerRecordDataRepInfoArray_BoolVal");
static_assert(offsetof(FPalPlayerRecordDataRepInfoArray_BoolVal, Items) == 0x000118, "Member 'FPalPlayerRecordDataRepInfoArray_BoolVal::Items' has a wrong offset!");

// ScriptStruct Pal.PalIndividualCharacterHandleId
// 0x0034 (0x0040 - 0x000C)
struct FPalIndividualCharacterHandleId final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_2608[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalInstanceID                         HandleId;                                          // 0x0010(0x0030)(Edit, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIndividualCharacterHandleId) == 0x000008, "Wrong alignment on FPalIndividualCharacterHandleId");
static_assert(sizeof(FPalIndividualCharacterHandleId) == 0x000040, "Wrong size on FPalIndividualCharacterHandleId");
static_assert(offsetof(FPalIndividualCharacterHandleId, HandleId) == 0x000010, "Member 'FPalIndividualCharacterHandleId::HandleId' has a wrong offset!");

// ScriptStruct Pal.FastPalIndividualCharacterHandleIdArray
// 0x0010 (0x0118 - 0x0108)
struct FFastPalIndividualCharacterHandleIdArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalIndividualCharacterHandleId> Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFastPalIndividualCharacterHandleIdArray) == 0x000008, "Wrong alignment on FFastPalIndividualCharacterHandleIdArray");
static_assert(sizeof(FFastPalIndividualCharacterHandleIdArray) == 0x000118, "Wrong size on FFastPalIndividualCharacterHandleIdArray");
static_assert(offsetof(FFastPalIndividualCharacterHandleIdArray, Items) == 0x000108, "Member 'FFastPalIndividualCharacterHandleIdArray::Items' has a wrong offset!");

// ScriptStruct Pal.SequentialProcessSequenceSet
// 0x0010 (0x0010 - 0x0000)
struct FSequentialProcessSequenceSet final
{
public:
	TArray<class USequentialProcessSequenceBase*> Sequences;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequentialProcessSequenceSet) == 0x000008, "Wrong alignment on FSequentialProcessSequenceSet");
static_assert(sizeof(FSequentialProcessSequenceSet) == 0x000010, "Wrong size on FSequentialProcessSequenceSet");
static_assert(offsetof(FSequentialProcessSequenceSet, Sequences) == 0x000000, "Member 'FSequentialProcessSequenceSet::Sequences' has a wrong offset!");

// ScriptStruct Pal.PalWorldHUDParameter
// 0x0068 (0x0068 - 0x0000)
struct FPalWorldHUDParameter final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalUserWidgetWorldHUD>     WorldHUDClass;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorldHUDWidgetBlueprintType               WorldHUDType;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2609[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalHUDDispatchParameterBase*           HUDParameter;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DisplayOffset;                                     // 0x0038(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DisplayOffsetScreenPos;                            // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DisplayRange;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableShow;                                       // 0x0064(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_260A[0x3];                                     // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorldHUDParameter) == 0x000008, "Wrong alignment on FPalWorldHUDParameter");
static_assert(sizeof(FPalWorldHUDParameter) == 0x000068, "Wrong size on FPalWorldHUDParameter");
static_assert(offsetof(FPalWorldHUDParameter, TargetActor) == 0x000000, "Member 'FPalWorldHUDParameter::TargetActor' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, TargetLocation) == 0x000008, "Member 'FPalWorldHUDParameter::TargetLocation' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, WorldHUDClass) == 0x000020, "Member 'FPalWorldHUDParameter::WorldHUDClass' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, WorldHUDType) == 0x000028, "Member 'FPalWorldHUDParameter::WorldHUDType' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, HUDParameter) == 0x000030, "Member 'FPalWorldHUDParameter::HUDParameter' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, DisplayOffset) == 0x000038, "Member 'FPalWorldHUDParameter::DisplayOffset' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, DisplayOffsetScreenPos) == 0x000050, "Member 'FPalWorldHUDParameter::DisplayOffsetScreenPos' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, DisplayRange) == 0x000060, "Member 'FPalWorldHUDParameter::DisplayRange' has a wrong offset!");
static_assert(offsetof(FPalWorldHUDParameter, bEnableShow) == 0x000064, "Member 'FPalWorldHUDParameter::bEnableShow' has a wrong offset!");

// ScriptStruct Pal.PalDungeonLevelData
// 0x0018 (0x0020 - 0x0008)
struct FPalDungeonLevelData final : public FTableRowBase
{
public:
	class FName                                   SpawnAreaId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightInSpawnArea;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDungeonLevelData) == 0x000008, "Wrong alignment on FPalDungeonLevelData");
static_assert(sizeof(FPalDungeonLevelData) == 0x000020, "Wrong size on FPalDungeonLevelData");
static_assert(offsetof(FPalDungeonLevelData, SpawnAreaId) == 0x000008, "Member 'FPalDungeonLevelData::SpawnAreaId' has a wrong offset!");
static_assert(offsetof(FPalDungeonLevelData, WeightInSpawnArea) == 0x000010, "Member 'FPalDungeonLevelData::WeightInSpawnArea' has a wrong offset!");
static_assert(offsetof(FPalDungeonLevelData, LevelName) == 0x000014, "Member 'FPalDungeonLevelData::LevelName' has a wrong offset!");

// ScriptStruct Pal.PalUICommonItemInfoDisplayData
// 0x0030 (0x0030 - 0x0000)
struct FPalUICommonItemInfoDisplayData final
{
public:
	class UPalItemSlot*                           TargetItemSlot;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                RelativeWidget;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AnchorPosition;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsableSlot;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableQuickEquip;                                // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableQuickMove;                                 // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableSpreadLift;                                // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowPrice;                                       // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260C[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUICommonItemInfoDisplayData) == 0x000008, "Wrong alignment on FPalUICommonItemInfoDisplayData");
static_assert(sizeof(FPalUICommonItemInfoDisplayData) == 0x000030, "Wrong size on FPalUICommonItemInfoDisplayData");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, TargetItemSlot) == 0x000000, "Member 'FPalUICommonItemInfoDisplayData::TargetItemSlot' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, RecipeID) == 0x000008, "Member 'FPalUICommonItemInfoDisplayData::RecipeID' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, RelativeWidget) == 0x000010, "Member 'FPalUICommonItemInfoDisplayData::RelativeWidget' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, AnchorPosition) == 0x000018, "Member 'FPalUICommonItemInfoDisplayData::AnchorPosition' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, IsUsableSlot) == 0x000028, "Member 'FPalUICommonItemInfoDisplayData::IsUsableSlot' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, IsEnableQuickEquip) == 0x000029, "Member 'FPalUICommonItemInfoDisplayData::IsEnableQuickEquip' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, IsEnableQuickMove) == 0x00002A, "Member 'FPalUICommonItemInfoDisplayData::IsEnableQuickMove' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, IsEnableSpreadLift) == 0x00002B, "Member 'FPalUICommonItemInfoDisplayData::IsEnableSpreadLift' has a wrong offset!");
static_assert(offsetof(FPalUICommonItemInfoDisplayData, IsShowPrice) == 0x00002C, "Member 'FPalUICommonItemInfoDisplayData::IsShowPrice' has a wrong offset!");

// ScriptStruct Pal.UITransientData
// 0x0088 (0x0088 - 0x0000)
struct FUITransientData final
{
public:
	int32                                         RadialMenuLastTab;                                 // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCampTaskUIOpen;                                  // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastOpenedPaldexCharacter;                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewsOpened;                                        // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpenedSurvivalGuide;                             // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerLobbyDialogOpened;                           // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260E[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          IgnoreMaskLocationIDArray;                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreMaskLBossSpawnerNameArray;                   // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      TransientNPCTalkCountMap;                          // 0x0038(0x0050)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUITransientData) == 0x000008, "Wrong alignment on FUITransientData");
static_assert(sizeof(FUITransientData) == 0x000088, "Wrong size on FUITransientData");
static_assert(offsetof(FUITransientData, RadialMenuLastTab) == 0x000000, "Member 'FUITransientData::RadialMenuLastTab' has a wrong offset!");
static_assert(offsetof(FUITransientData, IsCampTaskUIOpen) == 0x000004, "Member 'FUITransientData::IsCampTaskUIOpen' has a wrong offset!");
static_assert(offsetof(FUITransientData, LastOpenedPaldexCharacter) == 0x000008, "Member 'FUITransientData::LastOpenedPaldexCharacter' has a wrong offset!");
static_assert(offsetof(FUITransientData, NewsOpened) == 0x000010, "Member 'FUITransientData::NewsOpened' has a wrong offset!");
static_assert(offsetof(FUITransientData, IsOpenedSurvivalGuide) == 0x000011, "Member 'FUITransientData::IsOpenedSurvivalGuide' has a wrong offset!");
static_assert(offsetof(FUITransientData, ServerLobbyDialogOpened) == 0x000012, "Member 'FUITransientData::ServerLobbyDialogOpened' has a wrong offset!");
static_assert(offsetof(FUITransientData, IgnoreMaskLocationIDArray) == 0x000018, "Member 'FUITransientData::IgnoreMaskLocationIDArray' has a wrong offset!");
static_assert(offsetof(FUITransientData, IgnoreMaskLBossSpawnerNameArray) == 0x000028, "Member 'FUITransientData::IgnoreMaskLBossSpawnerNameArray' has a wrong offset!");
static_assert(offsetof(FUITransientData, TransientNPCTalkCountMap) == 0x000038, "Member 'FUITransientData::TransientNPCTalkCountMap' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectDisposeReserveInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalMapObjectDisposeReserveInfo final
{
public:
	uint8                                         Pad_260F[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectDisposeReserveInfo) == 0x000008, "Wrong alignment on FPalMapObjectDisposeReserveInfo");
static_assert(sizeof(FPalMapObjectDisposeReserveInfo) == 0x000020, "Wrong size on FPalMapObjectDisposeReserveInfo");

// ScriptStruct Pal.PalIncidentNotifyParameter
// 0x0028 (0x0028 - 0x0000)
struct FPalIncidentNotifyParameter final
{
public:
	class FName                                   IncidentId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IncidentType;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OccuredObject;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OwnerObject;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPalIncidentBase*                       IncidentObject;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIncidentNotifyParameter) == 0x000008, "Wrong alignment on FPalIncidentNotifyParameter");
static_assert(sizeof(FPalIncidentNotifyParameter) == 0x000028, "Wrong size on FPalIncidentNotifyParameter");
static_assert(offsetof(FPalIncidentNotifyParameter, IncidentId) == 0x000000, "Member 'FPalIncidentNotifyParameter::IncidentId' has a wrong offset!");
static_assert(offsetof(FPalIncidentNotifyParameter, IncidentType) == 0x000008, "Member 'FPalIncidentNotifyParameter::IncidentType' has a wrong offset!");
static_assert(offsetof(FPalIncidentNotifyParameter, OccuredObject) == 0x000010, "Member 'FPalIncidentNotifyParameter::OccuredObject' has a wrong offset!");
static_assert(offsetof(FPalIncidentNotifyParameter, OwnerObject) == 0x000018, "Member 'FPalIncidentNotifyParameter::OwnerObject' has a wrong offset!");
static_assert(offsetof(FPalIncidentNotifyParameter, IncidentObject) == 0x000020, "Member 'FPalIncidentNotifyParameter::IncidentObject' has a wrong offset!");

// ScriptStruct Pal.PalIncidentInitializeParameter
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FPalIncidentInitializeParameter final
{
public:
	uint8                                         Pad_2610[0x38];                                    // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalIncidentInitializeParameter) == 0x000008, "Wrong alignment on FPalIncidentInitializeParameter");
static_assert(sizeof(FPalIncidentInitializeParameter) == 0x000038, "Wrong size on FPalIncidentInitializeParameter");

// ScriptStruct Pal.PalMapObjectModelConnectInfoItem
// 0x0014 (0x0014 - 0x0000)
struct FPalMapObjectModelConnectInfoItem final
{
public:
	struct FGuid                                  ConnectToModelInstanceId;                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectModelConnectIndex                ConnectIndex;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2611[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectModelConnectInfoItem) == 0x000004, "Wrong alignment on FPalMapObjectModelConnectInfoItem");
static_assert(sizeof(FPalMapObjectModelConnectInfoItem) == 0x000014, "Wrong size on FPalMapObjectModelConnectInfoItem");
static_assert(offsetof(FPalMapObjectModelConnectInfoItem, ConnectToModelInstanceId) == 0x000000, "Member 'FPalMapObjectModelConnectInfoItem::ConnectToModelInstanceId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelConnectInfoItem, ConnectIndex) == 0x000010, "Member 'FPalMapObjectModelConnectInfoItem::ConnectIndex' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectModelConnectInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalMapObjectModelConnectInfo final
{
public:
	EPalMapObjectModelConnectIndex                ConnectIndex;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2612[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalMapObjectModelConnectInfoItem> ConnectToInfos;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectModelConnectInfo) == 0x000008, "Wrong alignment on FPalMapObjectModelConnectInfo");
static_assert(sizeof(FPalMapObjectModelConnectInfo) == 0x000018, "Wrong size on FPalMapObjectModelConnectInfo");
static_assert(offsetof(FPalMapObjectModelConnectInfo, ConnectIndex) == 0x000000, "Member 'FPalMapObjectModelConnectInfo::ConnectIndex' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelConnectInfo, ConnectToInfos) == 0x000008, "Member 'FPalMapObjectModelConnectInfo::ConnectToInfos' has a wrong offset!");

// ScriptStruct Pal.PalIndividualCharacterEquipItemContainerHandler
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FPalIndividualCharacterEquipItemContainerHandler final
{
public:
	uint8                                         Pad_2613[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalIndividualCharacterEquipItemContainerHandler) == 0x000004, "Wrong alignment on FPalIndividualCharacterEquipItemContainerHandler");
static_assert(sizeof(FPalIndividualCharacterEquipItemContainerHandler) == 0x000008, "Wrong size on FPalIndividualCharacterEquipItemContainerHandler");

// ScriptStruct Pal.PalMapObjectFoliageInstallData
// 0x0050 (0x0058 - 0x0008)
struct FPalMapObjectFoliageInstallData final : public FTableRowBase
{
public:
	class FName                                   FoliageTypeName;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0028(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale3D;                                           // 0x0040(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectFoliageInstallData) == 0x000008, "Wrong alignment on FPalMapObjectFoliageInstallData");
static_assert(sizeof(FPalMapObjectFoliageInstallData) == 0x000058, "Wrong size on FPalMapObjectFoliageInstallData");
static_assert(offsetof(FPalMapObjectFoliageInstallData, FoliageTypeName) == 0x000008, "Member 'FPalMapObjectFoliageInstallData::FoliageTypeName' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFoliageInstallData, Location) == 0x000010, "Member 'FPalMapObjectFoliageInstallData::Location' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFoliageInstallData, Rotator) == 0x000028, "Member 'FPalMapObjectFoliageInstallData::Rotator' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFoliageInstallData, Scale3D) == 0x000040, "Member 'FPalMapObjectFoliageInstallData::Scale3D' has a wrong offset!");

// ScriptStruct Pal.PalItemSlotIdAndNum
// 0x0018 (0x0018 - 0x0000)
struct FPalItemSlotIdAndNum final
{
public:
	struct FPalItemSlotId                         SlotID;                                            // 0x0000(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemSlotIdAndNum) == 0x000004, "Wrong alignment on FPalItemSlotIdAndNum");
static_assert(sizeof(FPalItemSlotIdAndNum) == 0x000018, "Wrong size on FPalItemSlotIdAndNum");
static_assert(offsetof(FPalItemSlotIdAndNum, SlotID) == 0x000000, "Member 'FPalItemSlotIdAndNum::SlotID' has a wrong offset!");
static_assert(offsetof(FPalItemSlotIdAndNum, Num) == 0x000014, "Member 'FPalItemSlotIdAndNum::Num' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectBelongInfo
// 0x0010 (0x0018 - 0x0008)
struct FPalMapObjectBelongInfo final : public FPalBelongInfo
{
public:
	struct FGuid                                  GroupID;                                           // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectBelongInfo) == 0x000008, "Wrong alignment on FPalMapObjectBelongInfo");
static_assert(sizeof(FPalMapObjectBelongInfo) == 0x000018, "Wrong size on FPalMapObjectBelongInfo");
static_assert(offsetof(FPalMapObjectBelongInfo, GroupID) == 0x000008, "Member 'FPalMapObjectBelongInfo::GroupID' has a wrong offset!");

// ScriptStruct Pal.PalPhantomReplicateInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalPhantomReplicateInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2614[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          Character;                                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPhantomReplicateInfo) == 0x000008, "Wrong alignment on FPalPhantomReplicateInfo");
static_assert(sizeof(FPalPhantomReplicateInfo) == 0x000010, "Wrong size on FPalPhantomReplicateInfo");
static_assert(offsetof(FPalPhantomReplicateInfo, ID) == 0x000000, "Member 'FPalPhantomReplicateInfo::ID' has a wrong offset!");
static_assert(offsetof(FPalPhantomReplicateInfo, Character) == 0x000008, "Member 'FPalPhantomReplicateInfo::Character' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectModelEffectRepInfo
// 0x000C (0x0018 - 0x000C)
struct FPalMapObjectModelEffectRepInfo final : public FFastArraySerializerItem
{
public:
	EPalStatusID                                  StatusId;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2615[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalMapObjectModelEffectBase*           Effect;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectModelEffectRepInfo) == 0x000008, "Wrong alignment on FPalMapObjectModelEffectRepInfo");
static_assert(sizeof(FPalMapObjectModelEffectRepInfo) == 0x000018, "Wrong size on FPalMapObjectModelEffectRepInfo");
static_assert(offsetof(FPalMapObjectModelEffectRepInfo, StatusId) == 0x00000C, "Member 'FPalMapObjectModelEffectRepInfo::StatusId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelEffectRepInfo, Effect) == 0x000010, "Member 'FPalMapObjectModelEffectRepInfo::Effect' has a wrong offset!");

// ScriptStruct Pal.PalFastMapObjectModelEffectRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FPalFastMapObjectModelEffectRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalMapObjectModelEffectRepInfo> Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2616[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFastMapObjectModelEffectRepInfoArray) == 0x000008, "Wrong alignment on FPalFastMapObjectModelEffectRepInfoArray");
static_assert(sizeof(FPalFastMapObjectModelEffectRepInfoArray) == 0x000148, "Wrong size on FPalFastMapObjectModelEffectRepInfoArray");
static_assert(offsetof(FPalFastMapObjectModelEffectRepInfoArray, Items) == 0x000108, "Member 'FPalFastMapObjectModelEffectRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalEditorItemStaticMeshTableRow
// 0x0038 (0x0040 - 0x0008)
struct FPalEditorItemStaticMeshTableRow final : public FTableRowBase
{
public:
	class FName                                   StaticMeshName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMeshPath;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEditorItemStaticMeshTableRow) == 0x000008, "Wrong alignment on FPalEditorItemStaticMeshTableRow");
static_assert(sizeof(FPalEditorItemStaticMeshTableRow) == 0x000040, "Wrong size on FPalEditorItemStaticMeshTableRow");
static_assert(offsetof(FPalEditorItemStaticMeshTableRow, StaticMeshName) == 0x000008, "Member 'FPalEditorItemStaticMeshTableRow::StaticMeshName' has a wrong offset!");
static_assert(offsetof(FPalEditorItemStaticMeshTableRow, StaticMeshPath) == 0x000010, "Member 'FPalEditorItemStaticMeshTableRow::StaticMeshPath' has a wrong offset!");

// ScriptStruct Pal.PalInteractComponentOverlapComponentSet
// 0x0050 (0x0050 - 0x0000)
struct FPalInteractComponentOverlapComponentSet final
{
public:
	TSet<class UPrimitiveComponent*>              Components;                                        // 0x0000(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInteractComponentOverlapComponentSet) == 0x000008, "Wrong alignment on FPalInteractComponentOverlapComponentSet");
static_assert(sizeof(FPalInteractComponentOverlapComponentSet) == 0x000050, "Wrong size on FPalInteractComponentOverlapComponentSet");
static_assert(offsetof(FPalInteractComponentOverlapComponentSet, Components) == 0x000000, "Member 'FPalInteractComponentOverlapComponentSet::Components' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectVisualEffectInstanceSet
// 0x0010 (0x0010 - 0x0000)
struct FPalMapObjectVisualEffectInstanceSet final
{
public:
	TArray<class UNiagaraComponent*>              Instances;                                         // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectVisualEffectInstanceSet) == 0x000008, "Wrong alignment on FPalMapObjectVisualEffectInstanceSet");
static_assert(sizeof(FPalMapObjectVisualEffectInstanceSet) == 0x000010, "Wrong size on FPalMapObjectVisualEffectInstanceSet");
static_assert(offsetof(FPalMapObjectVisualEffectInstanceSet, Instances) == 0x000000, "Member 'FPalMapObjectVisualEffectInstanceSet::Instances' has a wrong offset!");

// ScriptStruct Pal.PalInvaderDatabaseRow
// 0x0068 (0x0070 - 0x0008)
struct FPalInvaderDatabaseRow : public FTableRowBase
{
public:
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBiomeType                                 BiomeID;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2617[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InvadeGradeMin;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvadeGradeMax;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharactorID_A;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin_A;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax_A;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number_A;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharactorID_B;                                     // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin_B;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax_B;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number_B;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharactorID_C;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin_C;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax_C;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number_C;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharactorID_D;                                     // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin_D;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax_D;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number_D;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInvaderDatabaseRow) == 0x000008, "Wrong alignment on FPalInvaderDatabaseRow");
static_assert(sizeof(FPalInvaderDatabaseRow) == 0x000070, "Wrong size on FPalInvaderDatabaseRow");
static_assert(offsetof(FPalInvaderDatabaseRow, GroupName) == 0x000008, "Member 'FPalInvaderDatabaseRow::GroupName' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, BiomeID) == 0x000010, "Member 'FPalInvaderDatabaseRow::BiomeID' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, InvadeGradeMin) == 0x000014, "Member 'FPalInvaderDatabaseRow::InvadeGradeMin' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, InvadeGradeMax) == 0x000018, "Member 'FPalInvaderDatabaseRow::InvadeGradeMax' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, Weight) == 0x00001C, "Member 'FPalInvaderDatabaseRow::Weight' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, CharactorID_A) == 0x000020, "Member 'FPalInvaderDatabaseRow::CharactorID_A' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMin_A) == 0x000028, "Member 'FPalInvaderDatabaseRow::LevelMin_A' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMax_A) == 0x00002C, "Member 'FPalInvaderDatabaseRow::LevelMax_A' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, Number_A) == 0x000030, "Member 'FPalInvaderDatabaseRow::Number_A' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, CharactorID_B) == 0x000034, "Member 'FPalInvaderDatabaseRow::CharactorID_B' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMin_B) == 0x00003C, "Member 'FPalInvaderDatabaseRow::LevelMin_B' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMax_B) == 0x000040, "Member 'FPalInvaderDatabaseRow::LevelMax_B' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, Number_B) == 0x000044, "Member 'FPalInvaderDatabaseRow::Number_B' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, CharactorID_C) == 0x000048, "Member 'FPalInvaderDatabaseRow::CharactorID_C' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMin_C) == 0x000050, "Member 'FPalInvaderDatabaseRow::LevelMin_C' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMax_C) == 0x000054, "Member 'FPalInvaderDatabaseRow::LevelMax_C' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, Number_C) == 0x000058, "Member 'FPalInvaderDatabaseRow::Number_C' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, CharactorID_D) == 0x00005C, "Member 'FPalInvaderDatabaseRow::CharactorID_D' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMin_D) == 0x000064, "Member 'FPalInvaderDatabaseRow::LevelMin_D' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, LevelMax_D) == 0x000068, "Member 'FPalInvaderDatabaseRow::LevelMax_D' has a wrong offset!");
static_assert(offsetof(FPalInvaderDatabaseRow, Number_D) == 0x00006C, "Member 'FPalInvaderDatabaseRow::Number_D' has a wrong offset!");

// ScriptStruct Pal.PalIncidentBroadcastParameter
// 0x0090 (0x0090 - 0x0000)
struct FPalIncidentBroadcastParameter final
{
public:
	EPalInvaderType                               InvaderType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2618[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalBaseCampModel*                      TargetBaseCamp;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalInvaderDatabaseRow                 ChosenInvaderData;                                 // 0x0010(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGuid                                  GroupGuid;                                         // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIncidentBroadcastParameter) == 0x000008, "Wrong alignment on FPalIncidentBroadcastParameter");
static_assert(sizeof(FPalIncidentBroadcastParameter) == 0x000090, "Wrong size on FPalIncidentBroadcastParameter");
static_assert(offsetof(FPalIncidentBroadcastParameter, InvaderType) == 0x000000, "Member 'FPalIncidentBroadcastParameter::InvaderType' has a wrong offset!");
static_assert(offsetof(FPalIncidentBroadcastParameter, TargetBaseCamp) == 0x000008, "Member 'FPalIncidentBroadcastParameter::TargetBaseCamp' has a wrong offset!");
static_assert(offsetof(FPalIncidentBroadcastParameter, ChosenInvaderData) == 0x000010, "Member 'FPalIncidentBroadcastParameter::ChosenInvaderData' has a wrong offset!");
static_assert(offsetof(FPalIncidentBroadcastParameter, GroupGuid) == 0x000080, "Member 'FPalIncidentBroadcastParameter::GroupGuid' has a wrong offset!");

// ScriptStruct Pal.PalDungeonMarkerPointSpawnParameter
// 0x0010 (0x0010 - 0x0000)
struct FPalDungeonMarkerPointSpawnParameter final
{
public:
	float                                         RespawnInterval;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearInterval;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnProbability;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearIntervalAfterDefeatBoss;                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonMarkerPointSpawnParameter) == 0x000004, "Wrong alignment on FPalDungeonMarkerPointSpawnParameter");
static_assert(sizeof(FPalDungeonMarkerPointSpawnParameter) == 0x000010, "Wrong size on FPalDungeonMarkerPointSpawnParameter");
static_assert(offsetof(FPalDungeonMarkerPointSpawnParameter, RespawnInterval) == 0x000000, "Member 'FPalDungeonMarkerPointSpawnParameter::RespawnInterval' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointSpawnParameter, DisappearInterval) == 0x000004, "Member 'FPalDungeonMarkerPointSpawnParameter::DisappearInterval' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointSpawnParameter, RespawnProbability) == 0x000008, "Member 'FPalDungeonMarkerPointSpawnParameter::RespawnProbability' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointSpawnParameter, DisappearIntervalAfterDefeatBoss) == 0x00000C, "Member 'FPalDungeonMarkerPointSpawnParameter::DisappearIntervalAfterDefeatBoss' has a wrong offset!");

// ScriptStruct Pal.PalDungeonMarkerPointData
// 0x00B0 (0x00B0 - 0x0000)
struct FPalDungeonMarkerPointData final
{
public:
	struct FGuid                                  MarkerPointId;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpawnAreaIds;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDungeonMarkerPointSpawnParameter   SpawnParameter;                                    // 0x0080(0x0010)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class APalDungeonEntrance>        EntranceClass;                                     // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2619[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ConnectedDungeonInstanceId;                        // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonMarkerPointData) == 0x000010, "Wrong alignment on FPalDungeonMarkerPointData");
static_assert(sizeof(FPalDungeonMarkerPointData) == 0x0000B0, "Wrong size on FPalDungeonMarkerPointData");
static_assert(offsetof(FPalDungeonMarkerPointData, MarkerPointId) == 0x000000, "Member 'FPalDungeonMarkerPointData::MarkerPointId' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointData, SpawnAreaIds) == 0x000010, "Member 'FPalDungeonMarkerPointData::SpawnAreaIds' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointData, Transform) == 0x000020, "Member 'FPalDungeonMarkerPointData::Transform' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointData, SpawnParameter) == 0x000080, "Member 'FPalDungeonMarkerPointData::SpawnParameter' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointData, EntranceClass) == 0x000090, "Member 'FPalDungeonMarkerPointData::EntranceClass' has a wrong offset!");
static_assert(offsetof(FPalDungeonMarkerPointData, ConnectedDungeonInstanceId) == 0x0000A0, "Member 'FPalDungeonMarkerPointData::ConnectedDungeonInstanceId' has a wrong offset!");

// ScriptStruct Pal.PalDungeonMarkerPointDataSet
// 0x0010 (0x0010 - 0x0000)
struct FPalDungeonMarkerPointDataSet final
{
public:
	TArray<struct FPalDungeonMarkerPointData>     MarkerPoints;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonMarkerPointDataSet) == 0x000008, "Wrong alignment on FPalDungeonMarkerPointDataSet");
static_assert(sizeof(FPalDungeonMarkerPointDataSet) == 0x000010, "Wrong size on FPalDungeonMarkerPointDataSet");
static_assert(offsetof(FPalDungeonMarkerPointDataSet, MarkerPoints) == 0x000000, "Member 'FPalDungeonMarkerPointDataSet::MarkerPoints' has a wrong offset!");

// ScriptStruct Pal.PalInvaderSaveData
// 0x000C (0x000C - 0x0000)
struct FPalInvaderSaveData final
{
public:
	bool                                          bIsInvading;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTimeElapsed;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTimeFinish;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInvaderSaveData) == 0x000004, "Wrong alignment on FPalInvaderSaveData");
static_assert(sizeof(FPalInvaderSaveData) == 0x00000C, "Wrong size on FPalInvaderSaveData");
static_assert(offsetof(FPalInvaderSaveData, bIsInvading) == 0x000000, "Member 'FPalInvaderSaveData::bIsInvading' has a wrong offset!");
static_assert(offsetof(FPalInvaderSaveData, CoolTimeElapsed) == 0x000004, "Member 'FPalInvaderSaveData::CoolTimeElapsed' has a wrong offset!");
static_assert(offsetof(FPalInvaderSaveData, CoolTimeFinish) == 0x000008, "Member 'FPalInvaderSaveData::CoolTimeFinish' has a wrong offset!");

// ScriptStruct Pal.PalNetworkTransmitterDelaySpawnInfo
// 0x0028 (0x0028 - 0x0000)
struct FPalNetworkTransmitterDelaySpawnInfo final
{
public:
	uint8                                         Pad_261B[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SpawnGUID;                                         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnActor;                                        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNetworkTransmitterDelaySpawnInfo) == 0x000008, "Wrong alignment on FPalNetworkTransmitterDelaySpawnInfo");
static_assert(sizeof(FPalNetworkTransmitterDelaySpawnInfo) == 0x000028, "Wrong size on FPalNetworkTransmitterDelaySpawnInfo");
static_assert(offsetof(FPalNetworkTransmitterDelaySpawnInfo, SpawnGUID) == 0x000010, "Member 'FPalNetworkTransmitterDelaySpawnInfo::SpawnGUID' has a wrong offset!");
static_assert(offsetof(FPalNetworkTransmitterDelaySpawnInfo, SpawnActor) == 0x000020, "Member 'FPalNetworkTransmitterDelaySpawnInfo::SpawnActor' has a wrong offset!");

// ScriptStruct Pal.PalInvaderStartPointInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalInvaderStartPointInfo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBiomeType                                 BiomeType;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalInvaderStartPointInfo) == 0x000008, "Wrong alignment on FPalInvaderStartPointInfo");
static_assert(sizeof(FPalInvaderStartPointInfo) == 0x000020, "Wrong size on FPalInvaderStartPointInfo");
static_assert(offsetof(FPalInvaderStartPointInfo, Location) == 0x000000, "Member 'FPalInvaderStartPointInfo::Location' has a wrong offset!");
static_assert(offsetof(FPalInvaderStartPointInfo, BiomeType) == 0x000018, "Member 'FPalInvaderStartPointInfo::BiomeType' has a wrong offset!");

// ScriptStruct Pal.PalStaticItemIdAndDynamicItemDataSet
// 0x0010 (0x0010 - 0x0000)
struct FPalStaticItemIdAndDynamicItemDataSet final
{
public:
	class FName                                   StaticItemId;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPalDynamicItemDataBase*                DynamicItemData;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalStaticItemIdAndDynamicItemDataSet) == 0x000008, "Wrong alignment on FPalStaticItemIdAndDynamicItemDataSet");
static_assert(sizeof(FPalStaticItemIdAndDynamicItemDataSet) == 0x000010, "Wrong size on FPalStaticItemIdAndDynamicItemDataSet");
static_assert(offsetof(FPalStaticItemIdAndDynamicItemDataSet, StaticItemId) == 0x000000, "Member 'FPalStaticItemIdAndDynamicItemDataSet::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalStaticItemIdAndDynamicItemDataSet, DynamicItemData) == 0x000008, "Member 'FPalStaticItemIdAndDynamicItemDataSet::DynamicItemData' has a wrong offset!");

// ScriptStruct Pal.PalNavigationUpdateFrequencySetting
// 0x0018 (0x0018 - 0x0000)
struct FPalNavigationUpdateFrequencySetting final
{
public:
	int32                                         UpdateDivideRate;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UpdatableRangeMinMaxFromPlayer;                    // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNavigationUpdateFrequencySetting) == 0x000008, "Wrong alignment on FPalNavigationUpdateFrequencySetting");
static_assert(sizeof(FPalNavigationUpdateFrequencySetting) == 0x000018, "Wrong size on FPalNavigationUpdateFrequencySetting");
static_assert(offsetof(FPalNavigationUpdateFrequencySetting, UpdateDivideRate) == 0x000000, "Member 'FPalNavigationUpdateFrequencySetting::UpdateDivideRate' has a wrong offset!");
static_assert(offsetof(FPalNavigationUpdateFrequencySetting, UpdatableRangeMinMaxFromPlayer) == 0x000008, "Member 'FPalNavigationUpdateFrequencySetting::UpdatableRangeMinMaxFromPlayer' has a wrong offset!");

// ScriptStruct Pal.PalItemContainerFilter
// 0x0010 (0x0010 - 0x0000)
struct FPalItemContainerFilter final
{
public:
	TArray<class FName>                           FilterOffList;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemContainerFilter) == 0x000008, "Wrong alignment on FPalItemContainerFilter");
static_assert(sizeof(FPalItemContainerFilter) == 0x000010, "Wrong size on FPalItemContainerFilter");
static_assert(offsetof(FPalItemContainerFilter, FilterOffList) == 0x000000, "Member 'FPalItemContainerFilter::FilterOffList' has a wrong offset!");

// ScriptStruct Pal.PalPlayerEquipmentMeshDataRow
// 0x00F8 (0x0100 - 0x0008)
struct FPalPlayerEquipmentMeshDataRow final : public FTableRowBase
{
public:
	TMap<class FName, TSoftObjectPtr<class USkeletalMesh>> SkeletalMeshMap;                                   // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftClassPtr<class UClass>> ABPAssetMap;                                       // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          IsHairAttachAccessory;                             // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261E[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                HairAttachSocketNameMap;                           // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerEquipmentMeshDataRow) == 0x000008, "Wrong alignment on FPalPlayerEquipmentMeshDataRow");
static_assert(sizeof(FPalPlayerEquipmentMeshDataRow) == 0x000100, "Wrong size on FPalPlayerEquipmentMeshDataRow");
static_assert(offsetof(FPalPlayerEquipmentMeshDataRow, SkeletalMeshMap) == 0x000008, "Member 'FPalPlayerEquipmentMeshDataRow::SkeletalMeshMap' has a wrong offset!");
static_assert(offsetof(FPalPlayerEquipmentMeshDataRow, ABPAssetMap) == 0x000058, "Member 'FPalPlayerEquipmentMeshDataRow::ABPAssetMap' has a wrong offset!");
static_assert(offsetof(FPalPlayerEquipmentMeshDataRow, IsHairAttachAccessory) == 0x0000A8, "Member 'FPalPlayerEquipmentMeshDataRow::IsHairAttachAccessory' has a wrong offset!");
static_assert(offsetof(FPalPlayerEquipmentMeshDataRow, HairAttachSocketNameMap) == 0x0000B0, "Member 'FPalPlayerEquipmentMeshDataRow::HairAttachSocketNameMap' has a wrong offset!");

// ScriptStruct Pal.PalACEWordFilterRequestData
// 0x0028 (0x0028 - 0x0000)
struct FPalACEWordFilterRequestData final
{
public:
	class FString                                 TargetString;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalACEWordFilterSceneType                    SceneType;                                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Callback;                                          // 0x0018(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalACEWordFilterRequestData) == 0x000008, "Wrong alignment on FPalACEWordFilterRequestData");
static_assert(sizeof(FPalACEWordFilterRequestData) == 0x000028, "Wrong size on FPalACEWordFilterRequestData");
static_assert(offsetof(FPalACEWordFilterRequestData, TargetString) == 0x000000, "Member 'FPalACEWordFilterRequestData::TargetString' has a wrong offset!");
static_assert(offsetof(FPalACEWordFilterRequestData, SceneType) == 0x000010, "Member 'FPalACEWordFilterRequestData::SceneType' has a wrong offset!");
static_assert(offsetof(FPalACEWordFilterRequestData, Callback) == 0x000018, "Member 'FPalACEWordFilterRequestData::Callback' has a wrong offset!");

// ScriptStruct Pal.PalOptimizeParameter
// 0x0490 (0x0490 - 0x0000)
struct FPalOptimizeParameter final
{
public:
	int32                                         FoliageISMDistance_Meters;                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFPS;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFPS;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFPS;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterImportance_CheckNumberPerFrame;           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterImportance_NearestCount;                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterImportance_NearDistance;                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterImportance_FarDistance;                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterImportance_FarthestDistance;              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2620[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_Actor;            // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_Movement;         // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_Mesh;             // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_Action;           // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_Status;           // 0x0168(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_LookAt;           // 0x01B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_VisualEffect;     // 0x0208(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_Shooter;          // 0x0258(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_FlyMesh;          // 0x02A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_Controller;       // 0x02F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_AIAction;         // 0x0348(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_AISensor;         // 0x0398(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPalCharacterImportanceType, float>      CharacterImportance_TickInterval_PathFollowing;    // 0x03E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         SpawnerImportance_NearDistance;                    // 0x0438(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnerImportance_FarDistance;                     // 0x043C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPalSpwnerImportanceType, float>         SpawnerImportance_TickInterval_NPCSpawner;         // 0x0440(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptimizeParameter) == 0x000008, "Wrong alignment on FPalOptimizeParameter");
static_assert(sizeof(FPalOptimizeParameter) == 0x000490, "Wrong size on FPalOptimizeParameter");
static_assert(offsetof(FPalOptimizeParameter, FoliageISMDistance_Meters) == 0x000000, "Member 'FPalOptimizeParameter::FoliageISMDistance_Meters' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, TargetFPS) == 0x000004, "Member 'FPalOptimizeParameter::TargetFPS' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, MinFPS) == 0x000008, "Member 'FPalOptimizeParameter::MinFPS' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, MaxFPS) == 0x00000C, "Member 'FPalOptimizeParameter::MaxFPS' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_CheckNumberPerFrame) == 0x000010, "Member 'FPalOptimizeParameter::CharacterImportance_CheckNumberPerFrame' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_NearestCount) == 0x000014, "Member 'FPalOptimizeParameter::CharacterImportance_NearestCount' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_NearDistance) == 0x000018, "Member 'FPalOptimizeParameter::CharacterImportance_NearDistance' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_FarDistance) == 0x00001C, "Member 'FPalOptimizeParameter::CharacterImportance_FarDistance' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_FarthestDistance) == 0x000020, "Member 'FPalOptimizeParameter::CharacterImportance_FarthestDistance' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_Actor) == 0x000028, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_Actor' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_Movement) == 0x000078, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_Movement' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_Mesh) == 0x0000C8, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_Mesh' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_Action) == 0x000118, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_Action' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_Status) == 0x000168, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_Status' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_LookAt) == 0x0001B8, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_LookAt' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_VisualEffect) == 0x000208, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_VisualEffect' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_Shooter) == 0x000258, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_Shooter' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_FlyMesh) == 0x0002A8, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_FlyMesh' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_Controller) == 0x0002F8, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_Controller' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_AIAction) == 0x000348, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_AIAction' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_AISensor) == 0x000398, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_AISensor' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, CharacterImportance_TickInterval_PathFollowing) == 0x0003E8, "Member 'FPalOptimizeParameter::CharacterImportance_TickInterval_PathFollowing' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, SpawnerImportance_NearDistance) == 0x000438, "Member 'FPalOptimizeParameter::SpawnerImportance_NearDistance' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, SpawnerImportance_FarDistance) == 0x00043C, "Member 'FPalOptimizeParameter::SpawnerImportance_FarDistance' has a wrong offset!");
static_assert(offsetof(FPalOptimizeParameter, SpawnerImportance_TickInterval_NPCSpawner) == 0x000440, "Member 'FPalOptimizeParameter::SpawnerImportance_TickInterval_NPCSpawner' has a wrong offset!");

// ScriptStruct Pal.WeaponNotifyAnimationInfo
// 0x0058 (0x0058 - 0x0000)
struct FWeaponNotifyAnimationInfo final
{
public:
	TMap<EWeaponAnimationPoseType, class UAnimMontage*> PoseMap;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsAutoStop;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2621[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponNotifyAnimationInfo) == 0x000008, "Wrong alignment on FWeaponNotifyAnimationInfo");
static_assert(sizeof(FWeaponNotifyAnimationInfo) == 0x000058, "Wrong size on FWeaponNotifyAnimationInfo");
static_assert(offsetof(FWeaponNotifyAnimationInfo, PoseMap) == 0x000000, "Member 'FWeaponNotifyAnimationInfo::PoseMap' has a wrong offset!");
static_assert(offsetof(FWeaponNotifyAnimationInfo, IsAutoStop) == 0x000050, "Member 'FWeaponNotifyAnimationInfo::IsAutoStop' has a wrong offset!");

// ScriptStruct Pal.PalIndividualCharacterSlotUpdateInfo
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FPalIndividualCharacterSlotUpdateInfo final
{
public:
	uint8                                         Pad_2622[0x68];                                    // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalIndividualCharacterSlotUpdateInfo) == 0x000008, "Wrong alignment on FPalIndividualCharacterSlotUpdateInfo");
static_assert(sizeof(FPalIndividualCharacterSlotUpdateInfo) == 0x000068, "Wrong size on FPalIndividualCharacterSlotUpdateInfo");

// ScriptStruct Pal.PalLoadoutSynchronalizedData
// 0x0058 (0x0058 - 0x0000)
struct FPalLoadoutSynchronalizedData final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalItemId                             ItemId;                                            // 0x0030(0x0028)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLoadoutSynchronalizedData) == 0x000008, "Wrong alignment on FPalLoadoutSynchronalizedData");
static_assert(sizeof(FPalLoadoutSynchronalizedData) == 0x000058, "Wrong size on FPalLoadoutSynchronalizedData");
static_assert(offsetof(FPalLoadoutSynchronalizedData, ActorClass) == 0x000000, "Member 'FPalLoadoutSynchronalizedData::ActorClass' has a wrong offset!");
static_assert(offsetof(FPalLoadoutSynchronalizedData, ItemId) == 0x000030, "Member 'FPalLoadoutSynchronalizedData::ItemId' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_NoteData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_NoteData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_NoteData) == 0x000004, "Wrong alignment on FPalDataTableRowName_NoteData");
static_assert(sizeof(FPalDataTableRowName_NoteData) == 0x000008, "Wrong size on FPalDataTableRowName_NoteData");
static_assert(offsetof(FPalDataTableRowName_NoteData, Key) == 0x000000, "Member 'FPalDataTableRowName_NoteData::Key' has a wrong offset!");

// ScriptStruct Pal.PalLogDataSet
// 0x0050 (0x0050 - 0x0000)
struct FPalLogDataSet final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPalLogAdditionalData                  AdditionalData;                                    // 0x0018(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLogDataSet) == 0x000008, "Wrong alignment on FPalLogDataSet");
static_assert(sizeof(FPalLogDataSet) == 0x000050, "Wrong size on FPalLogDataSet");
static_assert(offsetof(FPalLogDataSet, Text) == 0x000000, "Member 'FPalLogDataSet::Text' has a wrong offset!");
static_assert(offsetof(FPalLogDataSet, AdditionalData) == 0x000018, "Member 'FPalLogDataSet::AdditionalData' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectModuleRepInfo
// 0x000C (0x0018 - 0x000C)
struct FPalMapObjectModuleRepInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_2623[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalMapObjectConcreteModelModuleBase*   Module;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectModuleRepInfo) == 0x000008, "Wrong alignment on FPalMapObjectModuleRepInfo");
static_assert(sizeof(FPalMapObjectModuleRepInfo) == 0x000018, "Wrong size on FPalMapObjectModuleRepInfo");
static_assert(offsetof(FPalMapObjectModuleRepInfo, Module) == 0x000010, "Member 'FPalMapObjectModuleRepInfo::Module' has a wrong offset!");

// ScriptStruct Pal.PalFastMapObjectModuleRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FPalFastMapObjectModuleRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalMapObjectModuleRepInfo>     Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2624[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFastMapObjectModuleRepInfoArray) == 0x000008, "Wrong alignment on FPalFastMapObjectModuleRepInfoArray");
static_assert(sizeof(FPalFastMapObjectModuleRepInfoArray) == 0x000148, "Wrong size on FPalFastMapObjectModuleRepInfoArray");
static_assert(offsetof(FPalFastMapObjectModuleRepInfoArray, Items) == 0x000108, "Member 'FPalFastMapObjectModuleRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampFacilityUsageInfo
// 0x0038 (0x0038 - 0x0000)
struct FPalBaseCampFacilityUsageInfo final
{
public:
	EPalBaseCampFacilityUsageState                State;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2625[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalInstanceID                         ReservedIndividualId;                              // 0x0008(0x0030)(Edit, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampFacilityUsageInfo) == 0x000008, "Wrong alignment on FPalBaseCampFacilityUsageInfo");
static_assert(sizeof(FPalBaseCampFacilityUsageInfo) == 0x000038, "Wrong size on FPalBaseCampFacilityUsageInfo");
static_assert(offsetof(FPalBaseCampFacilityUsageInfo, State) == 0x000000, "Member 'FPalBaseCampFacilityUsageInfo::State' has a wrong offset!");
static_assert(offsetof(FPalBaseCampFacilityUsageInfo, ReservedIndividualId) == 0x000008, "Member 'FPalBaseCampFacilityUsageInfo::ReservedIndividualId' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampFacilityUsageInfoSet
// 0x0050 (0x0050 - 0x0000)
struct FPalBaseCampFacilityUsageInfoSet final
{
public:
	TMap<struct FGuid, struct FPalBaseCampFacilityUsageInfo> InfoMap;                                           // 0x0000(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampFacilityUsageInfoSet) == 0x000008, "Wrong alignment on FPalBaseCampFacilityUsageInfoSet");
static_assert(sizeof(FPalBaseCampFacilityUsageInfoSet) == 0x000050, "Wrong size on FPalBaseCampFacilityUsageInfoSet");
static_assert(offsetof(FPalBaseCampFacilityUsageInfoSet, InfoMap) == 0x000000, "Member 'FPalBaseCampFacilityUsageInfoSet::InfoMap' has a wrong offset!");

// ScriptStruct Pal.PalItemRecipe
// 0x0068 (0x0070 - 0x0008)
struct FPalItemRecipe final : public FTableRowBase
{
public:
	class FName                                   Product_Id;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Product_Count;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorkAmount;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkableAttribute;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UnlockItemID;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material1_Id;                                      // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material1_Count;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material2_Id;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material2_Count;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material3_Id;                                      // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material3_Count;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material4_Id;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material4_Count;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material5_Id;                                      // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Material5_Count;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalEnergyType                                EnergyType;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2626[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnergyAmount;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Editor_RowNameHash;                                // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2627[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalItemRecipe) == 0x000008, "Wrong alignment on FPalItemRecipe");
static_assert(sizeof(FPalItemRecipe) == 0x000070, "Wrong size on FPalItemRecipe");
static_assert(offsetof(FPalItemRecipe, Product_Id) == 0x000008, "Member 'FPalItemRecipe::Product_Id' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Product_Count) == 0x000010, "Member 'FPalItemRecipe::Product_Count' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, WorkAmount) == 0x000014, "Member 'FPalItemRecipe::WorkAmount' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, WorkableAttribute) == 0x000018, "Member 'FPalItemRecipe::WorkableAttribute' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, UnlockItemID) == 0x00001C, "Member 'FPalItemRecipe::UnlockItemID' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material1_Id) == 0x000024, "Member 'FPalItemRecipe::Material1_Id' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material1_Count) == 0x00002C, "Member 'FPalItemRecipe::Material1_Count' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material2_Id) == 0x000030, "Member 'FPalItemRecipe::Material2_Id' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material2_Count) == 0x000038, "Member 'FPalItemRecipe::Material2_Count' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material3_Id) == 0x00003C, "Member 'FPalItemRecipe::Material3_Id' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material3_Count) == 0x000044, "Member 'FPalItemRecipe::Material3_Count' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material4_Id) == 0x000048, "Member 'FPalItemRecipe::Material4_Id' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material4_Count) == 0x000050, "Member 'FPalItemRecipe::Material4_Count' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material5_Id) == 0x000054, "Member 'FPalItemRecipe::Material5_Id' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Material5_Count) == 0x00005C, "Member 'FPalItemRecipe::Material5_Count' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, EnergyType) == 0x000060, "Member 'FPalItemRecipe::EnergyType' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, EnergyAmount) == 0x000064, "Member 'FPalItemRecipe::EnergyAmount' has a wrong offset!");
static_assert(offsetof(FPalItemRecipe, Editor_RowNameHash) == 0x000068, "Member 'FPalItemRecipe::Editor_RowNameHash' has a wrong offset!");

// ScriptStruct Pal.PalNoteMasterDataTextureTableRow
// 0x0030 (0x0038 - 0x0008)
struct FPalNoteMasterDataTextureTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNoteMasterDataTextureTableRow) == 0x000008, "Wrong alignment on FPalNoteMasterDataTextureTableRow");
static_assert(sizeof(FPalNoteMasterDataTextureTableRow) == 0x000038, "Wrong size on FPalNoteMasterDataTextureTableRow");
static_assert(offsetof(FPalNoteMasterDataTextureTableRow, Texture) == 0x000008, "Member 'FPalNoteMasterDataTextureTableRow::Texture' has a wrong offset!");

// ScriptStruct Pal.PalCellCoord
// 0x0018 (0x0018 - 0x0000)
struct FPalCellCoord final
{
public:
	int64                                         X;                                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Y;                                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Z;                                                 // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCellCoord) == 0x000008, "Wrong alignment on FPalCellCoord");
static_assert(sizeof(FPalCellCoord) == 0x000018, "Wrong size on FPalCellCoord");
static_assert(offsetof(FPalCellCoord, X) == 0x000000, "Member 'FPalCellCoord::X' has a wrong offset!");
static_assert(offsetof(FPalCellCoord, Y) == 0x000008, "Member 'FPalCellCoord::Y' has a wrong offset!");
static_assert(offsetof(FPalCellCoord, Z) == 0x000010, "Member 'FPalCellCoord::Z' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignRepInfo
// 0x000C (0x0018 - 0x000C)
struct FPalWorkAssignRepInfo final : public FFastArraySerializerItem
{
public:
	int32                                         LocationIndex;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPalWorkAssign*                         WorkAssign;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkAssignRepInfo) == 0x000008, "Wrong alignment on FPalWorkAssignRepInfo");
static_assert(sizeof(FPalWorkAssignRepInfo) == 0x000018, "Wrong size on FPalWorkAssignRepInfo");
static_assert(offsetof(FPalWorkAssignRepInfo, LocationIndex) == 0x00000C, "Member 'FPalWorkAssignRepInfo::LocationIndex' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignRepInfo, WorkAssign) == 0x000010, "Member 'FPalWorkAssignRepInfo::WorkAssign' has a wrong offset!");

// ScriptStruct Pal.PalEggRankInfo
// 0x000C (0x000C - 0x0000)
struct FPalEggRankInfo final
{
public:
	int32                                         PalRarity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EggScale;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HatchingSpeedDivisionRate;                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEggRankInfo) == 0x000004, "Wrong alignment on FPalEggRankInfo");
static_assert(sizeof(FPalEggRankInfo) == 0x00000C, "Wrong size on FPalEggRankInfo");
static_assert(offsetof(FPalEggRankInfo, PalRarity) == 0x000000, "Member 'FPalEggRankInfo::PalRarity' has a wrong offset!");
static_assert(offsetof(FPalEggRankInfo, EggScale) == 0x000004, "Member 'FPalEggRankInfo::EggScale' has a wrong offset!");
static_assert(offsetof(FPalEggRankInfo, HatchingSpeedDivisionRate) == 0x000008, "Member 'FPalEggRankInfo::HatchingSpeedDivisionRate' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectItemContainerModuleSlotIndexes
// 0x0018 (0x0018 - 0x0000)
struct FPalMapObjectItemContainerModuleSlotIndexes final
{
public:
	EPalMapObjectItemContainerSlotAttribute       Attribute;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2628[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Indexes;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectItemContainerModuleSlotIndexes) == 0x000008, "Wrong alignment on FPalMapObjectItemContainerModuleSlotIndexes");
static_assert(sizeof(FPalMapObjectItemContainerModuleSlotIndexes) == 0x000018, "Wrong size on FPalMapObjectItemContainerModuleSlotIndexes");
static_assert(offsetof(FPalMapObjectItemContainerModuleSlotIndexes, Attribute) == 0x000000, "Member 'FPalMapObjectItemContainerModuleSlotIndexes::Attribute' has a wrong offset!");
static_assert(offsetof(FPalMapObjectItemContainerModuleSlotIndexes, Indexes) == 0x000008, "Member 'FPalMapObjectItemContainerModuleSlotIndexes::Indexes' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectVisualEffectAssets
// 0x0050 (0x0050 - 0x0000)
struct FPalMapObjectVisualEffectAssets final
{
public:
	TMap<EPalMapObjectVisualEffectType, TSoftObjectPtr<class UNiagaraSystem>> AssetMap;                                          // 0x0000(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectVisualEffectAssets) == 0x000008, "Wrong alignment on FPalMapObjectVisualEffectAssets");
static_assert(sizeof(FPalMapObjectVisualEffectAssets) == 0x000050, "Wrong size on FPalMapObjectVisualEffectAssets");
static_assert(offsetof(FPalMapObjectVisualEffectAssets, AssetMap) == 0x000000, "Member 'FPalMapObjectVisualEffectAssets::AssetMap' has a wrong offset!");

// ScriptStruct Pal.PalOptionCommonSettings
// 0x0028 (0x0028 - 0x0000)
struct FPalOptionCommonSettings final
{
public:
	float                                         PalRideCameraLengthRate;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMotionBlur;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraShake;                                // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2629[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         HistoryServerWorldGUID;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262A[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalOptionCommonSettings) == 0x000008, "Wrong alignment on FPalOptionCommonSettings");
static_assert(sizeof(FPalOptionCommonSettings) == 0x000028, "Wrong size on FPalOptionCommonSettings");
static_assert(offsetof(FPalOptionCommonSettings, PalRideCameraLengthRate) == 0x000000, "Member 'FPalOptionCommonSettings::PalRideCameraLengthRate' has a wrong offset!");
static_assert(offsetof(FPalOptionCommonSettings, FOV) == 0x000004, "Member 'FPalOptionCommonSettings::FOV' has a wrong offset!");
static_assert(offsetof(FPalOptionCommonSettings, bEnableMotionBlur) == 0x000008, "Member 'FPalOptionCommonSettings::bEnableMotionBlur' has a wrong offset!");
static_assert(offsetof(FPalOptionCommonSettings, bEnableCameraShake) == 0x000009, "Member 'FPalOptionCommonSettings::bEnableCameraShake' has a wrong offset!");
static_assert(offsetof(FPalOptionCommonSettings, HistoryServerWorldGUID) == 0x000010, "Member 'FPalOptionCommonSettings::HistoryServerWorldGUID' has a wrong offset!");
static_assert(offsetof(FPalOptionCommonSettings, Brightness) == 0x000020, "Member 'FPalOptionCommonSettings::Brightness' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectStaticData
// 0x0048 (0x0048 - 0x0000)
struct FPalMapObjectStaticData final
{
public:
	class FName                                   DummyFoliageMapObjectId;                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropItemMapObjectId;                               // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropItem3DMapObjectId;                             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObjectId_PalStorage;                          // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapObjectId_ItemChest;                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapObjectId_DeathPenalty;                          // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapObjectId_DroppedCharacter;                      // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapObjectId_TreasureBox_VisibleContent;            // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapObjectId_SkillFruit_VisibleContent;             // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectStaticData) == 0x000004, "Wrong alignment on FPalMapObjectStaticData");
static_assert(sizeof(FPalMapObjectStaticData) == 0x000048, "Wrong size on FPalMapObjectStaticData");
static_assert(offsetof(FPalMapObjectStaticData, DummyFoliageMapObjectId) == 0x000000, "Member 'FPalMapObjectStaticData::DummyFoliageMapObjectId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, DropItemMapObjectId) == 0x000008, "Member 'FPalMapObjectStaticData::DropItemMapObjectId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, DropItem3DMapObjectId) == 0x000010, "Member 'FPalMapObjectStaticData::DropItem3DMapObjectId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, BuildObjectId_PalStorage) == 0x000018, "Member 'FPalMapObjectStaticData::BuildObjectId_PalStorage' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, MapObjectId_ItemChest) == 0x000020, "Member 'FPalMapObjectStaticData::MapObjectId_ItemChest' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, MapObjectId_DeathPenalty) == 0x000028, "Member 'FPalMapObjectStaticData::MapObjectId_DeathPenalty' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, MapObjectId_DroppedCharacter) == 0x000030, "Member 'FPalMapObjectStaticData::MapObjectId_DroppedCharacter' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, MapObjectId_TreasureBox_VisibleContent) == 0x000038, "Member 'FPalMapObjectStaticData::MapObjectId_TreasureBox_VisibleContent' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStaticData, MapObjectId_SkillFruit_VisibleContent) == 0x000040, "Member 'FPalMapObjectStaticData::MapObjectId_SkillFruit_VisibleContent' has a wrong offset!");

// ScriptStruct Pal.PalLoggedinPlayerSaveDataRecordData
// 0x02B0 (0x02B0 - 0x0000)
struct FPalLoggedinPlayerSaveDataRecordData final
{
public:
	TMap<class FName, bool>                       TowerBossDefeatFlag;                               // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       NormalBossDefeatFlag;                              // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	int32                                         BossDefeatCount;                                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TribeCaptureCount;                                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      PalCaptureCount;                                   // 0x00A8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       PaldeckUnlockFlag;                                 // 0x00F8(0x0050)(NativeAccessSpecifierPublic)
	int32                                         PalCaptureCountBonusCount_Tier1;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalCaptureCountBonusCount_Tier2;                   // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalCaptureCountBonusCount_Tier3;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262B[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       RelicObtainForInstanceFlag;                        // 0x0158(0x0050)(NativeAccessSpecifierPublic)
	int32                                         RelicPossessNum;                                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262C[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       NoteObtainForInstanceFlag;                         // 0x01B0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      NPCTalkIdCount;                                    // 0x0200(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       FastTravelPointUnlockFlag;                         // 0x0250(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          BuildingObjectMapObjectInstanceIds;                // 0x02A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLoggedinPlayerSaveDataRecordData) == 0x000008, "Wrong alignment on FPalLoggedinPlayerSaveDataRecordData");
static_assert(sizeof(FPalLoggedinPlayerSaveDataRecordData) == 0x0002B0, "Wrong size on FPalLoggedinPlayerSaveDataRecordData");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, TowerBossDefeatFlag) == 0x000000, "Member 'FPalLoggedinPlayerSaveDataRecordData::TowerBossDefeatFlag' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, NormalBossDefeatFlag) == 0x000050, "Member 'FPalLoggedinPlayerSaveDataRecordData::NormalBossDefeatFlag' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, BossDefeatCount) == 0x0000A0, "Member 'FPalLoggedinPlayerSaveDataRecordData::BossDefeatCount' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, TribeCaptureCount) == 0x0000A4, "Member 'FPalLoggedinPlayerSaveDataRecordData::TribeCaptureCount' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, PalCaptureCount) == 0x0000A8, "Member 'FPalLoggedinPlayerSaveDataRecordData::PalCaptureCount' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, PaldeckUnlockFlag) == 0x0000F8, "Member 'FPalLoggedinPlayerSaveDataRecordData::PaldeckUnlockFlag' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, PalCaptureCountBonusCount_Tier1) == 0x000148, "Member 'FPalLoggedinPlayerSaveDataRecordData::PalCaptureCountBonusCount_Tier1' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, PalCaptureCountBonusCount_Tier2) == 0x00014C, "Member 'FPalLoggedinPlayerSaveDataRecordData::PalCaptureCountBonusCount_Tier2' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, PalCaptureCountBonusCount_Tier3) == 0x000150, "Member 'FPalLoggedinPlayerSaveDataRecordData::PalCaptureCountBonusCount_Tier3' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, RelicObtainForInstanceFlag) == 0x000158, "Member 'FPalLoggedinPlayerSaveDataRecordData::RelicObtainForInstanceFlag' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, RelicPossessNum) == 0x0001A8, "Member 'FPalLoggedinPlayerSaveDataRecordData::RelicPossessNum' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, NoteObtainForInstanceFlag) == 0x0001B0, "Member 'FPalLoggedinPlayerSaveDataRecordData::NoteObtainForInstanceFlag' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, NPCTalkIdCount) == 0x000200, "Member 'FPalLoggedinPlayerSaveDataRecordData::NPCTalkIdCount' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, FastTravelPointUnlockFlag) == 0x000250, "Member 'FPalLoggedinPlayerSaveDataRecordData::FastTravelPointUnlockFlag' has a wrong offset!");
static_assert(offsetof(FPalLoggedinPlayerSaveDataRecordData, BuildingObjectMapObjectInstanceIds) == 0x0002A0, "Member 'FPalLoggedinPlayerSaveDataRecordData::BuildingObjectMapObjectInstanceIds' has a wrong offset!");

// ScriptStruct Pal.PalPlayerDataInventoryInfo
// 0x0060 (0x0060 - 0x0000)
struct FPalPlayerDataInventoryInfo final
{
public:
	struct FPalContainerId                        CommonContainerId;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalContainerId                        DropSlotContainerId;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalContainerId                        EssentialContainerId;                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalContainerId                        WeaponLoadOutContainerId;                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalContainerId                        PlayerEquipArmorContainerId;                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalContainerId                        FoodEquipContainerId;                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerDataInventoryInfo) == 0x000004, "Wrong alignment on FPalPlayerDataInventoryInfo");
static_assert(sizeof(FPalPlayerDataInventoryInfo) == 0x000060, "Wrong size on FPalPlayerDataInventoryInfo");
static_assert(offsetof(FPalPlayerDataInventoryInfo, CommonContainerId) == 0x000000, "Member 'FPalPlayerDataInventoryInfo::CommonContainerId' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataInventoryInfo, DropSlotContainerId) == 0x000010, "Member 'FPalPlayerDataInventoryInfo::DropSlotContainerId' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataInventoryInfo, EssentialContainerId) == 0x000020, "Member 'FPalPlayerDataInventoryInfo::EssentialContainerId' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataInventoryInfo, WeaponLoadOutContainerId) == 0x000030, "Member 'FPalPlayerDataInventoryInfo::WeaponLoadOutContainerId' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataInventoryInfo, PlayerEquipArmorContainerId) == 0x000040, "Member 'FPalPlayerDataInventoryInfo::PlayerEquipArmorContainerId' has a wrong offset!");
static_assert(offsetof(FPalPlayerDataInventoryInfo, FoodEquipContainerId) == 0x000050, "Member 'FPalPlayerDataInventoryInfo::FoodEquipContainerId' has a wrong offset!");

// ScriptStruct Pal.PalWorldPlayerSaveData
// 0x04B0 (0x04B0 - 0x0000)
struct FPalWorldPlayerSaveData final
{
public:
	struct FGuid                                  PlayerUId;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalInstanceID                         IndividualId;                                      // 0x0010(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  RespawnPointMapObjectInstanceId;                   // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LastTransform;                                     // 0x0050(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalPlayerDataCharacterMakeInfo        PlayerCharacterMakeData;                           // 0x00C0(0x0094)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPalContainerId                        OtomoCharacterContainerId;                         // 0x0154(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalOtomoPalOrderType                         OtomoOrder;                                        // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262D[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalPlayerDataInventoryInfo            InventoryInfo;                                     // 0x0168(0x0060)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TechnologyPoint;                                   // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bossTechnologyPoint;                               // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnlockedRecipeTechnologyNames;                     // 0x01D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPalContainerId                        PalStorageContainerId;                             // 0x01E0(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalLoggedinPlayerSaveDataRecordData   RecordData;                                        // 0x01F0(0x02B0)(NativeAccessSpecifierPublic)
	bool                                          bIsSelectedInitMapPoint;                           // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262E[0xF];                                     // 0x04A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorldPlayerSaveData) == 0x000010, "Wrong alignment on FPalWorldPlayerSaveData");
static_assert(sizeof(FPalWorldPlayerSaveData) == 0x0004B0, "Wrong size on FPalWorldPlayerSaveData");
static_assert(offsetof(FPalWorldPlayerSaveData, PlayerUId) == 0x000000, "Member 'FPalWorldPlayerSaveData::PlayerUId' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, IndividualId) == 0x000010, "Member 'FPalWorldPlayerSaveData::IndividualId' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, RespawnPointMapObjectInstanceId) == 0x000040, "Member 'FPalWorldPlayerSaveData::RespawnPointMapObjectInstanceId' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, LastTransform) == 0x000050, "Member 'FPalWorldPlayerSaveData::LastTransform' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, PlayerName) == 0x0000B0, "Member 'FPalWorldPlayerSaveData::PlayerName' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, PlayerCharacterMakeData) == 0x0000C0, "Member 'FPalWorldPlayerSaveData::PlayerCharacterMakeData' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, OtomoCharacterContainerId) == 0x000154, "Member 'FPalWorldPlayerSaveData::OtomoCharacterContainerId' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, OtomoOrder) == 0x000164, "Member 'FPalWorldPlayerSaveData::OtomoOrder' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, InventoryInfo) == 0x000168, "Member 'FPalWorldPlayerSaveData::InventoryInfo' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, TechnologyPoint) == 0x0001C8, "Member 'FPalWorldPlayerSaveData::TechnologyPoint' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, bossTechnologyPoint) == 0x0001CC, "Member 'FPalWorldPlayerSaveData::bossTechnologyPoint' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, UnlockedRecipeTechnologyNames) == 0x0001D0, "Member 'FPalWorldPlayerSaveData::UnlockedRecipeTechnologyNames' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, PalStorageContainerId) == 0x0001E0, "Member 'FPalWorldPlayerSaveData::PalStorageContainerId' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, RecordData) == 0x0001F0, "Member 'FPalWorldPlayerSaveData::RecordData' has a wrong offset!");
static_assert(offsetof(FPalWorldPlayerSaveData, bIsSelectedInitMapPoint) == 0x0004A0, "Member 'FPalWorldPlayerSaveData::bIsSelectedInitMapPoint' has a wrong offset!");

// ScriptStruct Pal.PalOptionGraphicsSettings
// 0x0054 (0x0054 - 0x0000)
struct FPalOptionGraphicsSettings final
{
public:
	EPalOptionGraphicsLevel                       GraphicsLevel;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowMode                                   WindowMode;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ScreenResolution;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVSync;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMotionBlur;                                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAntiAliasingMethod                           AntiAliasingType;                                  // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraShake;                                // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraRecoil;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2630[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalRideCameraLengthRate;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODBias;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawDistance;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrassDrawDistance;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableShadow;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2631[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowResolution;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommonQuality;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistanceQuality;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoliageQuality;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutoContrast;                               // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2632[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextureQuality;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUDLSSMode                                    DLSSMode;                                          // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2633[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxFPS;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionGraphicsSettings) == 0x000004, "Wrong alignment on FPalOptionGraphicsSettings");
static_assert(sizeof(FPalOptionGraphicsSettings) == 0x000054, "Wrong size on FPalOptionGraphicsSettings");
static_assert(offsetof(FPalOptionGraphicsSettings, GraphicsLevel) == 0x000000, "Member 'FPalOptionGraphicsSettings::GraphicsLevel' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, WindowMode) == 0x000001, "Member 'FPalOptionGraphicsSettings::WindowMode' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, ScreenResolution) == 0x000004, "Member 'FPalOptionGraphicsSettings::ScreenResolution' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, bEnableVSync) == 0x00000C, "Member 'FPalOptionGraphicsSettings::bEnableVSync' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, bEnableMotionBlur) == 0x00000D, "Member 'FPalOptionGraphicsSettings::bEnableMotionBlur' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, AntiAliasingType) == 0x00000E, "Member 'FPalOptionGraphicsSettings::AntiAliasingType' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, bEnableCameraShake) == 0x00000F, "Member 'FPalOptionGraphicsSettings::bEnableCameraShake' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, bEnableCameraRecoil) == 0x000010, "Member 'FPalOptionGraphicsSettings::bEnableCameraRecoil' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, FOV) == 0x000014, "Member 'FPalOptionGraphicsSettings::FOV' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, PalRideCameraLengthRate) == 0x000018, "Member 'FPalOptionGraphicsSettings::PalRideCameraLengthRate' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, LODBias) == 0x00001C, "Member 'FPalOptionGraphicsSettings::LODBias' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, DrawDistance) == 0x000020, "Member 'FPalOptionGraphicsSettings::DrawDistance' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, GrassDrawDistance) == 0x000024, "Member 'FPalOptionGraphicsSettings::GrassDrawDistance' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, bEnableShadow) == 0x000028, "Member 'FPalOptionGraphicsSettings::bEnableShadow' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, ShadowResolution) == 0x00002C, "Member 'FPalOptionGraphicsSettings::ShadowResolution' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, CommonQuality) == 0x000030, "Member 'FPalOptionGraphicsSettings::CommonQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, ViewDistanceQuality) == 0x000034, "Member 'FPalOptionGraphicsSettings::ViewDistanceQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, FoliageQuality) == 0x000038, "Member 'FPalOptionGraphicsSettings::FoliageQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, ShadowQuality) == 0x00003C, "Member 'FPalOptionGraphicsSettings::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, Brightness) == 0x000040, "Member 'FPalOptionGraphicsSettings::Brightness' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, bEnableAutoContrast) == 0x000044, "Member 'FPalOptionGraphicsSettings::bEnableAutoContrast' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, TextureQuality) == 0x000048, "Member 'FPalOptionGraphicsSettings::TextureQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, DLSSMode) == 0x00004C, "Member 'FPalOptionGraphicsSettings::DLSSMode' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsSettings, MaxFPS) == 0x000050, "Member 'FPalOptionGraphicsSettings::MaxFPS' has a wrong offset!");

// ScriptStruct Pal.PalItemPalEggDataHandle
// 0x0010 (0x0010 - 0x0000)
struct FPalItemPalEggDataHandle final
{
public:
	TArray<struct FPalDataTableRowName_ItemData>  ItemRowNameArray;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemPalEggDataHandle) == 0x000008, "Wrong alignment on FPalItemPalEggDataHandle");
static_assert(sizeof(FPalItemPalEggDataHandle) == 0x000010, "Wrong size on FPalItemPalEggDataHandle");
static_assert(offsetof(FPalItemPalEggDataHandle, ItemRowNameArray) == 0x000000, "Member 'FPalItemPalEggDataHandle::ItemRowNameArray' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectPasswordLockPlayerInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalMapObjectPasswordLockPlayerInfo final
{
public:
	struct FGuid                                  PlayerUId;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TryFailedCount;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrySuccessCache;                                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2634[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectPasswordLockPlayerInfo) == 0x000004, "Wrong alignment on FPalMapObjectPasswordLockPlayerInfo");
static_assert(sizeof(FPalMapObjectPasswordLockPlayerInfo) == 0x000018, "Wrong size on FPalMapObjectPasswordLockPlayerInfo");
static_assert(offsetof(FPalMapObjectPasswordLockPlayerInfo, PlayerUId) == 0x000000, "Member 'FPalMapObjectPasswordLockPlayerInfo::PlayerUId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectPasswordLockPlayerInfo, TryFailedCount) == 0x000010, "Member 'FPalMapObjectPasswordLockPlayerInfo::TryFailedCount' has a wrong offset!");
static_assert(offsetof(FPalMapObjectPasswordLockPlayerInfo, TrySuccessCache) == 0x000014, "Member 'FPalMapObjectPasswordLockPlayerInfo::TrySuccessCache' has a wrong offset!");

// ScriptStruct Pal.PalNetworkDynamicItemParameter
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FPalNetworkDynamicItemParameter final
{
public:
	uint8                                         Pad_2635[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkDynamicItemParameter) == 0x000008, "Wrong alignment on FPalNetworkDynamicItemParameter");
static_assert(sizeof(FPalNetworkDynamicItemParameter) == 0x000030, "Wrong size on FPalNetworkDynamicItemParameter");

// ScriptStruct Pal.PalSyncTeleportRequestParameter
// 0x0060 (0x0060 - 0x0000)
struct FPalSyncTeleportRequestParameter final
{
public:
	class FString                                 SyncTeleportStartSE;                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2636[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0030(0x0020)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFadeOutSkip;                                    // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2637[0xF];                                     // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalSyncTeleportRequestParameter) == 0x000010, "Wrong alignment on FPalSyncTeleportRequestParameter");
static_assert(sizeof(FPalSyncTeleportRequestParameter) == 0x000060, "Wrong size on FPalSyncTeleportRequestParameter");
static_assert(offsetof(FPalSyncTeleportRequestParameter, SyncTeleportStartSE) == 0x000000, "Member 'FPalSyncTeleportRequestParameter::SyncTeleportStartSE' has a wrong offset!");
static_assert(offsetof(FPalSyncTeleportRequestParameter, Location) == 0x000010, "Member 'FPalSyncTeleportRequestParameter::Location' has a wrong offset!");
static_assert(offsetof(FPalSyncTeleportRequestParameter, Rotation) == 0x000030, "Member 'FPalSyncTeleportRequestParameter::Rotation' has a wrong offset!");
static_assert(offsetof(FPalSyncTeleportRequestParameter, bIsFadeOutSkip) == 0x000050, "Member 'FPalSyncTeleportRequestParameter::bIsFadeOutSkip' has a wrong offset!");

// ScriptStruct Pal.PalNPCSpawnInfo
// 0x0040 (0x0040 - 0x0000)
struct FPalNPCSpawnInfo final
{
public:
	TSubclassOf<class APalAIController>           ControllerClass;                                   // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterID;                                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2638[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2639[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalSquad*                              Squad;                                             // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCSpawnInfo) == 0x000008, "Wrong alignment on FPalNPCSpawnInfo");
static_assert(sizeof(FPalNPCSpawnInfo) == 0x000040, "Wrong size on FPalNPCSpawnInfo");
static_assert(offsetof(FPalNPCSpawnInfo, ControllerClass) == 0x000000, "Member 'FPalNPCSpawnInfo::ControllerClass' has a wrong offset!");
static_assert(offsetof(FPalNPCSpawnInfo, CharacterID) == 0x000008, "Member 'FPalNPCSpawnInfo::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalNPCSpawnInfo, Level) == 0x000010, "Member 'FPalNPCSpawnInfo::Level' has a wrong offset!");
static_assert(offsetof(FPalNPCSpawnInfo, Location) == 0x000018, "Member 'FPalNPCSpawnInfo::Location' has a wrong offset!");
static_assert(offsetof(FPalNPCSpawnInfo, Yaw) == 0x000030, "Member 'FPalNPCSpawnInfo::Yaw' has a wrong offset!");
static_assert(offsetof(FPalNPCSpawnInfo, Squad) == 0x000038, "Member 'FPalNPCSpawnInfo::Squad' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampTaskData_BuildObject
// 0x001C (0x001C - 0x0000)
struct FPalBaseCampTaskData_BuildObject final
{
public:
	class FName                                   IncompleteMsgID;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompleteMsgID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_MapObjectData     MapObjectRowName;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireNum;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampTaskData_BuildObject) == 0x000004, "Wrong alignment on FPalBaseCampTaskData_BuildObject");
static_assert(sizeof(FPalBaseCampTaskData_BuildObject) == 0x00001C, "Wrong size on FPalBaseCampTaskData_BuildObject");
static_assert(offsetof(FPalBaseCampTaskData_BuildObject, IncompleteMsgID) == 0x000000, "Member 'FPalBaseCampTaskData_BuildObject::IncompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskData_BuildObject, CompleteMsgID) == 0x000008, "Member 'FPalBaseCampTaskData_BuildObject::CompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskData_BuildObject, MapObjectRowName) == 0x000010, "Member 'FPalBaseCampTaskData_BuildObject::MapObjectRowName' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskData_BuildObject, RequireNum) == 0x000018, "Member 'FPalBaseCampTaskData_BuildObject::RequireNum' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampTaskData_WorkerNum
// 0x0014 (0x0014 - 0x0000)
struct FPalBaseCampTaskData_WorkerNum final
{
public:
	class FName                                   IncompleteMsgID;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompleteMsgID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireNum;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampTaskData_WorkerNum) == 0x000004, "Wrong alignment on FPalBaseCampTaskData_WorkerNum");
static_assert(sizeof(FPalBaseCampTaskData_WorkerNum) == 0x000014, "Wrong size on FPalBaseCampTaskData_WorkerNum");
static_assert(offsetof(FPalBaseCampTaskData_WorkerNum, IncompleteMsgID) == 0x000000, "Member 'FPalBaseCampTaskData_WorkerNum::IncompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskData_WorkerNum, CompleteMsgID) == 0x000008, "Member 'FPalBaseCampTaskData_WorkerNum::CompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskData_WorkerNum, RequireNum) == 0x000010, "Member 'FPalBaseCampTaskData_WorkerNum::RequireNum' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampTaskDataSet
// 0x0028 (0x0028 - 0x0000)
struct FPalBaseCampTaskDataSet final
{
public:
	TArray<struct FPalBaseCampTaskData_BuildObject> RequireBuildObjects;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPalBaseCampTaskData_WorkerNum         RequirePalNum;                                     // 0x0010(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_263A[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampTaskDataSet) == 0x000008, "Wrong alignment on FPalBaseCampTaskDataSet");
static_assert(sizeof(FPalBaseCampTaskDataSet) == 0x000028, "Wrong size on FPalBaseCampTaskDataSet");
static_assert(offsetof(FPalBaseCampTaskDataSet, RequireBuildObjects) == 0x000000, "Member 'FPalBaseCampTaskDataSet::RequireBuildObjects' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet, RequirePalNum) == 0x000010, "Member 'FPalBaseCampTaskDataSet::RequirePalNum' has a wrong offset!");

// ScriptStruct Pal.PalOptionAudioSettings
// 0x001C (0x001C - 0x0000)
struct FPalOptionAudioSettings final
{
public:
	float                                         Master;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BGM;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SE;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PalVoice;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HumanVoice;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ambient;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UI;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionAudioSettings) == 0x000004, "Wrong alignment on FPalOptionAudioSettings");
static_assert(sizeof(FPalOptionAudioSettings) == 0x00001C, "Wrong size on FPalOptionAudioSettings");
static_assert(offsetof(FPalOptionAudioSettings, Master) == 0x000000, "Member 'FPalOptionAudioSettings::Master' has a wrong offset!");
static_assert(offsetof(FPalOptionAudioSettings, BGM) == 0x000004, "Member 'FPalOptionAudioSettings::BGM' has a wrong offset!");
static_assert(offsetof(FPalOptionAudioSettings, SE) == 0x000008, "Member 'FPalOptionAudioSettings::SE' has a wrong offset!");
static_assert(offsetof(FPalOptionAudioSettings, PalVoice) == 0x00000C, "Member 'FPalOptionAudioSettings::PalVoice' has a wrong offset!");
static_assert(offsetof(FPalOptionAudioSettings, HumanVoice) == 0x000010, "Member 'FPalOptionAudioSettings::HumanVoice' has a wrong offset!");
static_assert(offsetof(FPalOptionAudioSettings, Ambient) == 0x000014, "Member 'FPalOptionAudioSettings::Ambient' has a wrong offset!");
static_assert(offsetof(FPalOptionAudioSettings, UI) == 0x000018, "Member 'FPalOptionAudioSettings::UI' has a wrong offset!");

// ScriptStruct Pal.PalAxisKeyConfigKeys
// 0x0010 (0x0040 - 0x0030)
struct FPalAxisKeyConfigKeys final : public FPalKeyConfigKeys
{
public:
	class FName                                   AxisName;                                          // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalKeyConfigAxisFilterType                   FilterType;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263B[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalAxisKeyConfigKeys) == 0x000008, "Wrong alignment on FPalAxisKeyConfigKeys");
static_assert(sizeof(FPalAxisKeyConfigKeys) == 0x000040, "Wrong size on FPalAxisKeyConfigKeys");
static_assert(offsetof(FPalAxisKeyConfigKeys, AxisName) == 0x000030, "Member 'FPalAxisKeyConfigKeys::AxisName' has a wrong offset!");
static_assert(offsetof(FPalAxisKeyConfigKeys, FilterType) == 0x000038, "Member 'FPalAxisKeyConfigKeys::FilterType' has a wrong offset!");

// ScriptStruct Pal.PalKeyConfigSettings
// 0x0160 (0x0160 - 0x0000)
struct FPalKeyConfigSettings final
{
public:
	TMap<class FName, struct FPalKeyConfigKeys>   MouseAndKeyboardActionMappings;                    // 0x0000(0x0050)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	TArray<struct FPalAxisKeyConfigKeys>          MouseAndKeyboardAxisMappings;                      // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPalKeyConfigKeys>   GamePadActionMappings;                             // 0x0060(0x0050)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	TArray<struct FPalAxisKeyConfigKeys>          GamePadAxisMappings;                               // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FName, struct FKey>                MouseAndKeyboardUIInputMappings;                   // 0x00C0(0x0050)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	TMap<class FName, struct FKey>                GamePadUIInputMappings;                            // 0x0110(0x0050)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalKeyConfigSettings) == 0x000008, "Wrong alignment on FPalKeyConfigSettings");
static_assert(sizeof(FPalKeyConfigSettings) == 0x000160, "Wrong size on FPalKeyConfigSettings");
static_assert(offsetof(FPalKeyConfigSettings, MouseAndKeyboardActionMappings) == 0x000000, "Member 'FPalKeyConfigSettings::MouseAndKeyboardActionMappings' has a wrong offset!");
static_assert(offsetof(FPalKeyConfigSettings, MouseAndKeyboardAxisMappings) == 0x000050, "Member 'FPalKeyConfigSettings::MouseAndKeyboardAxisMappings' has a wrong offset!");
static_assert(offsetof(FPalKeyConfigSettings, GamePadActionMappings) == 0x000060, "Member 'FPalKeyConfigSettings::GamePadActionMappings' has a wrong offset!");
static_assert(offsetof(FPalKeyConfigSettings, GamePadAxisMappings) == 0x0000B0, "Member 'FPalKeyConfigSettings::GamePadAxisMappings' has a wrong offset!");
static_assert(offsetof(FPalKeyConfigSettings, MouseAndKeyboardUIInputMappings) == 0x0000C0, "Member 'FPalKeyConfigSettings::MouseAndKeyboardUIInputMappings' has a wrong offset!");
static_assert(offsetof(FPalKeyConfigSettings, GamePadUIInputMappings) == 0x000110, "Member 'FPalKeyConfigSettings::GamePadUIInputMappings' has a wrong offset!");

// ScriptStruct Pal.PalFoliageIdentifiableInfo
// 0x0030 (0x0030 - 0x0000)
struct FPalFoliageIdentifiableInfo final
{
public:
	struct FPalCellCoord                          CellCoord;                                         // 0x0000(0x0018)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModelId;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalFoliageInstanceId                  InstanceId;                                        // 0x0020(0x0010)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageIdentifiableInfo) == 0x000008, "Wrong alignment on FPalFoliageIdentifiableInfo");
static_assert(sizeof(FPalFoliageIdentifiableInfo) == 0x000030, "Wrong size on FPalFoliageIdentifiableInfo");
static_assert(offsetof(FPalFoliageIdentifiableInfo, CellCoord) == 0x000000, "Member 'FPalFoliageIdentifiableInfo::CellCoord' has a wrong offset!");
static_assert(offsetof(FPalFoliageIdentifiableInfo, ModelId) == 0x000018, "Member 'FPalFoliageIdentifiableInfo::ModelId' has a wrong offset!");
static_assert(offsetof(FPalFoliageIdentifiableInfo, InstanceId) == 0x000020, "Member 'FPalFoliageIdentifiableInfo::InstanceId' has a wrong offset!");

// ScriptStruct Pal.PalRandomIncidentWalkPathReferenceData
// 0x0010 (0x0010 - 0x0000)
struct FPalRandomIncidentWalkPathReferenceData final
{
public:
	TArray<class AActor*>                         WalkPoints;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomIncidentWalkPathReferenceData) == 0x000008, "Wrong alignment on FPalRandomIncidentWalkPathReferenceData");
static_assert(sizeof(FPalRandomIncidentWalkPathReferenceData) == 0x000010, "Wrong size on FPalRandomIncidentWalkPathReferenceData");
static_assert(offsetof(FPalRandomIncidentWalkPathReferenceData, WalkPoints) == 0x000000, "Member 'FPalRandomIncidentWalkPathReferenceData::WalkPoints' has a wrong offset!");

// ScriptStruct Pal.PalRandomIncidentSettings
// 0x0020 (0x0028 - 0x0008)
struct FPalRandomIncidentSettings final : public FTableRowBase
{
public:
	class UDataTable*                             MonsterSpawnData;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             NPCSpawnData;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExcludeOtherPal;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263C[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UPalRandomIncidentActionBase> Action;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomIncidentSettings) == 0x000008, "Wrong alignment on FPalRandomIncidentSettings");
static_assert(sizeof(FPalRandomIncidentSettings) == 0x000028, "Wrong size on FPalRandomIncidentSettings");
static_assert(offsetof(FPalRandomIncidentSettings, MonsterSpawnData) == 0x000008, "Member 'FPalRandomIncidentSettings::MonsterSpawnData' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSettings, NPCSpawnData) == 0x000010, "Member 'FPalRandomIncidentSettings::NPCSpawnData' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSettings, ExcludeOtherPal) == 0x000018, "Member 'FPalRandomIncidentSettings::ExcludeOtherPal' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSettings, Action) == 0x000020, "Member 'FPalRandomIncidentSettings::Action' has a wrong offset!");

// ScriptStruct Pal.PalOptionValueInt
// 0x0008 (0x0008 - 0x0000)
struct FPalOptionValueInt final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionValueInt) == 0x000004, "Wrong alignment on FPalOptionValueInt");
static_assert(sizeof(FPalOptionValueInt) == 0x000008, "Wrong size on FPalOptionValueInt");
static_assert(offsetof(FPalOptionValueInt, Min) == 0x000000, "Member 'FPalOptionValueInt::Min' has a wrong offset!");
static_assert(offsetof(FPalOptionValueInt, Max) == 0x000004, "Member 'FPalOptionValueInt::Max' has a wrong offset!");

// ScriptStruct Pal.PalOptionWorldStaticSettings
// 0x00F0 (0x00F0 - 0x0000)
struct FPalOptionWorldStaticSettings final
{
public:
	struct FPalOptionValueFloat                   DayTimeSpeedRate;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   NightTimeSpeedRate;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   ExpRate;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalCaptureRate;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalSpawnNumRate;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalDamageRateAttack;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalDamageRateDefense;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PlayerDamageRateAttack;                            // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PlayerDamageRateDefense;                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PlayerStomachDecreaceRate;                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PlayerStaminaDecreaceRate;                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PlayerAutoHPRegeneRate;                            // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PlayerAutoHpRegeneRateInSleep;                     // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalStomachDecreaceRate;                            // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalStaminaDecreaceRate;                            // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalAutoHPRegeneRate;                               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   PalAutoHpRegeneRateInSleep;                        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   BuildObjectDamageRate;                             // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   BuildObjectDeteriorationDamageRate;                // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   CollectionDropRate;                                // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   CollectionObjectHpRate;                            // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   CollectionObjectRespawnSpeedRate;                  // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   EnemyDropItemRate;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueInt                     DropItemMaxNum;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueInt                     DropItemMaxNum_UNKO;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueFloat                   WorkSpeedRate;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueInt                     AutoResetGuildTimeNoOnlinePlayers;                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueInt                     GuildPlayerMaxNum;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueInt                     PalEggDefaultHatchingTime;                         // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionValueInt                     BaseCampWorkerMaxNum;                              // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionWorldStaticSettings) == 0x000004, "Wrong alignment on FPalOptionWorldStaticSettings");
static_assert(sizeof(FPalOptionWorldStaticSettings) == 0x0000F0, "Wrong size on FPalOptionWorldStaticSettings");
static_assert(offsetof(FPalOptionWorldStaticSettings, DayTimeSpeedRate) == 0x000000, "Member 'FPalOptionWorldStaticSettings::DayTimeSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, NightTimeSpeedRate) == 0x000008, "Member 'FPalOptionWorldStaticSettings::NightTimeSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, ExpRate) == 0x000010, "Member 'FPalOptionWorldStaticSettings::ExpRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalCaptureRate) == 0x000018, "Member 'FPalOptionWorldStaticSettings::PalCaptureRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalSpawnNumRate) == 0x000020, "Member 'FPalOptionWorldStaticSettings::PalSpawnNumRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalDamageRateAttack) == 0x000028, "Member 'FPalOptionWorldStaticSettings::PalDamageRateAttack' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalDamageRateDefense) == 0x000030, "Member 'FPalOptionWorldStaticSettings::PalDamageRateDefense' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PlayerDamageRateAttack) == 0x000038, "Member 'FPalOptionWorldStaticSettings::PlayerDamageRateAttack' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PlayerDamageRateDefense) == 0x000040, "Member 'FPalOptionWorldStaticSettings::PlayerDamageRateDefense' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PlayerStomachDecreaceRate) == 0x000048, "Member 'FPalOptionWorldStaticSettings::PlayerStomachDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PlayerStaminaDecreaceRate) == 0x000050, "Member 'FPalOptionWorldStaticSettings::PlayerStaminaDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PlayerAutoHPRegeneRate) == 0x000058, "Member 'FPalOptionWorldStaticSettings::PlayerAutoHPRegeneRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PlayerAutoHpRegeneRateInSleep) == 0x000060, "Member 'FPalOptionWorldStaticSettings::PlayerAutoHpRegeneRateInSleep' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalStomachDecreaceRate) == 0x000068, "Member 'FPalOptionWorldStaticSettings::PalStomachDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalStaminaDecreaceRate) == 0x000070, "Member 'FPalOptionWorldStaticSettings::PalStaminaDecreaceRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalAutoHPRegeneRate) == 0x000078, "Member 'FPalOptionWorldStaticSettings::PalAutoHPRegeneRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalAutoHpRegeneRateInSleep) == 0x000080, "Member 'FPalOptionWorldStaticSettings::PalAutoHpRegeneRateInSleep' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, BuildObjectDamageRate) == 0x000088, "Member 'FPalOptionWorldStaticSettings::BuildObjectDamageRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, BuildObjectDeteriorationDamageRate) == 0x000090, "Member 'FPalOptionWorldStaticSettings::BuildObjectDeteriorationDamageRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, CollectionDropRate) == 0x000098, "Member 'FPalOptionWorldStaticSettings::CollectionDropRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, CollectionObjectHpRate) == 0x0000A0, "Member 'FPalOptionWorldStaticSettings::CollectionObjectHpRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, CollectionObjectRespawnSpeedRate) == 0x0000A8, "Member 'FPalOptionWorldStaticSettings::CollectionObjectRespawnSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, EnemyDropItemRate) == 0x0000B0, "Member 'FPalOptionWorldStaticSettings::EnemyDropItemRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, DropItemMaxNum) == 0x0000B8, "Member 'FPalOptionWorldStaticSettings::DropItemMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, DropItemMaxNum_UNKO) == 0x0000C0, "Member 'FPalOptionWorldStaticSettings::DropItemMaxNum_UNKO' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, WorkSpeedRate) == 0x0000C8, "Member 'FPalOptionWorldStaticSettings::WorkSpeedRate' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, AutoResetGuildTimeNoOnlinePlayers) == 0x0000D0, "Member 'FPalOptionWorldStaticSettings::AutoResetGuildTimeNoOnlinePlayers' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, GuildPlayerMaxNum) == 0x0000D8, "Member 'FPalOptionWorldStaticSettings::GuildPlayerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, PalEggDefaultHatchingTime) == 0x0000E0, "Member 'FPalOptionWorldStaticSettings::PalEggDefaultHatchingTime' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldStaticSettings, BaseCampWorkerMaxNum) == 0x0000E8, "Member 'FPalOptionWorldStaticSettings::BaseCampWorkerMaxNum' has a wrong offset!");

// ScriptStruct Pal.PalOptionUISettings
// 0x000C (0x000C - 0x0000)
struct FPalOptionUISettings final
{
public:
	float                                         DamageTextScale;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageTextMaxNum;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayTutorial;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalOptionUISettings) == 0x000004, "Wrong alignment on FPalOptionUISettings");
static_assert(sizeof(FPalOptionUISettings) == 0x00000C, "Wrong size on FPalOptionUISettings");
static_assert(offsetof(FPalOptionUISettings, DamageTextScale) == 0x000000, "Member 'FPalOptionUISettings::DamageTextScale' has a wrong offset!");
static_assert(offsetof(FPalOptionUISettings, DamageTextMaxNum) == 0x000004, "Member 'FPalOptionUISettings::DamageTextMaxNum' has a wrong offset!");
static_assert(offsetof(FPalOptionUISettings, DisplayTutorial) == 0x000008, "Member 'FPalOptionUISettings::DisplayTutorial' has a wrong offset!");

// ScriptStruct Pal.PalCoopSkillSearchEffectParameter
// 0x0028 (0x0028 - 0x0000)
struct FPalCoopSkillSearchEffectParameter final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusFrom;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusTo;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtRadiusPerSec;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263E[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCoopSkillSearchEffectParameter) == 0x000008, "Wrong alignment on FPalCoopSkillSearchEffectParameter");
static_assert(sizeof(FPalCoopSkillSearchEffectParameter) == 0x000028, "Wrong size on FPalCoopSkillSearchEffectParameter");
static_assert(offsetof(FPalCoopSkillSearchEffectParameter, Origin) == 0x000000, "Member 'FPalCoopSkillSearchEffectParameter::Origin' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillSearchEffectParameter, RadiusFrom) == 0x000018, "Member 'FPalCoopSkillSearchEffectParameter::RadiusFrom' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillSearchEffectParameter, RadiusTo) == 0x00001C, "Member 'FPalCoopSkillSearchEffectParameter::RadiusTo' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillSearchEffectParameter, ExtRadiusPerSec) == 0x000020, "Member 'FPalCoopSkillSearchEffectParameter::ExtRadiusPerSec' has a wrong offset!");

// ScriptStruct Pal.PalPartnerSkillParameterRide
// 0x0008 (0x0008 - 0x0000)
struct FPalPartnerSkillParameterRide final
{
public:
	float                                         JumpZVelocityScale;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPartnerSkillParameterRide) == 0x000004, "Wrong alignment on FPalPartnerSkillParameterRide");
static_assert(sizeof(FPalPartnerSkillParameterRide) == 0x000008, "Wrong size on FPalPartnerSkillParameterRide");
static_assert(offsetof(FPalPartnerSkillParameterRide, JumpZVelocityScale) == 0x000000, "Member 'FPalPartnerSkillParameterRide::JumpZVelocityScale' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillParameterRide, GravityScale) == 0x000004, "Member 'FPalPartnerSkillParameterRide::GravityScale' has a wrong offset!");

// ScriptStruct Pal.PalPassivePartnerSkillIdAndParameters
// 0x0050 (0x0050 - 0x0000)
struct FPalPassivePartnerSkillIdAndParameters final
{
public:
	TMap<struct FPalDataTableRowName_PassiveSkillData, struct FPalPassivePartnerSkillParameters> SkillAndParameters;                                // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassivePartnerSkillIdAndParameters) == 0x000008, "Wrong alignment on FPalPassivePartnerSkillIdAndParameters");
static_assert(sizeof(FPalPassivePartnerSkillIdAndParameters) == 0x000050, "Wrong size on FPalPassivePartnerSkillIdAndParameters");
static_assert(offsetof(FPalPassivePartnerSkillIdAndParameters, SkillAndParameters) == 0x000000, "Member 'FPalPassivePartnerSkillIdAndParameters::SkillAndParameters' has a wrong offset!");

// ScriptStruct Pal.PalPassivePartnerSkillStatus
// 0x0030 (0x0030 - 0x0000)
struct FPalPassivePartnerSkillStatus final
{
public:
	EPalPassivePartnerSkillState                  State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Flags;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPalPassivePartnerSkillItemParameter   ItemParam;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassivePartnerSkillStatus) == 0x000008, "Wrong alignment on FPalPassivePartnerSkillStatus");
static_assert(sizeof(FPalPassivePartnerSkillStatus) == 0x000030, "Wrong size on FPalPassivePartnerSkillStatus");
static_assert(offsetof(FPalPassivePartnerSkillStatus, State) == 0x000000, "Member 'FPalPassivePartnerSkillStatus::State' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillStatus, ElapsedTime) == 0x000004, "Member 'FPalPassivePartnerSkillStatus::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillStatus, Flags) == 0x000008, "Member 'FPalPassivePartnerSkillStatus::Flags' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillStatus, ItemParam) == 0x000018, "Member 'FPalPassivePartnerSkillStatus::ItemParam' has a wrong offset!");

// ScriptStruct Pal.PalBuildObjectIconData
// 0x0030 (0x0038 - 0x0008)
struct FPalBuildObjectIconData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftIcon;                                          // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBuildObjectIconData) == 0x000008, "Wrong alignment on FPalBuildObjectIconData");
static_assert(sizeof(FPalBuildObjectIconData) == 0x000038, "Wrong size on FPalBuildObjectIconData");
static_assert(offsetof(FPalBuildObjectIconData, SoftIcon) == 0x000008, "Member 'FPalBuildObjectIconData::SoftIcon' has a wrong offset!");

// ScriptStruct Pal.CaptureResult
// 0x000C (0x000C - 0x0000)
struct FCaptureResult final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2640[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TestSuccessCount;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFailedCaptureType                            FailedCaptureType;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2641[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCaptureResult) == 0x000004, "Wrong alignment on FCaptureResult");
static_assert(sizeof(FCaptureResult) == 0x00000C, "Wrong size on FCaptureResult");
static_assert(offsetof(FCaptureResult, IsSuccess) == 0x000000, "Member 'FCaptureResult::IsSuccess' has a wrong offset!");
static_assert(offsetof(FCaptureResult, TestSuccessCount) == 0x000004, "Member 'FCaptureResult::TestSuccessCount' has a wrong offset!");
static_assert(offsetof(FCaptureResult, FailedCaptureType) == 0x000008, "Member 'FCaptureResult::FailedCaptureType' has a wrong offset!");

// ScriptStruct Pal.PalPassiveSkillEffectInfos
// 0x0010 (0x0010 - 0x0000)
struct FPalPassiveSkillEffectInfos final
{
public:
	TArray<struct FPalPassiveSkillEffect>         SkillEffectArray;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassiveSkillEffectInfos) == 0x000008, "Wrong alignment on FPalPassiveSkillEffectInfos");
static_assert(sizeof(FPalPassiveSkillEffectInfos) == 0x000010, "Wrong size on FPalPassiveSkillEffectInfos");
static_assert(offsetof(FPalPassiveSkillEffectInfos, SkillEffectArray) == 0x000000, "Member 'FPalPassiveSkillEffectInfos::SkillEffectArray' has a wrong offset!");

// ScriptStruct Pal.PalExpDatabaseRaw
// 0x0018 (0x0020 - 0x0008)
struct FPalExpDatabaseRaw final : public FTableRowBase
{
public:
	int32                                         DropEXP;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextEXP;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalNextEXP;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalEXP;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalTotalEXP;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2642[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalExpDatabaseRaw) == 0x000008, "Wrong alignment on FPalExpDatabaseRaw");
static_assert(sizeof(FPalExpDatabaseRaw) == 0x000020, "Wrong size on FPalExpDatabaseRaw");
static_assert(offsetof(FPalExpDatabaseRaw, DropEXP) == 0x000008, "Member 'FPalExpDatabaseRaw::DropEXP' has a wrong offset!");
static_assert(offsetof(FPalExpDatabaseRaw, NextEXP) == 0x00000C, "Member 'FPalExpDatabaseRaw::NextEXP' has a wrong offset!");
static_assert(offsetof(FPalExpDatabaseRaw, PalNextEXP) == 0x000010, "Member 'FPalExpDatabaseRaw::PalNextEXP' has a wrong offset!");
static_assert(offsetof(FPalExpDatabaseRaw, TotalEXP) == 0x000014, "Member 'FPalExpDatabaseRaw::TotalEXP' has a wrong offset!");
static_assert(offsetof(FPalExpDatabaseRaw, PalTotalEXP) == 0x000018, "Member 'FPalExpDatabaseRaw::PalTotalEXP' has a wrong offset!");

// ScriptStruct Pal.PalPlayerBattleEnemyInfo
// 0x000C (0x000C - 0x0000)
struct FPalPlayerBattleEnemyInfo final
{
public:
	EPalBattleBGMType                             Rank;                                              // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2643[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  WeakActor;                                         // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerBattleEnemyInfo) == 0x000004, "Wrong alignment on FPalPlayerBattleEnemyInfo");
static_assert(sizeof(FPalPlayerBattleEnemyInfo) == 0x00000C, "Wrong size on FPalPlayerBattleEnemyInfo");
static_assert(offsetof(FPalPlayerBattleEnemyInfo, Rank) == 0x000000, "Member 'FPalPlayerBattleEnemyInfo::Rank' has a wrong offset!");
static_assert(offsetof(FPalPlayerBattleEnemyInfo, WeakActor) == 0x000004, "Member 'FPalPlayerBattleEnemyInfo::WeakActor' has a wrong offset!");

// ScriptStruct Pal.PalObjectCollectorTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FPalObjectCollectorTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_2644[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalObjectCollectorTickFunction) == 0x000008, "Wrong alignment on FPalObjectCollectorTickFunction");
static_assert(sizeof(FPalObjectCollectorTickFunction) == 0x000030, "Wrong size on FPalObjectCollectorTickFunction");

// ScriptStruct Pal.PalItemFlowInSplineInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalItemFlowInSplineInfo final
{
public:
	class AActor*                                 ItemActor;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressTime;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2645[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalItemFlowInSplineInfo) == 0x000008, "Wrong alignment on FPalItemFlowInSplineInfo");
static_assert(sizeof(FPalItemFlowInSplineInfo) == 0x000010, "Wrong size on FPalItemFlowInSplineInfo");
static_assert(offsetof(FPalItemFlowInSplineInfo, ItemActor) == 0x000000, "Member 'FPalItemFlowInSplineInfo::ItemActor' has a wrong offset!");
static_assert(offsetof(FPalItemFlowInSplineInfo, ProgressTime) == 0x000008, "Member 'FPalItemFlowInSplineInfo::ProgressTime' has a wrong offset!");

// ScriptStruct Pal.PalPlayerRecordDataRepInfo_IntVal
// 0x000C (0x0018 - 0x000C)
struct FPalPlayerRecordDataRepInfo_IntVal final : public FFastArraySerializerItem
{
public:
	class FName                                   Key;                                               // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerRecordDataRepInfo_IntVal) == 0x000004, "Wrong alignment on FPalPlayerRecordDataRepInfo_IntVal");
static_assert(sizeof(FPalPlayerRecordDataRepInfo_IntVal) == 0x000018, "Wrong size on FPalPlayerRecordDataRepInfo_IntVal");
static_assert(offsetof(FPalPlayerRecordDataRepInfo_IntVal, Key) == 0x00000C, "Member 'FPalPlayerRecordDataRepInfo_IntVal::Key' has a wrong offset!");
static_assert(offsetof(FPalPlayerRecordDataRepInfo_IntVal, Value) == 0x000014, "Member 'FPalPlayerRecordDataRepInfo_IntVal::Value' has a wrong offset!");

// ScriptStruct Pal.PalPlayerRecordDataRepInfoArray_IntVal
// 0x0070 (0x0178 - 0x0108)
struct FPalPlayerRecordDataRepInfoArray_IntVal final : public FFastArraySerializer
{
public:
	uint8                                         Pad_2646[0x10];                                    // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalPlayerRecordDataRepInfo_IntVal> Items;                                             // 0x0118(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2647[0x50];                                    // 0x0128(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPlayerRecordDataRepInfoArray_IntVal) == 0x000008, "Wrong alignment on FPalPlayerRecordDataRepInfoArray_IntVal");
static_assert(sizeof(FPalPlayerRecordDataRepInfoArray_IntVal) == 0x000178, "Wrong size on FPalPlayerRecordDataRepInfoArray_IntVal");
static_assert(offsetof(FPalPlayerRecordDataRepInfoArray_IntVal, Items) == 0x000118, "Member 'FPalPlayerRecordDataRepInfoArray_IntVal::Items' has a wrong offset!");

// ScriptStruct Pal.PalNPCInteractConditionConstValueDataTableRow
// 0x0008 (0x0010 - 0x0008)
struct FPalNPCInteractConditionConstValueDataTableRow final : public FTableRowBase
{
public:
	class FName                                   ValText;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCInteractConditionConstValueDataTableRow) == 0x000008, "Wrong alignment on FPalNPCInteractConditionConstValueDataTableRow");
static_assert(sizeof(FPalNPCInteractConditionConstValueDataTableRow) == 0x000010, "Wrong size on FPalNPCInteractConditionConstValueDataTableRow");
static_assert(offsetof(FPalNPCInteractConditionConstValueDataTableRow, ValText) == 0x000008, "Member 'FPalNPCInteractConditionConstValueDataTableRow::ValText' has a wrong offset!");

// ScriptStruct Pal.PalRaidBossSpawnInfo
// 0x0058 (0x0058 - 0x0000)
struct FPalRaidBossSpawnInfo final
{
public:
	struct FPalDataTableRowName_PalMonsterData    PalID;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaID                                    WarpWazaID;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2648[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPalWazaID>                            BaseCampAttackWazaIDs;                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          CanModeChange;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalStatusID                                  ModeChange_AddStatusToAllWhenModeChgange;          // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               ModeChange_Element1;                               // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               ModeChange_Element2;                               // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2649[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ModeChange_AddPassiveSkill;                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EPalWazaID>                            ModeChange_AddWaza;                                // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EPalWazaID>                            ModeChange_RemoveWaza;                             // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRaidBossSpawnInfo) == 0x000008, "Wrong alignment on FPalRaidBossSpawnInfo");
static_assert(sizeof(FPalRaidBossSpawnInfo) == 0x000058, "Wrong size on FPalRaidBossSpawnInfo");
static_assert(offsetof(FPalRaidBossSpawnInfo, PalID) == 0x000000, "Member 'FPalRaidBossSpawnInfo::PalID' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, Level) == 0x000008, "Member 'FPalRaidBossSpawnInfo::Level' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, WarpWazaID) == 0x00000C, "Member 'FPalRaidBossSpawnInfo::WarpWazaID' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, BaseCampAttackWazaIDs) == 0x000010, "Member 'FPalRaidBossSpawnInfo::BaseCampAttackWazaIDs' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, CanModeChange) == 0x000020, "Member 'FPalRaidBossSpawnInfo::CanModeChange' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, ModeChange_AddStatusToAllWhenModeChgange) == 0x000021, "Member 'FPalRaidBossSpawnInfo::ModeChange_AddStatusToAllWhenModeChgange' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, ModeChange_Element1) == 0x000022, "Member 'FPalRaidBossSpawnInfo::ModeChange_Element1' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, ModeChange_Element2) == 0x000023, "Member 'FPalRaidBossSpawnInfo::ModeChange_Element2' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, ModeChange_AddPassiveSkill) == 0x000028, "Member 'FPalRaidBossSpawnInfo::ModeChange_AddPassiveSkill' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, ModeChange_AddWaza) == 0x000038, "Member 'FPalRaidBossSpawnInfo::ModeChange_AddWaza' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSpawnInfo, ModeChange_RemoveWaza) == 0x000048, "Member 'FPalRaidBossSpawnInfo::ModeChange_RemoveWaza' has a wrong offset!");

// ScriptStruct Pal.PalRaidBossSuccessItemInfo
// 0x0014 (0x0014 - 0x0000)
struct FPalRaidBossSuccessItemInfo final
{
public:
	struct FPalDataTableRowName_ItemData          ItemName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRaidBossSuccessItemInfo) == 0x000004, "Wrong alignment on FPalRaidBossSuccessItemInfo");
static_assert(sizeof(FPalRaidBossSuccessItemInfo) == 0x000014, "Wrong size on FPalRaidBossSuccessItemInfo");
static_assert(offsetof(FPalRaidBossSuccessItemInfo, ItemName) == 0x000000, "Member 'FPalRaidBossSuccessItemInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSuccessItemInfo, Rate) == 0x000008, "Member 'FPalRaidBossSuccessItemInfo::Rate' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSuccessItemInfo, Min) == 0x00000C, "Member 'FPalRaidBossSuccessItemInfo::Min' has a wrong offset!");
static_assert(offsetof(FPalRaidBossSuccessItemInfo, Max) == 0x000010, "Member 'FPalRaidBossSuccessItemInfo::Max' has a wrong offset!");

// ScriptStruct Pal.PalRaidBossDataRow
// 0x0090 (0x0098 - 0x0008)
struct FPalRaidBossDataRow final : public FTableRowBase
{
public:
	TArray<struct FPalRaidBossSpawnInfo>          InfoList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FPalDataTableRowName_PalMonsterData, float> EggPalIDAndWeight;                                 // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPalRaidBossSuccessItemInfo>    SuccessItemList;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPalRaidBossSuccessAnyOneItemInfo> SuccessAnyOneItemList;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 AchievementId;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRaidBossDataRow) == 0x000008, "Wrong alignment on FPalRaidBossDataRow");
static_assert(sizeof(FPalRaidBossDataRow) == 0x000098, "Wrong size on FPalRaidBossDataRow");
static_assert(offsetof(FPalRaidBossDataRow, InfoList) == 0x000008, "Member 'FPalRaidBossDataRow::InfoList' has a wrong offset!");
static_assert(offsetof(FPalRaidBossDataRow, EggPalIDAndWeight) == 0x000018, "Member 'FPalRaidBossDataRow::EggPalIDAndWeight' has a wrong offset!");
static_assert(offsetof(FPalRaidBossDataRow, SuccessItemList) == 0x000068, "Member 'FPalRaidBossDataRow::SuccessItemList' has a wrong offset!");
static_assert(offsetof(FPalRaidBossDataRow, SuccessAnyOneItemList) == 0x000078, "Member 'FPalRaidBossDataRow::SuccessAnyOneItemList' has a wrong offset!");
static_assert(offsetof(FPalRaidBossDataRow, AchievementId) == 0x000088, "Member 'FPalRaidBossDataRow::AchievementId' has a wrong offset!");

// ScriptStruct Pal.PalIndividualCharacterSaveParameterSaveData
// 0x0000 (0x0010 - 0x0010)
struct FPalIndividualCharacterSaveParameterSaveData final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalIndividualCharacterSaveParameterSaveData) == 0x000008, "Wrong alignment on FPalIndividualCharacterSaveParameterSaveData");
static_assert(sizeof(FPalIndividualCharacterSaveParameterSaveData) == 0x000010, "Wrong size on FPalIndividualCharacterSaveParameterSaveData");

// ScriptStruct Pal.PalCharacterStoredParameterInfoSaveData
// 0x0038 (0x0038 - 0x0000)
struct FPalCharacterStoredParameterInfoSaveData final
{
public:
	struct FPalCharacterStoredParameterId         ID;                                                // 0x0000(0x0010)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalIndividualCharacterSaveParameterSaveData SaveParameter;                                     // 0x0010(0x0010)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FGameDateTime                          StoredAt;                                          // 0x0020(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LostPlayerUId;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterStoredParameterInfoSaveData) == 0x000008, "Wrong alignment on FPalCharacterStoredParameterInfoSaveData");
static_assert(sizeof(FPalCharacterStoredParameterInfoSaveData) == 0x000038, "Wrong size on FPalCharacterStoredParameterInfoSaveData");
static_assert(offsetof(FPalCharacterStoredParameterInfoSaveData, ID) == 0x000000, "Member 'FPalCharacterStoredParameterInfoSaveData::ID' has a wrong offset!");
static_assert(offsetof(FPalCharacterStoredParameterInfoSaveData, SaveParameter) == 0x000010, "Member 'FPalCharacterStoredParameterInfoSaveData::SaveParameter' has a wrong offset!");
static_assert(offsetof(FPalCharacterStoredParameterInfoSaveData, StoredAt) == 0x000020, "Member 'FPalCharacterStoredParameterInfoSaveData::StoredAt' has a wrong offset!");
static_assert(offsetof(FPalCharacterStoredParameterInfoSaveData, LostPlayerUId) == 0x000028, "Member 'FPalCharacterStoredParameterInfoSaveData::LostPlayerUId' has a wrong offset!");

// ScriptStruct Pal.PlayerListItem
// 0x0030 (0x0030 - 0x0000)
struct FPlayerListItem final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerUId;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerListItem) == 0x000008, "Wrong alignment on FPlayerListItem");
static_assert(sizeof(FPlayerListItem) == 0x000030, "Wrong size on FPlayerListItem");
static_assert(offsetof(FPlayerListItem, PlayerName) == 0x000000, "Member 'FPlayerListItem::PlayerName' has a wrong offset!");
static_assert(offsetof(FPlayerListItem, PlayerUId) == 0x000010, "Member 'FPlayerListItem::PlayerUId' has a wrong offset!");
static_assert(offsetof(FPlayerListItem, UserId) == 0x000020, "Member 'FPlayerListItem::UserId' has a wrong offset!");

// ScriptStruct Pal.PalCoopSkillAssaultrifleModeCandidateLocation
// 0x0020 (0x0020 - 0x0000)
struct FPalCoopSkillAssaultrifleModeCandidateLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264A[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCoopSkillAssaultrifleModeCandidateLocation) == 0x000008, "Wrong alignment on FPalCoopSkillAssaultrifleModeCandidateLocation");
static_assert(sizeof(FPalCoopSkillAssaultrifleModeCandidateLocation) == 0x000020, "Wrong size on FPalCoopSkillAssaultrifleModeCandidateLocation");
static_assert(offsetof(FPalCoopSkillAssaultrifleModeCandidateLocation, Location) == 0x000000, "Member 'FPalCoopSkillAssaultrifleModeCandidateLocation::Location' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillAssaultrifleModeCandidateLocation, Distance) == 0x000018, "Member 'FPalCoopSkillAssaultrifleModeCandidateLocation::Distance' has a wrong offset!");

// ScriptStruct Pal.PalFoliageInstallData
// 0x0048 (0x0048 - 0x0000)
struct FPalFoliageInstallData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale3D;                                           // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageInstallData) == 0x000008, "Wrong alignment on FPalFoliageInstallData");
static_assert(sizeof(FPalFoliageInstallData) == 0x000048, "Wrong size on FPalFoliageInstallData");
static_assert(offsetof(FPalFoliageInstallData, Location) == 0x000000, "Member 'FPalFoliageInstallData::Location' has a wrong offset!");
static_assert(offsetof(FPalFoliageInstallData, Rotator) == 0x000018, "Member 'FPalFoliageInstallData::Rotator' has a wrong offset!");
static_assert(offsetof(FPalFoliageInstallData, Scale3D) == 0x000030, "Member 'FPalFoliageInstallData::Scale3D' has a wrong offset!");

// ScriptStruct Pal.PalIncidentSystemFunctionAccessor
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FPalIncidentSystemFunctionAccessor final
{
public:
	uint8                                         Pad_264B[0xC0];                                    // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalIncidentSystemFunctionAccessor) == 0x000010, "Wrong alignment on FPalIncidentSystemFunctionAccessor");
static_assert(sizeof(FPalIncidentSystemFunctionAccessor) == 0x0000C0, "Wrong size on FPalIncidentSystemFunctionAccessor");

// ScriptStruct Pal.PalItemShopLotteryDataStruct
// 0x000C (0x000C - 0x0000)
struct FPalItemShopLotteryDataStruct final
{
public:
	class FName                                   ShopGroupName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemShopLotteryDataStruct) == 0x000004, "Wrong alignment on FPalItemShopLotteryDataStruct");
static_assert(sizeof(FPalItemShopLotteryDataStruct) == 0x00000C, "Wrong size on FPalItemShopLotteryDataStruct");
static_assert(offsetof(FPalItemShopLotteryDataStruct, ShopGroupName) == 0x000000, "Member 'FPalItemShopLotteryDataStruct::ShopGroupName' has a wrong offset!");
static_assert(offsetof(FPalItemShopLotteryDataStruct, Weight) == 0x000008, "Member 'FPalItemShopLotteryDataStruct::Weight' has a wrong offset!");

// ScriptStruct Pal.PalDroppedPalProductDataForShop
// 0x0290 (0x0290 - 0x0000)
struct FPalDroppedPalProductDataForShop final
{
public:
	struct FPalCharacterStoredParameterId         StoredParameterId;                                 // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalIndividualCharacterSaveParameter   SaveParameter;                                     // 0x0010(0x0280)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDroppedPalProductDataForShop) == 0x000008, "Wrong alignment on FPalDroppedPalProductDataForShop");
static_assert(sizeof(FPalDroppedPalProductDataForShop) == 0x000290, "Wrong size on FPalDroppedPalProductDataForShop");
static_assert(offsetof(FPalDroppedPalProductDataForShop, StoredParameterId) == 0x000000, "Member 'FPalDroppedPalProductDataForShop::StoredParameterId' has a wrong offset!");
static_assert(offsetof(FPalDroppedPalProductDataForShop, SaveParameter) == 0x000010, "Member 'FPalDroppedPalProductDataForShop::SaveParameter' has a wrong offset!");

// ScriptStruct Pal.PalIncidentExecutionSettings
// 0x0001 (0x0001 - 0x0000)
struct FPalIncidentExecutionSettings final
{
public:
	bool                                          bCanExecuteMultiple;                               // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIncidentExecutionSettings) == 0x000001, "Wrong alignment on FPalIncidentExecutionSettings");
static_assert(sizeof(FPalIncidentExecutionSettings) == 0x000001, "Wrong size on FPalIncidentExecutionSettings");
static_assert(offsetof(FPalIncidentExecutionSettings, bCanExecuteMultiple) == 0x000000, "Member 'FPalIncidentExecutionSettings::bCanExecuteMultiple' has a wrong offset!");

// ScriptStruct Pal.PalWorldBaseInfoSaveData
// 0x0028 (0x0028 - 0x0000)
struct FPalWorldBaseInfoSaveData final
{
public:
	class FString                                 WorldName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostPlayerName;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HostPlayerLevel;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGameDay;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldBaseInfoSaveData) == 0x000008, "Wrong alignment on FPalWorldBaseInfoSaveData");
static_assert(sizeof(FPalWorldBaseInfoSaveData) == 0x000028, "Wrong size on FPalWorldBaseInfoSaveData");
static_assert(offsetof(FPalWorldBaseInfoSaveData, WorldName) == 0x000000, "Member 'FPalWorldBaseInfoSaveData::WorldName' has a wrong offset!");
static_assert(offsetof(FPalWorldBaseInfoSaveData, HostPlayerName) == 0x000010, "Member 'FPalWorldBaseInfoSaveData::HostPlayerName' has a wrong offset!");
static_assert(offsetof(FPalWorldBaseInfoSaveData, HostPlayerLevel) == 0x000020, "Member 'FPalWorldBaseInfoSaveData::HostPlayerLevel' has a wrong offset!");
static_assert(offsetof(FPalWorldBaseInfoSaveData, InGameDay) == 0x000024, "Member 'FPalWorldBaseInfoSaveData::InGameDay' has a wrong offset!");

// ScriptStruct Pal.PalWorldBaseInfoData
// 0x0048 (0x0048 - 0x0000)
struct FPalWorldBaseInfoData final
{
public:
	struct FPalWorldBaseInfoSaveData              BaseInfoSaveData;                                  // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DirectoryPath;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanMulti;                                          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorldBaseInfoSaveDataType                 BaseInfoSaveDataType;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264C[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorldBaseInfoData) == 0x000008, "Wrong alignment on FPalWorldBaseInfoData");
static_assert(sizeof(FPalWorldBaseInfoData) == 0x000048, "Wrong size on FPalWorldBaseInfoData");
static_assert(offsetof(FPalWorldBaseInfoData, BaseInfoSaveData) == 0x000000, "Member 'FPalWorldBaseInfoData::BaseInfoSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldBaseInfoData, Timestamp) == 0x000028, "Member 'FPalWorldBaseInfoData::Timestamp' has a wrong offset!");
static_assert(offsetof(FPalWorldBaseInfoData, DirectoryPath) == 0x000030, "Member 'FPalWorldBaseInfoData::DirectoryPath' has a wrong offset!");
static_assert(offsetof(FPalWorldBaseInfoData, CanMulti) == 0x000040, "Member 'FPalWorldBaseInfoData::CanMulti' has a wrong offset!");
static_assert(offsetof(FPalWorldBaseInfoData, BaseInfoSaveDataType) == 0x000041, "Member 'FPalWorldBaseInfoData::BaseInfoSaveDataType' has a wrong offset!");

// ScriptStruct Pal.PalAmbientSoundAreaData
// 0x0028 (0x0028 - 0x0000)
struct FPalAmbientSoundAreaData final
{
public:
	int32                                         AmbientPriority;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkAudioEvent*>                  DayAmbientEvents;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  NightAmbientEvents;                                // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalAmbientSoundAreaData) == 0x000008, "Wrong alignment on FPalAmbientSoundAreaData");
static_assert(sizeof(FPalAmbientSoundAreaData) == 0x000028, "Wrong size on FPalAmbientSoundAreaData");
static_assert(offsetof(FPalAmbientSoundAreaData, AmbientPriority) == 0x000000, "Member 'FPalAmbientSoundAreaData::AmbientPriority' has a wrong offset!");
static_assert(offsetof(FPalAmbientSoundAreaData, DayAmbientEvents) == 0x000008, "Member 'FPalAmbientSoundAreaData::DayAmbientEvents' has a wrong offset!");
static_assert(offsetof(FPalAmbientSoundAreaData, NightAmbientEvents) == 0x000018, "Member 'FPalAmbientSoundAreaData::NightAmbientEvents' has a wrong offset!");

// ScriptStruct Pal.PalLogInfo_Skill
// 0x0048 (0x0048 - 0x0000)
struct FPalLogInfo_Skill final
{
public:
	class FText                                   SkillName;                                         // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CharacterName;                                     // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0030(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLogInfo_Skill) == 0x000008, "Wrong alignment on FPalLogInfo_Skill");
static_assert(sizeof(FPalLogInfo_Skill) == 0x000048, "Wrong size on FPalLogInfo_Skill");
static_assert(offsetof(FPalLogInfo_Skill, SkillName) == 0x000000, "Member 'FPalLogInfo_Skill::SkillName' has a wrong offset!");
static_assert(offsetof(FPalLogInfo_Skill, CharacterName) == 0x000018, "Member 'FPalLogInfo_Skill::CharacterName' has a wrong offset!");
static_assert(offsetof(FPalLogInfo_Skill, Value) == 0x000030, "Member 'FPalLogInfo_Skill::Value' has a wrong offset!");

// ScriptStruct Pal.PalAsyncSaveProcess
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPalAsyncSaveProcess final
{
public:
	EPalAsyncSaveProcessState                     State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264E[0x17];                                    // 0x0001(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalAsyncSaveProcess) == 0x000008, "Wrong alignment on FPalAsyncSaveProcess");
static_assert(sizeof(FPalAsyncSaveProcess) == 0x000018, "Wrong size on FPalAsyncSaveProcess");
static_assert(offsetof(FPalAsyncSaveProcess, State) == 0x000000, "Member 'FPalAsyncSaveProcess::State' has a wrong offset!");

// ScriptStruct Pal.PalAsyncSaveProcessParallel
// 0x0060 (0x0060 - 0x0000)
struct FPalAsyncSaveProcessParallel final
{
public:
	TMap<class FString, struct FPalAsyncSaveProcess> ProcessMap;                                        // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_264F[0x10];                                    // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalAsyncSaveProcessParallel) == 0x000008, "Wrong alignment on FPalAsyncSaveProcessParallel");
static_assert(sizeof(FPalAsyncSaveProcessParallel) == 0x000060, "Wrong size on FPalAsyncSaveProcessParallel");
static_assert(offsetof(FPalAsyncSaveProcessParallel, ProcessMap) == 0x000000, "Member 'FPalAsyncSaveProcessParallel::ProcessMap' has a wrong offset!");

// ScriptStruct Pal.PalFoliageInstanceRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FPalFoliageInstanceRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalFoliageInstanceRepInfo>     Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2650[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFoliageInstanceRepInfoArray) == 0x000008, "Wrong alignment on FPalFoliageInstanceRepInfoArray");
static_assert(sizeof(FPalFoliageInstanceRepInfoArray) == 0x000148, "Wrong size on FPalFoliageInstanceRepInfoArray");
static_assert(offsetof(FPalFoliageInstanceRepInfoArray, Items) == 0x000108, "Member 'FPalFoliageInstanceRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectFoliageDropItemData
// 0x000C (0x000C - 0x0000)
struct FPalMapObjectFoliageDropItemData final
{
public:
	struct FPalDataTableRowName_ItemData          StaticItemId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectFoliageDropItemData) == 0x000004, "Wrong alignment on FPalMapObjectFoliageDropItemData");
static_assert(sizeof(FPalMapObjectFoliageDropItemData) == 0x00000C, "Wrong size on FPalMapObjectFoliageDropItemData");
static_assert(offsetof(FPalMapObjectFoliageDropItemData, StaticItemId) == 0x000000, "Member 'FPalMapObjectFoliageDropItemData::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFoliageDropItemData, Num) == 0x000008, "Member 'FPalMapObjectFoliageDropItemData::Num' has a wrong offset!");

// ScriptStruct Pal.RidingAnimationInfo
// 0x0020 (0x0020 - 0x0000)
struct FRidingAnimationInfo final
{
public:
	class UAnimSequence*                          RidingAnimation;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RidingShakingMontage;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RideShootingAnimation;                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   RideShootingAO;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRidingAnimationInfo) == 0x000008, "Wrong alignment on FRidingAnimationInfo");
static_assert(sizeof(FRidingAnimationInfo) == 0x000020, "Wrong size on FRidingAnimationInfo");
static_assert(offsetof(FRidingAnimationInfo, RidingAnimation) == 0x000000, "Member 'FRidingAnimationInfo::RidingAnimation' has a wrong offset!");
static_assert(offsetof(FRidingAnimationInfo, RidingShakingMontage) == 0x000008, "Member 'FRidingAnimationInfo::RidingShakingMontage' has a wrong offset!");
static_assert(offsetof(FRidingAnimationInfo, RideShootingAnimation) == 0x000010, "Member 'FRidingAnimationInfo::RideShootingAnimation' has a wrong offset!");
static_assert(offsetof(FRidingAnimationInfo, RideShootingAO) == 0x000018, "Member 'FRidingAnimationInfo::RideShootingAO' has a wrong offset!");

// ScriptStruct Pal.CharacterParameterRepInfo
// 0x004C (0x0058 - 0x000C)
struct FCharacterParameterRepInfo final : public FFastArraySerializerItem
{
public:
	struct FGuid                                  RequestGUID;                                       // 0x000C(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2651[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalInstanceID                         ID;                                                // 0x0020(0x0030)(Edit, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPalIndividualCharacterParameter*       Parameter;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterParameterRepInfo) == 0x000008, "Wrong alignment on FCharacterParameterRepInfo");
static_assert(sizeof(FCharacterParameterRepInfo) == 0x000058, "Wrong size on FCharacterParameterRepInfo");
static_assert(offsetof(FCharacterParameterRepInfo, RequestGUID) == 0x00000C, "Member 'FCharacterParameterRepInfo::RequestGUID' has a wrong offset!");
static_assert(offsetof(FCharacterParameterRepInfo, ID) == 0x000020, "Member 'FCharacterParameterRepInfo::ID' has a wrong offset!");
static_assert(offsetof(FCharacterParameterRepInfo, Parameter) == 0x000050, "Member 'FCharacterParameterRepInfo::Parameter' has a wrong offset!");

// ScriptStruct Pal.WeaponAnimationInfo
// 0x0258 (0x0258 - 0x0000)
struct FWeaponAnimationInfo final
{
public:
	class UBlendSpace1D*                          NormalMoveBlendSpace;                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          CrouchMoveBlendSpace;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimingMoveBlendSpace;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            HipShootingMoveBlendSpace;                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            CrouchAimingMoveBlendSpace;                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           JumpPreliminary;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpStart;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpLoopUp;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpLoopDown;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpEnd;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Sliding;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SlidingEnd;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Sprint;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadMontage;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponChangeMontage;                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EWeaponAnimationPoseType, class UAnimSequence*> IdlePoseMap;                                       // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EWeaponAnimationPoseType, class UAnimSequence*> JogPoseMap;                                        // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EWeaponAnimationPoseType, class UAnimSequence*> AimBaseMap;                                        // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EWeaponAnimationPoseType, class UAimOffsetBlendSpace*> AimOffsetMap;                                      // 0x0168(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EWeaponAnimationType, struct FWeaponNotifyAnimationInfo> AnimationMap;                                      // 0x01B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EPalRidePositionType, struct FRidingAnimationInfo> RidingAnimationMap;                                // 0x0208(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponAnimationInfo) == 0x000008, "Wrong alignment on FWeaponAnimationInfo");
static_assert(sizeof(FWeaponAnimationInfo) == 0x000258, "Wrong size on FWeaponAnimationInfo");
static_assert(offsetof(FWeaponAnimationInfo, NormalMoveBlendSpace) == 0x000000, "Member 'FWeaponAnimationInfo::NormalMoveBlendSpace' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, CrouchMoveBlendSpace) == 0x000008, "Member 'FWeaponAnimationInfo::CrouchMoveBlendSpace' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, AimingMoveBlendSpace) == 0x000010, "Member 'FWeaponAnimationInfo::AimingMoveBlendSpace' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, HipShootingMoveBlendSpace) == 0x000018, "Member 'FWeaponAnimationInfo::HipShootingMoveBlendSpace' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, CrouchAimingMoveBlendSpace) == 0x000020, "Member 'FWeaponAnimationInfo::CrouchAimingMoveBlendSpace' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, JumpPreliminary) == 0x000028, "Member 'FWeaponAnimationInfo::JumpPreliminary' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, JumpStart) == 0x000030, "Member 'FWeaponAnimationInfo::JumpStart' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, JumpLoopUp) == 0x000038, "Member 'FWeaponAnimationInfo::JumpLoopUp' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, JumpLoopDown) == 0x000040, "Member 'FWeaponAnimationInfo::JumpLoopDown' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, JumpEnd) == 0x000048, "Member 'FWeaponAnimationInfo::JumpEnd' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, Sliding) == 0x000050, "Member 'FWeaponAnimationInfo::Sliding' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, SlidingEnd) == 0x000058, "Member 'FWeaponAnimationInfo::SlidingEnd' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, Sprint) == 0x000060, "Member 'FWeaponAnimationInfo::Sprint' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, ReloadMontage) == 0x000068, "Member 'FWeaponAnimationInfo::ReloadMontage' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, WeaponChangeMontage) == 0x000070, "Member 'FWeaponAnimationInfo::WeaponChangeMontage' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, IdlePoseMap) == 0x000078, "Member 'FWeaponAnimationInfo::IdlePoseMap' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, JogPoseMap) == 0x0000C8, "Member 'FWeaponAnimationInfo::JogPoseMap' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, AimBaseMap) == 0x000118, "Member 'FWeaponAnimationInfo::AimBaseMap' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, AimOffsetMap) == 0x000168, "Member 'FWeaponAnimationInfo::AimOffsetMap' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, AnimationMap) == 0x0001B8, "Member 'FWeaponAnimationInfo::AnimationMap' has a wrong offset!");
static_assert(offsetof(FWeaponAnimationInfo, RidingAnimationMap) == 0x000208, "Member 'FWeaponAnimationInfo::RidingAnimationMap' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampWorkerTaskCheckResponse
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FPalBaseCampWorkerTaskCheckResponse final
{
public:
	uint8                                         Pad_2652[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampWorkerTaskCheckResponse) == 0x000008, "Wrong alignment on FPalBaseCampWorkerTaskCheckResponse");
static_assert(sizeof(FPalBaseCampWorkerTaskCheckResponse) == 0x000050, "Wrong size on FPalBaseCampWorkerTaskCheckResponse");

// ScriptStruct Pal.PalCombiUniqueDatabaseRow
// 0x0010 (0x0018 - 0x0008)
struct FPalCombiUniqueDatabaseRow final : public FTableRowBase
{
public:
	EPalTribeID                                   ParentTribeA;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalTribeID                                   ParentTribeB;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2653[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChildCharacterID;                                  // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2654[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCombiUniqueDatabaseRow) == 0x000008, "Wrong alignment on FPalCombiUniqueDatabaseRow");
static_assert(sizeof(FPalCombiUniqueDatabaseRow) == 0x000018, "Wrong size on FPalCombiUniqueDatabaseRow");
static_assert(offsetof(FPalCombiUniqueDatabaseRow, ParentTribeA) == 0x000008, "Member 'FPalCombiUniqueDatabaseRow::ParentTribeA' has a wrong offset!");
static_assert(offsetof(FPalCombiUniqueDatabaseRow, ParentTribeB) == 0x000009, "Member 'FPalCombiUniqueDatabaseRow::ParentTribeB' has a wrong offset!");
static_assert(offsetof(FPalCombiUniqueDatabaseRow, ChildCharacterID) == 0x00000C, "Member 'FPalCombiUniqueDatabaseRow::ChildCharacterID' has a wrong offset!");

// ScriptStruct Pal.ElementOfLayeredFlagContainer
// 0x0058 (0x0058 - 0x0000)
struct FElementOfLayeredFlagContainer final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2655[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFlagContainer                         Container;                                         // 0x0008(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElementOfLayeredFlagContainer) == 0x000008, "Wrong alignment on FElementOfLayeredFlagContainer");
static_assert(sizeof(FElementOfLayeredFlagContainer) == 0x000058, "Wrong size on FElementOfLayeredFlagContainer");
static_assert(offsetof(FElementOfLayeredFlagContainer, Priority) == 0x000000, "Member 'FElementOfLayeredFlagContainer::Priority' has a wrong offset!");
static_assert(offsetof(FElementOfLayeredFlagContainer, Container) == 0x000008, "Member 'FElementOfLayeredFlagContainer::Container' has a wrong offset!");

// ScriptStruct Pal.LayeredFlagContainer
// 0x0010 (0x0010 - 0x0000)
struct FLayeredFlagContainer final
{
public:
	TArray<struct FElementOfLayeredFlagContainer> ContainerList;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLayeredFlagContainer) == 0x000008, "Wrong alignment on FLayeredFlagContainer");
static_assert(sizeof(FLayeredFlagContainer) == 0x000010, "Wrong size on FLayeredFlagContainer");
static_assert(offsetof(FLayeredFlagContainer, ContainerList) == 0x000000, "Member 'FLayeredFlagContainer::ContainerList' has a wrong offset!");

// ScriptStruct Pal.PalCompletedQuestSaveData
// 0x0008 (0x0008 - 0x0000)
struct FPalCompletedQuestSaveData final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCompletedQuestSaveData) == 0x000004, "Wrong alignment on FPalCompletedQuestSaveData");
static_assert(sizeof(FPalCompletedQuestSaveData) == 0x000008, "Wrong size on FPalCompletedQuestSaveData");
static_assert(offsetof(FPalCompletedQuestSaveData, QuestName) == 0x000000, "Member 'FPalCompletedQuestSaveData::QuestName' has a wrong offset!");

// ScriptStruct Pal.PalCustomMarkerSaveData
// 0x0020 (0x0020 - 0x0000)
struct FPalCustomMarkerSaveData final
{
public:
	struct FVector                                IconLocation;                                      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconType;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2656[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCustomMarkerSaveData) == 0x000008, "Wrong alignment on FPalCustomMarkerSaveData");
static_assert(sizeof(FPalCustomMarkerSaveData) == 0x000020, "Wrong size on FPalCustomMarkerSaveData");
static_assert(offsetof(FPalCustomMarkerSaveData, IconLocation) == 0x000000, "Member 'FPalCustomMarkerSaveData::IconLocation' has a wrong offset!");
static_assert(offsetof(FPalCustomMarkerSaveData, IconType) == 0x000018, "Member 'FPalCustomMarkerSaveData::IconType' has a wrong offset!");

// ScriptStruct Pal.PalTutorialTriggerSaveData
// 0x000C (0x000C - 0x0000)
struct FPalTutorialTriggerSaveData final
{
public:
	class FName                                   TutorialMsg;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Checked;                                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2657[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalTutorialTriggerSaveData) == 0x000004, "Wrong alignment on FPalTutorialTriggerSaveData");
static_assert(sizeof(FPalTutorialTriggerSaveData) == 0x00000C, "Wrong size on FPalTutorialTriggerSaveData");
static_assert(offsetof(FPalTutorialTriggerSaveData, TutorialMsg) == 0x000000, "Member 'FPalTutorialTriggerSaveData::TutorialMsg' has a wrong offset!");
static_assert(offsetof(FPalTutorialTriggerSaveData, Checked) == 0x000008, "Member 'FPalTutorialTriggerSaveData::Checked' has a wrong offset!");

// ScriptStruct Pal.PalOrderedQuestSaveData
// 0x000C (0x000C - 0x0000)
struct FPalOrderedQuestSaveData final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockIndex;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOrderedQuestSaveData) == 0x000004, "Wrong alignment on FPalOrderedQuestSaveData");
static_assert(sizeof(FPalOrderedQuestSaveData) == 0x00000C, "Wrong size on FPalOrderedQuestSaveData");
static_assert(offsetof(FPalOrderedQuestSaveData, QuestName) == 0x000000, "Member 'FPalOrderedQuestSaveData::QuestName' has a wrong offset!");
static_assert(offsetof(FPalOrderedQuestSaveData, BlockIndex) == 0x000008, "Member 'FPalOrderedQuestSaveData::BlockIndex' has a wrong offset!");

// ScriptStruct Pal.PalLocalSaveData
// 0x02E0 (0x02E0 - 0x0000)
struct FPalLocalSaveData final
{
public:
	TMap<EPalTribeID, int32>                      Local_ActivateOtomoCount;                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<EPalTribeID, bool>                       Local_PalEncountFlag;                              // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       Local_NoteCheckedFlag;                             // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TMap<EPalPlayerInventoryType, int32>          Local_LoadoutSelectedIndexMap;                     // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Local_NewUnlockedBuilds;                           // 0x0140(0x0050)(NativeAccessSpecifierPublic)
	bool                                          Local_IsBuildMenuChecked;                          // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2658[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      Local_NPCTalkCountMap;                             // 0x0198(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       Local_NewUnlockedTechs;                            // 0x01E8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       Local_ShowedCutsceneFlag;                          // 0x0238(0x0050)(NativeAccessSpecifierPublic)
	int32                                         Local_PlayTime;                                    // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2659[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 WorldMapMaskTexture;                               // 0x0290(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalCustomMarkerSaveData>       Local_CustomMarkerSaveData;                        // 0x02A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalTutorialTriggerSaveData>    Local_TutorialTriggerSaveData;                     // 0x02B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalCompletedQuestSaveData>     Local_CompletedTutorialQuestSaveData;              // 0x02C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalOrderedQuestSaveData>       Local_OrderedTutorialQuestSaveData;                // 0x02D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLocalSaveData) == 0x000008, "Wrong alignment on FPalLocalSaveData");
static_assert(sizeof(FPalLocalSaveData) == 0x0002E0, "Wrong size on FPalLocalSaveData");
static_assert(offsetof(FPalLocalSaveData, Local_ActivateOtomoCount) == 0x000000, "Member 'FPalLocalSaveData::Local_ActivateOtomoCount' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_PalEncountFlag) == 0x000050, "Member 'FPalLocalSaveData::Local_PalEncountFlag' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_NoteCheckedFlag) == 0x0000A0, "Member 'FPalLocalSaveData::Local_NoteCheckedFlag' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_LoadoutSelectedIndexMap) == 0x0000F0, "Member 'FPalLocalSaveData::Local_LoadoutSelectedIndexMap' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_NewUnlockedBuilds) == 0x000140, "Member 'FPalLocalSaveData::Local_NewUnlockedBuilds' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_IsBuildMenuChecked) == 0x000190, "Member 'FPalLocalSaveData::Local_IsBuildMenuChecked' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_NPCTalkCountMap) == 0x000198, "Member 'FPalLocalSaveData::Local_NPCTalkCountMap' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_NewUnlockedTechs) == 0x0001E8, "Member 'FPalLocalSaveData::Local_NewUnlockedTechs' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_ShowedCutsceneFlag) == 0x000238, "Member 'FPalLocalSaveData::Local_ShowedCutsceneFlag' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_PlayTime) == 0x000288, "Member 'FPalLocalSaveData::Local_PlayTime' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, WorldMapMaskTexture) == 0x000290, "Member 'FPalLocalSaveData::WorldMapMaskTexture' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_CustomMarkerSaveData) == 0x0002A0, "Member 'FPalLocalSaveData::Local_CustomMarkerSaveData' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_TutorialTriggerSaveData) == 0x0002B0, "Member 'FPalLocalSaveData::Local_TutorialTriggerSaveData' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_CompletedTutorialQuestSaveData) == 0x0002C0, "Member 'FPalLocalSaveData::Local_CompletedTutorialQuestSaveData' has a wrong offset!");
static_assert(offsetof(FPalLocalSaveData, Local_OrderedTutorialQuestSaveData) == 0x0002D0, "Member 'FPalLocalSaveData::Local_OrderedTutorialQuestSaveData' has a wrong offset!");

// ScriptStruct Pal.PalItemSlotSaveData
// 0x0030 (0x0040 - 0x0010)
struct FPalItemSlotSaveData final : public FPalBinaryMemory
{
public:
	int32                                         SlotIndex;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalItemId                             ItemId;                                            // 0x0014(0x0028)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemSlotSaveData) == 0x000008, "Wrong alignment on FPalItemSlotSaveData");
static_assert(sizeof(FPalItemSlotSaveData) == 0x000040, "Wrong size on FPalItemSlotSaveData");
static_assert(offsetof(FPalItemSlotSaveData, SlotIndex) == 0x000010, "Member 'FPalItemSlotSaveData::SlotIndex' has a wrong offset!");
static_assert(offsetof(FPalItemSlotSaveData, ItemId) == 0x000014, "Member 'FPalItemSlotSaveData::ItemId' has a wrong offset!");
static_assert(offsetof(FPalItemSlotSaveData, StackCount) == 0x00003C, "Member 'FPalItemSlotSaveData::StackCount' has a wrong offset!");

// ScriptStruct Pal.PalItemContainerSaveData
// 0x0030 (0x0040 - 0x0010)
struct FPalItemContainerSaveData final : public FPalBinaryMemory
{
public:
	struct FPalItemContainerBelongInfo            BelongInfo;                                        // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FPalItemSlotSaveData>           Slots;                                             // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemContainerSaveData) == 0x000008, "Wrong alignment on FPalItemContainerSaveData");
static_assert(sizeof(FPalItemContainerSaveData) == 0x000040, "Wrong size on FPalItemContainerSaveData");
static_assert(offsetof(FPalItemContainerSaveData, BelongInfo) == 0x000010, "Member 'FPalItemContainerSaveData::BelongInfo' has a wrong offset!");
static_assert(offsetof(FPalItemContainerSaveData, Slots) == 0x000030, "Member 'FPalItemContainerSaveData::Slots' has a wrong offset!");

// ScriptStruct Pal.PalDungeonSaveData
// 0x0078 (0x0078 - 0x0000)
struct FPalDungeonSaveData final
{
public:
	struct FGuid                                  InstanceId;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalDungeonType                               DungeonType;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  MarkerPointId;                                     // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DungeonSpawnAreaId;                                // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DungeonLevelName;                                  // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalDungeonInstanceBossState                  BossState;                                         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265B[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnemySpawnerDataBossRowName;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameDateTime                          DisappearTimeAt;                                   // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReservedDataLayerAssetIndex;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalStageInstanceId                    StageInstanceId;                                   // 0x004C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalMapObjectSaveData>          MapObjectSaveData;                                 // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameDateTime                          RespawnBossTimeAt;                                 // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonSaveData) == 0x000008, "Wrong alignment on FPalDungeonSaveData");
static_assert(sizeof(FPalDungeonSaveData) == 0x000078, "Wrong size on FPalDungeonSaveData");
static_assert(offsetof(FPalDungeonSaveData, InstanceId) == 0x000000, "Member 'FPalDungeonSaveData::InstanceId' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, DungeonType) == 0x000010, "Member 'FPalDungeonSaveData::DungeonType' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, MarkerPointId) == 0x000014, "Member 'FPalDungeonSaveData::MarkerPointId' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, DungeonSpawnAreaId) == 0x000024, "Member 'FPalDungeonSaveData::DungeonSpawnAreaId' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, DungeonLevelName) == 0x00002C, "Member 'FPalDungeonSaveData::DungeonLevelName' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, BossState) == 0x000034, "Member 'FPalDungeonSaveData::BossState' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, EnemySpawnerDataBossRowName) == 0x000038, "Member 'FPalDungeonSaveData::EnemySpawnerDataBossRowName' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, DisappearTimeAt) == 0x000040, "Member 'FPalDungeonSaveData::DisappearTimeAt' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, ReservedDataLayerAssetIndex) == 0x000048, "Member 'FPalDungeonSaveData::ReservedDataLayerAssetIndex' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, StageInstanceId) == 0x00004C, "Member 'FPalDungeonSaveData::StageInstanceId' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, MapObjectSaveData) == 0x000060, "Member 'FPalDungeonSaveData::MapObjectSaveData' has a wrong offset!");
static_assert(offsetof(FPalDungeonSaveData, RespawnBossTimeAt) == 0x000070, "Member 'FPalDungeonSaveData::RespawnBossTimeAt' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectSpawnerItemSaveData
// 0x0018 (0x0018 - 0x0000)
struct FPalMapObjectSpawnerItemSaveData final
{
public:
	int64                                         NextLotteryGameTime;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MapObjectInstanceId;                               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectSpawnerItemSaveData) == 0x000008, "Wrong alignment on FPalMapObjectSpawnerItemSaveData");
static_assert(sizeof(FPalMapObjectSpawnerItemSaveData) == 0x000018, "Wrong size on FPalMapObjectSpawnerItemSaveData");
static_assert(offsetof(FPalMapObjectSpawnerItemSaveData, NextLotteryGameTime) == 0x000000, "Member 'FPalMapObjectSpawnerItemSaveData::NextLotteryGameTime' has a wrong offset!");
static_assert(offsetof(FPalMapObjectSpawnerItemSaveData, MapObjectInstanceId) == 0x000008, "Member 'FPalMapObjectSpawnerItemSaveData::MapObjectInstanceId' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectSpawnerSaveData
// 0x0050 (0x0050 - 0x0000)
struct FPalMapObjectSpawnerSaveData final
{
public:
	TMap<int32, struct FPalMapObjectSpawnerItemSaveData> ItemMap;                                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectSpawnerSaveData) == 0x000008, "Wrong alignment on FPalMapObjectSpawnerSaveData");
static_assert(sizeof(FPalMapObjectSpawnerSaveData) == 0x000050, "Wrong size on FPalMapObjectSpawnerSaveData");
static_assert(offsetof(FPalMapObjectSpawnerSaveData, ItemMap) == 0x000000, "Member 'FPalMapObjectSpawnerSaveData::ItemMap' has a wrong offset!");

// ScriptStruct Pal.PalFoliageInstanceSaveData
// 0x0000 (0x0010 - 0x0010)
struct FPalFoliageInstanceSaveData final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalFoliageInstanceSaveData) == 0x000008, "Wrong alignment on FPalFoliageInstanceSaveData");
static_assert(sizeof(FPalFoliageInstanceSaveData) == 0x000010, "Wrong size on FPalFoliageInstanceSaveData");

// ScriptStruct Pal.PalFoliageSaveData
// 0x0050 (0x0060 - 0x0010)
struct FPalFoliageSaveData final : public FPalBinaryMemory
{
public:
	TMap<struct FPalFoliageInstanceId, struct FPalFoliageInstanceSaveData> InstanceDataMap;                                   // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageSaveData) == 0x000008, "Wrong alignment on FPalFoliageSaveData");
static_assert(sizeof(FPalFoliageSaveData) == 0x000060, "Wrong size on FPalFoliageSaveData");
static_assert(offsetof(FPalFoliageSaveData, InstanceDataMap) == 0x000010, "Member 'FPalFoliageSaveData::InstanceDataMap' has a wrong offset!");

// ScriptStruct Pal.PalFoliageGridSaveData
// 0x0050 (0x0050 - 0x0000)
struct FPalFoliageGridSaveData final
{
public:
	TMap<class FName, struct FPalFoliageSaveData> ModelMap;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageGridSaveData) == 0x000008, "Wrong alignment on FPalFoliageGridSaveData");
static_assert(sizeof(FPalFoliageGridSaveData) == 0x000050, "Wrong size on FPalFoliageGridSaveData");
static_assert(offsetof(FPalFoliageGridSaveData, ModelMap) == 0x000000, "Member 'FPalFoliageGridSaveData::ModelMap' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectSpawnerInStageSaveData
// 0x0050 (0x0050 - 0x0000)
struct FPalMapObjectSpawnerInStageSaveData final
{
public:
	TMap<struct FGuid, struct FPalMapObjectSpawnerSaveData> SpawnerDataMapByLevelObjectInstanceId;             // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectSpawnerInStageSaveData) == 0x000008, "Wrong alignment on FPalMapObjectSpawnerInStageSaveData");
static_assert(sizeof(FPalMapObjectSpawnerInStageSaveData) == 0x000050, "Wrong size on FPalMapObjectSpawnerInStageSaveData");
static_assert(offsetof(FPalMapObjectSpawnerInStageSaveData, SpawnerDataMapByLevelObjectInstanceId) == 0x000000, "Member 'FPalMapObjectSpawnerInStageSaveData::SpawnerDataMapByLevelObjectInstanceId' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignSaveData
// 0x0000 (0x0010 - 0x0010)
struct FPalWorkAssignSaveData final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalWorkAssignSaveData) == 0x000008, "Wrong alignment on FPalWorkAssignSaveData");
static_assert(sizeof(FPalWorkAssignSaveData) == 0x000010, "Wrong size on FPalWorkAssignSaveData");

// ScriptStruct Pal.PalWorkSaveData
// 0x0058 (0x0068 - 0x0010)
struct FPalWorkSaveData final : public FPalBinaryMemory
{
public:
	EPalWorkableType                              WorkableType;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FPalWorkAssignSaveData>    WorkAssignMap;                                     // 0x0018(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkSaveData) == 0x000008, "Wrong alignment on FPalWorkSaveData");
static_assert(sizeof(FPalWorkSaveData) == 0x000068, "Wrong size on FPalWorkSaveData");
static_assert(offsetof(FPalWorkSaveData, WorkableType) == 0x000010, "Member 'FPalWorkSaveData::WorkableType' has a wrong offset!");
static_assert(offsetof(FPalWorkSaveData, WorkAssignMap) == 0x000018, "Member 'FPalWorkSaveData::WorkAssignMap' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampSaveData_WorkerDirector
// 0x0000 (0x0010 - 0x0010)
struct FPalBaseCampSaveData_WorkerDirector final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalBaseCampSaveData_WorkerDirector) == 0x000008, "Wrong alignment on FPalBaseCampSaveData_WorkerDirector");
static_assert(sizeof(FPalBaseCampSaveData_WorkerDirector) == 0x000010, "Wrong size on FPalBaseCampSaveData_WorkerDirector");

// ScriptStruct Pal.PalBaseCampSaveData_WorkCollection
// 0x0000 (0x0010 - 0x0010)
struct FPalBaseCampSaveData_WorkCollection final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalBaseCampSaveData_WorkCollection) == 0x000008, "Wrong alignment on FPalBaseCampSaveData_WorkCollection");
static_assert(sizeof(FPalBaseCampSaveData_WorkCollection) == 0x000010, "Wrong size on FPalBaseCampSaveData_WorkCollection");

// ScriptStruct Pal.PalBaseCampSaveData_Module
// 0x0000 (0x0010 - 0x0010)
struct FPalBaseCampSaveData_Module final : public FPalBinaryMemory
{
};
static_assert(alignof(FPalBaseCampSaveData_Module) == 0x000008, "Wrong alignment on FPalBaseCampSaveData_Module");
static_assert(sizeof(FPalBaseCampSaveData_Module) == 0x000010, "Wrong size on FPalBaseCampSaveData_Module");

// ScriptStruct Pal.PalBaseCampSaveData
// 0x0070 (0x0080 - 0x0010)
struct FPalBaseCampSaveData final : public FPalBinaryMemory
{
public:
	struct FPalBaseCampSaveData_WorkerDirector    WorkerDirector;                                    // 0x0010(0x0010)(NativeAccessSpecifierPublic)
	struct FPalBaseCampSaveData_WorkCollection    WorkCollection;                                    // 0x0020(0x0010)(NativeAccessSpecifierPublic)
	TMap<EPalBaseCampModuleType, struct FPalBaseCampSaveData_Module> ModuleMap;                                         // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampSaveData) == 0x000008, "Wrong alignment on FPalBaseCampSaveData");
static_assert(sizeof(FPalBaseCampSaveData) == 0x000080, "Wrong size on FPalBaseCampSaveData");
static_assert(offsetof(FPalBaseCampSaveData, WorkerDirector) == 0x000010, "Member 'FPalBaseCampSaveData::WorkerDirector' has a wrong offset!");
static_assert(offsetof(FPalBaseCampSaveData, WorkCollection) == 0x000020, "Member 'FPalBaseCampSaveData::WorkCollection' has a wrong offset!");
static_assert(offsetof(FPalBaseCampSaveData, ModuleMap) == 0x000030, "Member 'FPalBaseCampSaveData::ModuleMap' has a wrong offset!");

// ScriptStruct Pal.PalDynamicItemSaveData
// 0x0028 (0x0038 - 0x0010)
struct FPalDynamicItemSaveData final : public FPalBinaryMemory
{
public:
	struct FPalDynamicItemId                      ID;                                                // 0x0010(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StaticItemId;                                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDynamicItemSaveData) == 0x000008, "Wrong alignment on FPalDynamicItemSaveData");
static_assert(sizeof(FPalDynamicItemSaveData) == 0x000038, "Wrong size on FPalDynamicItemSaveData");
static_assert(offsetof(FPalDynamicItemSaveData, ID) == 0x000010, "Member 'FPalDynamicItemSaveData::ID' has a wrong offset!");
static_assert(offsetof(FPalDynamicItemSaveData, StaticItemId) == 0x000030, "Member 'FPalDynamicItemSaveData::StaticItemId' has a wrong offset!");

// ScriptStruct Pal.PalCharacterSlotSaveData
// 0x0038 (0x0048 - 0x0010)
struct FPalCharacterSlotSaveData final : public FPalBinaryMemory
{
public:
	struct FPalInstanceID                         IndividualId;                                      // 0x0010(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalTribeID                                   PermissionTribeID;                                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265D[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCharacterSlotSaveData) == 0x000008, "Wrong alignment on FPalCharacterSlotSaveData");
static_assert(sizeof(FPalCharacterSlotSaveData) == 0x000048, "Wrong size on FPalCharacterSlotSaveData");
static_assert(offsetof(FPalCharacterSlotSaveData, IndividualId) == 0x000010, "Member 'FPalCharacterSlotSaveData::IndividualId' has a wrong offset!");
static_assert(offsetof(FPalCharacterSlotSaveData, PermissionTribeID) == 0x000040, "Member 'FPalCharacterSlotSaveData::PermissionTribeID' has a wrong offset!");

// ScriptStruct Pal.PalCharacterContainerSaveData
// 0x0018 (0x0028 - 0x0010)
struct FPalCharacterContainerSaveData final : public FPalBinaryMemory
{
public:
	bool                                          bReferenceSlot;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalCharacterSlotSaveData>      Slots;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterContainerSaveData) == 0x000008, "Wrong alignment on FPalCharacterContainerSaveData");
static_assert(sizeof(FPalCharacterContainerSaveData) == 0x000028, "Wrong size on FPalCharacterContainerSaveData");
static_assert(offsetof(FPalCharacterContainerSaveData, bReferenceSlot) == 0x000010, "Member 'FPalCharacterContainerSaveData::bReferenceSlot' has a wrong offset!");
static_assert(offsetof(FPalCharacterContainerSaveData, Slots) == 0x000018, "Member 'FPalCharacterContainerSaveData::Slots' has a wrong offset!");

// ScriptStruct Pal.PalGroupSaveData
// 0x0008 (0x0018 - 0x0010)
struct FPalGroupSaveData final : public FPalBinaryMemory
{
public:
	EPalGroupType                                 GroupType;                                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalGroupSaveData) == 0x000008, "Wrong alignment on FPalGroupSaveData");
static_assert(sizeof(FPalGroupSaveData) == 0x000018, "Wrong size on FPalGroupSaveData");
static_assert(offsetof(FPalGroupSaveData, GroupType) == 0x000010, "Member 'FPalGroupSaveData::GroupType' has a wrong offset!");

// ScriptStruct Pal.PalCharacterParameterStorageSaveData
// 0x0010 (0x0010 - 0x0000)
struct FPalCharacterParameterStorageSaveData final
{
public:
	TArray<struct FPalCharacterStoredParameterInfoSaveData> StoredParameterInfoSaveData;                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterParameterStorageSaveData) == 0x000008, "Wrong alignment on FPalCharacterParameterStorageSaveData");
static_assert(sizeof(FPalCharacterParameterStorageSaveData) == 0x000010, "Wrong size on FPalCharacterParameterStorageSaveData");
static_assert(offsetof(FPalCharacterParameterStorageSaveData, StoredParameterInfoSaveData) == 0x000000, "Member 'FPalCharacterParameterStorageSaveData::StoredParameterInfoSaveData' has a wrong offset!");

// ScriptStruct Pal.PalGameTimeSaveData
// 0x0010 (0x0010 - 0x0000)
struct FPalGameTimeSaveData final
{
public:
	int64                                         GameDateTimeTicks;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RealDateTimeTicks;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGameTimeSaveData) == 0x000008, "Wrong alignment on FPalGameTimeSaveData");
static_assert(sizeof(FPalGameTimeSaveData) == 0x000010, "Wrong size on FPalGameTimeSaveData");
static_assert(offsetof(FPalGameTimeSaveData, GameDateTimeTicks) == 0x000000, "Member 'FPalGameTimeSaveData::GameDateTimeTicks' has a wrong offset!");
static_assert(offsetof(FPalGameTimeSaveData, RealDateTimeTicks) == 0x000008, "Member 'FPalGameTimeSaveData::RealDateTimeTicks' has a wrong offset!");

// ScriptStruct Pal.PalBossSpawnerSaveData
// 0x0050 (0x0050 - 0x0000)
struct FPalBossSpawnerSaveData final
{
public:
	TMap<class FName, bool>                       RespawnDisableFlag;                                // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBossSpawnerSaveData) == 0x000008, "Wrong alignment on FPalBossSpawnerSaveData");
static_assert(sizeof(FPalBossSpawnerSaveData) == 0x000050, "Wrong size on FPalBossSpawnerSaveData");
static_assert(offsetof(FPalBossSpawnerSaveData, RespawnDisableFlag) == 0x000000, "Member 'FPalBossSpawnerSaveData::RespawnDisableFlag' has a wrong offset!");

// ScriptStruct Pal.PalWorldSaveData
// 0x03F0 (0x03F0 - 0x0000)
struct FPalWorldSaveData final
{
public:
	class FString                                 WorldName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FPalInstanceID, struct FPalIndividualCharacterSaveParameterSaveData> CharacterSaveParameterMap;                         // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FPalMapObjectSaveData>          MapObjectSaveData;                                 // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FPalCellCoord, struct FPalFoliageGridSaveData> FoliageGridSaveDataMap;                            // 0x0070(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FPalMapObjectSpawnerSaveData> MapObjectSpawnerSaveData;                          // 0x00C0(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FPalStageInstanceId, struct FPalMapObjectSpawnerInStageSaveData> MapObjectSpawnerInStageSaveData;                   // 0x0110(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FPalWorkSaveData>               WorkSaveData;                                      // 0x0160(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FPalBaseCampSaveData> BaseCampSaveData;                                  // 0x0170(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FPalContainerId, struct FPalItemContainerSaveData> ItemContainerSaveData;                             // 0x01C0(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FPalDynamicItemSaveData>        DynamicItemSaveData;                               // 0x0210(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FPalContainerId, struct FPalCharacterContainerSaveData> CharacterContainerSaveData;                        // 0x0220(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FPalGroupSaveData>  GroupSaveDataMap;                                  // 0x0270(0x0050)(NativeAccessSpecifierPublic)
	struct FPalCharacterParameterStorageSaveData  CharacterParameterStorageSaveData;                 // 0x02C0(0x0010)(NativeAccessSpecifierPublic)
	struct FPalGameTimeSaveData                   GameTimeSaveData;                                  // 0x02D0(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPalBossSpawnerSaveData                BossSpawnerSaveData;                               // 0x02E0(0x0050)(NativeAccessSpecifierPublic)
	struct FPalEnemyCampSaveData                  EnemyCampSaveData;                                 // 0x0330(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FPalDungeonPointMarkerSaveData> DungeonPointMarkerSaveData;                        // 0x0380(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDungeonSaveData>            DungeonSaveData;                                   // 0x0390(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FPalInvaderSaveData> InvaderSaveData;                                   // 0x03A0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldSaveData) == 0x000008, "Wrong alignment on FPalWorldSaveData");
static_assert(sizeof(FPalWorldSaveData) == 0x0003F0, "Wrong size on FPalWorldSaveData");
static_assert(offsetof(FPalWorldSaveData, WorldName) == 0x000000, "Member 'FPalWorldSaveData::WorldName' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, CharacterSaveParameterMap) == 0x000010, "Member 'FPalWorldSaveData::CharacterSaveParameterMap' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, MapObjectSaveData) == 0x000060, "Member 'FPalWorldSaveData::MapObjectSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, FoliageGridSaveDataMap) == 0x000070, "Member 'FPalWorldSaveData::FoliageGridSaveDataMap' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, MapObjectSpawnerSaveData) == 0x0000C0, "Member 'FPalWorldSaveData::MapObjectSpawnerSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, MapObjectSpawnerInStageSaveData) == 0x000110, "Member 'FPalWorldSaveData::MapObjectSpawnerInStageSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, WorkSaveData) == 0x000160, "Member 'FPalWorldSaveData::WorkSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, BaseCampSaveData) == 0x000170, "Member 'FPalWorldSaveData::BaseCampSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, ItemContainerSaveData) == 0x0001C0, "Member 'FPalWorldSaveData::ItemContainerSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, DynamicItemSaveData) == 0x000210, "Member 'FPalWorldSaveData::DynamicItemSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, CharacterContainerSaveData) == 0x000220, "Member 'FPalWorldSaveData::CharacterContainerSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, GroupSaveDataMap) == 0x000270, "Member 'FPalWorldSaveData::GroupSaveDataMap' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, CharacterParameterStorageSaveData) == 0x0002C0, "Member 'FPalWorldSaveData::CharacterParameterStorageSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, GameTimeSaveData) == 0x0002D0, "Member 'FPalWorldSaveData::GameTimeSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, BossSpawnerSaveData) == 0x0002E0, "Member 'FPalWorldSaveData::BossSpawnerSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, EnemyCampSaveData) == 0x000330, "Member 'FPalWorldSaveData::EnemyCampSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, DungeonPointMarkerSaveData) == 0x000380, "Member 'FPalWorldSaveData::DungeonPointMarkerSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, DungeonSaveData) == 0x000390, "Member 'FPalWorldSaveData::DungeonSaveData' has a wrong offset!");
static_assert(offsetof(FPalWorldSaveData, InvaderSaveData) == 0x0003A0, "Member 'FPalWorldSaveData::InvaderSaveData' has a wrong offset!");

// ScriptStruct Pal.StatusDynamicParameter
// 0x000C (0x000C - 0x0000)
struct FStatusDynamicParameter final
{
public:
	int32                                         GeneralIndex;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GeneralName;                                       // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusDynamicParameter) == 0x000004, "Wrong alignment on FStatusDynamicParameter");
static_assert(sizeof(FStatusDynamicParameter) == 0x00000C, "Wrong size on FStatusDynamicParameter");
static_assert(offsetof(FStatusDynamicParameter, GeneralIndex) == 0x000000, "Member 'FStatusDynamicParameter::GeneralIndex' has a wrong offset!");
static_assert(offsetof(FStatusDynamicParameter, GeneralName) == 0x000004, "Member 'FStatusDynamicParameter::GeneralName' has a wrong offset!");

// ScriptStruct Pal.PalTechnologyDataTableRowBase
// 0x0038 (0x0040 - 0x0008)
struct FPalTechnologyDataTableRowBase : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Description;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireBossDefeatNum;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequireTechnology;                                 // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBossTechnology;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2660[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelCap;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2661[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalTechnologyDataTableRowBase) == 0x000008, "Wrong alignment on FPalTechnologyDataTableRowBase");
static_assert(sizeof(FPalTechnologyDataTableRowBase) == 0x000040, "Wrong size on FPalTechnologyDataTableRowBase");
static_assert(offsetof(FPalTechnologyDataTableRowBase, Name) == 0x000008, "Member 'FPalTechnologyDataTableRowBase::Name' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, Description) == 0x000010, "Member 'FPalTechnologyDataTableRowBase::Description' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, IconName) == 0x000018, "Member 'FPalTechnologyDataTableRowBase::IconName' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, RequireBossDefeatNum) == 0x000020, "Member 'FPalTechnologyDataTableRowBase::RequireBossDefeatNum' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, RequireTechnology) == 0x000024, "Member 'FPalTechnologyDataTableRowBase::RequireTechnology' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, IsBossTechnology) == 0x00002C, "Member 'FPalTechnologyDataTableRowBase::IsBossTechnology' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, LevelCap) == 0x000030, "Member 'FPalTechnologyDataTableRowBase::LevelCap' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, Tier) == 0x000034, "Member 'FPalTechnologyDataTableRowBase::Tier' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataTableRowBase, Cost) == 0x000038, "Member 'FPalTechnologyDataTableRowBase::Cost' has a wrong offset!");

// ScriptStruct Pal.PalCheckStuckInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalCheckStuckInfo final
{
public:
	uint8                                         Pad_2662[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCheckStuckInfo) == 0x000008, "Wrong alignment on FPalCheckStuckInfo");
static_assert(sizeof(FPalCheckStuckInfo) == 0x000020, "Wrong size on FPalCheckStuckInfo");

// ScriptStruct Pal.PalTechnologyRecipeUnlockDataTableRow
// 0x0020 (0x0060 - 0x0040)
struct FPalTechnologyRecipeUnlockDataTableRow final : public FPalTechnologyDataTableRowBase
{
public:
	TArray<class FName>                           UnlockBuildObjects;                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnlockItemRecipes;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalTechnologyRecipeUnlockDataTableRow) == 0x000008, "Wrong alignment on FPalTechnologyRecipeUnlockDataTableRow");
static_assert(sizeof(FPalTechnologyRecipeUnlockDataTableRow) == 0x000060, "Wrong size on FPalTechnologyRecipeUnlockDataTableRow");
static_assert(offsetof(FPalTechnologyRecipeUnlockDataTableRow, UnlockBuildObjects) == 0x000040, "Member 'FPalTechnologyRecipeUnlockDataTableRow::UnlockBuildObjects' has a wrong offset!");
static_assert(offsetof(FPalTechnologyRecipeUnlockDataTableRow, UnlockItemRecipes) == 0x000050, "Member 'FPalTechnologyRecipeUnlockDataTableRow::UnlockItemRecipes' has a wrong offset!");

// ScriptStruct Pal.PalTechnologyDataSet
// 0x0018 (0x0018 - 0x0000)
struct FPalTechnologyDataSet final
{
public:
	class UDataTable*                             RecipeUnlockDataTable;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TechnologyNameTable;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TechnologyDescTable;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalTechnologyDataSet) == 0x000008, "Wrong alignment on FPalTechnologyDataSet");
static_assert(sizeof(FPalTechnologyDataSet) == 0x000018, "Wrong size on FPalTechnologyDataSet");
static_assert(offsetof(FPalTechnologyDataSet, RecipeUnlockDataTable) == 0x000000, "Member 'FPalTechnologyDataSet::RecipeUnlockDataTable' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataSet, TechnologyNameTable) == 0x000008, "Member 'FPalTechnologyDataSet::TechnologyNameTable' has a wrong offset!");
static_assert(offsetof(FPalTechnologyDataSet, TechnologyDescTable) == 0x000010, "Member 'FPalTechnologyDataSet::TechnologyDescTable' has a wrong offset!");

// ScriptStruct Pal.PalUIActionBindData
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FPalUIActionBindData final
{
public:
	uint8                                         Pad_2663[0x4];                                     // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUIActionBindData) == 0x000004, "Wrong alignment on FPalUIActionBindData");
static_assert(sizeof(FPalUIActionBindData) == 0x000004, "Wrong size on FPalUIActionBindData");

// ScriptStruct Pal.PalRaidBossSpawnerInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FPalRaidBossSpawnerInfo final
{
public:
	uint8                                         Pad_2664[0x60];                                    // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalRaidBossSpawnerInfo) == 0x000010, "Wrong alignment on FPalRaidBossSpawnerInfo");
static_assert(sizeof(FPalRaidBossSpawnerInfo) == 0x000060, "Wrong size on FPalRaidBossSpawnerInfo");

// ScriptStruct Pal.PalBaseCampTaskCheckedData
// 0x0060 (0x0060 - 0x0000)
struct FPalBaseCampTaskCheckedData final
{
public:
	int32                                         CompletedTaskNum;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2665[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      buildObjectNumMap;                                 // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         WorkerNum;                                         // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2666[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampTaskCheckedData) == 0x000008, "Wrong alignment on FPalBaseCampTaskCheckedData");
static_assert(sizeof(FPalBaseCampTaskCheckedData) == 0x000060, "Wrong size on FPalBaseCampTaskCheckedData");
static_assert(offsetof(FPalBaseCampTaskCheckedData, CompletedTaskNum) == 0x000000, "Member 'FPalBaseCampTaskCheckedData::CompletedTaskNum' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskCheckedData, buildObjectNumMap) == 0x000008, "Member 'FPalBaseCampTaskCheckedData::buildObjectNumMap' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskCheckedData, WorkerNum) == 0x000058, "Member 'FPalBaseCampTaskCheckedData::WorkerNum' has a wrong offset!");

// ScriptStruct Pal.PalBossBattleInstanceModelCreateParameter
// 0x01A0 (0x01A0 - 0x0000)
struct alignas(0x10) FPalBossBattleInstanceModelCreateParameter final
{
public:
	uint8                                         Pad_2667[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   IntroCutsceneActor;                                // 0x0008(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        ReservedDataLayerAsset;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           BGMAudioEvent;                                     // 0x0040(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APalBossTower*                          BossTower;                                         // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2668[0x128];                                   // 0x0078(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBossBattleInstanceModelCreateParameter) == 0x000010, "Wrong alignment on FPalBossBattleInstanceModelCreateParameter");
static_assert(sizeof(FPalBossBattleInstanceModelCreateParameter) == 0x0001A0, "Wrong size on FPalBossBattleInstanceModelCreateParameter");
static_assert(offsetof(FPalBossBattleInstanceModelCreateParameter, IntroCutsceneActor) == 0x000008, "Member 'FPalBossBattleInstanceModelCreateParameter::IntroCutsceneActor' has a wrong offset!");
static_assert(offsetof(FPalBossBattleInstanceModelCreateParameter, ReservedDataLayerAsset) == 0x000038, "Member 'FPalBossBattleInstanceModelCreateParameter::ReservedDataLayerAsset' has a wrong offset!");
static_assert(offsetof(FPalBossBattleInstanceModelCreateParameter, BGMAudioEvent) == 0x000040, "Member 'FPalBossBattleInstanceModelCreateParameter::BGMAudioEvent' has a wrong offset!");
static_assert(offsetof(FPalBossBattleInstanceModelCreateParameter, BossTower) == 0x000070, "Member 'FPalBossBattleInstanceModelCreateParameter::BossTower' has a wrong offset!");

// ScriptStruct Pal.PalNetworkContainerParameter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalNetworkContainerParameter final
{
public:
	uint8                                         Pad_2669[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkContainerParameter) == 0x000008, "Wrong alignment on FPalNetworkContainerParameter");
static_assert(sizeof(FPalNetworkContainerParameter) == 0x000020, "Wrong size on FPalNetworkContainerParameter");

// ScriptStruct Pal.PalLocationUIData
// 0x0040 (0x0040 - 0x0000)
struct FPalLocationUIData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalUICompassIconBase>      CompassIconWidget;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayLength;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_266A[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalLocationUIData) == 0x000008, "Wrong alignment on FPalLocationUIData");
static_assert(sizeof(FPalLocationUIData) == 0x000040, "Wrong size on FPalLocationUIData");
static_assert(offsetof(FPalLocationUIData, Icon) == 0x000000, "Member 'FPalLocationUIData::Icon' has a wrong offset!");
static_assert(offsetof(FPalLocationUIData, CompassIconWidget) == 0x000030, "Member 'FPalLocationUIData::CompassIconWidget' has a wrong offset!");
static_assert(offsetof(FPalLocationUIData, DisplayLength) == 0x000038, "Member 'FPalLocationUIData::DisplayLength' has a wrong offset!");

// ScriptStruct Pal.PalCalcCharacterDamageInfo
// 0x0014 (0x0014 - 0x0000)
struct FPalCalcCharacterDamageInfo final
{
public:
	float                                         OtomoRate;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenderLevel;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenderDefence;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               DefenderElementType1;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               DefenderElementType2;                              // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_266B[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElementStatusMultiplay;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCalcCharacterDamageInfo) == 0x000004, "Wrong alignment on FPalCalcCharacterDamageInfo");
static_assert(sizeof(FPalCalcCharacterDamageInfo) == 0x000014, "Wrong size on FPalCalcCharacterDamageInfo");
static_assert(offsetof(FPalCalcCharacterDamageInfo, OtomoRate) == 0x000000, "Member 'FPalCalcCharacterDamageInfo::OtomoRate' has a wrong offset!");
static_assert(offsetof(FPalCalcCharacterDamageInfo, DefenderLevel) == 0x000004, "Member 'FPalCalcCharacterDamageInfo::DefenderLevel' has a wrong offset!");
static_assert(offsetof(FPalCalcCharacterDamageInfo, DefenderDefence) == 0x000008, "Member 'FPalCalcCharacterDamageInfo::DefenderDefence' has a wrong offset!");
static_assert(offsetof(FPalCalcCharacterDamageInfo, DefenderElementType1) == 0x00000C, "Member 'FPalCalcCharacterDamageInfo::DefenderElementType1' has a wrong offset!");
static_assert(offsetof(FPalCalcCharacterDamageInfo, DefenderElementType2) == 0x00000D, "Member 'FPalCalcCharacterDamageInfo::DefenderElementType2' has a wrong offset!");
static_assert(offsetof(FPalCalcCharacterDamageInfo, ElementStatusMultiplay) == 0x000010, "Member 'FPalCalcCharacterDamageInfo::ElementStatusMultiplay' has a wrong offset!");

// ScriptStruct Pal.PalDynamicItemDisposeReserveInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FPalDynamicItemDisposeReserveInfo final
{
public:
	uint8                                         Pad_266C[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDynamicItemDisposeReserveInfo) == 0x000004, "Wrong alignment on FPalDynamicItemDisposeReserveInfo");
static_assert(sizeof(FPalDynamicItemDisposeReserveInfo) == 0x000020, "Wrong size on FPalDynamicItemDisposeReserveInfo");

// ScriptStruct Pal.PalFoliageInstallDataSet
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FPalFoliageInstallDataSet final
{
public:
	uint8                                         Pad_266D[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFoliageInstallDataSet) == 0x000008, "Wrong alignment on FPalFoliageInstallDataSet");
static_assert(sizeof(FPalFoliageInstallDataSet) == 0x000050, "Wrong size on FPalFoliageInstallDataSet");

// ScriptStruct Pal.PalMakeDamageInfo
// 0x0190 (0x0190 - 0x0000)
struct FPalMakeDamageInfo final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Defender;                                          // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        HitComponent;                                      // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaCategory                              Category;                                          // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               Element;                                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAttackType                                AttackType;                                        // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWeaponType                                WeaponType;                                        // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeanBack;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlow;                                            // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_266E[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlowVelocity;                                      // 0x0040(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0058(0x00E8)(BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPalAdditionalEffectType                      EffectType1;                                       // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_266F[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue1;                                      // 0x0144(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValueEx1;                                    // 0x0148(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAdditionalEffectType                      EffectType2;                                       // 0x014C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2670[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue2;                                      // 0x0150(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValueEx2;                                    // 0x0154(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 HitFoliageIndex;                                   // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SneakAttackRate;                                   // 0x0168(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRatePerCollision;                            // 0x016C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalSpecialAttackRateInfo>      SpecialAttackRateInfos;                            // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EPalDamageAnimationReactionType               DamageReactionAnimationType;                       // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackableToFriend;                               // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoDamage;                                          // 0x0182(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreShield;                                      // 0x0183(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UIDamageTextOverride_DoubleRegist;                 // 0x0184(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPlayerDamageCameraShakeCategory           CameraShake;                                       // 0x0185(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalSizeType                                  ForceRagdollSize;                                  // 0x0186(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2671[0x1];                                     // 0x0187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverrideNetworkOwner;                              // 0x0188(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMakeDamageInfo) == 0x000008, "Wrong alignment on FPalMakeDamageInfo");
static_assert(sizeof(FPalMakeDamageInfo) == 0x000190, "Wrong size on FPalMakeDamageInfo");
static_assert(offsetof(FPalMakeDamageInfo, Attacker) == 0x000000, "Member 'FPalMakeDamageInfo::Attacker' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, Defender) == 0x000008, "Member 'FPalMakeDamageInfo::Defender' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, HitComponent) == 0x000010, "Member 'FPalMakeDamageInfo::HitComponent' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, Power) == 0x000018, "Member 'FPalMakeDamageInfo::Power' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, Category) == 0x00001C, "Member 'FPalMakeDamageInfo::Category' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, Element) == 0x00001D, "Member 'FPalMakeDamageInfo::Element' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, AttackType) == 0x00001E, "Member 'FPalMakeDamageInfo::AttackType' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, WeaponType) == 0x00001F, "Member 'FPalMakeDamageInfo::WeaponType' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, HitLocation) == 0x000020, "Member 'FPalMakeDamageInfo::HitLocation' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, IsLeanBack) == 0x000038, "Member 'FPalMakeDamageInfo::IsLeanBack' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, IsBlow) == 0x000039, "Member 'FPalMakeDamageInfo::IsBlow' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, BlowVelocity) == 0x000040, "Member 'FPalMakeDamageInfo::BlowVelocity' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, HitInfo) == 0x000058, "Member 'FPalMakeDamageInfo::HitInfo' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, EffectType1) == 0x000140, "Member 'FPalMakeDamageInfo::EffectType1' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, EffectValue1) == 0x000144, "Member 'FPalMakeDamageInfo::EffectValue1' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, EffectValueEx1) == 0x000148, "Member 'FPalMakeDamageInfo::EffectValueEx1' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, EffectType2) == 0x00014C, "Member 'FPalMakeDamageInfo::EffectType2' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, EffectValue2) == 0x000150, "Member 'FPalMakeDamageInfo::EffectValue2' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, EffectValueEx2) == 0x000154, "Member 'FPalMakeDamageInfo::EffectValueEx2' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, HitFoliageIndex) == 0x000158, "Member 'FPalMakeDamageInfo::HitFoliageIndex' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, SneakAttackRate) == 0x000168, "Member 'FPalMakeDamageInfo::SneakAttackRate' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, DamageRatePerCollision) == 0x00016C, "Member 'FPalMakeDamageInfo::DamageRatePerCollision' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, SpecialAttackRateInfos) == 0x000170, "Member 'FPalMakeDamageInfo::SpecialAttackRateInfos' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, DamageReactionAnimationType) == 0x000180, "Member 'FPalMakeDamageInfo::DamageReactionAnimationType' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, bAttackableToFriend) == 0x000181, "Member 'FPalMakeDamageInfo::bAttackableToFriend' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, NoDamage) == 0x000182, "Member 'FPalMakeDamageInfo::NoDamage' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, IgnoreShield) == 0x000183, "Member 'FPalMakeDamageInfo::IgnoreShield' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, UIDamageTextOverride_DoubleRegist) == 0x000184, "Member 'FPalMakeDamageInfo::UIDamageTextOverride_DoubleRegist' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, CameraShake) == 0x000185, "Member 'FPalMakeDamageInfo::CameraShake' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, ForceRagdollSize) == 0x000186, "Member 'FPalMakeDamageInfo::ForceRagdollSize' has a wrong offset!");
static_assert(offsetof(FPalMakeDamageInfo, OverrideNetworkOwner) == 0x000188, "Member 'FPalMakeDamageInfo::OverrideNetworkOwner' has a wrong offset!");

// ScriptStruct Pal.PalGuildPlayerInfoRepInfo
// 0x0034 (0x0040 - 0x000C)
struct FPalGuildPlayerInfoRepInfo final : public FFastArraySerializerItem
{
public:
	struct FGuid                                  PlayerUId;                                         // 0x000C(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2672[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalGuildPlayerInfo                    PlayerInfo;                                        // 0x0020(0x0020)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGuildPlayerInfoRepInfo) == 0x000008, "Wrong alignment on FPalGuildPlayerInfoRepInfo");
static_assert(sizeof(FPalGuildPlayerInfoRepInfo) == 0x000040, "Wrong size on FPalGuildPlayerInfoRepInfo");
static_assert(offsetof(FPalGuildPlayerInfoRepInfo, PlayerUId) == 0x00000C, "Member 'FPalGuildPlayerInfoRepInfo::PlayerUId' has a wrong offset!");
static_assert(offsetof(FPalGuildPlayerInfoRepInfo, PlayerInfo) == 0x000020, "Member 'FPalGuildPlayerInfoRepInfo::PlayerInfo' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_PalShopCreateData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_PalShopCreateData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_PalShopCreateData) == 0x000004, "Wrong alignment on FPalDataTableRowName_PalShopCreateData");
static_assert(sizeof(FPalDataTableRowName_PalShopCreateData) == 0x000008, "Wrong size on FPalDataTableRowName_PalShopCreateData");
static_assert(offsetof(FPalDataTableRowName_PalShopCreateData, Key) == 0x000000, "Member 'FPalDataTableRowName_PalShopCreateData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_ItemShopLotteryData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_ItemShopLotteryData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_ItemShopLotteryData) == 0x000004, "Wrong alignment on FPalDataTableRowName_ItemShopLotteryData");
static_assert(sizeof(FPalDataTableRowName_ItemShopLotteryData) == 0x000008, "Wrong size on FPalDataTableRowName_ItemShopLotteryData");
static_assert(offsetof(FPalDataTableRowName_ItemShopLotteryData, Key) == 0x000000, "Member 'FPalDataTableRowName_ItemShopLotteryData::Key' has a wrong offset!");

// ScriptStruct Pal.PalLocalizedTextData
// 0x0018 (0x0020 - 0x0008)
struct FPalLocalizedTextData final : public FTableRowBase
{
public:
	class FText                                   TextData;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLocalizedTextData) == 0x000008, "Wrong alignment on FPalLocalizedTextData");
static_assert(sizeof(FPalLocalizedTextData) == 0x000020, "Wrong size on FPalLocalizedTextData");
static_assert(offsetof(FPalLocalizedTextData, TextData) == 0x000008, "Member 'FPalLocalizedTextData::TextData' has a wrong offset!");

// ScriptStruct Pal.PalVisualEffectDynamicParameterFloat
// 0x000C (0x000C - 0x0000)
struct FPalVisualEffectDynamicParameterFloat final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalVisualEffectDynamicParameterFloat) == 0x000004, "Wrong alignment on FPalVisualEffectDynamicParameterFloat");
static_assert(sizeof(FPalVisualEffectDynamicParameterFloat) == 0x00000C, "Wrong size on FPalVisualEffectDynamicParameterFloat");
static_assert(offsetof(FPalVisualEffectDynamicParameterFloat, Name) == 0x000000, "Member 'FPalVisualEffectDynamicParameterFloat::Name' has a wrong offset!");
static_assert(offsetof(FPalVisualEffectDynamicParameterFloat, Value) == 0x000008, "Member 'FPalVisualEffectDynamicParameterFloat::Value' has a wrong offset!");

// ScriptStruct Pal.PalVisualEffectDynamicParameter
// 0x0010 (0x0010 - 0x0000)
struct FPalVisualEffectDynamicParameter final
{
public:
	TArray<struct FPalVisualEffectDynamicParameterFloat> FloatValues;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalVisualEffectDynamicParameter) == 0x000008, "Wrong alignment on FPalVisualEffectDynamicParameter");
static_assert(sizeof(FPalVisualEffectDynamicParameter) == 0x000010, "Wrong size on FPalVisualEffectDynamicParameter");
static_assert(offsetof(FPalVisualEffectDynamicParameter, FloatValues) == 0x000000, "Member 'FPalVisualEffectDynamicParameter::FloatValues' has a wrong offset!");

// ScriptStruct Pal.PalLocationRepInfo
// 0x001C (0x0028 - 0x000C)
struct FPalLocationRepInfo final : public FFastArraySerializerItem
{
public:
	struct FGuid                                  ID;                                                // 0x000C(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2673[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalLocationBase*                       Location;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLocationRepInfo) == 0x000008, "Wrong alignment on FPalLocationRepInfo");
static_assert(sizeof(FPalLocationRepInfo) == 0x000028, "Wrong size on FPalLocationRepInfo");
static_assert(offsetof(FPalLocationRepInfo, ID) == 0x00000C, "Member 'FPalLocationRepInfo::ID' has a wrong offset!");
static_assert(offsetof(FPalLocationRepInfo, Location) == 0x000020, "Member 'FPalLocationRepInfo::Location' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampTaskDataSet_TableRow
// 0x0070 (0x0078 - 0x0008)
struct FPalBaseCampTaskDataSet_TableRow final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkerNum;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorkerNum_IncompleteMsgID;                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorkerNum_CompleteMsgID;                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject1;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildObjectNum1;                                   // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject1_IncompleteMsgID;                      // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject1_CompleteMsgID;                        // 0x0034(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject2;                                      // 0x003C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildObjectNum2;                                   // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject2_IncompleteMsgID;                      // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject2_CompleteMsgID;                        // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject3;                                      // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildObjectNum3;                                   // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject3_IncompleteMsgID;                      // 0x0064(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildObject3_CompleteMsgID;                        // 0x006C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2674[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampTaskDataSet_TableRow) == 0x000008, "Wrong alignment on FPalBaseCampTaskDataSet_TableRow");
static_assert(sizeof(FPalBaseCampTaskDataSet_TableRow) == 0x000078, "Wrong size on FPalBaseCampTaskDataSet_TableRow");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, Level) == 0x000008, "Member 'FPalBaseCampTaskDataSet_TableRow::Level' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, WorkerNum) == 0x00000C, "Member 'FPalBaseCampTaskDataSet_TableRow::WorkerNum' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, WorkerNum_IncompleteMsgID) == 0x000010, "Member 'FPalBaseCampTaskDataSet_TableRow::WorkerNum_IncompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, WorkerNum_CompleteMsgID) == 0x000018, "Member 'FPalBaseCampTaskDataSet_TableRow::WorkerNum_CompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject1) == 0x000020, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject1' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObjectNum1) == 0x000028, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObjectNum1' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject1_IncompleteMsgID) == 0x00002C, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject1_IncompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject1_CompleteMsgID) == 0x000034, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject1_CompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject2) == 0x00003C, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject2' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObjectNum2) == 0x000044, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObjectNum2' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject2_IncompleteMsgID) == 0x000048, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject2_IncompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject2_CompleteMsgID) == 0x000050, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject2_CompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject3) == 0x000058, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject3' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObjectNum3) == 0x000060, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObjectNum3' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject3_IncompleteMsgID) == 0x000064, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject3_IncompleteMsgID' has a wrong offset!");
static_assert(offsetof(FPalBaseCampTaskDataSet_TableRow, BuildObject3_CompleteMsgID) == 0x00006C, "Member 'FPalBaseCampTaskDataSet_TableRow::BuildObject3_CompleteMsgID' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalWorkAssignInfo final
{
public:
	int32                                         LocationIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2675[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalWorkAssign*                         WorkAssign;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkAssignInfo) == 0x000008, "Wrong alignment on FPalWorkAssignInfo");
static_assert(sizeof(FPalWorkAssignInfo) == 0x000010, "Wrong size on FPalWorkAssignInfo");
static_assert(offsetof(FPalWorkAssignInfo, LocationIndex) == 0x000000, "Member 'FPalWorkAssignInfo::LocationIndex' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignInfo, WorkAssign) == 0x000008, "Member 'FPalWorkAssignInfo::WorkAssign' has a wrong offset!");

// ScriptStruct Pal.PalFastWorkAssignRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FPalFastWorkAssignRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalWorkAssignRepInfo>          Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2676[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFastWorkAssignRepInfoArray) == 0x000008, "Wrong alignment on FPalFastWorkAssignRepInfoArray");
static_assert(sizeof(FPalFastWorkAssignRepInfoArray) == 0x000148, "Wrong size on FPalFastWorkAssignRepInfoArray");
static_assert(offsetof(FPalFastWorkAssignRepInfoArray, Items) == 0x000108, "Member 'FPalFastWorkAssignRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignLocalLocation
// 0x0030 (0x0030 - 0x0000)
struct FPalWorkAssignLocalLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FacingDirection;                                   // 0x0018(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkAssignLocalLocation) == 0x000008, "Wrong alignment on FPalWorkAssignLocalLocation");
static_assert(sizeof(FPalWorkAssignLocalLocation) == 0x000030, "Wrong size on FPalWorkAssignLocalLocation");
static_assert(offsetof(FPalWorkAssignLocalLocation, Location) == 0x000000, "Member 'FPalWorkAssignLocalLocation::Location' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignLocalLocation, FacingDirection) == 0x000018, "Member 'FPalWorkAssignLocalLocation::FacingDirection' has a wrong offset!");

// ScriptStruct Pal.PalNPCTalkData
// 0x0058 (0x0058 - 0x0000)
struct FPalNPCTalkData final
{
public:
	EPalNPCTalkCommand                            TalkCommand;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2677[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MessageIDList;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ChoiceMessageIDList;                               // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   TalkerNameID;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomFuncName;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCloseWhenCalledCustomFunc;                       // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2678[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CustomFuncParam;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalNPCTalkSelectedChoiceCommandData> SelectedChoiceCommandDataList;                     // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCTalkData) == 0x000008, "Wrong alignment on FPalNPCTalkData");
static_assert(sizeof(FPalNPCTalkData) == 0x000058, "Wrong size on FPalNPCTalkData");
static_assert(offsetof(FPalNPCTalkData, TalkCommand) == 0x000000, "Member 'FPalNPCTalkData::TalkCommand' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkData, MessageIDList) == 0x000008, "Member 'FPalNPCTalkData::MessageIDList' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkData, ChoiceMessageIDList) == 0x000018, "Member 'FPalNPCTalkData::ChoiceMessageIDList' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkData, TalkerNameID) == 0x000028, "Member 'FPalNPCTalkData::TalkerNameID' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkData, CustomFuncName) == 0x000030, "Member 'FPalNPCTalkData::CustomFuncName' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkData, IsCloseWhenCalledCustomFunc) == 0x000038, "Member 'FPalNPCTalkData::IsCloseWhenCalledCustomFunc' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkData, CustomFuncParam) == 0x000040, "Member 'FPalNPCTalkData::CustomFuncParam' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkData, SelectedChoiceCommandDataList) == 0x000048, "Member 'FPalNPCTalkData::SelectedChoiceCommandDataList' has a wrong offset!");

// ScriptStruct Pal.PalNPCTalkDataTableRow
// 0x0010 (0x0018 - 0x0008)
struct FPalNPCTalkDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FPalNPCTalkData>                TalkData;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCTalkDataTableRow) == 0x000008, "Wrong alignment on FPalNPCTalkDataTableRow");
static_assert(sizeof(FPalNPCTalkDataTableRow) == 0x000018, "Wrong size on FPalNPCTalkDataTableRow");
static_assert(offsetof(FPalNPCTalkDataTableRow, TalkData) == 0x000008, "Member 'FPalNPCTalkDataTableRow::TalkData' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignDefineData
// 0x0038 (0x0038 - 0x0000)
struct FPalWorkAssignDefineData final
{
public:
	TArray<EPalGenusCategoryType>                 GenusCategories;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EPalElementType>                       ElementTypes;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EPalWorkSuitability                           WorkSuitability;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2679[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkSuitabilityRank;                               // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerWorkable;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorkType                                  WorkType;                                          // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalActionType                                ActionType;                                        // 0x002A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267A[0x1];                                     // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkerMaxNum;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AffectSanityValue;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267B[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorkAssignDefineData) == 0x000008, "Wrong alignment on FPalWorkAssignDefineData");
static_assert(sizeof(FPalWorkAssignDefineData) == 0x000038, "Wrong size on FPalWorkAssignDefineData");
static_assert(offsetof(FPalWorkAssignDefineData, GenusCategories) == 0x000000, "Member 'FPalWorkAssignDefineData::GenusCategories' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, ElementTypes) == 0x000010, "Member 'FPalWorkAssignDefineData::ElementTypes' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, WorkSuitability) == 0x000020, "Member 'FPalWorkAssignDefineData::WorkSuitability' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, WorkSuitabilityRank) == 0x000024, "Member 'FPalWorkAssignDefineData::WorkSuitabilityRank' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, bPlayerWorkable) == 0x000028, "Member 'FPalWorkAssignDefineData::bPlayerWorkable' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, WorkType) == 0x000029, "Member 'FPalWorkAssignDefineData::WorkType' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, ActionType) == 0x00002A, "Member 'FPalWorkAssignDefineData::ActionType' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, WorkerMaxNum) == 0x00002C, "Member 'FPalWorkAssignDefineData::WorkerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineData, AffectSanityValue) == 0x000030, "Member 'FPalWorkAssignDefineData::AffectSanityValue' has a wrong offset!");

// ScriptStruct Pal.PalWorldMapUIRegionData
// 0x0058 (0x0058 - 0x0000)
struct FPalWorldMapUIRegionData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              blockSize;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GridPosition;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RegionNameMsgId;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldMapUIRegionData) == 0x000008, "Wrong alignment on FPalWorldMapUIRegionData");
static_assert(sizeof(FPalWorldMapUIRegionData) == 0x000058, "Wrong size on FPalWorldMapUIRegionData");
static_assert(offsetof(FPalWorldMapUIRegionData, Texture) == 0x000000, "Member 'FPalWorldMapUIRegionData::Texture' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIRegionData, blockSize) == 0x000030, "Member 'FPalWorldMapUIRegionData::blockSize' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIRegionData, GridPosition) == 0x000040, "Member 'FPalWorldMapUIRegionData::GridPosition' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIRegionData, RegionNameMsgId) == 0x000050, "Member 'FPalWorldMapUIRegionData::RegionNameMsgId' has a wrong offset!");

// ScriptStruct Pal.PalWorldMapUIDataTableRow
// 0x00D0 (0x00D8 - 0x0008)
struct FPalWorldMapUIDataTableRow final : public FTableRowBase
{
public:
	struct FVector2D                              MinMapTextureBlockSize;                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapBlockNum;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LandScapeRealPositionMin;                          // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LandScapeRealPositionMax;                          // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPalWorldMapUIRegionData> TextureDataMap;                                    // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DefaultMaskTexture;                                // 0x00A8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldMapUIDataTableRow) == 0x000008, "Wrong alignment on FPalWorldMapUIDataTableRow");
static_assert(sizeof(FPalWorldMapUIDataTableRow) == 0x0000D8, "Wrong size on FPalWorldMapUIDataTableRow");
static_assert(offsetof(FPalWorldMapUIDataTableRow, MinMapTextureBlockSize) == 0x000008, "Member 'FPalWorldMapUIDataTableRow::MinMapTextureBlockSize' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIDataTableRow, MapBlockNum) == 0x000018, "Member 'FPalWorldMapUIDataTableRow::MapBlockNum' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIDataTableRow, LandScapeRealPositionMin) == 0x000028, "Member 'FPalWorldMapUIDataTableRow::LandScapeRealPositionMin' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIDataTableRow, LandScapeRealPositionMax) == 0x000040, "Member 'FPalWorldMapUIDataTableRow::LandScapeRealPositionMax' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIDataTableRow, TextureDataMap) == 0x000058, "Member 'FPalWorldMapUIDataTableRow::TextureDataMap' has a wrong offset!");
static_assert(offsetof(FPalWorldMapUIDataTableRow, DefaultMaskTexture) == 0x0000A8, "Member 'FPalWorldMapUIDataTableRow::DefaultMaskTexture' has a wrong offset!");

// ScriptStruct Pal.PalWorldSecurityWantedStateInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalWorldSecurityWantedStateInfo final
{
public:
	struct FDateTime                              ExpiredDate;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          CrimeInstanceIdArray;                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldSecurityWantedStateInfo) == 0x000008, "Wrong alignment on FPalWorldSecurityWantedStateInfo");
static_assert(sizeof(FPalWorldSecurityWantedStateInfo) == 0x000018, "Wrong size on FPalWorldSecurityWantedStateInfo");
static_assert(offsetof(FPalWorldSecurityWantedStateInfo, ExpiredDate) == 0x000000, "Member 'FPalWorldSecurityWantedStateInfo::ExpiredDate' has a wrong offset!");
static_assert(offsetof(FPalWorldSecurityWantedStateInfo, CrimeInstanceIdArray) == 0x000008, "Member 'FPalWorldSecurityWantedStateInfo::CrimeInstanceIdArray' has a wrong offset!");

// ScriptStruct Pal.PalWorkSuitabilityDefineData
// 0x0018 (0x0018 - 0x0000)
struct FPalWorkSuitabilityDefineData final
{
public:
	bool                                          bIsChangeWorkAnimPlayRate;                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CraftSpeeds;                                       // 0x0008(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkSuitabilityDefineData) == 0x000008, "Wrong alignment on FPalWorkSuitabilityDefineData");
static_assert(sizeof(FPalWorkSuitabilityDefineData) == 0x000018, "Wrong size on FPalWorkSuitabilityDefineData");
static_assert(offsetof(FPalWorkSuitabilityDefineData, bIsChangeWorkAnimPlayRate) == 0x000000, "Member 'FPalWorkSuitabilityDefineData::bIsChangeWorkAnimPlayRate' has a wrong offset!");
static_assert(offsetof(FPalWorkSuitabilityDefineData, CraftSpeeds) == 0x000008, "Member 'FPalWorkSuitabilityDefineData::CraftSpeeds' has a wrong offset!");

// ScriptStruct Pal.PalMiningRankDefineData
// 0x0008 (0x0008 - 0x0000)
struct FPalMiningRankDefineData final
{
public:
	float                                         DamageRate;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectMaterialSubType                  MaterialSubType;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267D[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMiningRankDefineData) == 0x000004, "Wrong alignment on FPalMiningRankDefineData");
static_assert(sizeof(FPalMiningRankDefineData) == 0x000008, "Wrong size on FPalMiningRankDefineData");
static_assert(offsetof(FPalMiningRankDefineData, DamageRate) == 0x000000, "Member 'FPalMiningRankDefineData::DamageRate' has a wrong offset!");
static_assert(offsetof(FPalMiningRankDefineData, MaterialSubType) == 0x000004, "Member 'FPalMiningRankDefineData::MaterialSubType' has a wrong offset!");

// ScriptStruct Pal.PalWorkSuitabilityMiningDefineData
// 0x0028 (0x0028 - 0x0000)
struct FPalWorkSuitabilityMiningDefineData final
{
public:
	struct FPalWorkSuitabilityDefineData          CommonDefineData;                                  // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPalMiningRankDefineData>       MiningDefineData;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkSuitabilityMiningDefineData) == 0x000008, "Wrong alignment on FPalWorkSuitabilityMiningDefineData");
static_assert(sizeof(FPalWorkSuitabilityMiningDefineData) == 0x000028, "Wrong size on FPalWorkSuitabilityMiningDefineData");
static_assert(offsetof(FPalWorkSuitabilityMiningDefineData, CommonDefineData) == 0x000000, "Member 'FPalWorkSuitabilityMiningDefineData::CommonDefineData' has a wrong offset!");
static_assert(offsetof(FPalWorkSuitabilityMiningDefineData, MiningDefineData) == 0x000018, "Member 'FPalWorkSuitabilityMiningDefineData::MiningDefineData' has a wrong offset!");

// ScriptStruct Pal.PalAIMoveRequest
// 0x0020 (0x0068 - 0x0048)
struct FPalAIMoveRequest final : public FAIMoveRequest
{
public:
	uint8                                         Pad_267E[0x20];                                    // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalAIMoveRequest) == 0x000008, "Wrong alignment on FPalAIMoveRequest");
static_assert(sizeof(FPalAIMoveRequest) == 0x000068, "Wrong size on FPalAIMoveRequest");

// ScriptStruct Pal.PalAISensorSearchQuery
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPalAISensorSearchQuery final
{
public:
	uint8                                         Pad_267F[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalAISensorSearchQuery) == 0x000008, "Wrong alignment on FPalAISensorSearchQuery");
static_assert(sizeof(FPalAISensorSearchQuery) == 0x000018, "Wrong size on FPalAISensorSearchQuery");

// ScriptStruct Pal.PalArenaStartParameter
// 0x0050 (0x0050 - 0x0000)
struct FPalArenaStartParameter final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2680[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rot;                                               // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAudioStateGroup                           BattleBGMStateGroup;                               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2681[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalArenaStartParameter) == 0x000010, "Wrong alignment on FPalArenaStartParameter");
static_assert(sizeof(FPalArenaStartParameter) == 0x000050, "Wrong size on FPalArenaStartParameter");
static_assert(offsetof(FPalArenaStartParameter, Location) == 0x000000, "Member 'FPalArenaStartParameter::Location' has a wrong offset!");
static_assert(offsetof(FPalArenaStartParameter, Rot) == 0x000020, "Member 'FPalArenaStartParameter::Rot' has a wrong offset!");
static_assert(offsetof(FPalArenaStartParameter, BattleBGMStateGroup) == 0x000040, "Member 'FPalArenaStartParameter::BattleBGMStateGroup' has a wrong offset!");

// ScriptStruct Pal.PalAudioFadeParameter
// 0x0008 (0x0008 - 0x0000)
struct FPalAudioFadeParameter final
{
public:
	EPalAudioFadeType                             FadeType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2682[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentVolume;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalAudioFadeParameter) == 0x000004, "Wrong alignment on FPalAudioFadeParameter");
static_assert(sizeof(FPalAudioFadeParameter) == 0x000008, "Wrong size on FPalAudioFadeParameter");
static_assert(offsetof(FPalAudioFadeParameter, FadeType) == 0x000000, "Member 'FPalAudioFadeParameter::FadeType' has a wrong offset!");
static_assert(offsetof(FPalAudioFadeParameter, CurrentVolume) == 0x000004, "Member 'FPalAudioFadeParameter::CurrentVolume' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampWorkerEventMasterData
// 0x0020 (0x0028 - 0x0008)
struct FPalBaseCampWorkerEventMasterData final : public FTableRowBase
{
public:
	class FName                                   Debug_DisplayName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalBaseCampWorkerEventPriority               Priority;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2683[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TriggerSanity;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInterruptRecoverHungry;                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInterruptSleep;                              // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignableWork;                                   // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignableFixedWork;                              // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerSkipCount;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalLogPriority                               LogPriority;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalLogContentToneType                        LogTone;                                           // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Invalid;                                           // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2684[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampWorkerEventMasterData) == 0x000008, "Wrong alignment on FPalBaseCampWorkerEventMasterData");
static_assert(sizeof(FPalBaseCampWorkerEventMasterData) == 0x000028, "Wrong size on FPalBaseCampWorkerEventMasterData");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, Debug_DisplayName) == 0x000008, "Member 'FPalBaseCampWorkerEventMasterData::Debug_DisplayName' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, Priority) == 0x000010, "Member 'FPalBaseCampWorkerEventMasterData::Priority' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, TriggerSanity) == 0x000014, "Member 'FPalBaseCampWorkerEventMasterData::TriggerSanity' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, bAllowInterruptRecoverHungry) == 0x000018, "Member 'FPalBaseCampWorkerEventMasterData::bAllowInterruptRecoverHungry' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, bAllowInterruptSleep) == 0x000019, "Member 'FPalBaseCampWorkerEventMasterData::bAllowInterruptSleep' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, bAssignableWork) == 0x00001A, "Member 'FPalBaseCampWorkerEventMasterData::bAssignableWork' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, bAssignableFixedWork) == 0x00001B, "Member 'FPalBaseCampWorkerEventMasterData::bAssignableFixedWork' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, TriggerSkipCount) == 0x00001C, "Member 'FPalBaseCampWorkerEventMasterData::TriggerSkipCount' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, LogPriority) == 0x000020, "Member 'FPalBaseCampWorkerEventMasterData::LogPriority' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, LogTone) == 0x000021, "Member 'FPalBaseCampWorkerEventMasterData::LogTone' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerEventMasterData, Invalid) == 0x000022, "Member 'FPalBaseCampWorkerEventMasterData::Invalid' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectFoliageInstanceAccessID
// 0x0018 (0x0018 - 0x0000)
struct FPalMapObjectFoliageInstanceAccessID final
{
public:
	class FName                                   ModelId;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalFoliageInstanceId                  InstanceId;                                        // 0x0008(0x0010)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectFoliageInstanceAccessID) == 0x000004, "Wrong alignment on FPalMapObjectFoliageInstanceAccessID");
static_assert(sizeof(FPalMapObjectFoliageInstanceAccessID) == 0x000018, "Wrong size on FPalMapObjectFoliageInstanceAccessID");
static_assert(offsetof(FPalMapObjectFoliageInstanceAccessID, ModelId) == 0x000000, "Member 'FPalMapObjectFoliageInstanceAccessID::ModelId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFoliageInstanceAccessID, InstanceId) == 0x000008, "Member 'FPalMapObjectFoliageInstanceAccessID::InstanceId' has a wrong offset!");

// ScriptStruct Pal.PalInteractiveObjectActionInfoData
// 0x000C (0x000C - 0x0000)
struct FPalInteractiveObjectActionInfoData final
{
public:
	EPalInteractiveObjectIndicatorType            IndicatorType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalInteractiveObjectButtonType               buttonType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2685[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LongPushTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockRiding;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInputComsume;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanToggle;                                        // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInteractiveObjectActionInfoData) == 0x000004, "Wrong alignment on FPalInteractiveObjectActionInfoData");
static_assert(sizeof(FPalInteractiveObjectActionInfoData) == 0x00000C, "Wrong size on FPalInteractiveObjectActionInfoData");
static_assert(offsetof(FPalInteractiveObjectActionInfoData, IndicatorType) == 0x000000, "Member 'FPalInteractiveObjectActionInfoData::IndicatorType' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoData, buttonType) == 0x000001, "Member 'FPalInteractiveObjectActionInfoData::buttonType' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoData, LongPushTime) == 0x000004, "Member 'FPalInteractiveObjectActionInfoData::LongPushTime' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoData, bValid) == 0x000008, "Member 'FPalInteractiveObjectActionInfoData::bValid' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoData, bLockRiding) == 0x000009, "Member 'FPalInteractiveObjectActionInfoData::bLockRiding' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoData, IsInputComsume) == 0x00000A, "Member 'FPalInteractiveObjectActionInfoData::IsInputComsume' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoData, bCanToggle) == 0x00000B, "Member 'FPalInteractiveObjectActionInfoData::bCanToggle' has a wrong offset!");

// ScriptStruct Pal.PalInteractiveObjectActionInfoSet
// 0x0030 (0x0030 - 0x0000)
struct FPalInteractiveObjectActionInfoSet final
{
public:
	struct FPalInteractiveObjectActionInfoData    Interact1_Indicator;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalInteractiveObjectActionInfoData    Interact2_Indicator;                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalInteractiveObjectActionInfoData    Interact3_Indicator;                               // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalInteractiveObjectActionInfoData    Interact4_Indicator;                               // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInteractiveObjectActionInfoSet) == 0x000004, "Wrong alignment on FPalInteractiveObjectActionInfoSet");
static_assert(sizeof(FPalInteractiveObjectActionInfoSet) == 0x000030, "Wrong size on FPalInteractiveObjectActionInfoSet");
static_assert(offsetof(FPalInteractiveObjectActionInfoSet, Interact1_Indicator) == 0x000000, "Member 'FPalInteractiveObjectActionInfoSet::Interact1_Indicator' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoSet, Interact2_Indicator) == 0x00000C, "Member 'FPalInteractiveObjectActionInfoSet::Interact2_Indicator' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoSet, Interact3_Indicator) == 0x000018, "Member 'FPalInteractiveObjectActionInfoSet::Interact3_Indicator' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionInfoSet, Interact4_Indicator) == 0x000024, "Member 'FPalInteractiveObjectActionInfoSet::Interact4_Indicator' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleTransportItemRequirement
// 0x0048 (0x0048 - 0x0000)
struct FPalBaseCampModuleTransportItemRequirement final
{
public:
	EPalBaseCampModuleTransportItemTransportPriority Priority;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2686[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalStaticItemIdAndNum>         ItemInfo;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<EPalItemTypeA>                         ItemTypeA;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<EPalItemTypeB>                         ItemTypeB;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<EPalBaseCampModuleTransportItemTransportableItemExtraType> ItemExtraTypes;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampModuleTransportItemRequirement) == 0x000008, "Wrong alignment on FPalBaseCampModuleTransportItemRequirement");
static_assert(sizeof(FPalBaseCampModuleTransportItemRequirement) == 0x000048, "Wrong size on FPalBaseCampModuleTransportItemRequirement");
static_assert(offsetof(FPalBaseCampModuleTransportItemRequirement, Priority) == 0x000000, "Member 'FPalBaseCampModuleTransportItemRequirement::Priority' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemRequirement, ItemInfo) == 0x000008, "Member 'FPalBaseCampModuleTransportItemRequirement::ItemInfo' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemRequirement, ItemTypeA) == 0x000018, "Member 'FPalBaseCampModuleTransportItemRequirement::ItemTypeA' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemRequirement, ItemTypeB) == 0x000028, "Member 'FPalBaseCampModuleTransportItemRequirement::ItemTypeB' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemRequirement, ItemExtraTypes) == 0x000038, "Member 'FPalBaseCampModuleTransportItemRequirement::ItemExtraTypes' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampWorkerMoveExtraParameter
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FPalBaseCampWorkerMoveExtraParameter final
{
public:
	uint8                                         Pad_2687[0x90];                                    // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampWorkerMoveExtraParameter) == 0x000010, "Wrong alignment on FPalBaseCampWorkerMoveExtraParameter");
static_assert(sizeof(FPalBaseCampWorkerMoveExtraParameter) == 0x000090, "Wrong size on FPalBaseCampWorkerMoveExtraParameter");

// ScriptStruct Pal.PalPlayerParameterDatabaseRow
// 0x0020 (0x0028 - 0x0008)
struct FPalPlayerParameterDatabaseRow final : public FTableRowBase
{
public:
	int32                                         Stamina;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeleeAttack;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotAttack;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defense;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Support;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftSpeed;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Satiety;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPlayerParameterDatabaseRow) == 0x000008, "Wrong alignment on FPalPlayerParameterDatabaseRow");
static_assert(sizeof(FPalPlayerParameterDatabaseRow) == 0x000028, "Wrong size on FPalPlayerParameterDatabaseRow");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, Stamina) == 0x000008, "Member 'FPalPlayerParameterDatabaseRow::Stamina' has a wrong offset!");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, HP) == 0x00000C, "Member 'FPalPlayerParameterDatabaseRow::HP' has a wrong offset!");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, MeleeAttack) == 0x000010, "Member 'FPalPlayerParameterDatabaseRow::MeleeAttack' has a wrong offset!");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, ShotAttack) == 0x000014, "Member 'FPalPlayerParameterDatabaseRow::ShotAttack' has a wrong offset!");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, Defense) == 0x000018, "Member 'FPalPlayerParameterDatabaseRow::Defense' has a wrong offset!");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, Support) == 0x00001C, "Member 'FPalPlayerParameterDatabaseRow::Support' has a wrong offset!");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, CraftSpeed) == 0x000020, "Member 'FPalPlayerParameterDatabaseRow::CraftSpeed' has a wrong offset!");
static_assert(offsetof(FPalPlayerParameterDatabaseRow, Satiety) == 0x000024, "Member 'FPalPlayerParameterDatabaseRow::Satiety' has a wrong offset!");

// ScriptStruct Pal.PalHitCollisionSetupParameter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalHitCollisionSetupParameter final
{
public:
	uint8                                         Pad_2688[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalHitCollisionSetupParameter) == 0x000008, "Wrong alignment on FPalHitCollisionSetupParameter");
static_assert(sizeof(FPalHitCollisionSetupParameter) == 0x000020, "Wrong size on FPalHitCollisionSetupParameter");

// ScriptStruct Pal.PalBaseCampFacilityCountPair
// 0x0008 (0x0008 - 0x0000)
struct FPalBaseCampFacilityCountPair final
{
public:
	EPalMapObjectWorkerAvailableFacilityType      FacilityType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2689[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FacilityCount;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampFacilityCountPair) == 0x000004, "Wrong alignment on FPalBaseCampFacilityCountPair");
static_assert(sizeof(FPalBaseCampFacilityCountPair) == 0x000008, "Wrong size on FPalBaseCampFacilityCountPair");
static_assert(offsetof(FPalBaseCampFacilityCountPair, FacilityType) == 0x000000, "Member 'FPalBaseCampFacilityCountPair::FacilityType' has a wrong offset!");
static_assert(offsetof(FPalBaseCampFacilityCountPair, FacilityCount) == 0x000004, "Member 'FPalBaseCampFacilityCountPair::FacilityCount' has a wrong offset!");

// ScriptStruct Pal.PalEquipWeaponInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalEquipWeaponInfo final
{
public:
	struct FPalContainerId                        ContainerId;                                       // 0x0000(0x0010)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APalMonsterEquipWeaponBase*             SpawnedWeapon;                                     // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEquipWeaponInfo) == 0x000008, "Wrong alignment on FPalEquipWeaponInfo");
static_assert(sizeof(FPalEquipWeaponInfo) == 0x000018, "Wrong size on FPalEquipWeaponInfo");
static_assert(offsetof(FPalEquipWeaponInfo, ContainerId) == 0x000000, "Member 'FPalEquipWeaponInfo::ContainerId' has a wrong offset!");
static_assert(offsetof(FPalEquipWeaponInfo, SpawnedWeapon) == 0x000010, "Member 'FPalEquipWeaponInfo::SpawnedWeapon' has a wrong offset!");

// ScriptStruct Pal.PalSlotOpItemInfo
// 0x0030 (0x0030 - 0x0000)
struct FPalSlotOpItemInfo final
{
public:
	struct FPalItemAndNum                         Item;                                              // 0x0000(0x002C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         CorruptionProgressValue;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSlotOpItemInfo) == 0x000004, "Wrong alignment on FPalSlotOpItemInfo");
static_assert(sizeof(FPalSlotOpItemInfo) == 0x000030, "Wrong size on FPalSlotOpItemInfo");
static_assert(offsetof(FPalSlotOpItemInfo, Item) == 0x000000, "Member 'FPalSlotOpItemInfo::Item' has a wrong offset!");
static_assert(offsetof(FPalSlotOpItemInfo, CorruptionProgressValue) == 0x00002C, "Member 'FPalSlotOpItemInfo::CorruptionProgressValue' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleResourceCollectWorkInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalBaseCampModuleResourceCollectWorkInfo final
{
public:
	struct FGuid                                  WorkId;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampModuleResourceCollectWorkInfo) == 0x000004, "Wrong alignment on FPalBaseCampModuleResourceCollectWorkInfo");
static_assert(sizeof(FPalBaseCampModuleResourceCollectWorkInfo) == 0x000010, "Wrong size on FPalBaseCampModuleResourceCollectWorkInfo");
static_assert(offsetof(FPalBaseCampModuleResourceCollectWorkInfo, WorkId) == 0x000000, "Member 'FPalBaseCampModuleResourceCollectWorkInfo::WorkId' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleTransportItemDepotParameter
// 0x00E0 (0x00E0 - 0x0000)
struct FPalBaseCampModuleTransportItemDepotParameter final
{
public:
	struct FGuid                                  OwnerMapObjectConcreteModelInstanceId;             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalBoundsTransform                    DepotLocalBoundsTransform;                         // 0x0010(0x0080)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FPalBaseCampModuleTransportItemRequirement Requirement;                                       // 0x0090(0x0048)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_268A[0x8];                                     // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampModuleTransportItemDepotParameter) == 0x000010, "Wrong alignment on FPalBaseCampModuleTransportItemDepotParameter");
static_assert(sizeof(FPalBaseCampModuleTransportItemDepotParameter) == 0x0000E0, "Wrong size on FPalBaseCampModuleTransportItemDepotParameter");
static_assert(offsetof(FPalBaseCampModuleTransportItemDepotParameter, OwnerMapObjectConcreteModelInstanceId) == 0x000000, "Member 'FPalBaseCampModuleTransportItemDepotParameter::OwnerMapObjectConcreteModelInstanceId' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemDepotParameter, DepotLocalBoundsTransform) == 0x000010, "Member 'FPalBaseCampModuleTransportItemDepotParameter::DepotLocalBoundsTransform' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemDepotParameter, Requirement) == 0x000090, "Member 'FPalBaseCampModuleTransportItemDepotParameter::Requirement' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleTransportItemStatus
// 0x0180 (0x0180 - 0x0000)
struct FPalBaseCampModuleTransportItemStatus final
{
public:
	struct FPalBaseCampModuleTransportItemRequirement Requirement;                                       // 0x0000(0x0048)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	bool                                          bDepot;                                            // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268B[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalBoundsTransform                    DepotLocalBoundsTransform;                         // 0x0050(0x0080)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  WorkId;                                            // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FPalInstanceID, struct FPalBaseCampModuleTransportItemDirection> DirectionMap;                                      // 0x00E0(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      NotSatisfiedRequirementItemInfoMap;                // 0x0130(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampModuleTransportItemStatus) == 0x000010, "Wrong alignment on FPalBaseCampModuleTransportItemStatus");
static_assert(sizeof(FPalBaseCampModuleTransportItemStatus) == 0x000180, "Wrong size on FPalBaseCampModuleTransportItemStatus");
static_assert(offsetof(FPalBaseCampModuleTransportItemStatus, Requirement) == 0x000000, "Member 'FPalBaseCampModuleTransportItemStatus::Requirement' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemStatus, bDepot) == 0x000048, "Member 'FPalBaseCampModuleTransportItemStatus::bDepot' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemStatus, DepotLocalBoundsTransform) == 0x000050, "Member 'FPalBaseCampModuleTransportItemStatus::DepotLocalBoundsTransform' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemStatus, WorkId) == 0x0000D0, "Member 'FPalBaseCampModuleTransportItemStatus::WorkId' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemStatus, DirectionMap) == 0x0000E0, "Member 'FPalBaseCampModuleTransportItemStatus::DirectionMap' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemStatus, NotSatisfiedRequirementItemInfoMap) == 0x000130, "Member 'FPalBaseCampModuleTransportItemStatus::NotSatisfiedRequirementItemInfoMap' has a wrong offset!");

// ScriptStruct Pal.PalStatusEffectFoodDataRow
// 0x0020 (0x0028 - 0x0008)
struct FPalStatusEffectFoodDataRow final : public FTableRowBase
{
public:
	int32                                         EffectTime;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalFoodStatusEffectType                      EffectType1;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue1;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interaval1;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalFoodStatusEffectType                      EffectType2;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue2;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interaval2;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268E[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalStatusEffectFoodDataRow) == 0x000008, "Wrong alignment on FPalStatusEffectFoodDataRow");
static_assert(sizeof(FPalStatusEffectFoodDataRow) == 0x000028, "Wrong size on FPalStatusEffectFoodDataRow");
static_assert(offsetof(FPalStatusEffectFoodDataRow, EffectTime) == 0x000008, "Member 'FPalStatusEffectFoodDataRow::EffectTime' has a wrong offset!");
static_assert(offsetof(FPalStatusEffectFoodDataRow, EffectType1) == 0x00000C, "Member 'FPalStatusEffectFoodDataRow::EffectType1' has a wrong offset!");
static_assert(offsetof(FPalStatusEffectFoodDataRow, EffectValue1) == 0x000010, "Member 'FPalStatusEffectFoodDataRow::EffectValue1' has a wrong offset!");
static_assert(offsetof(FPalStatusEffectFoodDataRow, Interaval1) == 0x000014, "Member 'FPalStatusEffectFoodDataRow::Interaval1' has a wrong offset!");
static_assert(offsetof(FPalStatusEffectFoodDataRow, EffectType2) == 0x000018, "Member 'FPalStatusEffectFoodDataRow::EffectType2' has a wrong offset!");
static_assert(offsetof(FPalStatusEffectFoodDataRow, EffectValue2) == 0x00001C, "Member 'FPalStatusEffectFoodDataRow::EffectValue2' has a wrong offset!");
static_assert(offsetof(FPalStatusEffectFoodDataRow, Interaval2) == 0x000020, "Member 'FPalStatusEffectFoodDataRow::Interaval2' has a wrong offset!");

// ScriptStruct Pal.PalNPCInteractionDataTableRow
// 0x0038 (0x0040 - 0x0008)
struct FPalNPCInteractionDataTableRow final : public FTableRowBase
{
public:
	class FName                                   UniqueNPCID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterID;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalInteractiveObjectIndicatorType            InteractionType;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268F[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Conditions;                                        // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IncidentId;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IncidentArgs1;                                     // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IncidentArgs2;                                     // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2690[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNPCInteractionDataTableRow) == 0x000008, "Wrong alignment on FPalNPCInteractionDataTableRow");
static_assert(sizeof(FPalNPCInteractionDataTableRow) == 0x000040, "Wrong size on FPalNPCInteractionDataTableRow");
static_assert(offsetof(FPalNPCInteractionDataTableRow, UniqueNPCID) == 0x000008, "Member 'FPalNPCInteractionDataTableRow::UniqueNPCID' has a wrong offset!");
static_assert(offsetof(FPalNPCInteractionDataTableRow, CharacterID) == 0x000010, "Member 'FPalNPCInteractionDataTableRow::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalNPCInteractionDataTableRow, InteractionType) == 0x000018, "Member 'FPalNPCInteractionDataTableRow::InteractionType' has a wrong offset!");
static_assert(offsetof(FPalNPCInteractionDataTableRow, Conditions) == 0x00001C, "Member 'FPalNPCInteractionDataTableRow::Conditions' has a wrong offset!");
static_assert(offsetof(FPalNPCInteractionDataTableRow, IncidentId) == 0x000024, "Member 'FPalNPCInteractionDataTableRow::IncidentId' has a wrong offset!");
static_assert(offsetof(FPalNPCInteractionDataTableRow, IncidentArgs1) == 0x00002C, "Member 'FPalNPCInteractionDataTableRow::IncidentArgs1' has a wrong offset!");
static_assert(offsetof(FPalNPCInteractionDataTableRow, IncidentArgs2) == 0x000034, "Member 'FPalNPCInteractionDataTableRow::IncidentArgs2' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleTransportItemTarget
// 0x00C0 (0x00C0 - 0x0000)
struct FPalBaseCampModuleTransportItemTarget final
{
public:
	bool                                          bTargetRemoved;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2691[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FPalInstanceID, struct FPalBaseCampModuleTransportItemTargetReservedInfo> ReservedInfoMap;                                   // 0x0008(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	bool                                          bNotExistMovePath;                                 // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableObtainAnywhere;                             // 0x0059(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2692[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      NotReservedItemInfoMap;                            // 0x0060(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  WorkId;                                            // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampModuleTransportItemTarget) == 0x000008, "Wrong alignment on FPalBaseCampModuleTransportItemTarget");
static_assert(sizeof(FPalBaseCampModuleTransportItemTarget) == 0x0000C0, "Wrong size on FPalBaseCampModuleTransportItemTarget");
static_assert(offsetof(FPalBaseCampModuleTransportItemTarget, bTargetRemoved) == 0x000000, "Member 'FPalBaseCampModuleTransportItemTarget::bTargetRemoved' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemTarget, ReservedInfoMap) == 0x000008, "Member 'FPalBaseCampModuleTransportItemTarget::ReservedInfoMap' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemTarget, bNotExistMovePath) == 0x000058, "Member 'FPalBaseCampModuleTransportItemTarget::bNotExistMovePath' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemTarget, bEnableObtainAnywhere) == 0x000059, "Member 'FPalBaseCampModuleTransportItemTarget::bEnableObtainAnywhere' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemTarget, NotReservedItemInfoMap) == 0x000060, "Member 'FPalBaseCampModuleTransportItemTarget::NotReservedItemInfoMap' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemTarget, WorkId) == 0x0000B0, "Member 'FPalBaseCampModuleTransportItemTarget::WorkId' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampModuleTransportItemCharacterInfo
// 0x0028 (0x0028 - 0x0000)
struct FPalBaseCampModuleTransportItemCharacterInfo final
{
public:
	TArray<struct FPalItemAndNum>                 ItemInfos;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                CharacterLocation;                                 // 0x0010(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBaseCampModuleTransportItemCharacterInfo) == 0x000008, "Wrong alignment on FPalBaseCampModuleTransportItemCharacterInfo");
static_assert(sizeof(FPalBaseCampModuleTransportItemCharacterInfo) == 0x000028, "Wrong size on FPalBaseCampModuleTransportItemCharacterInfo");
static_assert(offsetof(FPalBaseCampModuleTransportItemCharacterInfo, ItemInfos) == 0x000000, "Member 'FPalBaseCampModuleTransportItemCharacterInfo::ItemInfos' has a wrong offset!");
static_assert(offsetof(FPalBaseCampModuleTransportItemCharacterInfo, CharacterLocation) == 0x000010, "Member 'FPalBaseCampModuleTransportItemCharacterInfo::CharacterLocation' has a wrong offset!");

// ScriptStruct Pal.PalBossBattleLevelInstanceLoadOperator
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPalBossBattleLevelInstanceLoadOperator final
{
public:
	uint8                                         Pad_2693[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBossBattleLevelInstanceLoadOperator) == 0x000008, "Wrong alignment on FPalBossBattleLevelInstanceLoadOperator");
static_assert(sizeof(FPalBossBattleLevelInstanceLoadOperator) == 0x000028, "Wrong size on FPalBossBattleLevelInstanceLoadOperator");

// ScriptStruct Pal.PalBuildObjectDataSetTypeB
// 0x0018 (0x0018 - 0x0000)
struct FPalBuildObjectDataSetTypeB final
{
public:
	EPalBuildObjectTypeB                          TypeB;                                             // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2694[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalBuildObjectData>            DataArray;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBuildObjectDataSetTypeB) == 0x000008, "Wrong alignment on FPalBuildObjectDataSetTypeB");
static_assert(sizeof(FPalBuildObjectDataSetTypeB) == 0x000018, "Wrong size on FPalBuildObjectDataSetTypeB");
static_assert(offsetof(FPalBuildObjectDataSetTypeB, TypeB) == 0x000000, "Member 'FPalBuildObjectDataSetTypeB::TypeB' has a wrong offset!");
static_assert(offsetof(FPalBuildObjectDataSetTypeB, DataArray) == 0x000008, "Member 'FPalBuildObjectDataSetTypeB::DataArray' has a wrong offset!");

// ScriptStruct Pal.PalBuildObjectMaterialArray
// 0x0010 (0x0010 - 0x0000)
struct FPalBuildObjectMaterialArray final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBuildObjectMaterialArray) == 0x000008, "Wrong alignment on FPalBuildObjectMaterialArray");
static_assert(sizeof(FPalBuildObjectMaterialArray) == 0x000010, "Wrong size on FPalBuildObjectMaterialArray");
static_assert(offsetof(FPalBuildObjectMaterialArray, Materials) == 0x000000, "Member 'FPalBuildObjectMaterialArray::Materials' has a wrong offset!");

// ScriptStruct Pal.PalCaptureBallEffectSettingData
// 0x0008 (0x0008 - 0x0000)
struct FPalCaptureBallEffectSettingData final
{
public:
	int32                                         CaptureAbsorbToBall_ParticleCount;                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CaptureAbsorbToBall_Scale;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCaptureBallEffectSettingData) == 0x000004, "Wrong alignment on FPalCaptureBallEffectSettingData");
static_assert(sizeof(FPalCaptureBallEffectSettingData) == 0x000008, "Wrong size on FPalCaptureBallEffectSettingData");
static_assert(offsetof(FPalCaptureBallEffectSettingData, CaptureAbsorbToBall_ParticleCount) == 0x000000, "Member 'FPalCaptureBallEffectSettingData::CaptureAbsorbToBall_ParticleCount' has a wrong offset!");
static_assert(offsetof(FPalCaptureBallEffectSettingData, CaptureAbsorbToBall_Scale) == 0x000004, "Member 'FPalCaptureBallEffectSettingData::CaptureAbsorbToBall_Scale' has a wrong offset!");

// ScriptStruct Pal.PalCharacterAsyncTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FPalCharacterAsyncTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_2695[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCharacterAsyncTickFunction) == 0x000008, "Wrong alignment on FPalCharacterAsyncTickFunction");
static_assert(sizeof(FPalCharacterAsyncTickFunction) == 0x000030, "Wrong size on FPalCharacterAsyncTickFunction");

// ScriptStruct Pal.PalCameraDOFSetting
// 0x0014 (0x0014 - 0x0000)
struct FPalCameraDOFSetting final
{
public:
	float                                         DepthOfFieldFocalDistance;                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldDepthBlurAmount;                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldDepthBlurRadius;                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFstop;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCameraDOFSetting) == 0x000004, "Wrong alignment on FPalCameraDOFSetting");
static_assert(sizeof(FPalCameraDOFSetting) == 0x000014, "Wrong size on FPalCameraDOFSetting");
static_assert(offsetof(FPalCameraDOFSetting, DepthOfFieldFocalDistance) == 0x000000, "Member 'FPalCameraDOFSetting::DepthOfFieldFocalDistance' has a wrong offset!");
static_assert(offsetof(FPalCameraDOFSetting, DepthOfFieldDepthBlurAmount) == 0x000004, "Member 'FPalCameraDOFSetting::DepthOfFieldDepthBlurAmount' has a wrong offset!");
static_assert(offsetof(FPalCameraDOFSetting, DepthOfFieldDepthBlurRadius) == 0x000008, "Member 'FPalCameraDOFSetting::DepthOfFieldDepthBlurRadius' has a wrong offset!");
static_assert(offsetof(FPalCameraDOFSetting, DepthOfFieldFstop) == 0x00000C, "Member 'FPalCameraDOFSetting::DepthOfFieldFstop' has a wrong offset!");
static_assert(offsetof(FPalCameraDOFSetting, FOV) == 0x000010, "Member 'FPalCameraDOFSetting::FOV' has a wrong offset!");

// ScriptStruct Pal.PalCharacterContainerSlotInfo
// 0x0048 (0x0048 - 0x0000)
struct FPalCharacterContainerSlotInfo final
{
public:
	struct FPalInstanceID                         IndividualId;                                      // 0x0000(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalCharacterSlotId                    SlotID;                                            // 0x0030(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2696[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCharacterContainerSlotInfo) == 0x000008, "Wrong alignment on FPalCharacterContainerSlotInfo");
static_assert(sizeof(FPalCharacterContainerSlotInfo) == 0x000048, "Wrong size on FPalCharacterContainerSlotInfo");
static_assert(offsetof(FPalCharacterContainerSlotInfo, IndividualId) == 0x000000, "Member 'FPalCharacterContainerSlotInfo::IndividualId' has a wrong offset!");
static_assert(offsetof(FPalCharacterContainerSlotInfo, SlotID) == 0x000030, "Member 'FPalCharacterContainerSlotInfo::SlotID' has a wrong offset!");

// ScriptStruct Pal.PalIndividualCharacterSlotResultInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalIndividualCharacterSlotResultInfo final
{
public:
	uint8                                         Pad_2697[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalIndividualCharacterSlotResultInfo) == 0x000008, "Wrong alignment on FPalIndividualCharacterSlotResultInfo");
static_assert(sizeof(FPalIndividualCharacterSlotResultInfo) == 0x000020, "Wrong size on FPalIndividualCharacterSlotResultInfo");

// ScriptStruct Pal.CharacterListForImportanceManager
// 0x0010 (0x0010 - 0x0000)
struct FCharacterListForImportanceManager final
{
public:
	TArray<class APalCharacter*>                  CharacterList;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterListForImportanceManager) == 0x000008, "Wrong alignment on FCharacterListForImportanceManager");
static_assert(sizeof(FCharacterListForImportanceManager) == 0x000010, "Wrong size on FCharacterListForImportanceManager");
static_assert(offsetof(FCharacterListForImportanceManager, CharacterList) == 0x000000, "Member 'FCharacterListForImportanceManager::CharacterList' has a wrong offset!");

// ScriptStruct Pal.FastCharacterParameterRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FFastCharacterParameterRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FCharacterParameterRepInfo>     Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2698[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFastCharacterParameterRepInfoArray) == 0x000008, "Wrong alignment on FFastCharacterParameterRepInfoArray");
static_assert(sizeof(FFastCharacterParameterRepInfoArray) == 0x000148, "Wrong size on FFastCharacterParameterRepInfoArray");
static_assert(offsetof(FFastCharacterParameterRepInfoArray, Items) == 0x000108, "Member 'FFastCharacterParameterRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalContainerInitializeParameter
// 0x0018 (0x0018 - 0x0000)
struct FPalContainerInitializeParameter final
{
public:
	struct FPalContainerId                        ID;                                                // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNum;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReferenceSlot;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOnSave;                                     // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalContainerOperationRestrictType            OperationRestrictType;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2699[0x1];                                     // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalContainerInitializeParameter) == 0x000004, "Wrong alignment on FPalContainerInitializeParameter");
static_assert(sizeof(FPalContainerInitializeParameter) == 0x000018, "Wrong size on FPalContainerInitializeParameter");
static_assert(offsetof(FPalContainerInitializeParameter, ID) == 0x000000, "Member 'FPalContainerInitializeParameter::ID' has a wrong offset!");
static_assert(offsetof(FPalContainerInitializeParameter, SlotNum) == 0x000010, "Member 'FPalContainerInitializeParameter::SlotNum' has a wrong offset!");
static_assert(offsetof(FPalContainerInitializeParameter, bReferenceSlot) == 0x000014, "Member 'FPalContainerInitializeParameter::bReferenceSlot' has a wrong offset!");
static_assert(offsetof(FPalContainerInitializeParameter, bIgnoreOnSave) == 0x000015, "Member 'FPalContainerInitializeParameter::bIgnoreOnSave' has a wrong offset!");
static_assert(offsetof(FPalContainerInitializeParameter, OperationRestrictType) == 0x000016, "Member 'FPalContainerInitializeParameter::OperationRestrictType' has a wrong offset!");

// ScriptStruct Pal.PalContainerCreateExtraParameter
// 0x0004 (0x0004 - 0x0000)
struct FPalContainerCreateExtraParameter final
{
public:
	bool                                          bIsWatchAllPlayer;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSyncEnable;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOnSave;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalContainerOperationRestrictType            OperationRestrictType;                             // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalContainerCreateExtraParameter) == 0x000001, "Wrong alignment on FPalContainerCreateExtraParameter");
static_assert(sizeof(FPalContainerCreateExtraParameter) == 0x000004, "Wrong size on FPalContainerCreateExtraParameter");
static_assert(offsetof(FPalContainerCreateExtraParameter, bIsWatchAllPlayer) == 0x000000, "Member 'FPalContainerCreateExtraParameter::bIsWatchAllPlayer' has a wrong offset!");
static_assert(offsetof(FPalContainerCreateExtraParameter, bIsSyncEnable) == 0x000001, "Member 'FPalContainerCreateExtraParameter::bIsSyncEnable' has a wrong offset!");
static_assert(offsetof(FPalContainerCreateExtraParameter, bIgnoreOnSave) == 0x000002, "Member 'FPalContainerCreateExtraParameter::bIgnoreOnSave' has a wrong offset!");
static_assert(offsetof(FPalContainerCreateExtraParameter, OperationRestrictType) == 0x000003, "Member 'FPalContainerCreateExtraParameter::OperationRestrictType' has a wrong offset!");

// ScriptStruct Pal.PalCoopSkillModuleAssignPassiveSkillNames
// 0x0010 (0x0010 - 0x0000)
struct FPalCoopSkillModuleAssignPassiveSkillNames final
{
public:
	TArray<struct FPalDataTableRowName_PassiveSkillData> AssignSkillNames;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCoopSkillModuleAssignPassiveSkillNames) == 0x000008, "Wrong alignment on FPalCoopSkillModuleAssignPassiveSkillNames");
static_assert(sizeof(FPalCoopSkillModuleAssignPassiveSkillNames) == 0x000010, "Wrong size on FPalCoopSkillModuleAssignPassiveSkillNames");
static_assert(offsetof(FPalCoopSkillModuleAssignPassiveSkillNames, AssignSkillNames) == 0x000000, "Member 'FPalCoopSkillModuleAssignPassiveSkillNames::AssignSkillNames' has a wrong offset!");

// ScriptStruct Pal.PalCoopSkillSearchResultParameter
// 0x0070 (0x0070 - 0x0000)
struct FPalCoopSkillSearchResultParameter final
{
public:
	EPalCoopSkillSearchType                       SearchType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InstanceId;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalInstanceID                         IndividualId;                                      // 0x0030(0x0030)(Edit, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  RequestPlayerUId;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCoopSkillSearchResultParameter) == 0x000008, "Wrong alignment on FPalCoopSkillSearchResultParameter");
static_assert(sizeof(FPalCoopSkillSearchResultParameter) == 0x000070, "Wrong size on FPalCoopSkillSearchResultParameter");
static_assert(offsetof(FPalCoopSkillSearchResultParameter, SearchType) == 0x000000, "Member 'FPalCoopSkillSearchResultParameter::SearchType' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillSearchResultParameter, Location) == 0x000008, "Member 'FPalCoopSkillSearchResultParameter::Location' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillSearchResultParameter, InstanceId) == 0x000020, "Member 'FPalCoopSkillSearchResultParameter::InstanceId' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillSearchResultParameter, IndividualId) == 0x000030, "Member 'FPalCoopSkillSearchResultParameter::IndividualId' has a wrong offset!");
static_assert(offsetof(FPalCoopSkillSearchResultParameter, RequestPlayerUId) == 0x000060, "Member 'FPalCoopSkillSearchResultParameter::RequestPlayerUId' has a wrong offset!");

// ScriptStruct Pal.PalUMGCustomVertexData
// 0x0050 (0x0050 - 0x0000)
struct FPalUMGCustomVertexData final
{
public:
	struct FVector4                               TexCoords;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaterialTexCoords;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PixelWidth;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PixelHeight;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269B[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUMGCustomVertexData) == 0x000010, "Wrong alignment on FPalUMGCustomVertexData");
static_assert(sizeof(FPalUMGCustomVertexData) == 0x000050, "Wrong size on FPalUMGCustomVertexData");
static_assert(offsetof(FPalUMGCustomVertexData, TexCoords) == 0x000000, "Member 'FPalUMGCustomVertexData::TexCoords' has a wrong offset!");
static_assert(offsetof(FPalUMGCustomVertexData, MaterialTexCoords) == 0x000020, "Member 'FPalUMGCustomVertexData::MaterialTexCoords' has a wrong offset!");
static_assert(offsetof(FPalUMGCustomVertexData, Position) == 0x000030, "Member 'FPalUMGCustomVertexData::Position' has a wrong offset!");
static_assert(offsetof(FPalUMGCustomVertexData, Color) == 0x000040, "Member 'FPalUMGCustomVertexData::Color' has a wrong offset!");
static_assert(offsetof(FPalUMGCustomVertexData, PixelWidth) == 0x000044, "Member 'FPalUMGCustomVertexData::PixelWidth' has a wrong offset!");
static_assert(offsetof(FPalUMGCustomVertexData, PixelHeight) == 0x000048, "Member 'FPalUMGCustomVertexData::PixelHeight' has a wrong offset!");

// ScriptStruct Pal.PalDropItemDatabaseRow
// 0x00D8 (0x00E0 - 0x0008)
struct FPalDropItemDatabaseRow final : public FTableRowBase
{
public:
	class FName                                   CharacterID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId1;                                           // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate1;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min1;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max1;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId2;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate2;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min2;                                              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max2;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId3;                                           // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate3;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min3;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max3;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId4;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate4;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min4;                                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max4;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId5;                                           // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate5;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min5;                                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max5;                                              // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId6;                                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate6;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min6;                                              // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max6;                                              // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId7;                                           // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate7;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min7;                                              // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max7;                                              // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId8;                                           // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate8;                                             // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min8;                                              // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max8;                                              // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId9;                                           // 0x00B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate9;                                             // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min9;                                              // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max9;                                              // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId10;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate10;                                            // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min10;                                             // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max10;                                             // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269C[0x4];                                     // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDropItemDatabaseRow) == 0x000008, "Wrong alignment on FPalDropItemDatabaseRow");
static_assert(sizeof(FPalDropItemDatabaseRow) == 0x0000E0, "Wrong size on FPalDropItemDatabaseRow");
static_assert(offsetof(FPalDropItemDatabaseRow, CharacterID) == 0x000008, "Member 'FPalDropItemDatabaseRow::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Level) == 0x000010, "Member 'FPalDropItemDatabaseRow::Level' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId1) == 0x000014, "Member 'FPalDropItemDatabaseRow::ItemId1' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate1) == 0x00001C, "Member 'FPalDropItemDatabaseRow::Rate1' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min1) == 0x000020, "Member 'FPalDropItemDatabaseRow::Min1' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max1) == 0x000024, "Member 'FPalDropItemDatabaseRow::Max1' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId2) == 0x000028, "Member 'FPalDropItemDatabaseRow::ItemId2' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate2) == 0x000030, "Member 'FPalDropItemDatabaseRow::Rate2' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min2) == 0x000034, "Member 'FPalDropItemDatabaseRow::Min2' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max2) == 0x000038, "Member 'FPalDropItemDatabaseRow::Max2' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId3) == 0x00003C, "Member 'FPalDropItemDatabaseRow::ItemId3' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate3) == 0x000044, "Member 'FPalDropItemDatabaseRow::Rate3' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min3) == 0x000048, "Member 'FPalDropItemDatabaseRow::Min3' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max3) == 0x00004C, "Member 'FPalDropItemDatabaseRow::Max3' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId4) == 0x000050, "Member 'FPalDropItemDatabaseRow::ItemId4' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate4) == 0x000058, "Member 'FPalDropItemDatabaseRow::Rate4' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min4) == 0x00005C, "Member 'FPalDropItemDatabaseRow::Min4' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max4) == 0x000060, "Member 'FPalDropItemDatabaseRow::Max4' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId5) == 0x000064, "Member 'FPalDropItemDatabaseRow::ItemId5' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate5) == 0x00006C, "Member 'FPalDropItemDatabaseRow::Rate5' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min5) == 0x000070, "Member 'FPalDropItemDatabaseRow::Min5' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max5) == 0x000074, "Member 'FPalDropItemDatabaseRow::Max5' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId6) == 0x000078, "Member 'FPalDropItemDatabaseRow::ItemId6' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate6) == 0x000080, "Member 'FPalDropItemDatabaseRow::Rate6' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min6) == 0x000084, "Member 'FPalDropItemDatabaseRow::Min6' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max6) == 0x000088, "Member 'FPalDropItemDatabaseRow::Max6' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId7) == 0x00008C, "Member 'FPalDropItemDatabaseRow::ItemId7' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate7) == 0x000094, "Member 'FPalDropItemDatabaseRow::Rate7' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min7) == 0x000098, "Member 'FPalDropItemDatabaseRow::Min7' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max7) == 0x00009C, "Member 'FPalDropItemDatabaseRow::Max7' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId8) == 0x0000A0, "Member 'FPalDropItemDatabaseRow::ItemId8' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate8) == 0x0000A8, "Member 'FPalDropItemDatabaseRow::Rate8' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min8) == 0x0000AC, "Member 'FPalDropItemDatabaseRow::Min8' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max8) == 0x0000B0, "Member 'FPalDropItemDatabaseRow::Max8' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId9) == 0x0000B4, "Member 'FPalDropItemDatabaseRow::ItemId9' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate9) == 0x0000BC, "Member 'FPalDropItemDatabaseRow::Rate9' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min9) == 0x0000C0, "Member 'FPalDropItemDatabaseRow::Min9' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max9) == 0x0000C4, "Member 'FPalDropItemDatabaseRow::Max9' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, ItemId10) == 0x0000C8, "Member 'FPalDropItemDatabaseRow::ItemId10' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Rate10) == 0x0000D0, "Member 'FPalDropItemDatabaseRow::Rate10' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Min10) == 0x0000D4, "Member 'FPalDropItemDatabaseRow::Min10' has a wrong offset!");
static_assert(offsetof(FPalDropItemDatabaseRow, Max10) == 0x0000D8, "Member 'FPalDropItemDatabaseRow::Max10' has a wrong offset!");

// ScriptStruct Pal.PalCapturedCageInfoDatabaseRow
// 0x0020 (0x0028 - 0x0008)
struct FPalCapturedCageInfoDatabaseRow final : public FTableRowBase
{
public:
	class FName                                   FieldName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PalID;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLevel;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269D[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCapturedCageInfoDatabaseRow) == 0x000008, "Wrong alignment on FPalCapturedCageInfoDatabaseRow");
static_assert(sizeof(FPalCapturedCageInfoDatabaseRow) == 0x000028, "Wrong size on FPalCapturedCageInfoDatabaseRow");
static_assert(offsetof(FPalCapturedCageInfoDatabaseRow, FieldName) == 0x000008, "Member 'FPalCapturedCageInfoDatabaseRow::FieldName' has a wrong offset!");
static_assert(offsetof(FPalCapturedCageInfoDatabaseRow, PalID) == 0x000010, "Member 'FPalCapturedCageInfoDatabaseRow::PalID' has a wrong offset!");
static_assert(offsetof(FPalCapturedCageInfoDatabaseRow, Weight) == 0x000018, "Member 'FPalCapturedCageInfoDatabaseRow::Weight' has a wrong offset!");
static_assert(offsetof(FPalCapturedCageInfoDatabaseRow, MinLevel) == 0x00001C, "Member 'FPalCapturedCageInfoDatabaseRow::MinLevel' has a wrong offset!");
static_assert(offsetof(FPalCapturedCageInfoDatabaseRow, MaxLevel) == 0x000020, "Member 'FPalCapturedCageInfoDatabaseRow::MaxLevel' has a wrong offset!");

// ScriptStruct Pal.PalCharacterIconDataRow
// 0x0030 (0x0038 - 0x0008)
struct FPalCharacterIconDataRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterIconDataRow) == 0x000008, "Wrong alignment on FPalCharacterIconDataRow");
static_assert(sizeof(FPalCharacterIconDataRow) == 0x000038, "Wrong size on FPalCharacterIconDataRow");
static_assert(offsetof(FPalCharacterIconDataRow, Icon) == 0x000008, "Member 'FPalCharacterIconDataRow::Icon' has a wrong offset!");

// ScriptStruct Pal.PalBPClassDataRow
// 0x0030 (0x0038 - 0x0008)
struct FPalBPClassDataRow final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   BPClass;                                           // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBPClassDataRow) == 0x000008, "Wrong alignment on FPalBPClassDataRow");
static_assert(sizeof(FPalBPClassDataRow) == 0x000038, "Wrong size on FPalBPClassDataRow");
static_assert(offsetof(FPalBPClassDataRow, BPClass) == 0x000008, "Member 'FPalBPClassDataRow::BPClass' has a wrong offset!");

// ScriptStruct Pal.PalSizeParameterDataRow
// 0x0010 (0x0018 - 0x0008)
struct FPalSizeParameterDataRow final : public FTableRowBase
{
public:
	EPalSizeType                                  Size;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectScale;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpEffectOffsetZ;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalSizeParameterDataRow) == 0x000008, "Wrong alignment on FPalSizeParameterDataRow");
static_assert(sizeof(FPalSizeParameterDataRow) == 0x000018, "Wrong size on FPalSizeParameterDataRow");
static_assert(offsetof(FPalSizeParameterDataRow, Size) == 0x000008, "Member 'FPalSizeParameterDataRow::Size' has a wrong offset!");
static_assert(offsetof(FPalSizeParameterDataRow, EffectScale) == 0x00000C, "Member 'FPalSizeParameterDataRow::EffectScale' has a wrong offset!");
static_assert(offsetof(FPalSizeParameterDataRow, JumpEffectOffsetZ) == 0x000010, "Member 'FPalSizeParameterDataRow::JumpEffectOffsetZ' has a wrong offset!");

// ScriptStruct Pal.PalGainStatusPointsItemDataRow
// 0x0018 (0x0020 - 0x0008)
struct FPalGainStatusPointsItemDataRow final : public FTableRowBase
{
public:
	int32                                         MaxHP;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSP;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInventoryWeight;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A0[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalGainStatusPointsItemDataRow) == 0x000008, "Wrong alignment on FPalGainStatusPointsItemDataRow");
static_assert(sizeof(FPalGainStatusPointsItemDataRow) == 0x000020, "Wrong size on FPalGainStatusPointsItemDataRow");
static_assert(offsetof(FPalGainStatusPointsItemDataRow, MaxHP) == 0x000008, "Member 'FPalGainStatusPointsItemDataRow::MaxHP' has a wrong offset!");
static_assert(offsetof(FPalGainStatusPointsItemDataRow, MaxSP) == 0x00000C, "Member 'FPalGainStatusPointsItemDataRow::MaxSP' has a wrong offset!");
static_assert(offsetof(FPalGainStatusPointsItemDataRow, Power) == 0x000010, "Member 'FPalGainStatusPointsItemDataRow::Power' has a wrong offset!");
static_assert(offsetof(FPalGainStatusPointsItemDataRow, WorkSpeed) == 0x000014, "Member 'FPalGainStatusPointsItemDataRow::WorkSpeed' has a wrong offset!");
static_assert(offsetof(FPalGainStatusPointsItemDataRow, MaxInventoryWeight) == 0x000018, "Member 'FPalGainStatusPointsItemDataRow::MaxInventoryWeight' has a wrong offset!");

// ScriptStruct Pal.PalDropItemInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPalDropItemInfo final
{
public:
	uint8                                         Pad_26A1[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDropItemInfo) == 0x000008, "Wrong alignment on FPalDropItemInfo");
static_assert(sizeof(FPalDropItemInfo) == 0x000028, "Wrong size on FPalDropItemInfo");

// ScriptStruct Pal.PalDebugInfoSet
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FPalDebugInfoSet final
{
public:
	uint8                                         Pad_26A2[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDebugInfoSet) == 0x000008, "Wrong alignment on FPalDebugInfoSet");
static_assert(sizeof(FPalDebugInfoSet) == 0x000030, "Wrong size on FPalDebugInfoSet");

// ScriptStruct Pal.PalFieldLotteryName
// 0x0018 (0x0020 - 0x0008)
struct FPalFieldLotteryName final : public FTableRowBase
{
public:
	float                                         ItemSlot1_ProbabilityPercent;                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSlot2_ProbabilityPercent;                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSlot3_ProbabilityPercent;                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSlot4_ProbabilityPercent;                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSlot5_ProbabilityPercent;                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A3[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFieldLotteryName) == 0x000008, "Wrong alignment on FPalFieldLotteryName");
static_assert(sizeof(FPalFieldLotteryName) == 0x000020, "Wrong size on FPalFieldLotteryName");
static_assert(offsetof(FPalFieldLotteryName, ItemSlot1_ProbabilityPercent) == 0x000008, "Member 'FPalFieldLotteryName::ItemSlot1_ProbabilityPercent' has a wrong offset!");
static_assert(offsetof(FPalFieldLotteryName, ItemSlot2_ProbabilityPercent) == 0x00000C, "Member 'FPalFieldLotteryName::ItemSlot2_ProbabilityPercent' has a wrong offset!");
static_assert(offsetof(FPalFieldLotteryName, ItemSlot3_ProbabilityPercent) == 0x000010, "Member 'FPalFieldLotteryName::ItemSlot3_ProbabilityPercent' has a wrong offset!");
static_assert(offsetof(FPalFieldLotteryName, ItemSlot4_ProbabilityPercent) == 0x000014, "Member 'FPalFieldLotteryName::ItemSlot4_ProbabilityPercent' has a wrong offset!");
static_assert(offsetof(FPalFieldLotteryName, ItemSlot5_ProbabilityPercent) == 0x000018, "Member 'FPalFieldLotteryName::ItemSlot5_ProbabilityPercent' has a wrong offset!");

// ScriptStruct Pal.PalDungeonSpawnAreaData
// 0x0010 (0x0018 - 0x0008)
struct FPalDungeonSpawnAreaData final : public FTableRowBase
{
public:
	class FName                                   DungeonNameTextId;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PostfixTextId;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonSpawnAreaData) == 0x000008, "Wrong alignment on FPalDungeonSpawnAreaData");
static_assert(sizeof(FPalDungeonSpawnAreaData) == 0x000018, "Wrong size on FPalDungeonSpawnAreaData");
static_assert(offsetof(FPalDungeonSpawnAreaData, DungeonNameTextId) == 0x000008, "Member 'FPalDungeonSpawnAreaData::DungeonNameTextId' has a wrong offset!");
static_assert(offsetof(FPalDungeonSpawnAreaData, PostfixTextId) == 0x000010, "Member 'FPalDungeonSpawnAreaData::PostfixTextId' has a wrong offset!");

// ScriptStruct Pal.PalDungeonEnemySpawnerData
// 0x0048 (0x0050 - 0x0008)
struct FPalDungeonEnemySpawnerData final : public FTableRowBase
{
public:
	class FName                                   SpawnAreaId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalDungeonEnemySpawnerRankType               RankType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A4[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeightInSpawnAreaAndRank;                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpawnerBlueprintSoftClass;                         // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnerName;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonEnemySpawnerData) == 0x000008, "Wrong alignment on FPalDungeonEnemySpawnerData");
static_assert(sizeof(FPalDungeonEnemySpawnerData) == 0x000050, "Wrong size on FPalDungeonEnemySpawnerData");
static_assert(offsetof(FPalDungeonEnemySpawnerData, SpawnAreaId) == 0x000008, "Member 'FPalDungeonEnemySpawnerData::SpawnAreaId' has a wrong offset!");
static_assert(offsetof(FPalDungeonEnemySpawnerData, RankType) == 0x000010, "Member 'FPalDungeonEnemySpawnerData::RankType' has a wrong offset!");
static_assert(offsetof(FPalDungeonEnemySpawnerData, WeightInSpawnAreaAndRank) == 0x000014, "Member 'FPalDungeonEnemySpawnerData::WeightInSpawnAreaAndRank' has a wrong offset!");
static_assert(offsetof(FPalDungeonEnemySpawnerData, SpawnerBlueprintSoftClass) == 0x000018, "Member 'FPalDungeonEnemySpawnerData::SpawnerBlueprintSoftClass' has a wrong offset!");
static_assert(offsetof(FPalDungeonEnemySpawnerData, SpawnerName) == 0x000048, "Member 'FPalDungeonEnemySpawnerData::SpawnerName' has a wrong offset!");

// ScriptStruct Pal.PalDungeonItemSpawnerData
// 0x0018 (0x0020 - 0x0008)
struct FPalDungeonItemSpawnerData final : public FTableRowBase
{
public:
	class FName                                   SpawnAreaId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalDungeonItemSpawnerType                    Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A5[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemFieldLotteryName;                              // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A6[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDungeonItemSpawnerData) == 0x000008, "Wrong alignment on FPalDungeonItemSpawnerData");
static_assert(sizeof(FPalDungeonItemSpawnerData) == 0x000020, "Wrong size on FPalDungeonItemSpawnerData");
static_assert(offsetof(FPalDungeonItemSpawnerData, SpawnAreaId) == 0x000008, "Member 'FPalDungeonItemSpawnerData::SpawnAreaId' has a wrong offset!");
static_assert(offsetof(FPalDungeonItemSpawnerData, Type) == 0x000010, "Member 'FPalDungeonItemSpawnerData::Type' has a wrong offset!");
static_assert(offsetof(FPalDungeonItemSpawnerData, ItemFieldLotteryName) == 0x000014, "Member 'FPalDungeonItemSpawnerData::ItemFieldLotteryName' has a wrong offset!");

// ScriptStruct Pal.PalDungeonInfoParameter
// 0x0028 (0x0028 - 0x0000)
struct FPalDungeonInfoParameter final
{
public:
	class FText                                   DungeonName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearRemainSeconds;                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A7[0x8];                                     // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDungeonInfoParameter) == 0x000008, "Wrong alignment on FPalDungeonInfoParameter");
static_assert(sizeof(FPalDungeonInfoParameter) == 0x000028, "Wrong size on FPalDungeonInfoParameter");
static_assert(offsetof(FPalDungeonInfoParameter, DungeonName) == 0x000000, "Member 'FPalDungeonInfoParameter::DungeonName' has a wrong offset!");
static_assert(offsetof(FPalDungeonInfoParameter, Level) == 0x000018, "Member 'FPalDungeonInfoParameter::Level' has a wrong offset!");
static_assert(offsetof(FPalDungeonInfoParameter, DisappearRemainSeconds) == 0x00001C, "Member 'FPalDungeonInfoParameter::DisappearRemainSeconds' has a wrong offset!");

// ScriptStruct Pal.PalDungeonLevelInstanceLoadOperator
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPalDungeonLevelInstanceLoadOperator final
{
public:
	uint8                                         Pad_26A8[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDungeonLevelInstanceLoadOperator) == 0x000008, "Wrong alignment on FPalDungeonLevelInstanceLoadOperator");
static_assert(sizeof(FPalDungeonLevelInstanceLoadOperator) == 0x000028, "Wrong size on FPalDungeonLevelInstanceLoadOperator");

// ScriptStruct Pal.PalDungeonInstanceModelCreateParameter
// 0x0068 (0x0068 - 0x0000)
struct FPalDungeonInstanceModelCreateParameter final
{
public:
	uint8                                         Pad_26A9[0x60];                                    // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataLayerAsset*                        ReservedDataLayerAsset;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonInstanceModelCreateParameter) == 0x000008, "Wrong alignment on FPalDungeonInstanceModelCreateParameter");
static_assert(sizeof(FPalDungeonInstanceModelCreateParameter) == 0x000068, "Wrong size on FPalDungeonInstanceModelCreateParameter");
static_assert(offsetof(FPalDungeonInstanceModelCreateParameter, ReservedDataLayerAsset) == 0x000060, "Member 'FPalDungeonInstanceModelCreateParameter::ReservedDataLayerAsset' has a wrong offset!");

// ScriptStruct Pal.PalDungeonDataLayerAssetSet
// 0x0010 (0x0010 - 0x0000)
struct FPalDungeonDataLayerAssetSet final
{
public:
	TArray<class UDataLayerAsset*>                DataLayers;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDungeonDataLayerAssetSet) == 0x000008, "Wrong alignment on FPalDungeonDataLayerAssetSet");
static_assert(sizeof(FPalDungeonDataLayerAssetSet) == 0x000010, "Wrong size on FPalDungeonDataLayerAssetSet");
static_assert(offsetof(FPalDungeonDataLayerAssetSet, DataLayers) == 0x000000, "Member 'FPalDungeonDataLayerAssetSet::DataLayers' has a wrong offset!");

// ScriptStruct Pal.PalDynamicItemDataInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalDynamicItemDataInfo final
{
public:
	class UPalDynamicItemDataBase*                ItemData;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AA[0x8];                                     // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDynamicItemDataInfo) == 0x000008, "Wrong alignment on FPalDynamicItemDataInfo");
static_assert(sizeof(FPalDynamicItemDataInfo) == 0x000010, "Wrong size on FPalDynamicItemDataInfo");
static_assert(offsetof(FPalDynamicItemDataInfo, ItemData) == 0x000000, "Member 'FPalDynamicItemDataInfo::ItemData' has a wrong offset!");

// ScriptStruct Pal.PalDynamicItemInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalDynamicItemInfo final
{
public:
	struct FPalItemSlotId                         SlotID;                                            // 0x0000(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AB[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalDynamicItemDataBase*                DynamicItemData;                                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDynamicItemInfo) == 0x000008, "Wrong alignment on FPalDynamicItemInfo");
static_assert(sizeof(FPalDynamicItemInfo) == 0x000020, "Wrong size on FPalDynamicItemInfo");
static_assert(offsetof(FPalDynamicItemInfo, SlotID) == 0x000000, "Member 'FPalDynamicItemInfo::SlotID' has a wrong offset!");
static_assert(offsetof(FPalDynamicItemInfo, DynamicItemData) == 0x000018, "Member 'FPalDynamicItemInfo::DynamicItemData' has a wrong offset!");

// ScriptStruct Pal.PalDynamicItemIdArray
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPalDynamicItemIdArray final
{
public:
	uint8                                         Pad_26AC[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDynamicItemIdArray) == 0x000008, "Wrong alignment on FPalDynamicItemIdArray");
static_assert(sizeof(FPalDynamicItemIdArray) == 0x000010, "Wrong size on FPalDynamicItemIdArray");

// ScriptStruct Pal.PalDataTableRowName_FarmCropData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_FarmCropData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_FarmCropData) == 0x000004, "Wrong alignment on FPalDataTableRowName_FarmCropData");
static_assert(sizeof(FPalDataTableRowName_FarmCropData) == 0x000008, "Wrong size on FPalDataTableRowName_FarmCropData");
static_assert(offsetof(FPalDataTableRowName_FarmCropData, Key) == 0x000000, "Member 'FPalDataTableRowName_FarmCropData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_CrimeMasterData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_CrimeMasterData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_CrimeMasterData) == 0x000004, "Wrong alignment on FPalDataTableRowName_CrimeMasterData");
static_assert(sizeof(FPalDataTableRowName_CrimeMasterData) == 0x000008, "Wrong size on FPalDataTableRowName_CrimeMasterData");
static_assert(offsetof(FPalDataTableRowName_CrimeMasterData, Key) == 0x000000, "Member 'FPalDataTableRowName_CrimeMasterData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_ItemProductData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_ItemProductData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_ItemProductData) == 0x000004, "Wrong alignment on FPalDataTableRowName_ItemProductData");
static_assert(sizeof(FPalDataTableRowName_ItemProductData) == 0x000008, "Wrong size on FPalDataTableRowName_ItemProductData");
static_assert(offsetof(FPalDataTableRowName_ItemProductData, Key) == 0x000000, "Member 'FPalDataTableRowName_ItemProductData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_RecipeTechnologyData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_RecipeTechnologyData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_RecipeTechnologyData) == 0x000004, "Wrong alignment on FPalDataTableRowName_RecipeTechnologyData");
static_assert(sizeof(FPalDataTableRowName_RecipeTechnologyData) == 0x000008, "Wrong size on FPalDataTableRowName_RecipeTechnologyData");
static_assert(offsetof(FPalDataTableRowName_RecipeTechnologyData, Key) == 0x000000, "Member 'FPalDataTableRowName_RecipeTechnologyData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_UIInputAction
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_UIInputAction final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_UIInputAction) == 0x000004, "Wrong alignment on FPalDataTableRowName_UIInputAction");
static_assert(sizeof(FPalDataTableRowName_UIInputAction) == 0x000008, "Wrong size on FPalDataTableRowName_UIInputAction");
static_assert(offsetof(FPalDataTableRowName_UIInputAction, Key) == 0x000000, "Member 'FPalDataTableRowName_UIInputAction::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_ItemShopCreateData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_ItemShopCreateData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_ItemShopCreateData) == 0x000004, "Wrong alignment on FPalDataTableRowName_ItemShopCreateData");
static_assert(sizeof(FPalDataTableRowName_ItemShopCreateData) == 0x000008, "Wrong size on FPalDataTableRowName_ItemShopCreateData");
static_assert(offsetof(FPalDataTableRowName_ItemShopCreateData, Key) == 0x000000, "Member 'FPalDataTableRowName_ItemShopCreateData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_DungeonSpawnAreaData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_DungeonSpawnAreaData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_DungeonSpawnAreaData) == 0x000004, "Wrong alignment on FPalDataTableRowName_DungeonSpawnAreaData");
static_assert(sizeof(FPalDataTableRowName_DungeonSpawnAreaData) == 0x000008, "Wrong size on FPalDataTableRowName_DungeonSpawnAreaData");
static_assert(offsetof(FPalDataTableRowName_DungeonSpawnAreaData, Key) == 0x000000, "Member 'FPalDataTableRowName_DungeonSpawnAreaData::Key' has a wrong offset!");

// ScriptStruct Pal.PalDataTableRowName_FieldLotteryNameData
// 0x0008 (0x0008 - 0x0000)
struct FPalDataTableRowName_FieldLotteryNameData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalDataTableRowName_FieldLotteryNameData) == 0x000004, "Wrong alignment on FPalDataTableRowName_FieldLotteryNameData");
static_assert(sizeof(FPalDataTableRowName_FieldLotteryNameData) == 0x000008, "Wrong size on FPalDataTableRowName_FieldLotteryNameData");
static_assert(offsetof(FPalDataTableRowName_FieldLotteryNameData, Key) == 0x000000, "Member 'FPalDataTableRowName_FieldLotteryNameData::Key' has a wrong offset!");

// ScriptStruct Pal.SpawnedEnemyInfo
// 0x0018 (0x0018 - 0x0000)
struct FSpawnedEnemyInfo final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalEnemySpawnActorType                       WeaponType;                                        // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnedEnemyInfo) == 0x000008, "Wrong alignment on FSpawnedEnemyInfo");
static_assert(sizeof(FSpawnedEnemyInfo) == 0x000018, "Wrong size on FSpawnedEnemyInfo");
static_assert(offsetof(FSpawnedEnemyInfo, SelfActor) == 0x000000, "Member 'FSpawnedEnemyInfo::SelfActor' has a wrong offset!");
static_assert(offsetof(FSpawnedEnemyInfo, WeaponType) == 0x000008, "Member 'FSpawnedEnemyInfo::WeaponType' has a wrong offset!");
static_assert(offsetof(FSpawnedEnemyInfo, TargetActor) == 0x000010, "Member 'FSpawnedEnemyInfo::TargetActor' has a wrong offset!");

// ScriptStruct Pal.TargetAbleInfoForEnemy
// 0x0010 (0x0010 - 0x0000)
struct FTargetAbleInfoForEnemy final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DuplicateNum;                                      // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatLevel_OnlyCharacterParam;                    // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetAbleInfoForEnemy) == 0x000008, "Wrong alignment on FTargetAbleInfoForEnemy");
static_assert(sizeof(FTargetAbleInfoForEnemy) == 0x000010, "Wrong size on FTargetAbleInfoForEnemy");
static_assert(offsetof(FTargetAbleInfoForEnemy, SelfActor) == 0x000000, "Member 'FTargetAbleInfoForEnemy::SelfActor' has a wrong offset!");
static_assert(offsetof(FTargetAbleInfoForEnemy, DuplicateNum) == 0x000008, "Member 'FTargetAbleInfoForEnemy::DuplicateNum' has a wrong offset!");
static_assert(offsetof(FTargetAbleInfoForEnemy, ThreatLevel_OnlyCharacterParam) == 0x00000C, "Member 'FTargetAbleInfoForEnemy::ThreatLevel_OnlyCharacterParam' has a wrong offset!");

// ScriptStruct Pal.PalCaptureBonusExpRaw
// 0x0008 (0x0010 - 0x0008)
struct FPalCaptureBonusExpRaw final : public FTableRowBase
{
public:
	int32                                         BonusExp;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26AE[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCaptureBonusExpRaw) == 0x000008, "Wrong alignment on FPalCaptureBonusExpRaw");
static_assert(sizeof(FPalCaptureBonusExpRaw) == 0x000010, "Wrong size on FPalCaptureBonusExpRaw");
static_assert(offsetof(FPalCaptureBonusExpRaw, BonusExp) == 0x000008, "Member 'FPalCaptureBonusExpRaw::BonusExp' has a wrong offset!");

// ScriptStruct Pal.PalMorphSetting
// 0x0050 (0x0050 - 0x0000)
struct FPalMorphSetting final
{
public:
	TMap<class FName, float>                      WeightList;                                        // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMorphSetting) == 0x000008, "Wrong alignment on FPalMorphSetting");
static_assert(sizeof(FPalMorphSetting) == 0x000050, "Wrong size on FPalMorphSetting");
static_assert(offsetof(FPalMorphSetting, WeightList) == 0x000000, "Member 'FPalMorphSetting::WeightList' has a wrong offset!");

// ScriptStruct Pal.PalFoliageInstallDataArray
// 0x0010 (0x0010 - 0x0000)
struct FPalFoliageInstallDataArray final
{
public:
	TArray<struct FPalFoliageInstallData>         InstallDataArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageInstallDataArray) == 0x000008, "Wrong alignment on FPalFoliageInstallDataArray");
static_assert(sizeof(FPalFoliageInstallDataArray) == 0x000010, "Wrong size on FPalFoliageInstallDataArray");
static_assert(offsetof(FPalFoliageInstallDataArray, InstallDataArray) == 0x000000, "Member 'FPalFoliageInstallDataArray::InstallDataArray' has a wrong offset!");

// ScriptStruct Pal.PalFoliageInstanceInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FPalFoliageInstanceInfo final
{
public:
	uint8                                         Pad_26AF[0x4];                                     // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFoliageInstanceInfo) == 0x000004, "Wrong alignment on FPalFoliageInstanceInfo");
static_assert(sizeof(FPalFoliageInstanceInfo) == 0x000004, "Wrong size on FPalFoliageInstanceInfo");

// ScriptStruct Pal.FootIKSetting
// 0x0014 (0x0014 - 0x0000)
struct FFootIKSetting final
{
public:
	bool                                          bIsEnableIK;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RayCastBoneName;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayStartOffset;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayEndOffset;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootIKSetting) == 0x000004, "Wrong alignment on FFootIKSetting");
static_assert(sizeof(FFootIKSetting) == 0x000014, "Wrong size on FFootIKSetting");
static_assert(offsetof(FFootIKSetting, bIsEnableIK) == 0x000000, "Member 'FFootIKSetting::bIsEnableIK' has a wrong offset!");
static_assert(offsetof(FFootIKSetting, RayCastBoneName) == 0x000004, "Member 'FFootIKSetting::RayCastBoneName' has a wrong offset!");
static_assert(offsetof(FFootIKSetting, RayStartOffset) == 0x00000C, "Member 'FFootIKSetting::RayStartOffset' has a wrong offset!");
static_assert(offsetof(FFootIKSetting, RayEndOffset) == 0x000010, "Member 'FFootIKSetting::RayEndOffset' has a wrong offset!");

// ScriptStruct Pal.FootStepEffectInfo
// 0x0050 (0x0050 - 0x0000)
struct FFootStepEffectInfo final
{
public:
	TMap<EPhysicalSurface, TSoftObjectPtr<class UNiagaraSystem>> PhysicalSurfaceToEffect;                           // 0x0000(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootStepEffectInfo) == 0x000008, "Wrong alignment on FFootStepEffectInfo");
static_assert(sizeof(FFootStepEffectInfo) == 0x000050, "Wrong size on FFootStepEffectInfo");
static_assert(offsetof(FFootStepEffectInfo, PhysicalSurfaceToEffect) == 0x000000, "Member 'FFootStepEffectInfo::PhysicalSurfaceToEffect' has a wrong offset!");

// ScriptStruct Pal.PalFunnelCharacterManagementInfo
// 0x0038 (0x0038 - 0x0000)
struct FPalFunnelCharacterManagementInfo final
{
public:
	struct FPalInstanceID                         OwnerCharacterId;                                  // 0x0000(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APalFunnelCharacter*                    FunnelCharacter;                                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFunnelCharacterManagementInfo) == 0x000008, "Wrong alignment on FPalFunnelCharacterManagementInfo");
static_assert(sizeof(FPalFunnelCharacterManagementInfo) == 0x000038, "Wrong size on FPalFunnelCharacterManagementInfo");
static_assert(offsetof(FPalFunnelCharacterManagementInfo, OwnerCharacterId) == 0x000000, "Member 'FPalFunnelCharacterManagementInfo::OwnerCharacterId' has a wrong offset!");
static_assert(offsetof(FPalFunnelCharacterManagementInfo, FunnelCharacter) == 0x000030, "Member 'FPalFunnelCharacterManagementInfo::FunnelCharacter' has a wrong offset!");

// ScriptStruct Pal.PalFunnelSkillModuleCollectItemSearchInfo
// 0x0028 (0x0028 - 0x0000)
struct FPalFunnelSkillModuleCollectItemSearchInfo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B1[0x8];                                     // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFunnelSkillModuleCollectItemSearchInfo) == 0x000008, "Wrong alignment on FPalFunnelSkillModuleCollectItemSearchInfo");
static_assert(sizeof(FPalFunnelSkillModuleCollectItemSearchInfo) == 0x000028, "Wrong size on FPalFunnelSkillModuleCollectItemSearchInfo");
static_assert(offsetof(FPalFunnelSkillModuleCollectItemSearchInfo, Location) == 0x000000, "Member 'FPalFunnelSkillModuleCollectItemSearchInfo::Location' has a wrong offset!");
static_assert(offsetof(FPalFunnelSkillModuleCollectItemSearchInfo, Distance) == 0x000018, "Member 'FPalFunnelSkillModuleCollectItemSearchInfo::Distance' has a wrong offset!");
static_assert(offsetof(FPalFunnelSkillModuleCollectItemSearchInfo, ElapsedTime) == 0x00001C, "Member 'FPalFunnelSkillModuleCollectItemSearchInfo::ElapsedTime' has a wrong offset!");

// ScriptStruct Pal.PalGameProgressPresetDataTableRow
// 0x0060 (0x0068 - 0x0008)
struct FPalGameProgressPresetDataTableRow final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPLevel;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SPLevel;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLevel;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkLevel;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeightLevel;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureLevel;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B2[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalDebugOtomoPalInfo>          OtomoPals;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDebugOtomoPalInfo>          CapturedPals;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDebugItemCreateInfo>        LoadoutItems;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalDebugItemCreateInfo>        Items;                                             // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGameProgressPresetDataTableRow) == 0x000008, "Wrong alignment on FPalGameProgressPresetDataTableRow");
static_assert(sizeof(FPalGameProgressPresetDataTableRow) == 0x000068, "Wrong size on FPalGameProgressPresetDataTableRow");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, Level) == 0x000008, "Member 'FPalGameProgressPresetDataTableRow::Level' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, HPLevel) == 0x00000C, "Member 'FPalGameProgressPresetDataTableRow::HPLevel' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, SPLevel) == 0x000010, "Member 'FPalGameProgressPresetDataTableRow::SPLevel' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, AttackLevel) == 0x000014, "Member 'FPalGameProgressPresetDataTableRow::AttackLevel' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, WorkLevel) == 0x000018, "Member 'FPalGameProgressPresetDataTableRow::WorkLevel' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, WeightLevel) == 0x00001C, "Member 'FPalGameProgressPresetDataTableRow::WeightLevel' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, CaptureLevel) == 0x000020, "Member 'FPalGameProgressPresetDataTableRow::CaptureLevel' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, OtomoPals) == 0x000028, "Member 'FPalGameProgressPresetDataTableRow::OtomoPals' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, CapturedPals) == 0x000038, "Member 'FPalGameProgressPresetDataTableRow::CapturedPals' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, LoadoutItems) == 0x000048, "Member 'FPalGameProgressPresetDataTableRow::LoadoutItems' has a wrong offset!");
static_assert(offsetof(FPalGameProgressPresetDataTableRow, Items) == 0x000058, "Member 'FPalGameProgressPresetDataTableRow::Items' has a wrong offset!");

// ScriptStruct Pal.PalGameSystemInitSequenceSet
// 0x0010 (0x0010 - 0x0000)
struct FPalGameSystemInitSequenceSet final
{
public:
	TArray<class UPalGameSystemInitSequenceBase*> InitSequences;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGameSystemInitSequenceSet) == 0x000008, "Wrong alignment on FPalGameSystemInitSequenceSet");
static_assert(sizeof(FPalGameSystemInitSequenceSet) == 0x000010, "Wrong size on FPalGameSystemInitSequenceSet");
static_assert(offsetof(FPalGameSystemInitSequenceSet, InitSequences) == 0x000000, "Member 'FPalGameSystemInitSequenceSet::InitSequences' has a wrong offset!");

// ScriptStruct Pal.PalGroupUpdateInfo
// 0x0060 (0x0060 - 0x0000)
struct FPalGroupUpdateInfo final
{
public:
	struct FGuid                                  EnterGroupId;                                      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExitGroupId;                                       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          PlayerUIds;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalInstanceID>                 CharacterIndividualIds;                            // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          MapObjectInstanceIds_BaseCampPoint;                // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          BaseCampIds;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGroupUpdateInfo) == 0x000008, "Wrong alignment on FPalGroupUpdateInfo");
static_assert(sizeof(FPalGroupUpdateInfo) == 0x000060, "Wrong size on FPalGroupUpdateInfo");
static_assert(offsetof(FPalGroupUpdateInfo, EnterGroupId) == 0x000000, "Member 'FPalGroupUpdateInfo::EnterGroupId' has a wrong offset!");
static_assert(offsetof(FPalGroupUpdateInfo, ExitGroupId) == 0x000010, "Member 'FPalGroupUpdateInfo::ExitGroupId' has a wrong offset!");
static_assert(offsetof(FPalGroupUpdateInfo, PlayerUIds) == 0x000020, "Member 'FPalGroupUpdateInfo::PlayerUIds' has a wrong offset!");
static_assert(offsetof(FPalGroupUpdateInfo, CharacterIndividualIds) == 0x000030, "Member 'FPalGroupUpdateInfo::CharacterIndividualIds' has a wrong offset!");
static_assert(offsetof(FPalGroupUpdateInfo, MapObjectInstanceIds_BaseCampPoint) == 0x000040, "Member 'FPalGroupUpdateInfo::MapObjectInstanceIds_BaseCampPoint' has a wrong offset!");
static_assert(offsetof(FPalGroupUpdateInfo, BaseCampIds) == 0x000050, "Member 'FPalGroupUpdateInfo::BaseCampIds' has a wrong offset!");

// ScriptStruct Pal.PalGuildEnterRequestLogInfo
// 0x0010 (0x0010 - 0x0000)
struct FPalGuildEnterRequestLogInfo final
{
public:
	TArray<struct FDateTime>                      RequestAtArray;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalGuildEnterRequestLogInfo) == 0x000008, "Wrong alignment on FPalGuildEnterRequestLogInfo");
static_assert(sizeof(FPalGuildEnterRequestLogInfo) == 0x000010, "Wrong size on FPalGuildEnterRequestLogInfo");
static_assert(offsetof(FPalGuildEnterRequestLogInfo, RequestAtArray) == 0x000000, "Member 'FPalGuildEnterRequestLogInfo::RequestAtArray' has a wrong offset!");

// ScriptStruct Pal.PalFastGuildPlayerInfoRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FPalFastGuildPlayerInfoRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalGuildPlayerInfoRepInfo>     Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B3[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFastGuildPlayerInfoRepInfoArray) == 0x000008, "Wrong alignment on FPalFastGuildPlayerInfoRepInfoArray");
static_assert(sizeof(FPalFastGuildPlayerInfoRepInfoArray) == 0x000148, "Wrong size on FPalFastGuildPlayerInfoRepInfoArray");
static_assert(offsetof(FPalFastGuildPlayerInfoRepInfoArray, Items) == 0x000108, "Member 'FPalFastGuildPlayerInfoRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalIncidentParameterDataTableRow
// 0x0008 (0x0010 - 0x0008)
struct FPalIncidentParameterDataTableRow final : public FTableRowBase
{
public:
	class FName                                   Option;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalIncidentParameterDataTableRow) == 0x000008, "Wrong alignment on FPalIncidentParameterDataTableRow");
static_assert(sizeof(FPalIncidentParameterDataTableRow) == 0x000010, "Wrong size on FPalIncidentParameterDataTableRow");
static_assert(offsetof(FPalIncidentParameterDataTableRow, Option) == 0x000008, "Member 'FPalIncidentParameterDataTableRow::Option' has a wrong offset!");

// ScriptStruct Pal.PalInteractiveObjectActionBy
// 0x0010 (0x0010 - 0x0000)
struct FPalInteractiveObjectActionBy final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractId;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalInteractiveObjectActionBy) == 0x000008, "Wrong alignment on FPalInteractiveObjectActionBy");
static_assert(sizeof(FPalInteractiveObjectActionBy) == 0x000010, "Wrong size on FPalInteractiveObjectActionBy");
static_assert(offsetof(FPalInteractiveObjectActionBy, InteractingActor) == 0x000000, "Member 'FPalInteractiveObjectActionBy::InteractingActor' has a wrong offset!");
static_assert(offsetof(FPalInteractiveObjectActionBy, InteractId) == 0x000008, "Member 'FPalInteractiveObjectActionBy::InteractId' has a wrong offset!");

// ScriptStruct Pal.PalVisitorNPCDatabaseRow
// 0x0008 (0x0078 - 0x0070)
struct FPalVisitorNPCDatabaseRow final : public FPalInvaderDatabaseRow
{
public:
	EPalIVisitorNPCAction                         ActionTimeLimit;                                   // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSquad;                                           // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B5[0x6];                                     // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalVisitorNPCDatabaseRow) == 0x000008, "Wrong alignment on FPalVisitorNPCDatabaseRow");
static_assert(sizeof(FPalVisitorNPCDatabaseRow) == 0x000078, "Wrong size on FPalVisitorNPCDatabaseRow");
static_assert(offsetof(FPalVisitorNPCDatabaseRow, ActionTimeLimit) == 0x000070, "Member 'FPalVisitorNPCDatabaseRow::ActionTimeLimit' has a wrong offset!");
static_assert(offsetof(FPalVisitorNPCDatabaseRow, IsSquad) == 0x000071, "Member 'FPalVisitorNPCDatabaseRow::IsSquad' has a wrong offset!");

// ScriptStruct Pal.PalInvaderSpawnCharacterParameter
// 0x000C (0x000C - 0x0000)
struct FPalInvaderSpawnCharacterParameter final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalInvaderSpawnCharacterParameter) == 0x000004, "Wrong alignment on FPalInvaderSpawnCharacterParameter");
static_assert(sizeof(FPalInvaderSpawnCharacterParameter) == 0x00000C, "Wrong size on FPalInvaderSpawnCharacterParameter");
static_assert(offsetof(FPalInvaderSpawnCharacterParameter, CharacterID) == 0x000000, "Member 'FPalInvaderSpawnCharacterParameter::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalInvaderSpawnCharacterParameter, Level) == 0x000008, "Member 'FPalInvaderSpawnCharacterParameter::Level' has a wrong offset!");

// ScriptStruct Pal.PalItemOperationOptions
// 0x0001 (0x0001 - 0x0000)
struct FPalItemOperationOptions final
{
public:
	uint8                                         Pad_26B6[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalItemOperationOptions) == 0x000001, "Wrong alignment on FPalItemOperationOptions");
static_assert(sizeof(FPalItemOperationOptions) == 0x000001, "Wrong size on FPalItemOperationOptions");

// ScriptStruct Pal.PalStaticItemAndSlot
// 0x0020 (0x0020 - 0x0000)
struct FPalStaticItemAndSlot final
{
public:
	struct FPalStaticItemIdAndNum                 ItemInfo;                                          // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPalItemSlotId                         SlotID;                                            // 0x000C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalStaticItemAndSlot) == 0x000004, "Wrong alignment on FPalStaticItemAndSlot");
static_assert(sizeof(FPalStaticItemAndSlot) == 0x000020, "Wrong size on FPalStaticItemAndSlot");
static_assert(offsetof(FPalStaticItemAndSlot, ItemInfo) == 0x000000, "Member 'FPalStaticItemAndSlot::ItemInfo' has a wrong offset!");
static_assert(offsetof(FPalStaticItemAndSlot, SlotID) == 0x00000C, "Member 'FPalStaticItemAndSlot::SlotID' has a wrong offset!");

// ScriptStruct Pal.PalSlotOpItemSlotInfo
// 0x0044 (0x0044 - 0x0000)
struct FPalSlotOpItemSlotInfo final
{
public:
	struct FPalSlotOpItemInfo                     ItemInfo;                                          // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPalItemSlotId                         SlotID;                                            // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSlotOpItemSlotInfo) == 0x000004, "Wrong alignment on FPalSlotOpItemSlotInfo");
static_assert(sizeof(FPalSlotOpItemSlotInfo) == 0x000044, "Wrong size on FPalSlotOpItemSlotInfo");
static_assert(offsetof(FPalSlotOpItemSlotInfo, ItemInfo) == 0x000000, "Member 'FPalSlotOpItemSlotInfo::ItemInfo' has a wrong offset!");
static_assert(offsetof(FPalSlotOpItemSlotInfo, SlotID) == 0x000030, "Member 'FPalSlotOpItemSlotInfo::SlotID' has a wrong offset!");

// ScriptStruct Pal.PalItemContainerCreateParameter
// 0x0068 (0x0068 - 0x0000)
struct FPalItemContainerCreateParameter final
{
public:
	int32                                         SlotNum;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalItemPermission                     Permission;                                        // 0x0008(0x0030)(NativeAccessSpecifierPublic)
	struct FPalItemContainerBelongInfo            BelongInfo;                                        // 0x0038(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FPalItemAndNum>                 InitialItems;                                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemContainerCreateParameter) == 0x000008, "Wrong alignment on FPalItemContainerCreateParameter");
static_assert(sizeof(FPalItemContainerCreateParameter) == 0x000068, "Wrong size on FPalItemContainerCreateParameter");
static_assert(offsetof(FPalItemContainerCreateParameter, SlotNum) == 0x000000, "Member 'FPalItemContainerCreateParameter::SlotNum' has a wrong offset!");
static_assert(offsetof(FPalItemContainerCreateParameter, Permission) == 0x000008, "Member 'FPalItemContainerCreateParameter::Permission' has a wrong offset!");
static_assert(offsetof(FPalItemContainerCreateParameter, BelongInfo) == 0x000038, "Member 'FPalItemContainerCreateParameter::BelongInfo' has a wrong offset!");
static_assert(offsetof(FPalItemContainerCreateParameter, InitialItems) == 0x000058, "Member 'FPalItemContainerCreateParameter::InitialItems' has a wrong offset!");

// ScriptStruct Pal.PalItemLotteryData
// 0x0028 (0x0030 - 0x0008)
struct FPalItemLotteryData final : public FTableRowBase
{
public:
	class FName                                   FieldName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNo;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightInSlot;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StaticItemId;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinNum;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNum;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumUnit;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectTreasureGradeType                TreasureBoxGrade;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B8[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalItemLotteryData) == 0x000008, "Wrong alignment on FPalItemLotteryData");
static_assert(sizeof(FPalItemLotteryData) == 0x000030, "Wrong size on FPalItemLotteryData");
static_assert(offsetof(FPalItemLotteryData, FieldName) == 0x000008, "Member 'FPalItemLotteryData::FieldName' has a wrong offset!");
static_assert(offsetof(FPalItemLotteryData, SlotNo) == 0x000010, "Member 'FPalItemLotteryData::SlotNo' has a wrong offset!");
static_assert(offsetof(FPalItemLotteryData, WeightInSlot) == 0x000014, "Member 'FPalItemLotteryData::WeightInSlot' has a wrong offset!");
static_assert(offsetof(FPalItemLotteryData, StaticItemId) == 0x000018, "Member 'FPalItemLotteryData::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalItemLotteryData, MinNum) == 0x000020, "Member 'FPalItemLotteryData::MinNum' has a wrong offset!");
static_assert(offsetof(FPalItemLotteryData, MaxNum) == 0x000024, "Member 'FPalItemLotteryData::MaxNum' has a wrong offset!");
static_assert(offsetof(FPalItemLotteryData, NumUnit) == 0x000028, "Member 'FPalItemLotteryData::NumUnit' has a wrong offset!");
static_assert(offsetof(FPalItemLotteryData, TreasureBoxGrade) == 0x00002C, "Member 'FPalItemLotteryData::TreasureBoxGrade' has a wrong offset!");

// ScriptStruct Pal.PalItemFilterPreferenceItem
// 0x0040 (0x0040 - 0x0000)
struct FPalItemFilterPreferenceItem final
{
public:
	struct FDataTableRowHandle                    FilterTextId;                                      // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<EPalItemTypeA>                         TypeA;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EPalItemTypeB>                         TypeB;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EPalItemTypeB>                         TypeB_Except;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemFilterPreferenceItem) == 0x000008, "Wrong alignment on FPalItemFilterPreferenceItem");
static_assert(sizeof(FPalItemFilterPreferenceItem) == 0x000040, "Wrong size on FPalItemFilterPreferenceItem");
static_assert(offsetof(FPalItemFilterPreferenceItem, FilterTextId) == 0x000000, "Member 'FPalItemFilterPreferenceItem::FilterTextId' has a wrong offset!");
static_assert(offsetof(FPalItemFilterPreferenceItem, TypeA) == 0x000010, "Member 'FPalItemFilterPreferenceItem::TypeA' has a wrong offset!");
static_assert(offsetof(FPalItemFilterPreferenceItem, TypeB) == 0x000020, "Member 'FPalItemFilterPreferenceItem::TypeB' has a wrong offset!");
static_assert(offsetof(FPalItemFilterPreferenceItem, TypeB_Except) == 0x000030, "Member 'FPalItemFilterPreferenceItem::TypeB_Except' has a wrong offset!");

// ScriptStruct Pal.PalItemFilterPreference
// 0x0050 (0x0050 - 0x0000)
struct FPalItemFilterPreference final
{
public:
	TMap<class FName, struct FPalItemFilterPreferenceItem> PreferenceMap;                                     // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemFilterPreference) == 0x000008, "Wrong alignment on FPalItemFilterPreference");
static_assert(sizeof(FPalItemFilterPreference) == 0x000050, "Wrong size on FPalItemFilterPreference");
static_assert(offsetof(FPalItemFilterPreference, PreferenceMap) == 0x000000, "Member 'FPalItemFilterPreference::PreferenceMap' has a wrong offset!");

// ScriptStruct Pal.FastPalLocationRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FFastPalLocationRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalLocationRepInfo>            Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_26B9[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFastPalLocationRepInfoArray) == 0x000008, "Wrong alignment on FFastPalLocationRepInfoArray");
static_assert(sizeof(FFastPalLocationRepInfoArray) == 0x000148, "Wrong size on FFastPalLocationRepInfoArray");
static_assert(offsetof(FFastPalLocationRepInfoArray, Items) == 0x000108, "Member 'FFastPalLocationRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectConcreteModelCreateParameter
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FPalMapObjectConcreteModelCreateParameter final
{
public:
	uint8                                         Pad_26BA[0xA0];                                    // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectConcreteModelCreateParameter) == 0x000010, "Wrong alignment on FPalMapObjectConcreteModelCreateParameter");
static_assert(sizeof(FPalMapObjectConcreteModelCreateParameter) == 0x0000A0, "Wrong size on FPalMapObjectConcreteModelCreateParameter");

// ScriptStruct Pal.PalMapObjectMasterData
// 0x0068 (0x0070 - 0x0008)
struct FPalMapObjectMasterData final : public FTableRowBase
{
public:
	class FName                                   OverrideNameMsgID;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlueprintClassName;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BlueprintClassSoft;                                // 0x0018(0x0030)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectMaterialType                     MaterialType;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectMaterialSubType                  MaterialSubType;                                   // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26BB[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defense;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBelongToBaseCamp;                                 // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26BC[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistributeExpAroundPlayer;                         // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeteriorationDamage;                               // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtinguishBurnWorkAmount;                          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHPGauge;                                      // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDevelop;                                        // 0x0065(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26BD[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Editor_RowNameHash;                                // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26BE[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectMasterData) == 0x000008, "Wrong alignment on FPalMapObjectMasterData");
static_assert(sizeof(FPalMapObjectMasterData) == 0x000070, "Wrong size on FPalMapObjectMasterData");
static_assert(offsetof(FPalMapObjectMasterData, OverrideNameMsgID) == 0x000008, "Member 'FPalMapObjectMasterData::OverrideNameMsgID' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, BlueprintClassName) == 0x000010, "Member 'FPalMapObjectMasterData::BlueprintClassName' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, BlueprintClassSoft) == 0x000018, "Member 'FPalMapObjectMasterData::BlueprintClassSoft' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, MaterialType) == 0x000048, "Member 'FPalMapObjectMasterData::MaterialType' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, MaterialSubType) == 0x000049, "Member 'FPalMapObjectMasterData::MaterialSubType' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, HP) == 0x00004C, "Member 'FPalMapObjectMasterData::HP' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, Defense) == 0x000050, "Member 'FPalMapObjectMasterData::Defense' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, bBelongToBaseCamp) == 0x000054, "Member 'FPalMapObjectMasterData::bBelongToBaseCamp' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, DistributeExpAroundPlayer) == 0x000058, "Member 'FPalMapObjectMasterData::DistributeExpAroundPlayer' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, DeteriorationDamage) == 0x00005C, "Member 'FPalMapObjectMasterData::DeteriorationDamage' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, ExtinguishBurnWorkAmount) == 0x000060, "Member 'FPalMapObjectMasterData::ExtinguishBurnWorkAmount' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, bShowHPGauge) == 0x000064, "Member 'FPalMapObjectMasterData::bShowHPGauge' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, bInDevelop) == 0x000065, "Member 'FPalMapObjectMasterData::bInDevelop' has a wrong offset!");
static_assert(offsetof(FPalMapObjectMasterData, Editor_RowNameHash) == 0x000068, "Member 'FPalMapObjectMasterData::Editor_RowNameHash' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectAssignData
// 0x0018 (0x0020 - 0x0008)
struct FPalMapObjectAssignData final : public FTableRowBase
{
public:
	EPalGenusCategoryType                         GenusCategory;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               ElementType;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorkSuitability                           WorkSuitability;                                   // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26BF[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkSuitabilityRank;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerWorkable;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWorkType                                  WorkType;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalActionType                                WorkActionType;                                    // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C0[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkerMaxNum;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AffectSanityValue;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C1[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectAssignData) == 0x000008, "Wrong alignment on FPalMapObjectAssignData");
static_assert(sizeof(FPalMapObjectAssignData) == 0x000020, "Wrong size on FPalMapObjectAssignData");
static_assert(offsetof(FPalMapObjectAssignData, GenusCategory) == 0x000008, "Member 'FPalMapObjectAssignData::GenusCategory' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, ElementType) == 0x000009, "Member 'FPalMapObjectAssignData::ElementType' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, WorkSuitability) == 0x00000A, "Member 'FPalMapObjectAssignData::WorkSuitability' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, WorkSuitabilityRank) == 0x00000C, "Member 'FPalMapObjectAssignData::WorkSuitabilityRank' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, bPlayerWorkable) == 0x000010, "Member 'FPalMapObjectAssignData::bPlayerWorkable' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, WorkType) == 0x000011, "Member 'FPalMapObjectAssignData::WorkType' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, WorkActionType) == 0x000012, "Member 'FPalMapObjectAssignData::WorkActionType' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, WorkerMaxNum) == 0x000014, "Member 'FPalMapObjectAssignData::WorkerMaxNum' has a wrong offset!");
static_assert(offsetof(FPalMapObjectAssignData, AffectSanityValue) == 0x000018, "Member 'FPalMapObjectAssignData::AffectSanityValue' has a wrong offset!");

// ScriptStruct Pal.PalFoliageTypeReference
// 0x0050 (0x0058 - 0x0008)
struct FPalFoliageTypeReference final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFoliageType>            FoliageType;                                       // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_MapObjectData     FoliageMapObjectId;                                // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalDataTableRowName_ItemData          DropItemId;                                        // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropItemNum;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectDestroyFXType                    DestroyFXType;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C2[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFoliageTypeReference) == 0x000008, "Wrong alignment on FPalFoliageTypeReference");
static_assert(sizeof(FPalFoliageTypeReference) == 0x000058, "Wrong size on FPalFoliageTypeReference");
static_assert(offsetof(FPalFoliageTypeReference, FoliageType) == 0x000008, "Member 'FPalFoliageTypeReference::FoliageType' has a wrong offset!");
static_assert(offsetof(FPalFoliageTypeReference, FoliageMapObjectId) == 0x000038, "Member 'FPalFoliageTypeReference::FoliageMapObjectId' has a wrong offset!");
static_assert(offsetof(FPalFoliageTypeReference, HP) == 0x000040, "Member 'FPalFoliageTypeReference::HP' has a wrong offset!");
static_assert(offsetof(FPalFoliageTypeReference, DropItemId) == 0x000044, "Member 'FPalFoliageTypeReference::DropItemId' has a wrong offset!");
static_assert(offsetof(FPalFoliageTypeReference, DropItemNum) == 0x00004C, "Member 'FPalFoliageTypeReference::DropItemNum' has a wrong offset!");
static_assert(offsetof(FPalFoliageTypeReference, DestroyFXType) == 0x000050, "Member 'FPalFoliageTypeReference::DestroyFXType' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectStatusValue
// 0x0008 (0x0008 - 0x0000)
struct FPalMapObjectStatusValue final
{
public:
	int32                                         CurrentValue;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPalMapObjectStatusValue) == 0x000004, "Wrong alignment on FPalMapObjectStatusValue");
static_assert(sizeof(FPalMapObjectStatusValue) == 0x000008, "Wrong size on FPalMapObjectStatusValue");
static_assert(offsetof(FPalMapObjectStatusValue, CurrentValue) == 0x000000, "Member 'FPalMapObjectStatusValue::CurrentValue' has a wrong offset!");
static_assert(offsetof(FPalMapObjectStatusValue, MaxValue) == 0x000004, "Member 'FPalMapObjectStatusValue::MaxValue' has a wrong offset!");

// ScriptStruct Pal.PalItemVisualModelFXInfo
// 0x0070 (0x0070 - 0x0000)
struct FPalItemVisualModelFXInfo final
{
public:
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C3[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalTransform;                                    // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemVisualModelFXInfo) == 0x000010, "Wrong alignment on FPalItemVisualModelFXInfo");
static_assert(sizeof(FPalItemVisualModelFXInfo) == 0x000070, "Wrong size on FPalItemVisualModelFXInfo");
static_assert(offsetof(FPalItemVisualModelFXInfo, NiagaraSystem) == 0x000000, "Member 'FPalItemVisualModelFXInfo::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FPalItemVisualModelFXInfo, LocalTransform) == 0x000010, "Member 'FPalItemVisualModelFXInfo::LocalTransform' has a wrong offset!");

// ScriptStruct Pal.PalFarmCropGrowupProcessSet
// 0x0038 (0x0038 - 0x0000)
struct FPalFarmCropGrowupProcessSet final
{
public:
	EPalFarmCropState                             State;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentReference                    TargetCompRef;                                     // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ProcessRate;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C5[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFarmCropGrowupProcessSet) == 0x000008, "Wrong alignment on FPalFarmCropGrowupProcessSet");
static_assert(sizeof(FPalFarmCropGrowupProcessSet) == 0x000038, "Wrong size on FPalFarmCropGrowupProcessSet");
static_assert(offsetof(FPalFarmCropGrowupProcessSet, State) == 0x000000, "Member 'FPalFarmCropGrowupProcessSet::State' has a wrong offset!");
static_assert(offsetof(FPalFarmCropGrowupProcessSet, TargetCompRef) == 0x000008, "Member 'FPalFarmCropGrowupProcessSet::TargetCompRef' has a wrong offset!");
static_assert(offsetof(FPalFarmCropGrowupProcessSet, ProcessRate) == 0x000030, "Member 'FPalFarmCropGrowupProcessSet::ProcessRate' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectFarmCropData
// 0x0070 (0x0078 - 0x0008)
struct FPalMapObjectFarmCropData final : public FTableRowBase
{
public:
	class FName                                   CropBlueprintClassName;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CropClassPath;                                     // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CropItemId;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrowupTime;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CropItemNum;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeedingWorkAmount;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WateringWorkAmount;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HarvestWorkAmount;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialItem1_Id;                                  // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem1_Num;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialItem2_Id;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem2_Num;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Editor_RowNameHash;                                // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectFarmCropData) == 0x000008, "Wrong alignment on FPalMapObjectFarmCropData");
static_assert(sizeof(FPalMapObjectFarmCropData) == 0x000078, "Wrong size on FPalMapObjectFarmCropData");
static_assert(offsetof(FPalMapObjectFarmCropData, CropBlueprintClassName) == 0x000008, "Member 'FPalMapObjectFarmCropData::CropBlueprintClassName' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, CropClassPath) == 0x000010, "Member 'FPalMapObjectFarmCropData::CropClassPath' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, CropItemId) == 0x000040, "Member 'FPalMapObjectFarmCropData::CropItemId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, GrowupTime) == 0x000048, "Member 'FPalMapObjectFarmCropData::GrowupTime' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, CropItemNum) == 0x00004C, "Member 'FPalMapObjectFarmCropData::CropItemNum' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, SeedingWorkAmount) == 0x000050, "Member 'FPalMapObjectFarmCropData::SeedingWorkAmount' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, WateringWorkAmount) == 0x000054, "Member 'FPalMapObjectFarmCropData::WateringWorkAmount' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, HarvestWorkAmount) == 0x000058, "Member 'FPalMapObjectFarmCropData::HarvestWorkAmount' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, MaterialItem1_Id) == 0x00005C, "Member 'FPalMapObjectFarmCropData::MaterialItem1_Id' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, MaterialItem1_Num) == 0x000064, "Member 'FPalMapObjectFarmCropData::MaterialItem1_Num' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, MaterialItem2_Id) == 0x000068, "Member 'FPalMapObjectFarmCropData::MaterialItem2_Id' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, MaterialItem2_Num) == 0x000070, "Member 'FPalMapObjectFarmCropData::MaterialItem2_Num' has a wrong offset!");
static_assert(offsetof(FPalMapObjectFarmCropData, Editor_RowNameHash) == 0x000074, "Member 'FPalMapObjectFarmCropData::Editor_RowNameHash' has a wrong offset!");

// ScriptStruct Pal.PalFoliageMasterData
// 0x0008 (0x0010 - 0x0008)
struct FPalFoliageMasterData final : public FTableRowBase
{
public:
	class FName                                   ClassRefId;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFoliageMasterData) == 0x000008, "Wrong alignment on FPalFoliageMasterData");
static_assert(sizeof(FPalFoliageMasterData) == 0x000010, "Wrong size on FPalFoliageMasterData");
static_assert(offsetof(FPalFoliageMasterData, ClassRefId) == 0x000008, "Member 'FPalFoliageMasterData::ClassRefId' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectItemContainerModuleFilter
// 0x0010 (0x0010 - 0x0000)
struct FPalMapObjectItemContainerModuleFilter final
{
public:
	TArray<class FName>                           FilterOffList;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectItemContainerModuleFilter) == 0x000008, "Wrong alignment on FPalMapObjectItemContainerModuleFilter");
static_assert(sizeof(FPalMapObjectItemContainerModuleFilter) == 0x000010, "Wrong size on FPalMapObjectItemContainerModuleFilter");
static_assert(offsetof(FPalMapObjectItemContainerModuleFilter, FilterOffList) == 0x000000, "Member 'FPalMapObjectItemContainerModuleFilter::FilterOffList' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectItemContainerCreateContainerParameter
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FPalMapObjectItemContainerCreateContainerParameter final
{
public:
	uint8                                         Pad_26C6[0x70];                                    // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectItemContainerCreateContainerParameter) == 0x000008, "Wrong alignment on FPalMapObjectItemContainerCreateContainerParameter");
static_assert(sizeof(FPalMapObjectItemContainerCreateContainerParameter) == 0x000070, "Wrong size on FPalMapObjectItemContainerCreateContainerParameter");

// ScriptStruct Pal.PalMapObjectSpawnableCheckParameter
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FPalMapObjectSpawnableCheckParameter final
{
public:
	uint8                                         Pad_26C7[0x78];                                    // 0x0000(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredOverlapCheckActors;                         // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C8[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectSpawnableCheckParameter) == 0x000010, "Wrong alignment on FPalMapObjectSpawnableCheckParameter");
static_assert(sizeof(FPalMapObjectSpawnableCheckParameter) == 0x000090, "Wrong size on FPalMapObjectSpawnableCheckParameter");
static_assert(offsetof(FPalMapObjectSpawnableCheckParameter, IgnoredOverlapCheckActors) == 0x000078, "Member 'FPalMapObjectSpawnableCheckParameter::IgnoredOverlapCheckActors' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectManageAsyncTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FPalMapObjectManageAsyncTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_26C9[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectManageAsyncTickFunction) == 0x000008, "Wrong alignment on FPalMapObjectManageAsyncTickFunction");
static_assert(sizeof(FPalMapObjectManageAsyncTickFunction) == 0x000030, "Wrong size on FPalMapObjectManageAsyncTickFunction");

// ScriptStruct Pal.PalMapObjectModelInitializeExtraParameters
// 0x0028 (0x0028 - 0x0000)
struct FPalMapObjectModelInitializeExtraParameters final
{
public:
	TArray<class UPalMapObjectModelInitializeExtraParameterBase*> Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoredSave;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26CA[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LevelObjectInstanceId;                             // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26CB[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectModelInitializeExtraParameters) == 0x000008, "Wrong alignment on FPalMapObjectModelInitializeExtraParameters");
static_assert(sizeof(FPalMapObjectModelInitializeExtraParameters) == 0x000028, "Wrong size on FPalMapObjectModelInitializeExtraParameters");
static_assert(offsetof(FPalMapObjectModelInitializeExtraParameters, Entries) == 0x000000, "Member 'FPalMapObjectModelInitializeExtraParameters::Entries' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelInitializeExtraParameters, bIgnoredSave) == 0x000010, "Member 'FPalMapObjectModelInitializeExtraParameters::bIgnoredSave' has a wrong offset!");
static_assert(offsetof(FPalMapObjectModelInitializeExtraParameters, LevelObjectInstanceId) == 0x000014, "Member 'FPalMapObjectModelInitializeExtraParameters::LevelObjectInstanceId' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectPickupItemData
// 0x000C (0x000C - 0x0000)
struct FPalMapObjectPickupItemData final
{
public:
	struct FPalDataTableRowName_ItemData          StaticItemId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectPickupItemData) == 0x000004, "Wrong alignment on FPalMapObjectPickupItemData");
static_assert(sizeof(FPalMapObjectPickupItemData) == 0x00000C, "Wrong size on FPalMapObjectPickupItemData");
static_assert(offsetof(FPalMapObjectPickupItemData, StaticItemId) == 0x000000, "Member 'FPalMapObjectPickupItemData::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectPickupItemData, Num) == 0x000008, "Member 'FPalMapObjectPickupItemData::Num' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectPickupItemPalEggData
// 0x0008 (0x0008 - 0x0000)
struct FPalMapObjectPickupItemPalEggData final
{
public:
	struct FPalDataTableRowName_PalMonsterData    PalMonsterId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectPickupItemPalEggData) == 0x000004, "Wrong alignment on FPalMapObjectPickupItemPalEggData");
static_assert(sizeof(FPalMapObjectPickupItemPalEggData) == 0x000008, "Wrong size on FPalMapObjectPickupItemPalEggData");
static_assert(offsetof(FPalMapObjectPickupItemPalEggData, PalMonsterId) == 0x000000, "Member 'FPalMapObjectPickupItemPalEggData::PalMonsterId' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectPickupItemPalEggLotteryData
// 0x000C (0x000C - 0x0000)
struct FPalMapObjectPickupItemPalEggLotteryData final
{
public:
	struct FPalMapObjectPickupItemPalEggData      PalEggData;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectPickupItemPalEggLotteryData) == 0x000004, "Wrong alignment on FPalMapObjectPickupItemPalEggLotteryData");
static_assert(sizeof(FPalMapObjectPickupItemPalEggLotteryData) == 0x00000C, "Wrong size on FPalMapObjectPickupItemPalEggLotteryData");
static_assert(offsetof(FPalMapObjectPickupItemPalEggLotteryData, PalEggData) == 0x000000, "Member 'FPalMapObjectPickupItemPalEggLotteryData::PalEggData' has a wrong offset!");
static_assert(offsetof(FPalMapObjectPickupItemPalEggLotteryData, Weight) == 0x000008, "Member 'FPalMapObjectPickupItemPalEggLotteryData::Weight' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectWorldDropItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalMapObjectWorldDropItemInfo final
{
public:
	uint8                                         Pad_26CC[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StaticItemId;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameDateTime                          CreatedAt;                                         // 0x0010(0x0008)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMapObjectWorldDropItemInfo) == 0x000008, "Wrong alignment on FPalMapObjectWorldDropItemInfo");
static_assert(sizeof(FPalMapObjectWorldDropItemInfo) == 0x000018, "Wrong size on FPalMapObjectWorldDropItemInfo");
static_assert(offsetof(FPalMapObjectWorldDropItemInfo, StaticItemId) == 0x000008, "Member 'FPalMapObjectWorldDropItemInfo::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalMapObjectWorldDropItemInfo, CreatedAt) == 0x000010, "Member 'FPalMapObjectWorldDropItemInfo::CreatedAt' has a wrong offset!");

// ScriptStruct Pal.PalMapObjectWorldDropItemInfoSet
// 0x0028 (0x0028 - 0x0000)
struct FPalMapObjectWorldDropItemInfoSet final
{
public:
	TArray<struct FPalMapObjectWorldDropItemInfo> Infos;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FPalMapObjectWorldDropItemInfo> InsertReservedInfoSet;                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26CD[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalMapObjectWorldDropItemInfoSet) == 0x000008, "Wrong alignment on FPalMapObjectWorldDropItemInfoSet");
static_assert(sizeof(FPalMapObjectWorldDropItemInfoSet) == 0x000028, "Wrong size on FPalMapObjectWorldDropItemInfoSet");
static_assert(offsetof(FPalMapObjectWorldDropItemInfoSet, Infos) == 0x000000, "Member 'FPalMapObjectWorldDropItemInfoSet::Infos' has a wrong offset!");
static_assert(offsetof(FPalMapObjectWorldDropItemInfoSet, InsertReservedInfoSet) == 0x000010, "Member 'FPalMapObjectWorldDropItemInfoSet::InsertReservedInfoSet' has a wrong offset!");
static_assert(offsetof(FPalMapObjectWorldDropItemInfoSet, MaxCount) == 0x000020, "Member 'FPalMapObjectWorldDropItemInfoSet::MaxCount' has a wrong offset!");

// ScriptStruct Pal.PalSphere
// 0x0020 (0x0020 - 0x0000)
struct FPalSphere final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bXY;                                               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26CE[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalSphere) == 0x000008, "Wrong alignment on FPalSphere");
static_assert(sizeof(FPalSphere) == 0x000020, "Wrong size on FPalSphere");
static_assert(offsetof(FPalSphere, Center) == 0x000000, "Member 'FPalSphere::Center' has a wrong offset!");
static_assert(offsetof(FPalSphere, Radius) == 0x000018, "Member 'FPalSphere::Radius' has a wrong offset!");
static_assert(offsetof(FPalSphere, bXY) == 0x00001C, "Member 'FPalSphere::bXY' has a wrong offset!");

// ScriptStruct Pal.PalMonsterControllerBaseCampLogContent
// 0x0048 (0x0048 - 0x0000)
struct FPalMonsterControllerBaseCampLogContent final
{
public:
	EPalMonsterControllerBaseCampLogType          Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26CF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextId;                                            // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetObjectTextId;                                // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26D0[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalInstanceID                         InstanceId;                                        // 0x0018(0x0030)(BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMonsterControllerBaseCampLogContent) == 0x000008, "Wrong alignment on FPalMonsterControllerBaseCampLogContent");
static_assert(sizeof(FPalMonsterControllerBaseCampLogContent) == 0x000048, "Wrong size on FPalMonsterControllerBaseCampLogContent");
static_assert(offsetof(FPalMonsterControllerBaseCampLogContent, Type) == 0x000000, "Member 'FPalMonsterControllerBaseCampLogContent::Type' has a wrong offset!");
static_assert(offsetof(FPalMonsterControllerBaseCampLogContent, TextId) == 0x000004, "Member 'FPalMonsterControllerBaseCampLogContent::TextId' has a wrong offset!");
static_assert(offsetof(FPalMonsterControllerBaseCampLogContent, TargetObjectTextId) == 0x00000C, "Member 'FPalMonsterControllerBaseCampLogContent::TargetObjectTextId' has a wrong offset!");
static_assert(offsetof(FPalMonsterControllerBaseCampLogContent, InstanceId) == 0x000018, "Member 'FPalMonsterControllerBaseCampLogContent::InstanceId' has a wrong offset!");

// ScriptStruct Pal.PalMonsterControllerBaseCampHungryParameter
// 0x000C (0x000C - 0x0000)
struct FPalMonsterControllerBaseCampHungryParameter final
{
public:
	float                                         RecoverSatietyTo;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoverSanityTo;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EatMaxNum;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalMonsterControllerBaseCampHungryParameter) == 0x000004, "Wrong alignment on FPalMonsterControllerBaseCampHungryParameter");
static_assert(sizeof(FPalMonsterControllerBaseCampHungryParameter) == 0x00000C, "Wrong size on FPalMonsterControllerBaseCampHungryParameter");
static_assert(offsetof(FPalMonsterControllerBaseCampHungryParameter, RecoverSatietyTo) == 0x000000, "Member 'FPalMonsterControllerBaseCampHungryParameter::RecoverSatietyTo' has a wrong offset!");
static_assert(offsetof(FPalMonsterControllerBaseCampHungryParameter, RecoverSanityTo) == 0x000004, "Member 'FPalMonsterControllerBaseCampHungryParameter::RecoverSanityTo' has a wrong offset!");
static_assert(offsetof(FPalMonsterControllerBaseCampHungryParameter, EatMaxNum) == 0x000008, "Member 'FPalMonsterControllerBaseCampHungryParameter::EatMaxNum' has a wrong offset!");

// ScriptStruct Pal.PalNavigationDividedAreaInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FPalNavigationDividedAreaInfo final
{
public:
	uint8                                         Pad_26D1[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNavigationDividedAreaInfo) == 0x000008, "Wrong alignment on FPalNavigationDividedAreaInfo");
static_assert(sizeof(FPalNavigationDividedAreaInfo) == 0x000050, "Wrong size on FPalNavigationDividedAreaInfo");

// ScriptStruct Pal.PalNetworkChangeIndividualID
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FPalNetworkChangeIndividualID final
{
public:
	uint8                                         Pad_26D2[0x60];                                    // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkChangeIndividualID) == 0x000008, "Wrong alignment on FPalNetworkChangeIndividualID");
static_assert(sizeof(FPalNetworkChangeIndividualID) == 0x000060, "Wrong size on FPalNetworkChangeIndividualID");

// ScriptStruct Pal.PalNetworkCharacterContainerParameter
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FPalNetworkCharacterContainerParameter final
{
public:
	uint8                                         Pad_26D3[0x58];                                    // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkCharacterContainerParameter) == 0x000008, "Wrong alignment on FPalNetworkCharacterContainerParameter");
static_assert(sizeof(FPalNetworkCharacterContainerParameter) == 0x000058, "Wrong size on FPalNetworkCharacterContainerParameter");

// ScriptStruct Pal.PalNetworkParameter
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPalNetworkParameter final
{
public:
	uint8                                         Pad_26D4[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkParameter) == 0x000008, "Wrong alignment on FPalNetworkParameter");
static_assert(sizeof(FPalNetworkParameter) == 0x000010, "Wrong size on FPalNetworkParameter");

// ScriptStruct Pal.PalNetworkItemOperationParameter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalNetworkItemOperationParameter final
{
public:
	uint8                                         Pad_26D5[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkItemOperationParameter) == 0x000008, "Wrong alignment on FPalNetworkItemOperationParameter");
static_assert(sizeof(FPalNetworkItemOperationParameter) == 0x000020, "Wrong size on FPalNetworkItemOperationParameter");

// ScriptStruct Pal.PalItemAndSlotUpdateContentSet
// 0x0020 (0x0020 - 0x0000)
struct FPalItemAndSlotUpdateContentSet final
{
public:
	TArray<struct FPalItemAndSlot>                UpdateContents;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPalStaticItemIdAndDynamicItemDataSet> UpdateDynamicItems;                                // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemAndSlotUpdateContentSet) == 0x000008, "Wrong alignment on FPalItemAndSlotUpdateContentSet");
static_assert(sizeof(FPalItemAndSlotUpdateContentSet) == 0x000020, "Wrong size on FPalItemAndSlotUpdateContentSet");
static_assert(offsetof(FPalItemAndSlotUpdateContentSet, UpdateContents) == 0x000000, "Member 'FPalItemAndSlotUpdateContentSet::UpdateContents' has a wrong offset!");
static_assert(offsetof(FPalItemAndSlotUpdateContentSet, UpdateDynamicItems) == 0x000010, "Member 'FPalItemAndSlotUpdateContentSet::UpdateDynamicItems' has a wrong offset!");

// ScriptStruct Pal.PalNetworkMapObjectSpawnRequestParameter
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPalNetworkMapObjectSpawnRequestParameter final
{
public:
	uint8                                         Pad_26D6[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkMapObjectSpawnRequestParameter) == 0x000008, "Wrong alignment on FPalNetworkMapObjectSpawnRequestParameter");
static_assert(sizeof(FPalNetworkMapObjectSpawnRequestParameter) == 0x000010, "Wrong size on FPalNetworkMapObjectSpawnRequestParameter");

// ScriptStruct Pal.PalNetworkPlayerObtainClientParameter
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPalNetworkPlayerObtainClientParameter final
{
public:
	uint8                                         Pad_26D7[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNetworkPlayerObtainClientParameter) == 0x000008, "Wrong alignment on FPalNetworkPlayerObtainClientParameter");
static_assert(sizeof(FPalNetworkPlayerObtainClientParameter) == 0x000010, "Wrong size on FPalNetworkPlayerObtainClientParameter");

// ScriptStruct Pal.PalNoteMasterData
// 0x0008 (0x0010 - 0x0008)
struct FPalNoteMasterData final : public FTableRowBase
{
public:
	class FName                                   TextId_Description;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNoteMasterData) == 0x000008, "Wrong alignment on FPalNoteMasterData");
static_assert(sizeof(FPalNoteMasterData) == 0x000010, "Wrong size on FPalNoteMasterData");
static_assert(offsetof(FPalNoteMasterData, TextId_Description) == 0x000008, "Member 'FPalNoteMasterData::TextId_Description' has a wrong offset!");

// ScriptStruct Pal.PalNPCOneTalkRow
// 0x0008 (0x0010 - 0x0008)
struct FPalNPCOneTalkRow final : public FTableRowBase
{
public:
	class UDataTable*                             OneTalkData;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCOneTalkRow) == 0x000008, "Wrong alignment on FPalNPCOneTalkRow");
static_assert(sizeof(FPalNPCOneTalkRow) == 0x000010, "Wrong size on FPalNPCOneTalkRow");
static_assert(offsetof(FPalNPCOneTalkRow, OneTalkData) == 0x000008, "Member 'FPalNPCOneTalkRow::OneTalkData' has a wrong offset!");

// ScriptStruct Pal.PalNPCMultiTalkRow
// 0x0008 (0x0010 - 0x0008)
struct FPalNPCMultiTalkRow final : public FTableRowBase
{
public:
	TSubclassOf<class UPalNPCMultiTalkHandle>     MultiTalkHandleClass;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalNPCMultiTalkRow) == 0x000008, "Wrong alignment on FPalNPCMultiTalkRow");
static_assert(sizeof(FPalNPCMultiTalkRow) == 0x000010, "Wrong size on FPalNPCMultiTalkRow");
static_assert(offsetof(FPalNPCMultiTalkRow, MultiTalkHandleClass) == 0x000008, "Member 'FPalNPCMultiTalkRow::MultiTalkHandleClass' has a wrong offset!");

// ScriptStruct Pal.PalNPCTalkNotifyInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalNPCTalkNotifyInfo final
{
public:
	class UDataTable*                             TalkDataTable;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkDataIndex;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkDataSeqenceName;                               // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26D8[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalNPCTalkNotifyInfo) == 0x000008, "Wrong alignment on FPalNPCTalkNotifyInfo");
static_assert(sizeof(FPalNPCTalkNotifyInfo) == 0x000018, "Wrong size on FPalNPCTalkNotifyInfo");
static_assert(offsetof(FPalNPCTalkNotifyInfo, TalkDataTable) == 0x000000, "Member 'FPalNPCTalkNotifyInfo::TalkDataTable' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkNotifyInfo, TalkDataIndex) == 0x000008, "Member 'FPalNPCTalkNotifyInfo::TalkDataIndex' has a wrong offset!");
static_assert(offsetof(FPalNPCTalkNotifyInfo, TalkDataSeqenceName) == 0x00000C, "Member 'FPalNPCTalkNotifyInfo::TalkDataSeqenceName' has a wrong offset!");

// ScriptStruct Pal.PalUniqueNPCDatabaseRow
// 0x0030 (0x0038 - 0x0008)
struct FPalUniqueNPCDatabaseRow final : public FTableRowBase
{
public:
	class FName                                   CharacterID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameTextID;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OneTalkDTName;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkBPClass;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransientTalkCount;                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalGenderType                                Gender;                                            // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalNPCSkinColor                              SkinColor;                                         // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalNPCFaceType                               Face;                                              // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalNPCHairStyleType                          HairStyle;                                         // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalNPCHairColorType                          HairColor;                                         // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalNPCClothesType                            Clothes;                                           // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalNPCScaleType                              Scale;                                             // 0x002F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26D9[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUniqueNPCDatabaseRow) == 0x000008, "Wrong alignment on FPalUniqueNPCDatabaseRow");
static_assert(sizeof(FPalUniqueNPCDatabaseRow) == 0x000038, "Wrong size on FPalUniqueNPCDatabaseRow");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, CharacterID) == 0x000008, "Member 'FPalUniqueNPCDatabaseRow::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, NameTextID) == 0x000010, "Member 'FPalUniqueNPCDatabaseRow::NameTextID' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, OneTalkDTName) == 0x000018, "Member 'FPalUniqueNPCDatabaseRow::OneTalkDTName' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, TalkBPClass) == 0x000020, "Member 'FPalUniqueNPCDatabaseRow::TalkBPClass' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, IsTransientTalkCount) == 0x000028, "Member 'FPalUniqueNPCDatabaseRow::IsTransientTalkCount' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, Gender) == 0x000029, "Member 'FPalUniqueNPCDatabaseRow::Gender' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, SkinColor) == 0x00002A, "Member 'FPalUniqueNPCDatabaseRow::SkinColor' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, Face) == 0x00002B, "Member 'FPalUniqueNPCDatabaseRow::Face' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, HairStyle) == 0x00002C, "Member 'FPalUniqueNPCDatabaseRow::HairStyle' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, HairColor) == 0x00002D, "Member 'FPalUniqueNPCDatabaseRow::HairColor' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, Clothes) == 0x00002E, "Member 'FPalUniqueNPCDatabaseRow::Clothes' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, Scale) == 0x00002F, "Member 'FPalUniqueNPCDatabaseRow::Scale' has a wrong offset!");
static_assert(offsetof(FPalUniqueNPCDatabaseRow, Level) == 0x000030, "Member 'FPalUniqueNPCDatabaseRow::Level' has a wrong offset!");

// ScriptStruct Pal.PalOptionWorldModePresetRow
// 0x0008 (0x0010 - 0x0008)
struct FPalOptionWorldModePresetRow final : public FTableRowBase
{
public:
	EPalOptionWorldMode                           WorldMode;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePlayerToPlayerDamage;                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPickupOtherGuildDeathPenaltyDrop;              // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableNonLoginPenalty;                            // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFastTravel;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStartLocationSelectByMap;                       // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExistPlayerAfterLogout;                           // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDefenseOtherGuildPlayer;                    // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionWorldModePresetRow) == 0x000008, "Wrong alignment on FPalOptionWorldModePresetRow");
static_assert(sizeof(FPalOptionWorldModePresetRow) == 0x000010, "Wrong size on FPalOptionWorldModePresetRow");
static_assert(offsetof(FPalOptionWorldModePresetRow, WorldMode) == 0x000008, "Member 'FPalOptionWorldModePresetRow::WorldMode' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldModePresetRow, bEnablePlayerToPlayerDamage) == 0x000009, "Member 'FPalOptionWorldModePresetRow::bEnablePlayerToPlayerDamage' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldModePresetRow, bCanPickupOtherGuildDeathPenaltyDrop) == 0x00000A, "Member 'FPalOptionWorldModePresetRow::bCanPickupOtherGuildDeathPenaltyDrop' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldModePresetRow, bEnableNonLoginPenalty) == 0x00000B, "Member 'FPalOptionWorldModePresetRow::bEnableNonLoginPenalty' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldModePresetRow, bEnableFastTravel) == 0x00000C, "Member 'FPalOptionWorldModePresetRow::bEnableFastTravel' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldModePresetRow, bIsStartLocationSelectByMap) == 0x00000D, "Member 'FPalOptionWorldModePresetRow::bIsStartLocationSelectByMap' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldModePresetRow, bExistPlayerAfterLogout) == 0x00000E, "Member 'FPalOptionWorldModePresetRow::bExistPlayerAfterLogout' has a wrong offset!");
static_assert(offsetof(FPalOptionWorldModePresetRow, bEnableDefenseOtherGuildPlayer) == 0x00000F, "Member 'FPalOptionWorldModePresetRow::bEnableDefenseOtherGuildPlayer' has a wrong offset!");

// ScriptStruct Pal.PalOptionGraphicsPresetRow
// 0x0018 (0x0020 - 0x0008)
struct FPalOptionGraphicsPresetRow final : public FTableRowBase
{
public:
	EPalOptionGraphicsLevel                       GraphicsLevel;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAntiAliasingMethod                           AntiAliasingType;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26DA[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CommonQuality;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistanceQuality;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoliageQuality;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureQuality;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionGraphicsPresetRow) == 0x000008, "Wrong alignment on FPalOptionGraphicsPresetRow");
static_assert(sizeof(FPalOptionGraphicsPresetRow) == 0x000020, "Wrong size on FPalOptionGraphicsPresetRow");
static_assert(offsetof(FPalOptionGraphicsPresetRow, GraphicsLevel) == 0x000008, "Member 'FPalOptionGraphicsPresetRow::GraphicsLevel' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsPresetRow, AntiAliasingType) == 0x000009, "Member 'FPalOptionGraphicsPresetRow::AntiAliasingType' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsPresetRow, CommonQuality) == 0x00000C, "Member 'FPalOptionGraphicsPresetRow::CommonQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsPresetRow, ViewDistanceQuality) == 0x000010, "Member 'FPalOptionGraphicsPresetRow::ViewDistanceQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsPresetRow, FoliageQuality) == 0x000014, "Member 'FPalOptionGraphicsPresetRow::FoliageQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsPresetRow, ShadowQuality) == 0x000018, "Member 'FPalOptionGraphicsPresetRow::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FPalOptionGraphicsPresetRow, TextureQuality) == 0x00001C, "Member 'FPalOptionGraphicsPresetRow::TextureQuality' has a wrong offset!");

// ScriptStruct Pal.PalOptionSaveData
// 0x0240 (0x0240 - 0x0000)
struct FPalOptionSaveData final
{
public:
	struct FPalOptionKeyboardSettings             KeyboardSettings;                                  // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionPadSettings                  PadSettings;                                       // 0x0014(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPalKeyConfigSettings                  KeyConfigSettings;                                 // 0x0030(0x0160)(NativeAccessSpecifierPublic)
	struct FPalOptionUISettings                   UISettings;                                        // 0x0190(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_26DB[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalOptionCommonSettings               CommonSettings;                                    // 0x01A0(0x0028)(NativeAccessSpecifierPublic)
	struct FPalOptionGraphicsSettings             GraphicsSettings;                                  // 0x01C8(0x0054)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPalOptionAudioSettings                AudioSettings;                                     // 0x021C(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasAppliedUserSetting;                            // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26DC[0x7];                                     // 0x0239(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalOptionSaveData) == 0x000008, "Wrong alignment on FPalOptionSaveData");
static_assert(sizeof(FPalOptionSaveData) == 0x000240, "Wrong size on FPalOptionSaveData");
static_assert(offsetof(FPalOptionSaveData, KeyboardSettings) == 0x000000, "Member 'FPalOptionSaveData::KeyboardSettings' has a wrong offset!");
static_assert(offsetof(FPalOptionSaveData, PadSettings) == 0x000014, "Member 'FPalOptionSaveData::PadSettings' has a wrong offset!");
static_assert(offsetof(FPalOptionSaveData, KeyConfigSettings) == 0x000030, "Member 'FPalOptionSaveData::KeyConfigSettings' has a wrong offset!");
static_assert(offsetof(FPalOptionSaveData, UISettings) == 0x000190, "Member 'FPalOptionSaveData::UISettings' has a wrong offset!");
static_assert(offsetof(FPalOptionSaveData, CommonSettings) == 0x0001A0, "Member 'FPalOptionSaveData::CommonSettings' has a wrong offset!");
static_assert(offsetof(FPalOptionSaveData, GraphicsSettings) == 0x0001C8, "Member 'FPalOptionSaveData::GraphicsSettings' has a wrong offset!");
static_assert(offsetof(FPalOptionSaveData, AudioSettings) == 0x00021C, "Member 'FPalOptionSaveData::AudioSettings' has a wrong offset!");
static_assert(offsetof(FPalOptionSaveData, bHasAppliedUserSetting) == 0x000238, "Member 'FPalOptionSaveData::bHasAppliedUserSetting' has a wrong offset!");

// ScriptStruct Pal.PalPartnerSkillDatabaseRow
// 0x0020 (0x0028 - 0x0008)
struct FPalPartnerSkillDatabaseRow final : public FTableRowBase
{
public:
	class FName                                   DevName;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownTime;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExecCost;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleCost;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanThrowPal;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanChangeWeapon;                                   // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsToggleKey;                                       // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26DD[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPartnerSkillDatabaseRow) == 0x000008, "Wrong alignment on FPalPartnerSkillDatabaseRow");
static_assert(sizeof(FPalPartnerSkillDatabaseRow) == 0x000028, "Wrong size on FPalPartnerSkillDatabaseRow");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, DevName) == 0x000008, "Member 'FPalPartnerSkillDatabaseRow::DevName' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, EffectTime) == 0x000010, "Member 'FPalPartnerSkillDatabaseRow::EffectTime' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, CoolDownTime) == 0x000014, "Member 'FPalPartnerSkillDatabaseRow::CoolDownTime' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, ExecCost) == 0x000018, "Member 'FPalPartnerSkillDatabaseRow::ExecCost' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, IdleCost) == 0x00001C, "Member 'FPalPartnerSkillDatabaseRow::IdleCost' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, CanThrowPal) == 0x000020, "Member 'FPalPartnerSkillDatabaseRow::CanThrowPal' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, CanChangeWeapon) == 0x000021, "Member 'FPalPartnerSkillDatabaseRow::CanChangeWeapon' has a wrong offset!");
static_assert(offsetof(FPalPartnerSkillDatabaseRow, IsToggleKey) == 0x000022, "Member 'FPalPartnerSkillDatabaseRow::IsToggleKey' has a wrong offset!");

// ScriptStruct Pal.PalPassivePartnerSkillFindOtomoParameter
// 0x0018 (0x0018 - 0x0000)
struct FPalPassivePartnerSkillFindOtomoParameter final
{
public:
	EPalElementType                               TargetElementType;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26DE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPalDataTableRowName_PalMonsterData> TargetPalIds;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassivePartnerSkillFindOtomoParameter) == 0x000008, "Wrong alignment on FPalPassivePartnerSkillFindOtomoParameter");
static_assert(sizeof(FPalPassivePartnerSkillFindOtomoParameter) == 0x000018, "Wrong size on FPalPassivePartnerSkillFindOtomoParameter");
static_assert(offsetof(FPalPassivePartnerSkillFindOtomoParameter, TargetElementType) == 0x000000, "Member 'FPalPassivePartnerSkillFindOtomoParameter::TargetElementType' has a wrong offset!");
static_assert(offsetof(FPalPassivePartnerSkillFindOtomoParameter, TargetPalIds) == 0x000008, "Member 'FPalPassivePartnerSkillFindOtomoParameter::TargetPalIds' has a wrong offset!");

// ScriptStruct Pal.PalPartnerSkillParameterQueryFunction
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPalPartnerSkillParameterQueryFunction final
{
public:
	uint8                                         Pad_26DF[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPartnerSkillParameterQueryFunction) == 0x000008, "Wrong alignment on FPalPartnerSkillParameterQueryFunction");
static_assert(sizeof(FPalPartnerSkillParameterQueryFunction) == 0x000020, "Wrong size on FPalPartnerSkillParameterQueryFunction");

// ScriptStruct Pal.PalPassiveSkillSetupInfo
// 0x0030 (0x0030 - 0x0000)
struct FPalPassiveSkillSetupInfo final
{
public:
	class FName                                   SkillName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Flags;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPalPassivePartnerSkillItemParameter   ItemParam;                                         // 0x0018(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPassiveSkillSetupInfo) == 0x000008, "Wrong alignment on FPalPassiveSkillSetupInfo");
static_assert(sizeof(FPalPassiveSkillSetupInfo) == 0x000030, "Wrong size on FPalPassiveSkillSetupInfo");
static_assert(offsetof(FPalPassiveSkillSetupInfo, SkillName) == 0x000000, "Member 'FPalPassiveSkillSetupInfo::SkillName' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillSetupInfo, Flags) == 0x000008, "Member 'FPalPassiveSkillSetupInfo::Flags' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillSetupInfo, ItemParam) == 0x000018, "Member 'FPalPassiveSkillSetupInfo::ItemParam' has a wrong offset!");

// ScriptStruct Pal.PalPassiveSkillDatabaseRow
// 0x0048 (0x0050 - 0x0008)
struct FPalPassiveSkillDatabaseRow final : public FTableRowBase
{
public:
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideDescMsgID;                                 // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPassiveSkillEffectType                    EffectType1;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E0[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectValue1;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPassiveSkillEffectTargetType              TargetType1;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPassiveSkillEffectType                    EffectType2;                                       // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E1[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectValue2;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPassiveSkillEffectTargetType              TargetType2;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPassiveSkillEffectType                    EffectType3;                                       // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E2[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectValue3;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPassiveSkillEffectTargetType              TargetType3;                                       // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvokeActiveOtomo;                                 // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvokeWorker;                                      // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvokeRiding;                                      // 0x002F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvokeReserve;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvokeInOtomo;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvokeAlways;                                      // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddPal;                                            // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddRarePal;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddShotWeapon;                                     // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddMeleeWeapon;                                    // 0x0036(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddArmor;                                          // 0x0037(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddAccessory;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E3[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideNameTextID;                                // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideSummaryTextId;                             // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E4[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPassiveSkillDatabaseRow) == 0x000008, "Wrong alignment on FPalPassiveSkillDatabaseRow");
static_assert(sizeof(FPalPassiveSkillDatabaseRow) == 0x000050, "Wrong size on FPalPassiveSkillDatabaseRow");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, Rank) == 0x000008, "Member 'FPalPassiveSkillDatabaseRow::Rank' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, OverrideDescMsgID) == 0x00000C, "Member 'FPalPassiveSkillDatabaseRow::OverrideDescMsgID' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, EffectType1) == 0x000014, "Member 'FPalPassiveSkillDatabaseRow::EffectType1' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, EffectValue1) == 0x000018, "Member 'FPalPassiveSkillDatabaseRow::EffectValue1' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, TargetType1) == 0x00001C, "Member 'FPalPassiveSkillDatabaseRow::TargetType1' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, EffectType2) == 0x00001D, "Member 'FPalPassiveSkillDatabaseRow::EffectType2' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, EffectValue2) == 0x000020, "Member 'FPalPassiveSkillDatabaseRow::EffectValue2' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, TargetType2) == 0x000024, "Member 'FPalPassiveSkillDatabaseRow::TargetType2' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, EffectType3) == 0x000025, "Member 'FPalPassiveSkillDatabaseRow::EffectType3' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, EffectValue3) == 0x000028, "Member 'FPalPassiveSkillDatabaseRow::EffectValue3' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, TargetType3) == 0x00002C, "Member 'FPalPassiveSkillDatabaseRow::TargetType3' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, InvokeActiveOtomo) == 0x00002D, "Member 'FPalPassiveSkillDatabaseRow::InvokeActiveOtomo' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, InvokeWorker) == 0x00002E, "Member 'FPalPassiveSkillDatabaseRow::InvokeWorker' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, InvokeRiding) == 0x00002F, "Member 'FPalPassiveSkillDatabaseRow::InvokeRiding' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, InvokeReserve) == 0x000030, "Member 'FPalPassiveSkillDatabaseRow::InvokeReserve' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, InvokeInOtomo) == 0x000031, "Member 'FPalPassiveSkillDatabaseRow::InvokeInOtomo' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, InvokeAlways) == 0x000032, "Member 'FPalPassiveSkillDatabaseRow::InvokeAlways' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, AddPal) == 0x000033, "Member 'FPalPassiveSkillDatabaseRow::AddPal' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, AddRarePal) == 0x000034, "Member 'FPalPassiveSkillDatabaseRow::AddRarePal' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, AddShotWeapon) == 0x000035, "Member 'FPalPassiveSkillDatabaseRow::AddShotWeapon' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, AddMeleeWeapon) == 0x000036, "Member 'FPalPassiveSkillDatabaseRow::AddMeleeWeapon' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, AddArmor) == 0x000037, "Member 'FPalPassiveSkillDatabaseRow::AddArmor' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, AddAccessory) == 0x000038, "Member 'FPalPassiveSkillDatabaseRow::AddAccessory' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, OverrideNameTextID) == 0x00003C, "Member 'FPalPassiveSkillDatabaseRow::OverrideNameTextID' has a wrong offset!");
static_assert(offsetof(FPalPassiveSkillDatabaseRow, OverrideSummaryTextId) == 0x000044, "Member 'FPalPassiveSkillDatabaseRow::OverrideSummaryTextId' has a wrong offset!");

// ScriptStruct Pal.PalPlayerDamageCameraShakeData
// 0x0020 (0x0028 - 0x0008)
struct FPalPlayerDamageCameraShakeData final : public FTableRowBase
{
public:
	EPalPlayerDamageCameraShakeCategory           Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale_Min;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale_Default;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale_Max;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPRate_Min;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPRate_Default;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPRate_Max;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E6[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalPlayerDamageCameraShakeData) == 0x000008, "Wrong alignment on FPalPlayerDamageCameraShakeData");
static_assert(sizeof(FPalPlayerDamageCameraShakeData) == 0x000028, "Wrong size on FPalPlayerDamageCameraShakeData");
static_assert(offsetof(FPalPlayerDamageCameraShakeData, Category) == 0x000008, "Member 'FPalPlayerDamageCameraShakeData::Category' has a wrong offset!");
static_assert(offsetof(FPalPlayerDamageCameraShakeData, Scale_Min) == 0x00000C, "Member 'FPalPlayerDamageCameraShakeData::Scale_Min' has a wrong offset!");
static_assert(offsetof(FPalPlayerDamageCameraShakeData, Scale_Default) == 0x000010, "Member 'FPalPlayerDamageCameraShakeData::Scale_Default' has a wrong offset!");
static_assert(offsetof(FPalPlayerDamageCameraShakeData, Scale_Max) == 0x000014, "Member 'FPalPlayerDamageCameraShakeData::Scale_Max' has a wrong offset!");
static_assert(offsetof(FPalPlayerDamageCameraShakeData, HPRate_Min) == 0x000018, "Member 'FPalPlayerDamageCameraShakeData::HPRate_Min' has a wrong offset!");
static_assert(offsetof(FPalPlayerDamageCameraShakeData, HPRate_Default) == 0x00001C, "Member 'FPalPlayerDamageCameraShakeData::HPRate_Default' has a wrong offset!");
static_assert(offsetof(FPalPlayerDamageCameraShakeData, HPRate_Max) == 0x000020, "Member 'FPalPlayerDamageCameraShakeData::HPRate_Max' has a wrong offset!");

// ScriptStruct Pal.PalCharacterCreationMeshPresetDataRow
// 0x0100 (0x0108 - 0x0008)
struct FPalCharacterCreationMeshPresetDataRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh_MaleHead;                             // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ABPAsset;                                          // 0x0098(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShiftUIDisplayEyeColor;                            // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShiftUIDisplayBodyColor;                           // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShiftUIDisplayBrowColor;                           // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShiftUIDisplayHairColor;                           // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterCreationMeshPresetDataRow) == 0x000008, "Wrong alignment on FPalCharacterCreationMeshPresetDataRow");
static_assert(sizeof(FPalCharacterCreationMeshPresetDataRow) == 0x000108, "Wrong size on FPalCharacterCreationMeshPresetDataRow");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, SkeletalMesh) == 0x000008, "Member 'FPalCharacterCreationMeshPresetDataRow::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, SkeletalMesh_MaleHead) == 0x000038, "Member 'FPalCharacterCreationMeshPresetDataRow::SkeletalMesh_MaleHead' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, IconTexture) == 0x000068, "Member 'FPalCharacterCreationMeshPresetDataRow::IconTexture' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, ABPAsset) == 0x000098, "Member 'FPalCharacterCreationMeshPresetDataRow::ABPAsset' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, ShiftUIDisplayEyeColor) == 0x0000C8, "Member 'FPalCharacterCreationMeshPresetDataRow::ShiftUIDisplayEyeColor' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, ShiftUIDisplayBodyColor) == 0x0000D8, "Member 'FPalCharacterCreationMeshPresetDataRow::ShiftUIDisplayBodyColor' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, ShiftUIDisplayBrowColor) == 0x0000E8, "Member 'FPalCharacterCreationMeshPresetDataRow::ShiftUIDisplayBrowColor' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationMeshPresetDataRow, ShiftUIDisplayHairColor) == 0x0000F8, "Member 'FPalCharacterCreationMeshPresetDataRow::ShiftUIDisplayHairColor' has a wrong offset!");

// ScriptStruct Pal.PalCharacterCreationEyeMaterialDataRow
// 0x0070 (0x0078 - 0x0008)
struct FPalCharacterCreationEyeMaterialDataRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInstance>       EyeMaterialInstance;                               // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShiftUIDisplayEyeColor;                            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterCreationEyeMaterialDataRow) == 0x000008, "Wrong alignment on FPalCharacterCreationEyeMaterialDataRow");
static_assert(sizeof(FPalCharacterCreationEyeMaterialDataRow) == 0x000078, "Wrong size on FPalCharacterCreationEyeMaterialDataRow");
static_assert(offsetof(FPalCharacterCreationEyeMaterialDataRow, EyeMaterialInstance) == 0x000008, "Member 'FPalCharacterCreationEyeMaterialDataRow::EyeMaterialInstance' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationEyeMaterialDataRow, IconTexture) == 0x000038, "Member 'FPalCharacterCreationEyeMaterialDataRow::IconTexture' has a wrong offset!");
static_assert(offsetof(FPalCharacterCreationEyeMaterialDataRow, ShiftUIDisplayEyeColor) == 0x000068, "Member 'FPalCharacterCreationEyeMaterialDataRow::ShiftUIDisplayEyeColor' has a wrong offset!");

// ScriptStruct Pal.PalQuestDataSetRow
// 0x0030 (0x0038 - 0x0008)
struct FPalQuestDataSetRow final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   QuestData;                                         // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalQuestDataSetRow) == 0x000008, "Wrong alignment on FPalQuestDataSetRow");
static_assert(sizeof(FPalQuestDataSetRow) == 0x000038, "Wrong size on FPalQuestDataSetRow");
static_assert(offsetof(FPalQuestDataSetRow, QuestData) == 0x000008, "Member 'FPalQuestDataSetRow::QuestData' has a wrong offset!");

// ScriptStruct Pal.PalRaidBossSpawnInfoList
// 0x0010 (0x0010 - 0x0000)
struct FPalRaidBossSpawnInfoList final
{
public:
	TArray<struct FPalRaidBossSpawnInfo>          SpawnInfos;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRaidBossSpawnInfoList) == 0x000008, "Wrong alignment on FPalRaidBossSpawnInfoList");
static_assert(sizeof(FPalRaidBossSpawnInfoList) == 0x000010, "Wrong size on FPalRaidBossSpawnInfoList");
static_assert(offsetof(FPalRaidBossSpawnInfoList, SpawnInfos) == 0x000000, "Member 'FPalRaidBossSpawnInfoList::SpawnInfos' has a wrong offset!");

// ScriptStruct Pal.PalRandomIncidentSpawnIncidentParameter
// 0x0014 (0x0014 - 0x0000)
struct FPalRandomIncidentSpawnIncidentParameter final
{
public:
	class FName                                   IncidentId;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SettingName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LotteryRate;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomIncidentSpawnIncidentParameter) == 0x000004, "Wrong alignment on FPalRandomIncidentSpawnIncidentParameter");
static_assert(sizeof(FPalRandomIncidentSpawnIncidentParameter) == 0x000014, "Wrong size on FPalRandomIncidentSpawnIncidentParameter");
static_assert(offsetof(FPalRandomIncidentSpawnIncidentParameter, IncidentId) == 0x000000, "Member 'FPalRandomIncidentSpawnIncidentParameter::IncidentId' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnIncidentParameter, SettingName) == 0x000008, "Member 'FPalRandomIncidentSpawnIncidentParameter::SettingName' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnIncidentParameter, LotteryRate) == 0x000010, "Member 'FPalRandomIncidentSpawnIncidentParameter::LotteryRate' has a wrong offset!");

// ScriptStruct Pal.PalRandomIncidentSpawnLocationData
// 0x0010 (0x0018 - 0x0008)
struct FPalRandomIncidentSpawnLocationData final : public FTableRowBase
{
public:
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomIncidentSpawnLocationData) == 0x000008, "Wrong alignment on FPalRandomIncidentSpawnLocationData");
static_assert(sizeof(FPalRandomIncidentSpawnLocationData) == 0x000018, "Wrong size on FPalRandomIncidentSpawnLocationData");
static_assert(offsetof(FPalRandomIncidentSpawnLocationData, Location) == 0x000008, "Member 'FPalRandomIncidentSpawnLocationData::Location' has a wrong offset!");

// ScriptStruct Pal.PalRandomIncidentSpawnMonsterOutbreakData
// 0x0038 (0x0040 - 0x0008)
struct FPalRandomIncidentSpawnMonsterOutbreakData final : public FTableRowBase
{
public:
	struct FPalDataTableRowName_PalMonsterData    CharacterID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSquad;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E7[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LocationTable;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APalAIController>           ControllerClass;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalActionBase>             DefaultActionClass;                                // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomIncidentSpawnMonsterOutbreakData) == 0x000008, "Wrong alignment on FPalRandomIncidentSpawnMonsterOutbreakData");
static_assert(sizeof(FPalRandomIncidentSpawnMonsterOutbreakData) == 0x000040, "Wrong size on FPalRandomIncidentSpawnMonsterOutbreakData");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, CharacterID) == 0x000008, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::CharacterID' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, Num) == 0x000010, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::Num' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, LevelMin) == 0x000014, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::LevelMin' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, LevelMax) == 0x000018, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::LevelMax' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, Group) == 0x00001C, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::Group' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, IsSquad) == 0x000020, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::IsSquad' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, LocationTable) == 0x000028, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::LocationTable' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, ControllerClass) == 0x000030, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::ControllerClass' has a wrong offset!");
static_assert(offsetof(FPalRandomIncidentSpawnMonsterOutbreakData, DefaultActionClass) == 0x000038, "Member 'FPalRandomIncidentSpawnMonsterOutbreakData::DefaultActionClass' has a wrong offset!");

// ScriptStruct Pal.PalRESTAPIPlayerInfo
// 0x0050 (0x0050 - 0x0000)
struct FPalRESTAPIPlayerInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ping;                                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Location_x;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Location_y;                                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRESTAPIPlayerInfo) == 0x000008, "Wrong alignment on FPalRESTAPIPlayerInfo");
static_assert(sizeof(FPalRESTAPIPlayerInfo) == 0x000050, "Wrong size on FPalRESTAPIPlayerInfo");
static_assert(offsetof(FPalRESTAPIPlayerInfo, Name) == 0x000000, "Member 'FPalRESTAPIPlayerInfo::Name' has a wrong offset!");
static_assert(offsetof(FPalRESTAPIPlayerInfo, PlayerId) == 0x000010, "Member 'FPalRESTAPIPlayerInfo::PlayerId' has a wrong offset!");
static_assert(offsetof(FPalRESTAPIPlayerInfo, UserId) == 0x000020, "Member 'FPalRESTAPIPlayerInfo::UserId' has a wrong offset!");
static_assert(offsetof(FPalRESTAPIPlayerInfo, Ip) == 0x000030, "Member 'FPalRESTAPIPlayerInfo::Ip' has a wrong offset!");
static_assert(offsetof(FPalRESTAPIPlayerInfo, Ping) == 0x000040, "Member 'FPalRESTAPIPlayerInfo::Ping' has a wrong offset!");
static_assert(offsetof(FPalRESTAPIPlayerInfo, Location_x) == 0x000044, "Member 'FPalRESTAPIPlayerInfo::Location_x' has a wrong offset!");
static_assert(offsetof(FPalRESTAPIPlayerInfo, Location_y) == 0x000048, "Member 'FPalRESTAPIPlayerInfo::Location_y' has a wrong offset!");
static_assert(offsetof(FPalRESTAPIPlayerInfo, Level) == 0x00004C, "Member 'FPalRESTAPIPlayerInfo::Level' has a wrong offset!");

// ScriptStruct Pal.PalOptionWorldSaveData
// 0x0138 (0x0138 - 0x0000)
struct FPalOptionWorldSaveData final
{
public:
	struct FPalOptionWorldSettings                Settings;                                          // 0x0000(0x0138)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalOptionWorldSaveData) == 0x000008, "Wrong alignment on FPalOptionWorldSaveData");
static_assert(sizeof(FPalOptionWorldSaveData) == 0x000138, "Wrong size on FPalOptionWorldSaveData");
static_assert(offsetof(FPalOptionWorldSaveData, Settings) == 0x000000, "Member 'FPalOptionWorldSaveData::Settings' has a wrong offset!");

// ScriptStruct Pal.PalFixupParameterForSaveData
// 0x00F0 (0x00F0 - 0x0000)
struct FPalFixupParameterForSaveData final
{
public:
	TSet<struct FPalInstanceID>                   UsedInstanceIDs;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FPalContainerId>                  UsedContainerIDs;                                  // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FPalDynamicItemId>                UsedDynamicItemIDs;                                // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalFixupParameterForSaveData) == 0x000008, "Wrong alignment on FPalFixupParameterForSaveData");
static_assert(sizeof(FPalFixupParameterForSaveData) == 0x0000F0, "Wrong size on FPalFixupParameterForSaveData");
static_assert(offsetof(FPalFixupParameterForSaveData, UsedInstanceIDs) == 0x000000, "Member 'FPalFixupParameterForSaveData::UsedInstanceIDs' has a wrong offset!");
static_assert(offsetof(FPalFixupParameterForSaveData, UsedContainerIDs) == 0x000050, "Member 'FPalFixupParameterForSaveData::UsedContainerIDs' has a wrong offset!");
static_assert(offsetof(FPalFixupParameterForSaveData, UsedDynamicItemIDs) == 0x0000A0, "Member 'FPalFixupParameterForSaveData::UsedDynamicItemIDs' has a wrong offset!");

// ScriptStruct Pal.ShooterSpringCameraParameter
// 0x0020 (0x0020 - 0x0000)
struct FShooterSpringCameraParameter final
{
public:
	float                                         ArmLength;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraOffset;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShooterSpringCameraParameter) == 0x000008, "Wrong alignment on FShooterSpringCameraParameter");
static_assert(sizeof(FShooterSpringCameraParameter) == 0x000020, "Wrong size on FShooterSpringCameraParameter");
static_assert(offsetof(FShooterSpringCameraParameter, ArmLength) == 0x000000, "Member 'FShooterSpringCameraParameter::ArmLength' has a wrong offset!");
static_assert(offsetof(FShooterSpringCameraParameter, CameraOffset) == 0x000008, "Member 'FShooterSpringCameraParameter::CameraOffset' has a wrong offset!");

// ScriptStruct Pal.ShooterSpringCameraAdditionalOffset
// 0x0030 (0x0030 - 0x0000)
struct FShooterSpringCameraAdditionalOffset final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShooterSpringCameraParameter          CameraOffset;                                      // 0x0010(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShooterSpringCameraAdditionalOffset) == 0x000008, "Wrong alignment on FShooterSpringCameraAdditionalOffset");
static_assert(sizeof(FShooterSpringCameraAdditionalOffset) == 0x000030, "Wrong size on FShooterSpringCameraAdditionalOffset");
static_assert(offsetof(FShooterSpringCameraAdditionalOffset, FlagName) == 0x000000, "Member 'FShooterSpringCameraAdditionalOffset::FlagName' has a wrong offset!");
static_assert(offsetof(FShooterSpringCameraAdditionalOffset, Priority) == 0x000008, "Member 'FShooterSpringCameraAdditionalOffset::Priority' has a wrong offset!");
static_assert(offsetof(FShooterSpringCameraAdditionalOffset, CameraOffset) == 0x000010, "Member 'FShooterSpringCameraAdditionalOffset::CameraOffset' has a wrong offset!");

// ScriptStruct Pal.PalItemShopCreateDataStruct
// 0x0014 (0x0014 - 0x0000)
struct FPalItemShopCreateDataStruct final
{
public:
	class FName                                   StaticItemId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuyRate;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SellRate;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stock;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemShopCreateDataStruct) == 0x000004, "Wrong alignment on FPalItemShopCreateDataStruct");
static_assert(sizeof(FPalItemShopCreateDataStruct) == 0x000014, "Wrong size on FPalItemShopCreateDataStruct");
static_assert(offsetof(FPalItemShopCreateDataStruct, StaticItemId) == 0x000000, "Member 'FPalItemShopCreateDataStruct::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalItemShopCreateDataStruct, BuyRate) == 0x000008, "Member 'FPalItemShopCreateDataStruct::BuyRate' has a wrong offset!");
static_assert(offsetof(FPalItemShopCreateDataStruct, SellRate) == 0x00000C, "Member 'FPalItemShopCreateDataStruct::SellRate' has a wrong offset!");
static_assert(offsetof(FPalItemShopCreateDataStruct, Stock) == 0x000010, "Member 'FPalItemShopCreateDataStruct::Stock' has a wrong offset!");

// ScriptStruct Pal.PalItemShopCreateDataRow
// 0x0010 (0x0018 - 0x0008)
struct FPalItemShopCreateDataRow final : public FTableRowBase
{
public:
	TArray<struct FPalItemShopCreateDataStruct>   ProductDataArray;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemShopCreateDataRow) == 0x000008, "Wrong alignment on FPalItemShopCreateDataRow");
static_assert(sizeof(FPalItemShopCreateDataRow) == 0x000018, "Wrong size on FPalItemShopCreateDataRow");
static_assert(offsetof(FPalItemShopCreateDataRow, ProductDataArray) == 0x000008, "Member 'FPalItemShopCreateDataRow::ProductDataArray' has a wrong offset!");

// ScriptStruct Pal.PalItemShopCreateIntermediateDataRow
// 0x0020 (0x0028 - 0x0008)
struct FPalItemShopCreateIntermediateDataRow final : public FTableRowBase
{
public:
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StaticItemId;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuyRate;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SellRate;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stock;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26EA[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalItemShopCreateIntermediateDataRow) == 0x000008, "Wrong alignment on FPalItemShopCreateIntermediateDataRow");
static_assert(sizeof(FPalItemShopCreateIntermediateDataRow) == 0x000028, "Wrong size on FPalItemShopCreateIntermediateDataRow");
static_assert(offsetof(FPalItemShopCreateIntermediateDataRow, GroupName) == 0x000008, "Member 'FPalItemShopCreateIntermediateDataRow::GroupName' has a wrong offset!");
static_assert(offsetof(FPalItemShopCreateIntermediateDataRow, StaticItemId) == 0x000010, "Member 'FPalItemShopCreateIntermediateDataRow::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalItemShopCreateIntermediateDataRow, BuyRate) == 0x000018, "Member 'FPalItemShopCreateIntermediateDataRow::BuyRate' has a wrong offset!");
static_assert(offsetof(FPalItemShopCreateIntermediateDataRow, SellRate) == 0x00001C, "Member 'FPalItemShopCreateIntermediateDataRow::SellRate' has a wrong offset!");
static_assert(offsetof(FPalItemShopCreateIntermediateDataRow, Stock) == 0x000020, "Member 'FPalItemShopCreateIntermediateDataRow::Stock' has a wrong offset!");

// ScriptStruct Pal.PalItemShopLotteryDataRow
// 0x0010 (0x0018 - 0x0008)
struct FPalItemShopLotteryDataRow final : public FTableRowBase
{
public:
	TArray<struct FPalItemShopLotteryDataStruct>  LotteryDataArray;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemShopLotteryDataRow) == 0x000008, "Wrong alignment on FPalItemShopLotteryDataRow");
static_assert(sizeof(FPalItemShopLotteryDataRow) == 0x000018, "Wrong size on FPalItemShopLotteryDataRow");
static_assert(offsetof(FPalItemShopLotteryDataRow, LotteryDataArray) == 0x000008, "Member 'FPalItemShopLotteryDataRow::LotteryDataArray' has a wrong offset!");

// ScriptStruct Pal.PalItemShopLotteryIntermediateDataRow
// 0x0018 (0x0020 - 0x0008)
struct FPalItemShopLotteryIntermediateDataRow final : public FTableRowBase
{
public:
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShopGroupName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26EB[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalItemShopLotteryIntermediateDataRow) == 0x000008, "Wrong alignment on FPalItemShopLotteryIntermediateDataRow");
static_assert(sizeof(FPalItemShopLotteryIntermediateDataRow) == 0x000020, "Wrong size on FPalItemShopLotteryIntermediateDataRow");
static_assert(offsetof(FPalItemShopLotteryIntermediateDataRow, GroupName) == 0x000008, "Member 'FPalItemShopLotteryIntermediateDataRow::GroupName' has a wrong offset!");
static_assert(offsetof(FPalItemShopLotteryIntermediateDataRow, ShopGroupName) == 0x000010, "Member 'FPalItemShopLotteryIntermediateDataRow::ShopGroupName' has a wrong offset!");
static_assert(offsetof(FPalItemShopLotteryIntermediateDataRow, Weight) == 0x000018, "Member 'FPalItemShopLotteryIntermediateDataRow::Weight' has a wrong offset!");

// ScriptStruct Pal.PalPalShopCreateDataRow
// 0x0020 (0x0028 - 0x0008)
struct FPalPalShopCreateDataRow final : public FTableRowBase
{
public:
	int32                                         MaxLostPalNum;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNum;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalDataTableRowName_PalMonsterData> CharacterIDArray;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinCharacterLevel;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCharacterLevel;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalPalShopCreateDataRow) == 0x000008, "Wrong alignment on FPalPalShopCreateDataRow");
static_assert(sizeof(FPalPalShopCreateDataRow) == 0x000028, "Wrong size on FPalPalShopCreateDataRow");
static_assert(offsetof(FPalPalShopCreateDataRow, MaxLostPalNum) == 0x000008, "Member 'FPalPalShopCreateDataRow::MaxLostPalNum' has a wrong offset!");
static_assert(offsetof(FPalPalShopCreateDataRow, CharacterNum) == 0x00000C, "Member 'FPalPalShopCreateDataRow::CharacterNum' has a wrong offset!");
static_assert(offsetof(FPalPalShopCreateDataRow, CharacterIDArray) == 0x000010, "Member 'FPalPalShopCreateDataRow::CharacterIDArray' has a wrong offset!");
static_assert(offsetof(FPalPalShopCreateDataRow, MinCharacterLevel) == 0x000020, "Member 'FPalPalShopCreateDataRow::MinCharacterLevel' has a wrong offset!");
static_assert(offsetof(FPalPalShopCreateDataRow, MaxCharacterLevel) == 0x000024, "Member 'FPalPalShopCreateDataRow::MaxCharacterLevel' has a wrong offset!");

// ScriptStruct Pal.PalShopProductRequireItemData
// 0x000C (0x000C - 0x0000)
struct FPalShopProductRequireItemData final
{
public:
	class FName                                   StaticItemId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireNum;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalShopProductRequireItemData) == 0x000004, "Wrong alignment on FPalShopProductRequireItemData");
static_assert(sizeof(FPalShopProductRequireItemData) == 0x00000C, "Wrong size on FPalShopProductRequireItemData");
static_assert(offsetof(FPalShopProductRequireItemData, StaticItemId) == 0x000000, "Member 'FPalShopProductRequireItemData::StaticItemId' has a wrong offset!");
static_assert(offsetof(FPalShopProductRequireItemData, RequireNum) == 0x000008, "Member 'FPalShopProductRequireItemData::RequireNum' has a wrong offset!");

// ScriptStruct Pal.PalBodyInstanceParameter
// 0x0010 (0x0010 - 0x0000)
struct FPalBodyInstanceParameter final
{
public:
	int32                                         InstanceBodyIndex;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         InstanceBoneIndex;                                 // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26EC[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearDamping;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalBodyInstanceParameter) == 0x000004, "Wrong alignment on FPalBodyInstanceParameter");
static_assert(sizeof(FPalBodyInstanceParameter) == 0x000010, "Wrong size on FPalBodyInstanceParameter");
static_assert(offsetof(FPalBodyInstanceParameter, InstanceBodyIndex) == 0x000000, "Member 'FPalBodyInstanceParameter::InstanceBodyIndex' has a wrong offset!");
static_assert(offsetof(FPalBodyInstanceParameter, InstanceBoneIndex) == 0x000004, "Member 'FPalBodyInstanceParameter::InstanceBoneIndex' has a wrong offset!");
static_assert(offsetof(FPalBodyInstanceParameter, LinearDamping) == 0x000008, "Member 'FPalBodyInstanceParameter::LinearDamping' has a wrong offset!");
static_assert(offsetof(FPalBodyInstanceParameter, AngularDamping) == 0x00000C, "Member 'FPalBodyInstanceParameter::AngularDamping' has a wrong offset!");

// ScriptStruct Pal.PalSoundIDDataTableRow
// 0x0008 (0x0010 - 0x0008)
struct FPalSoundIDDataTableRow final : public FTableRowBase
{
public:
	class FName                                   Description;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSoundIDDataTableRow) == 0x000008, "Wrong alignment on FPalSoundIDDataTableRow");
static_assert(sizeof(FPalSoundIDDataTableRow) == 0x000010, "Wrong size on FPalSoundIDDataTableRow");
static_assert(offsetof(FPalSoundIDDataTableRow, Description) == 0x000008, "Member 'FPalSoundIDDataTableRow::Description' has a wrong offset!");

// ScriptStruct Pal.PalSoundPlayingParameter
// 0x0010 (0x0010 - 0x0000)
struct FPalSoundPlayingParameter final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalSoundOptions                       Options;                                           // 0x0008(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStopAbsolutely;                                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26ED[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalSoundPlayingParameter) == 0x000008, "Wrong alignment on FPalSoundPlayingParameter");
static_assert(sizeof(FPalSoundPlayingParameter) == 0x000010, "Wrong size on FPalSoundPlayingParameter");
static_assert(offsetof(FPalSoundPlayingParameter, AudioEvent) == 0x000000, "Member 'FPalSoundPlayingParameter::AudioEvent' has a wrong offset!");
static_assert(offsetof(FPalSoundPlayingParameter, Options) == 0x000008, "Member 'FPalSoundPlayingParameter::Options' has a wrong offset!");
static_assert(offsetof(FPalSoundPlayingParameter, bStopAbsolutely) == 0x00000C, "Member 'FPalSoundPlayingParameter::bStopAbsolutely' has a wrong offset!");

// ScriptStruct Pal.PalStageModelRepInfo
// 0x001C (0x0028 - 0x000C)
struct FPalStageModelRepInfo final : public FFastArraySerializerItem
{
public:
	struct FPalStageInstanceId                    InstanceId;                                        // 0x000C(0x0014)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPalStageModelBase*                     Model;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalStageModelRepInfo) == 0x000008, "Wrong alignment on FPalStageModelRepInfo");
static_assert(sizeof(FPalStageModelRepInfo) == 0x000028, "Wrong size on FPalStageModelRepInfo");
static_assert(offsetof(FPalStageModelRepInfo, InstanceId) == 0x00000C, "Member 'FPalStageModelRepInfo::InstanceId' has a wrong offset!");
static_assert(offsetof(FPalStageModelRepInfo, Model) == 0x000020, "Member 'FPalStageModelRepInfo::Model' has a wrong offset!");

// ScriptStruct Pal.PalFastStageModelRepInfoArray
// 0x0040 (0x0148 - 0x0108)
struct FPalFastStageModelRepInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPalStageModelRepInfo>          Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_26EE[0x30];                                    // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalFastStageModelRepInfoArray) == 0x000008, "Wrong alignment on FPalFastStageModelRepInfoArray");
static_assert(sizeof(FPalFastStageModelRepInfoArray) == 0x000148, "Wrong size on FPalFastStageModelRepInfoArray");
static_assert(offsetof(FPalFastStageModelRepInfoArray, Items) == 0x000108, "Member 'FPalFastStageModelRepInfoArray::Items' has a wrong offset!");

// ScriptStruct Pal.PalStageAreaInfo
// 0x0038 (0x0038 - 0x0000)
struct FPalStageAreaInfo final
{
public:
	struct FBox                                   BoundingBox;                                       // 0x0000(0x0038)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalStageAreaInfo) == 0x000008, "Wrong alignment on FPalStageAreaInfo");
static_assert(sizeof(FPalStageAreaInfo) == 0x000038, "Wrong size on FPalStageAreaInfo");
static_assert(offsetof(FPalStageAreaInfo, BoundingBox) == 0x000000, "Member 'FPalStageAreaInfo::BoundingBox' has a wrong offset!");

// ScriptStruct Pal.FootStampInfo
// 0x0080 (0x0080 - 0x0000)
struct FFootStampInfo final
{
public:
	TMap<EPalFootType, class UMaterialInterface*> FootstepDecalMap;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                FootstepDecal_Size;                                // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FootstepDecal_InitialRotation;                     // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootStampInfo) == 0x000008, "Wrong alignment on FFootStampInfo");
static_assert(sizeof(FFootStampInfo) == 0x000080, "Wrong size on FFootStampInfo");
static_assert(offsetof(FFootStampInfo, FootstepDecalMap) == 0x000000, "Member 'FFootStampInfo::FootstepDecalMap' has a wrong offset!");
static_assert(offsetof(FFootStampInfo, FootstepDecal_Size) == 0x000050, "Member 'FFootStampInfo::FootstepDecal_Size' has a wrong offset!");
static_assert(offsetof(FFootStampInfo, FootstepDecal_InitialRotation) == 0x000068, "Member 'FFootStampInfo::FootstepDecal_InitialRotation' has a wrong offset!");

// ScriptStruct Pal.PalStaticCharacterInfo_SpawnItem
// 0x0050 (0x0050 - 0x0000)
struct FPalStaticCharacterInfo_SpawnItem final
{
public:
	TMap<int32, struct FPalDataTableRowName_FieldLotteryNameData> FieldLotteryNameByRank;                            // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalStaticCharacterInfo_SpawnItem) == 0x000008, "Wrong alignment on FPalStaticCharacterInfo_SpawnItem");
static_assert(sizeof(FPalStaticCharacterInfo_SpawnItem) == 0x000050, "Wrong size on FPalStaticCharacterInfo_SpawnItem");
static_assert(offsetof(FPalStaticCharacterInfo_SpawnItem, FieldLotteryNameByRank) == 0x000000, "Member 'FPalStaticCharacterInfo_SpawnItem::FieldLotteryNameByRank' has a wrong offset!");

// ScriptStruct Pal.PalEditorItemIconTableRow
// 0x0030 (0x0038 - 0x0008)
struct FPalEditorItemIconTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEditorItemIconTableRow) == 0x000008, "Wrong alignment on FPalEditorItemIconTableRow");
static_assert(sizeof(FPalEditorItemIconTableRow) == 0x000038, "Wrong size on FPalEditorItemIconTableRow");
static_assert(offsetof(FPalEditorItemIconTableRow, Icon) == 0x000008, "Member 'FPalEditorItemIconTableRow::Icon' has a wrong offset!");

// ScriptStruct Pal.PalEditorItemStaticClassTableRow
// 0x0010 (0x0018 - 0x0008)
struct FPalEditorItemStaticClassTableRow final : public FTableRowBase
{
public:
	class FName                                   ClassName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalStaticItemDataBase>     StaticClass;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEditorItemStaticClassTableRow) == 0x000008, "Wrong alignment on FPalEditorItemStaticClassTableRow");
static_assert(sizeof(FPalEditorItemStaticClassTableRow) == 0x000018, "Wrong size on FPalEditorItemStaticClassTableRow");
static_assert(offsetof(FPalEditorItemStaticClassTableRow, ClassName) == 0x000008, "Member 'FPalEditorItemStaticClassTableRow::ClassName' has a wrong offset!");
static_assert(offsetof(FPalEditorItemStaticClassTableRow, StaticClass) == 0x000010, "Member 'FPalEditorItemStaticClassTableRow::StaticClass' has a wrong offset!");

// ScriptStruct Pal.PalEditorItemDynamicClassTableRow
// 0x0010 (0x0018 - 0x0008)
struct FPalEditorItemDynamicClassTableRow final : public FTableRowBase
{
public:
	class FName                                   ClassName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPalDynamicItemDataBase>    DynamicClass;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEditorItemDynamicClassTableRow) == 0x000008, "Wrong alignment on FPalEditorItemDynamicClassTableRow");
static_assert(sizeof(FPalEditorItemDynamicClassTableRow) == 0x000018, "Wrong size on FPalEditorItemDynamicClassTableRow");
static_assert(offsetof(FPalEditorItemDynamicClassTableRow, ClassName) == 0x000008, "Member 'FPalEditorItemDynamicClassTableRow::ClassName' has a wrong offset!");
static_assert(offsetof(FPalEditorItemDynamicClassTableRow, DynamicClass) == 0x000010, "Member 'FPalEditorItemDynamicClassTableRow::DynamicClass' has a wrong offset!");

// ScriptStruct Pal.PalEditorItemActorClassTableRow
// 0x0038 (0x0040 - 0x0008)
struct FPalEditorItemActorClassTableRow final : public FTableRowBase
{
public:
	class FName                                   ClassName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalEditorItemActorClassTableRow) == 0x000008, "Wrong alignment on FPalEditorItemActorClassTableRow");
static_assert(sizeof(FPalEditorItemActorClassTableRow) == 0x000040, "Wrong size on FPalEditorItemActorClassTableRow");
static_assert(offsetof(FPalEditorItemActorClassTableRow, ClassName) == 0x000008, "Member 'FPalEditorItemActorClassTableRow::ClassName' has a wrong offset!");
static_assert(offsetof(FPalEditorItemActorClassTableRow, ActorClass) == 0x000010, "Member 'FPalEditorItemActorClassTableRow::ActorClass' has a wrong offset!");

// ScriptStruct Pal.PalStaticItemDataStruct
// 0x0120 (0x0128 - 0x0008)
struct FPalStaticItemDataStruct final : public FTableRowBase
{
public:
	class FName                                   OverrideName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideDescription;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalItemTypeA                                 TypeA;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalItemTypeB                                 TypeB;                                             // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26EF[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStackCount;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInTreasureBox;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotConsumed;                                      // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHandcraft;                                  // 0x003E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F0[0x1];                                     // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TechnologyTreeLock;                                // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemStaticClass;                                   // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemDynamicClass;                                  // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemActorClass;                                    // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemStaticMeshName;                                // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VisualBlueprintClassName;                          // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F1[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   VisualBlueprintClassSoft;                          // 0x0070(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalDropItemType                              DropItemType;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F2[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Editor_RowNameHash;                                // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestoreSatiety;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestoreConcentration;                              // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestoreSanity;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestoreHealth;                                     // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrantEffect1Id;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrantEffect1Time;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrantEffect2Id;                                    // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrantEffect2Time;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrantEffect3Id;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrantEffect3Time;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Durability;                                        // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               ElementType;                                       // 0x00D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSleepWeapon;                                      // 0x00D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F3[0x2];                                     // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MagazineSize;                                      // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakAttackRate;                                   // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicalAttackValue;                               // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPValue;                                           // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicalDefenseValue;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldValue;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttackValue;                                  // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefenseValue;                                 // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkillName;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkillName2;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkillName3;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassiveSkillName4;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaID                                    WazaID;                                            // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F4[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CorruptionFactor;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue1;                                       // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F5[0x4];                                     // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalStaticItemDataStruct) == 0x000008, "Wrong alignment on FPalStaticItemDataStruct");
static_assert(sizeof(FPalStaticItemDataStruct) == 0x000128, "Wrong size on FPalStaticItemDataStruct");
static_assert(offsetof(FPalStaticItemDataStruct, OverrideName) == 0x000008, "Member 'FPalStaticItemDataStruct::OverrideName' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, OverrideDescription) == 0x000010, "Member 'FPalStaticItemDataStruct::OverrideDescription' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, IconName) == 0x000018, "Member 'FPalStaticItemDataStruct::IconName' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, TypeA) == 0x000020, "Member 'FPalStaticItemDataStruct::TypeA' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, TypeB) == 0x000021, "Member 'FPalStaticItemDataStruct::TypeB' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, Rank) == 0x000024, "Member 'FPalStaticItemDataStruct::Rank' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, Rarity) == 0x000028, "Member 'FPalStaticItemDataStruct::Rarity' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, MaxStackCount) == 0x00002C, "Member 'FPalStaticItemDataStruct::MaxStackCount' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, Weight) == 0x000030, "Member 'FPalStaticItemDataStruct::Weight' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, Price) == 0x000034, "Member 'FPalStaticItemDataStruct::Price' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, SortID) == 0x000038, "Member 'FPalStaticItemDataStruct::SortID' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, bInTreasureBox) == 0x00003C, "Member 'FPalStaticItemDataStruct::bInTreasureBox' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, bNotConsumed) == 0x00003D, "Member 'FPalStaticItemDataStruct::bNotConsumed' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, bEnableHandcraft) == 0x00003E, "Member 'FPalStaticItemDataStruct::bEnableHandcraft' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, TechnologyTreeLock) == 0x000040, "Member 'FPalStaticItemDataStruct::TechnologyTreeLock' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, ItemStaticClass) == 0x000044, "Member 'FPalStaticItemDataStruct::ItemStaticClass' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, ItemDynamicClass) == 0x00004C, "Member 'FPalStaticItemDataStruct::ItemDynamicClass' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, ItemActorClass) == 0x000054, "Member 'FPalStaticItemDataStruct::ItemActorClass' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, ItemStaticMeshName) == 0x00005C, "Member 'FPalStaticItemDataStruct::ItemStaticMeshName' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, VisualBlueprintClassName) == 0x000064, "Member 'FPalStaticItemDataStruct::VisualBlueprintClassName' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, VisualBlueprintClassSoft) == 0x000070, "Member 'FPalStaticItemDataStruct::VisualBlueprintClassSoft' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, DropItemType) == 0x0000A0, "Member 'FPalStaticItemDataStruct::DropItemType' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, Editor_RowNameHash) == 0x0000A4, "Member 'FPalStaticItemDataStruct::Editor_RowNameHash' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, RestoreSatiety) == 0x0000A8, "Member 'FPalStaticItemDataStruct::RestoreSatiety' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, RestoreConcentration) == 0x0000AC, "Member 'FPalStaticItemDataStruct::RestoreConcentration' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, RestoreSanity) == 0x0000B0, "Member 'FPalStaticItemDataStruct::RestoreSanity' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, RestoreHealth) == 0x0000B4, "Member 'FPalStaticItemDataStruct::RestoreHealth' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, GrantEffect1Id) == 0x0000B8, "Member 'FPalStaticItemDataStruct::GrantEffect1Id' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, GrantEffect1Time) == 0x0000BC, "Member 'FPalStaticItemDataStruct::GrantEffect1Time' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, GrantEffect2Id) == 0x0000C0, "Member 'FPalStaticItemDataStruct::GrantEffect2Id' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, GrantEffect2Time) == 0x0000C4, "Member 'FPalStaticItemDataStruct::GrantEffect2Time' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, GrantEffect3Id) == 0x0000C8, "Member 'FPalStaticItemDataStruct::GrantEffect3Id' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, GrantEffect3Time) == 0x0000CC, "Member 'FPalStaticItemDataStruct::GrantEffect3Time' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, Durability) == 0x0000D0, "Member 'FPalStaticItemDataStruct::Durability' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, ElementType) == 0x0000D4, "Member 'FPalStaticItemDataStruct::ElementType' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, bSleepWeapon) == 0x0000D5, "Member 'FPalStaticItemDataStruct::bSleepWeapon' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, MagazineSize) == 0x0000D8, "Member 'FPalStaticItemDataStruct::MagazineSize' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, SneakAttackRate) == 0x0000DC, "Member 'FPalStaticItemDataStruct::SneakAttackRate' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, PhysicalAttackValue) == 0x0000E0, "Member 'FPalStaticItemDataStruct::PhysicalAttackValue' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, HPValue) == 0x0000E4, "Member 'FPalStaticItemDataStruct::HPValue' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, PhysicalDefenseValue) == 0x0000E8, "Member 'FPalStaticItemDataStruct::PhysicalDefenseValue' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, ShieldValue) == 0x0000EC, "Member 'FPalStaticItemDataStruct::ShieldValue' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, MagicAttackValue) == 0x0000F0, "Member 'FPalStaticItemDataStruct::MagicAttackValue' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, MagicDefenseValue) == 0x0000F4, "Member 'FPalStaticItemDataStruct::MagicDefenseValue' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, PassiveSkillName) == 0x0000F8, "Member 'FPalStaticItemDataStruct::PassiveSkillName' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, PassiveSkillName2) == 0x000100, "Member 'FPalStaticItemDataStruct::PassiveSkillName2' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, PassiveSkillName3) == 0x000108, "Member 'FPalStaticItemDataStruct::PassiveSkillName3' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, PassiveSkillName4) == 0x000110, "Member 'FPalStaticItemDataStruct::PassiveSkillName4' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, WazaID) == 0x000118, "Member 'FPalStaticItemDataStruct::WazaID' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, CorruptionFactor) == 0x00011C, "Member 'FPalStaticItemDataStruct::CorruptionFactor' has a wrong offset!");
static_assert(offsetof(FPalStaticItemDataStruct, FloatValue1) == 0x000120, "Member 'FPalStaticItemDataStruct::FloatValue1' has a wrong offset!");

// ScriptStruct Pal.PalItemRecipeMaterialInfo
// 0x000C (0x000C - 0x0000)
struct FPalItemRecipeMaterialInfo final
{
public:
	class FName                                   MaterialID;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCount;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalItemRecipeMaterialInfo) == 0x000004, "Wrong alignment on FPalItemRecipeMaterialInfo");
static_assert(sizeof(FPalItemRecipeMaterialInfo) == 0x00000C, "Wrong size on FPalItemRecipeMaterialInfo");
static_assert(offsetof(FPalItemRecipeMaterialInfo, MaterialID) == 0x000000, "Member 'FPalItemRecipeMaterialInfo::MaterialID' has a wrong offset!");
static_assert(offsetof(FPalItemRecipeMaterialInfo, MaterialCount) == 0x000008, "Member 'FPalItemRecipeMaterialInfo::MaterialCount' has a wrong offset!");

// ScriptStruct Pal.PalTalkTreeDataTableRow
// 0x0018 (0x0020 - 0x0008)
struct FPalTalkTreeDataTableRow final : public FTableRowBase
{
public:
	class FName                                   NPCID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextId;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalTalkTreeDataTableRow) == 0x000008, "Wrong alignment on FPalTalkTreeDataTableRow");
static_assert(sizeof(FPalTalkTreeDataTableRow) == 0x000020, "Wrong size on FPalTalkTreeDataTableRow");
static_assert(offsetof(FPalTalkTreeDataTableRow, NPCID) == 0x000008, "Member 'FPalTalkTreeDataTableRow::NPCID' has a wrong offset!");
static_assert(offsetof(FPalTalkTreeDataTableRow, TalkName) == 0x000010, "Member 'FPalTalkTreeDataTableRow::TalkName' has a wrong offset!");
static_assert(offsetof(FPalTalkTreeDataTableRow, TextId) == 0x000018, "Member 'FPalTalkTreeDataTableRow::TextId' has a wrong offset!");

// ScriptStruct Pal.TutorialDataStruct
// 0x0030 (0x0038 - 0x0008)
struct FTutorialDataStruct final : public FTableRowBase
{
public:
	class FName                                   MsgId;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalTutorialTriggerType                       Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MultiTrigger;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalTutorialTriggerConditionType              ConditionType;                                     // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F6[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ConditionObjectIds;                                // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   ConditionCategoryName;                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConditionValue;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F7[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTutorialDataStruct) == 0x000008, "Wrong alignment on FTutorialDataStruct");
static_assert(sizeof(FTutorialDataStruct) == 0x000038, "Wrong size on FTutorialDataStruct");
static_assert(offsetof(FTutorialDataStruct, MsgId) == 0x000008, "Member 'FTutorialDataStruct::MsgId' has a wrong offset!");
static_assert(offsetof(FTutorialDataStruct, Type) == 0x000010, "Member 'FTutorialDataStruct::Type' has a wrong offset!");
static_assert(offsetof(FTutorialDataStruct, MultiTrigger) == 0x000011, "Member 'FTutorialDataStruct::MultiTrigger' has a wrong offset!");
static_assert(offsetof(FTutorialDataStruct, ConditionType) == 0x000012, "Member 'FTutorialDataStruct::ConditionType' has a wrong offset!");
static_assert(offsetof(FTutorialDataStruct, ConditionObjectIds) == 0x000018, "Member 'FTutorialDataStruct::ConditionObjectIds' has a wrong offset!");
static_assert(offsetof(FTutorialDataStruct, ConditionCategoryName) == 0x000028, "Member 'FTutorialDataStruct::ConditionCategoryName' has a wrong offset!");
static_assert(offsetof(FTutorialDataStruct, ConditionValue) == 0x000030, "Member 'FTutorialDataStruct::ConditionValue' has a wrong offset!");

// ScriptStruct Pal.PalBaseCampWorkerSickMasterData
// 0x0020 (0x0028 - 0x0008)
struct FPalBaseCampWorkerSickMasterData final : public FTableRowBase
{
public:
	EPalBaseCampWorkerSickType                    SickType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F8[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectiveItemRank;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalFacialEyeType                             Facial;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26F9[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveSpeed;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SatietyDecrease;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryProbabilityPercentageInPalBox;             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26FA[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalBaseCampWorkerSickMasterData) == 0x000008, "Wrong alignment on FPalBaseCampWorkerSickMasterData");
static_assert(sizeof(FPalBaseCampWorkerSickMasterData) == 0x000028, "Wrong size on FPalBaseCampWorkerSickMasterData");
static_assert(offsetof(FPalBaseCampWorkerSickMasterData, SickType) == 0x000008, "Member 'FPalBaseCampWorkerSickMasterData::SickType' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerSickMasterData, EffectiveItemRank) == 0x00000C, "Member 'FPalBaseCampWorkerSickMasterData::EffectiveItemRank' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerSickMasterData, Facial) == 0x000010, "Member 'FPalBaseCampWorkerSickMasterData::Facial' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerSickMasterData, WorkSpeed) == 0x000014, "Member 'FPalBaseCampWorkerSickMasterData::WorkSpeed' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerSickMasterData, MoveSpeed) == 0x000018, "Member 'FPalBaseCampWorkerSickMasterData::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerSickMasterData, SatietyDecrease) == 0x00001C, "Member 'FPalBaseCampWorkerSickMasterData::SatietyDecrease' has a wrong offset!");
static_assert(offsetof(FPalBaseCampWorkerSickMasterData, RecoveryProbabilityPercentageInPalBox) == 0x000020, "Member 'FPalBaseCampWorkerSickMasterData::RecoveryProbabilityPercentageInPalBox' has a wrong offset!");

// ScriptStruct Pal.PalRandomRestInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalRandomRestInfo final
{
public:
	class UAnimMontage*                           RandomRestMontage;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopNum_Min;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopNum_Max;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterIdleTime;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalRandomRestInfo) == 0x000008, "Wrong alignment on FPalRandomRestInfo");
static_assert(sizeof(FPalRandomRestInfo) == 0x000018, "Wrong size on FPalRandomRestInfo");
static_assert(offsetof(FPalRandomRestInfo, RandomRestMontage) == 0x000000, "Member 'FPalRandomRestInfo::RandomRestMontage' has a wrong offset!");
static_assert(offsetof(FPalRandomRestInfo, Weight) == 0x000008, "Member 'FPalRandomRestInfo::Weight' has a wrong offset!");
static_assert(offsetof(FPalRandomRestInfo, LoopNum_Min) == 0x00000C, "Member 'FPalRandomRestInfo::LoopNum_Min' has a wrong offset!");
static_assert(offsetof(FPalRandomRestInfo, LoopNum_Max) == 0x000010, "Member 'FPalRandomRestInfo::LoopNum_Max' has a wrong offset!");
static_assert(offsetof(FPalRandomRestInfo, AfterIdleTime) == 0x000014, "Member 'FPalRandomRestInfo::AfterIdleTime' has a wrong offset!");

// ScriptStruct Pal.PalCharacterCompleteDelegateParameter
// 0x0014 (0x0014 - 0x0000)
struct FPalCharacterCompleteDelegateParameter final
{
public:
	EPalCharacterCompleteDelegatePriority         Priority;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26FB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class APalCharacter* InCharacter)> CompleteDelegate;                                  // 0x0004(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterCompleteDelegateParameter) == 0x000004, "Wrong alignment on FPalCharacterCompleteDelegateParameter");
static_assert(sizeof(FPalCharacterCompleteDelegateParameter) == 0x000014, "Wrong size on FPalCharacterCompleteDelegateParameter");
static_assert(offsetof(FPalCharacterCompleteDelegateParameter, Priority) == 0x000000, "Member 'FPalCharacterCompleteDelegateParameter::Priority' has a wrong offset!");
static_assert(offsetof(FPalCharacterCompleteDelegateParameter, CompleteDelegate) == 0x000004, "Member 'FPalCharacterCompleteDelegateParameter::CompleteDelegate' has a wrong offset!");

// ScriptStruct Pal.PalCharacterList
// 0x0010 (0x0010 - 0x0000)
struct FPalCharacterList final
{
public:
	TArray<class APalCharacter*>                  CharacterList;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCharacterList) == 0x000008, "Wrong alignment on FPalCharacterList");
static_assert(sizeof(FPalCharacterList) == 0x000010, "Wrong size on FPalCharacterList");
static_assert(offsetof(FPalCharacterList, CharacterList) == 0x000000, "Member 'FPalCharacterList::CharacterList' has a wrong offset!");

// ScriptStruct Pal.PalUIAimReticleMapObjectAssignableData
// 0x000C (0x000C - 0x0000)
struct FPalUIAimReticleMapObjectAssignableData final
{
public:
	bool                                          IsAssignable;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26FC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetMapObjectID;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalUIAimReticleMapObjectAssignableData) == 0x000004, "Wrong alignment on FPalUIAimReticleMapObjectAssignableData");
static_assert(sizeof(FPalUIAimReticleMapObjectAssignableData) == 0x00000C, "Wrong size on FPalUIAimReticleMapObjectAssignableData");
static_assert(offsetof(FPalUIAimReticleMapObjectAssignableData, IsAssignable) == 0x000000, "Member 'FPalUIAimReticleMapObjectAssignableData::IsAssignable' has a wrong offset!");
static_assert(offsetof(FPalUIAimReticleMapObjectAssignableData, TargetMapObjectID) == 0x000004, "Member 'FPalUIAimReticleMapObjectAssignableData::TargetMapObjectID' has a wrong offset!");

// ScriptStruct Pal.PalUIAimReticleMapObjectThrowableData
// 0x0010 (0x0010 - 0x0000)
struct FPalUIAimReticleMapObjectThrowableData final
{
public:
	bool                                          IsThrowable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26FD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetMapObjectID;                                 // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectConcreteModelThrowableType       ThrowableType;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26FE[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUIAimReticleMapObjectThrowableData) == 0x000004, "Wrong alignment on FPalUIAimReticleMapObjectThrowableData");
static_assert(sizeof(FPalUIAimReticleMapObjectThrowableData) == 0x000010, "Wrong size on FPalUIAimReticleMapObjectThrowableData");
static_assert(offsetof(FPalUIAimReticleMapObjectThrowableData, IsThrowable) == 0x000000, "Member 'FPalUIAimReticleMapObjectThrowableData::IsThrowable' has a wrong offset!");
static_assert(offsetof(FPalUIAimReticleMapObjectThrowableData, TargetMapObjectID) == 0x000004, "Member 'FPalUIAimReticleMapObjectThrowableData::TargetMapObjectID' has a wrong offset!");
static_assert(offsetof(FPalUIAimReticleMapObjectThrowableData, ThrowableType) == 0x00000C, "Member 'FPalUIAimReticleMapObjectThrowableData::ThrowableType' has a wrong offset!");

// ScriptStruct Pal.PalSlateNavigationSetting
// 0x0005 (0x0005 - 0x0000)
struct FPalSlateNavigationSetting final
{
public:
	bool                                          IsEnableAnalogNavigation;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableLeftKeyNavigation;                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableRightKeyNavigation;                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableDownKeyNavigation;                         // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableUpKeyNavigation;                           // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalSlateNavigationSetting) == 0x000001, "Wrong alignment on FPalSlateNavigationSetting");
static_assert(sizeof(FPalSlateNavigationSetting) == 0x000005, "Wrong size on FPalSlateNavigationSetting");
static_assert(offsetof(FPalSlateNavigationSetting, IsEnableAnalogNavigation) == 0x000000, "Member 'FPalSlateNavigationSetting::IsEnableAnalogNavigation' has a wrong offset!");
static_assert(offsetof(FPalSlateNavigationSetting, IsEnableLeftKeyNavigation) == 0x000001, "Member 'FPalSlateNavigationSetting::IsEnableLeftKeyNavigation' has a wrong offset!");
static_assert(offsetof(FPalSlateNavigationSetting, IsEnableRightKeyNavigation) == 0x000002, "Member 'FPalSlateNavigationSetting::IsEnableRightKeyNavigation' has a wrong offset!");
static_assert(offsetof(FPalSlateNavigationSetting, IsEnableDownKeyNavigation) == 0x000003, "Member 'FPalSlateNavigationSetting::IsEnableDownKeyNavigation' has a wrong offset!");
static_assert(offsetof(FPalSlateNavigationSetting, IsEnableUpKeyNavigation) == 0x000004, "Member 'FPalSlateNavigationSetting::IsEnableUpKeyNavigation' has a wrong offset!");

// ScriptStruct Pal.PalLocationUIData_TableRow
// 0x00A0 (0x00A8 - 0x0008)
struct FPalLocationUIData_TableRow final : public FTableRowBase
{
public:
	TMap<EPalLocationType, struct FPalLocationUIData> LocationUIDataMap;                                 // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> MapObjectIconMap;                                  // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalLocationUIData_TableRow) == 0x000008, "Wrong alignment on FPalLocationUIData_TableRow");
static_assert(sizeof(FPalLocationUIData_TableRow) == 0x0000A8, "Wrong size on FPalLocationUIData_TableRow");
static_assert(offsetof(FPalLocationUIData_TableRow, LocationUIDataMap) == 0x000008, "Member 'FPalLocationUIData_TableRow::LocationUIDataMap' has a wrong offset!");
static_assert(offsetof(FPalLocationUIData_TableRow, MapObjectIconMap) == 0x000058, "Member 'FPalLocationUIData_TableRow::MapObjectIconMap' has a wrong offset!");

// ScriptStruct Pal.PalUIGuildMemberDisplayInfo
// 0x0018 (0x0018 - 0x0000)
struct FPalUIGuildMemberDisplayInfo final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAdmin;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalGuildPlayerStatus                         PlayerStatus;                                      // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26FF[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUIGuildMemberDisplayInfo) == 0x000008, "Wrong alignment on FPalUIGuildMemberDisplayInfo");
static_assert(sizeof(FPalUIGuildMemberDisplayInfo) == 0x000018, "Wrong size on FPalUIGuildMemberDisplayInfo");
static_assert(offsetof(FPalUIGuildMemberDisplayInfo, CharacterName) == 0x000000, "Member 'FPalUIGuildMemberDisplayInfo::CharacterName' has a wrong offset!");
static_assert(offsetof(FPalUIGuildMemberDisplayInfo, IsAdmin) == 0x000010, "Member 'FPalUIGuildMemberDisplayInfo::IsAdmin' has a wrong offset!");
static_assert(offsetof(FPalUIGuildMemberDisplayInfo, PlayerStatus) == 0x000011, "Member 'FPalUIGuildMemberDisplayInfo::PlayerStatus' has a wrong offset!");

// ScriptStruct Pal.PalUIServerDisplayData
// 0x01A0 (0x01A0 - 0x0000)
struct FPalUIServerDisplayData final
{
public:
	uint8                                         Pad_2700[0x120];                                   // 0x0000(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPvP;                                             // 0x0140(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2701[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Day;                                               // 0x0144(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowPlayerNum;                                      // 0x0148(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerNum;                                      // 0x014C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalUIServerListFilterType                    ServerListType;                                    // 0x0154(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2702[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerAddress;                                     // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0168(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2703[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VersionString;                                     // 0x0170(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x0180(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2704[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0188(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreateTime;                                        // 0x0198(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2705[0x4];                                     // 0x019C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUIServerDisplayData) == 0x000008, "Wrong alignment on FPalUIServerDisplayData");
static_assert(sizeof(FPalUIServerDisplayData) == 0x0001A0, "Wrong size on FPalUIServerDisplayData");
static_assert(offsetof(FPalUIServerDisplayData, ServerName) == 0x000120, "Member 'FPalUIServerDisplayData::ServerName' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, Description) == 0x000130, "Member 'FPalUIServerDisplayData::Description' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, IsPvP) == 0x000140, "Member 'FPalUIServerDisplayData::IsPvP' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, Day) == 0x000144, "Member 'FPalUIServerDisplayData::Day' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, NowPlayerNum) == 0x000148, "Member 'FPalUIServerDisplayData::NowPlayerNum' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, MaxPlayerNum) == 0x00014C, "Member 'FPalUIServerDisplayData::MaxPlayerNum' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, Ping) == 0x000150, "Member 'FPalUIServerDisplayData::Ping' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, ServerListType) == 0x000154, "Member 'FPalUIServerDisplayData::ServerListType' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, ServerAddress) == 0x000158, "Member 'FPalUIServerDisplayData::ServerAddress' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, ServerPort) == 0x000168, "Member 'FPalUIServerDisplayData::ServerPort' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, VersionString) == 0x000170, "Member 'FPalUIServerDisplayData::VersionString' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, IsLocked) == 0x000180, "Member 'FPalUIServerDisplayData::IsLocked' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, Region) == 0x000188, "Member 'FPalUIServerDisplayData::Region' has a wrong offset!");
static_assert(offsetof(FPalUIServerDisplayData, CreateTime) == 0x000198, "Member 'FPalUIServerDisplayData::CreateTime' has a wrong offset!");

// ScriptStruct Pal.PalUIServerDataCollectInfo
// 0x0001 (0x0001 - 0x0000)
struct FPalUIServerDataCollectInfo final
{
public:
	EPalUIServerListSortType                      SortType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalUIServerDataCollectInfo) == 0x000001, "Wrong alignment on FPalUIServerDataCollectInfo");
static_assert(sizeof(FPalUIServerDataCollectInfo) == 0x000001, "Wrong size on FPalUIServerDataCollectInfo");
static_assert(offsetof(FPalUIServerDataCollectInfo, SortType) == 0x000000, "Member 'FPalUIServerDataCollectInfo::SortType' has a wrong offset!");

// ScriptStruct Pal.PalUIPaldexDistributionLocationStruct
// 0x0018 (0x0018 - 0x0000)
struct FPalUIPaldexDistributionLocationStruct final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2706[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUIPaldexDistributionLocationStruct) == 0x000008, "Wrong alignment on FPalUIPaldexDistributionLocationStruct");
static_assert(sizeof(FPalUIPaldexDistributionLocationStruct) == 0x000018, "Wrong size on FPalUIPaldexDistributionLocationStruct");
static_assert(offsetof(FPalUIPaldexDistributionLocationStruct, Locations) == 0x000000, "Member 'FPalUIPaldexDistributionLocationStruct::Locations' has a wrong offset!");
static_assert(offsetof(FPalUIPaldexDistributionLocationStruct, Radius) == 0x000010, "Member 'FPalUIPaldexDistributionLocationStruct::Radius' has a wrong offset!");

// ScriptStruct Pal.PalUIPaldexDistributionData
// 0x0030 (0x0038 - 0x0008)
struct FPalUIPaldexDistributionData final : public FTableRowBase
{
public:
	struct FPalUIPaldexDistributionLocationStruct DayTimeLocations;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPalUIPaldexDistributionLocationStruct NightTimeLocations;                                // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalUIPaldexDistributionData) == 0x000008, "Wrong alignment on FPalUIPaldexDistributionData");
static_assert(sizeof(FPalUIPaldexDistributionData) == 0x000038, "Wrong size on FPalUIPaldexDistributionData");
static_assert(offsetof(FPalUIPaldexDistributionData, DayTimeLocations) == 0x000008, "Member 'FPalUIPaldexDistributionData::DayTimeLocations' has a wrong offset!");
static_assert(offsetof(FPalUIPaldexDistributionData, NightTimeLocations) == 0x000020, "Member 'FPalUIPaldexDistributionData::NightTimeLocations' has a wrong offset!");

// ScriptStruct Pal.PalUIPaldex_DisplayInfo
// 0x0038 (0x0038 - 0x0000)
struct FPalUIPaldex_DisplayInfo final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2707[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IndexSuffix;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CombinedIndexString;                               // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalUIPaldexPanelDetailType                   DetailType;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2708[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   baseCharacterName;                                 // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2709[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalUIPaldex_DisplayInfo) == 0x000008, "Wrong alignment on FPalUIPaldex_DisplayInfo");
static_assert(sizeof(FPalUIPaldex_DisplayInfo) == 0x000038, "Wrong size on FPalUIPaldex_DisplayInfo");
static_assert(offsetof(FPalUIPaldex_DisplayInfo, Index) == 0x000000, "Member 'FPalUIPaldex_DisplayInfo::Index' has a wrong offset!");
static_assert(offsetof(FPalUIPaldex_DisplayInfo, IndexSuffix) == 0x000008, "Member 'FPalUIPaldex_DisplayInfo::IndexSuffix' has a wrong offset!");
static_assert(offsetof(FPalUIPaldex_DisplayInfo, CombinedIndexString) == 0x000018, "Member 'FPalUIPaldex_DisplayInfo::CombinedIndexString' has a wrong offset!");
static_assert(offsetof(FPalUIPaldex_DisplayInfo, DetailType) == 0x000028, "Member 'FPalUIPaldex_DisplayInfo::DetailType' has a wrong offset!");
static_assert(offsetof(FPalUIPaldex_DisplayInfo, baseCharacterName) == 0x00002C, "Member 'FPalUIPaldex_DisplayInfo::baseCharacterName' has a wrong offset!");

// ScriptStruct Pal.PalGaugeInterpolationCalculator
// 0x000C (0x000C - 0x0000)
struct FPalGaugeInterpolationCalculator final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectionPositive;                                // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_270A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalGaugeInterpolationCalculator) == 0x000004, "Wrong alignment on FPalGaugeInterpolationCalculator");
static_assert(sizeof(FPalGaugeInterpolationCalculator) == 0x00000C, "Wrong size on FPalGaugeInterpolationCalculator");
static_assert(offsetof(FPalGaugeInterpolationCalculator, CurrentValue) == 0x000000, "Member 'FPalGaugeInterpolationCalculator::CurrentValue' has a wrong offset!");
static_assert(offsetof(FPalGaugeInterpolationCalculator, TargetValue) == 0x000004, "Member 'FPalGaugeInterpolationCalculator::TargetValue' has a wrong offset!");
static_assert(offsetof(FPalGaugeInterpolationCalculator, bDirectionPositive) == 0x000008, "Member 'FPalGaugeInterpolationCalculator::bDirectionPositive' has a wrong offset!");

// ScriptStruct Pal.PalWazaMasterLevelDataRow
// 0x0010 (0x0018 - 0x0008)
struct FPalWazaMasterLevelDataRow final : public FTableRowBase
{
public:
	class FName                                   PalID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaID                                    WazaID;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_270B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWazaMasterLevelDataRow) == 0x000008, "Wrong alignment on FPalWazaMasterLevelDataRow");
static_assert(sizeof(FPalWazaMasterLevelDataRow) == 0x000018, "Wrong size on FPalWazaMasterLevelDataRow");
static_assert(offsetof(FPalWazaMasterLevelDataRow, PalID) == 0x000008, "Member 'FPalWazaMasterLevelDataRow::PalID' has a wrong offset!");
static_assert(offsetof(FPalWazaMasterLevelDataRow, WazaID) == 0x000010, "Member 'FPalWazaMasterLevelDataRow::WazaID' has a wrong offset!");
static_assert(offsetof(FPalWazaMasterLevelDataRow, Level) == 0x000014, "Member 'FPalWazaMasterLevelDataRow::Level' has a wrong offset!");

// ScriptStruct Pal.PalWazaMasterTamagoDataRow
// 0x0010 (0x0018 - 0x0008)
struct FPalWazaMasterTamagoDataRow final : public FTableRowBase
{
public:
	class FName                                   PalID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaID                                    WazaID;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_270C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWazaMasterTamagoDataRow) == 0x000008, "Wrong alignment on FPalWazaMasterTamagoDataRow");
static_assert(sizeof(FPalWazaMasterTamagoDataRow) == 0x000018, "Wrong size on FPalWazaMasterTamagoDataRow");
static_assert(offsetof(FPalWazaMasterTamagoDataRow, PalID) == 0x000008, "Member 'FPalWazaMasterTamagoDataRow::PalID' has a wrong offset!");
static_assert(offsetof(FPalWazaMasterTamagoDataRow, WazaID) == 0x000010, "Member 'FPalWazaMasterTamagoDataRow::WazaID' has a wrong offset!");

// ScriptStruct Pal.PalWazaDatabaseRaw
// 0x0048 (0x0050 - 0x0008)
struct FPalWazaDatabaseRaw final : public FTableRowBase
{
public:
	EPalWazaID                                    WazaType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalElementType                               Element;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreRandomInherit;                               // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWazaCategory                              Category;                                          // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeanBack;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalPlayerDamageCameraShakeCategory           CameraShake;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreRaycast;                                     // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_270D[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinRange;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRange;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalSizeType                                  ForceRagdollSize;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAdditionalEffectType                      EffectType1;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_270E[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue1;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValueEx1;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalAdditionalEffectType                      EffectType2;                                       // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_270F[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectValue2;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValueEx2;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPalSpecialAttackRateInfo>      SpecialAttackRateInfos;                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsWeaponDamage;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisabledData;                                      // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2710[0x6];                                     // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWazaDatabaseRaw) == 0x000008, "Wrong alignment on FPalWazaDatabaseRaw");
static_assert(sizeof(FPalWazaDatabaseRaw) == 0x000050, "Wrong size on FPalWazaDatabaseRaw");
static_assert(offsetof(FPalWazaDatabaseRaw, WazaType) == 0x000008, "Member 'FPalWazaDatabaseRaw::WazaType' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, Element) == 0x000009, "Member 'FPalWazaDatabaseRaw::Element' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, IgnoreRandomInherit) == 0x00000A, "Member 'FPalWazaDatabaseRaw::IgnoreRandomInherit' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, Category) == 0x00000B, "Member 'FPalWazaDatabaseRaw::Category' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, Power) == 0x00000C, "Member 'FPalWazaDatabaseRaw::Power' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, IsLeanBack) == 0x000010, "Member 'FPalWazaDatabaseRaw::IsLeanBack' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, CameraShake) == 0x000011, "Member 'FPalWazaDatabaseRaw::CameraShake' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, IgnoreRaycast) == 0x000012, "Member 'FPalWazaDatabaseRaw::IgnoreRaycast' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, MinRange) == 0x000014, "Member 'FPalWazaDatabaseRaw::MinRange' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, MaxRange) == 0x000018, "Member 'FPalWazaDatabaseRaw::MaxRange' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, CoolTime) == 0x00001C, "Member 'FPalWazaDatabaseRaw::CoolTime' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, ForceRagdollSize) == 0x000020, "Member 'FPalWazaDatabaseRaw::ForceRagdollSize' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, EffectType1) == 0x000021, "Member 'FPalWazaDatabaseRaw::EffectType1' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, EffectValue1) == 0x000024, "Member 'FPalWazaDatabaseRaw::EffectValue1' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, EffectValueEx1) == 0x000028, "Member 'FPalWazaDatabaseRaw::EffectValueEx1' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, EffectType2) == 0x00002C, "Member 'FPalWazaDatabaseRaw::EffectType2' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, EffectValue2) == 0x000030, "Member 'FPalWazaDatabaseRaw::EffectValue2' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, EffectValueEx2) == 0x000034, "Member 'FPalWazaDatabaseRaw::EffectValueEx2' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, SpecialAttackRateInfos) == 0x000038, "Member 'FPalWazaDatabaseRaw::SpecialAttackRateInfos' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, bIsWeaponDamage) == 0x000048, "Member 'FPalWazaDatabaseRaw::bIsWeaponDamage' has a wrong offset!");
static_assert(offsetof(FPalWazaDatabaseRaw, DisabledData) == 0x000049, "Member 'FPalWazaDatabaseRaw::DisabledData' has a wrong offset!");

// ScriptStruct Pal.PalWeaponSubParameterData
// 0x0010 (0x0018 - 0x0008)
struct FPalWeaponSubParameterData final : public FTableRowBase
{
public:
	float                                         Dps;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stability;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accuracy;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWeaponSubParameterData) == 0x000008, "Wrong alignment on FPalWeaponSubParameterData");
static_assert(sizeof(FPalWeaponSubParameterData) == 0x000018, "Wrong size on FPalWeaponSubParameterData");
static_assert(offsetof(FPalWeaponSubParameterData, Dps) == 0x000008, "Member 'FPalWeaponSubParameterData::Dps' has a wrong offset!");
static_assert(offsetof(FPalWeaponSubParameterData, Range) == 0x00000C, "Member 'FPalWeaponSubParameterData::Range' has a wrong offset!");
static_assert(offsetof(FPalWeaponSubParameterData, Stability) == 0x000010, "Member 'FPalWeaponSubParameterData::Stability' has a wrong offset!");
static_assert(offsetof(FPalWeaponSubParameterData, Accuracy) == 0x000014, "Member 'FPalWeaponSubParameterData::Accuracy' has a wrong offset!");

// ScriptStruct Pal.PalWildSpawnerDatabaseRow
// 0x0078 (0x0080 - 0x0008)
struct FPalWildSpawnerDatabaseRow final : public FTableRowBase
{
public:
	class FName                                   SpawnerName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalSpawnedCharacterType                      SpawnerType;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2711[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalOneDayTimeType                            OnlyTime;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalWeatherConditionType                      OnlyWeather;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2712[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Pal_1;                                             // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPC_1;                                             // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvMin_1;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvMax_1;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMin_1;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMax_1;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Pal_2;                                             // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPC_2;                                             // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvMin_2;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvMax_2;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMin_2;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMax_2;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Pal_3;                                             // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPC_3;                                             // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvMin_3;                                           // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvMax_3;                                           // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMin_3;                                          // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMax_3;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2713[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWildSpawnerDatabaseRow) == 0x000008, "Wrong alignment on FPalWildSpawnerDatabaseRow");
static_assert(sizeof(FPalWildSpawnerDatabaseRow) == 0x000080, "Wrong size on FPalWildSpawnerDatabaseRow");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, SpawnerName) == 0x000008, "Member 'FPalWildSpawnerDatabaseRow::SpawnerName' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, SpawnerType) == 0x000010, "Member 'FPalWildSpawnerDatabaseRow::SpawnerType' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, Weight) == 0x000014, "Member 'FPalWildSpawnerDatabaseRow::Weight' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, OnlyTime) == 0x000018, "Member 'FPalWildSpawnerDatabaseRow::OnlyTime' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, OnlyWeather) == 0x000019, "Member 'FPalWildSpawnerDatabaseRow::OnlyWeather' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, Pal_1) == 0x00001C, "Member 'FPalWildSpawnerDatabaseRow::Pal_1' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NPC_1) == 0x000024, "Member 'FPalWildSpawnerDatabaseRow::NPC_1' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, LvMin_1) == 0x00002C, "Member 'FPalWildSpawnerDatabaseRow::LvMin_1' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, LvMax_1) == 0x000030, "Member 'FPalWildSpawnerDatabaseRow::LvMax_1' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NumMin_1) == 0x000034, "Member 'FPalWildSpawnerDatabaseRow::NumMin_1' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NumMax_1) == 0x000038, "Member 'FPalWildSpawnerDatabaseRow::NumMax_1' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, Pal_2) == 0x00003C, "Member 'FPalWildSpawnerDatabaseRow::Pal_2' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NPC_2) == 0x000044, "Member 'FPalWildSpawnerDatabaseRow::NPC_2' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, LvMin_2) == 0x00004C, "Member 'FPalWildSpawnerDatabaseRow::LvMin_2' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, LvMax_2) == 0x000050, "Member 'FPalWildSpawnerDatabaseRow::LvMax_2' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NumMin_2) == 0x000054, "Member 'FPalWildSpawnerDatabaseRow::NumMin_2' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NumMax_2) == 0x000058, "Member 'FPalWildSpawnerDatabaseRow::NumMax_2' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, Pal_3) == 0x00005C, "Member 'FPalWildSpawnerDatabaseRow::Pal_3' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NPC_3) == 0x000064, "Member 'FPalWildSpawnerDatabaseRow::NPC_3' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, LvMin_3) == 0x00006C, "Member 'FPalWildSpawnerDatabaseRow::LvMin_3' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, LvMax_3) == 0x000070, "Member 'FPalWildSpawnerDatabaseRow::LvMax_3' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NumMin_3) == 0x000074, "Member 'FPalWildSpawnerDatabaseRow::NumMin_3' has a wrong offset!");
static_assert(offsetof(FPalWildSpawnerDatabaseRow, NumMax_3) == 0x000078, "Member 'FPalWildSpawnerDatabaseRow::NumMax_3' has a wrong offset!");

// ScriptStruct Pal.PalWindInfo
// 0x0020 (0x0020 - 0x0000)
struct FPalWindInfo final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2714[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWindInfo) == 0x000008, "Wrong alignment on FPalWindInfo");
static_assert(sizeof(FPalWindInfo) == 0x000020, "Wrong size on FPalWindInfo");
static_assert(offsetof(FPalWindInfo, Direction) == 0x000000, "Member 'FPalWindInfo::Direction' has a wrong offset!");
static_assert(offsetof(FPalWindInfo, Speed) == 0x000018, "Member 'FPalWindInfo::Speed' has a wrong offset!");

// ScriptStruct Pal.PalWorkTypeSet
// 0x0010 (0x0010 - 0x0000)
struct FPalWorkTypeSet final
{
public:
	TArray<EPalWorkType>                          WorkTypes;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkTypeSet) == 0x000008, "Wrong alignment on FPalWorkTypeSet");
static_assert(sizeof(FPalWorkTypeSet) == 0x000010, "Wrong size on FPalWorkTypeSet");
static_assert(offsetof(FPalWorkTypeSet, WorkTypes) == 0x000000, "Member 'FPalWorkTypeSet::WorkTypes' has a wrong offset!");

// ScriptStruct Pal.PalWorkStaticParameter
// 0x00C0 (0x00C0 - 0x0000)
struct FPalWorkStaticParameter final
{
public:
	struct FGuid                                  OwnerMapObjectModelId;                             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerMapObjectConcreteModelId;                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalBoundsTransform                    WorkableBounds;                                    // 0x0020(0x0080)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPalWorkAssignLocalLocation>    AssignLocalLocations;                              // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2715[0x10];                                    // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorkStaticParameter) == 0x000010, "Wrong alignment on FPalWorkStaticParameter");
static_assert(sizeof(FPalWorkStaticParameter) == 0x0000C0, "Wrong size on FPalWorkStaticParameter");
static_assert(offsetof(FPalWorkStaticParameter, OwnerMapObjectModelId) == 0x000000, "Member 'FPalWorkStaticParameter::OwnerMapObjectModelId' has a wrong offset!");
static_assert(offsetof(FPalWorkStaticParameter, OwnerMapObjectConcreteModelId) == 0x000010, "Member 'FPalWorkStaticParameter::OwnerMapObjectConcreteModelId' has a wrong offset!");
static_assert(offsetof(FPalWorkStaticParameter, WorkableBounds) == 0x000020, "Member 'FPalWorkStaticParameter::WorkableBounds' has a wrong offset!");
static_assert(offsetof(FPalWorkStaticParameter, AssignLocalLocations) == 0x0000A0, "Member 'FPalWorkStaticParameter::AssignLocalLocations' has a wrong offset!");

// ScriptStruct Pal.PalWorkAssignParameter
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPalWorkAssignParameter final
{
public:
	uint8                                         Pad_2716[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorkAssignParameter) == 0x000008, "Wrong alignment on FPalWorkAssignParameter");
static_assert(sizeof(FPalWorkAssignParameter) == 0x000028, "Wrong size on FPalWorkAssignParameter");

// ScriptStruct Pal.PalWorkWaitParameter
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPalWorkWaitParameter final
{
public:
	uint8                                         Pad_2717[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorkWaitParameter) == 0x000008, "Wrong alignment on FPalWorkWaitParameter");
static_assert(sizeof(FPalWorkWaitParameter) == 0x000018, "Wrong size on FPalWorkWaitParameter");

// ScriptStruct Pal.PalWorkAssignDefineDataStaticSetting
// 0x0040 (0x0040 - 0x0000)
struct FPalWorkAssignDefineDataStaticSetting final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalWorkAssignDefineData               AssignDefineData;                                  // 0x0008(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkAssignDefineDataStaticSetting) == 0x000008, "Wrong alignment on FPalWorkAssignDefineDataStaticSetting");
static_assert(sizeof(FPalWorkAssignDefineDataStaticSetting) == 0x000040, "Wrong size on FPalWorkAssignDefineDataStaticSetting");
static_assert(offsetof(FPalWorkAssignDefineDataStaticSetting, RowName) == 0x000000, "Member 'FPalWorkAssignDefineDataStaticSetting::RowName' has a wrong offset!");
static_assert(offsetof(FPalWorkAssignDefineDataStaticSetting, AssignDefineData) == 0x000008, "Member 'FPalWorkAssignDefineDataStaticSetting::AssignDefineData' has a wrong offset!");

// ScriptStruct Pal.PalWorkProgressManagerWorkProcessTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FPalWorkProgressManagerWorkProcessTickFunction final : public FTickFunction
{
public:
	class UPalWorkProgressManager*                Target;                                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkProgressManagerWorkProcessTickFunction) == 0x000008, "Wrong alignment on FPalWorkProgressManagerWorkProcessTickFunction");
static_assert(sizeof(FPalWorkProgressManagerWorkProcessTickFunction) == 0x000030, "Wrong size on FPalWorkProgressManagerWorkProcessTickFunction");
static_assert(offsetof(FPalWorkProgressManagerWorkProcessTickFunction, Target) == 0x000028, "Member 'FPalWorkProgressManagerWorkProcessTickFunction::Target' has a wrong offset!");

// ScriptStruct Pal.PalCollectionRankDefineData
// 0x0004 (0x0004 - 0x0000)
struct FPalCollectionRankDefineData final
{
public:
	float                                         DropNumRate;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCollectionRankDefineData) == 0x000004, "Wrong alignment on FPalCollectionRankDefineData");
static_assert(sizeof(FPalCollectionRankDefineData) == 0x000004, "Wrong size on FPalCollectionRankDefineData");
static_assert(offsetof(FPalCollectionRankDefineData, DropNumRate) == 0x000000, "Member 'FPalCollectionRankDefineData::DropNumRate' has a wrong offset!");

// ScriptStruct Pal.PalWorkSuitabilityCollectionDefineData
// 0x0028 (0x0028 - 0x0000)
struct FPalWorkSuitabilityCollectionDefineData final
{
public:
	struct FPalWorkSuitabilityDefineData          CommonDefineData;                                  // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPalCollectionRankDefineData>   CollectionDefineData;                              // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkSuitabilityCollectionDefineData) == 0x000008, "Wrong alignment on FPalWorkSuitabilityCollectionDefineData");
static_assert(sizeof(FPalWorkSuitabilityCollectionDefineData) == 0x000028, "Wrong size on FPalWorkSuitabilityCollectionDefineData");
static_assert(offsetof(FPalWorkSuitabilityCollectionDefineData, CommonDefineData) == 0x000000, "Member 'FPalWorkSuitabilityCollectionDefineData::CommonDefineData' has a wrong offset!");
static_assert(offsetof(FPalWorkSuitabilityCollectionDefineData, CollectionDefineData) == 0x000018, "Member 'FPalWorkSuitabilityCollectionDefineData::CollectionDefineData' has a wrong offset!");

// ScriptStruct Pal.PalDeforestRankDefineData
// 0x0008 (0x0008 - 0x0000)
struct FPalDeforestRankDefineData final
{
public:
	float                                         DamageRate;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPalMapObjectMaterialSubType                  MaterialSubType;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2718[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalDeforestRankDefineData) == 0x000004, "Wrong alignment on FPalDeforestRankDefineData");
static_assert(sizeof(FPalDeforestRankDefineData) == 0x000008, "Wrong size on FPalDeforestRankDefineData");
static_assert(offsetof(FPalDeforestRankDefineData, DamageRate) == 0x000000, "Member 'FPalDeforestRankDefineData::DamageRate' has a wrong offset!");
static_assert(offsetof(FPalDeforestRankDefineData, MaterialSubType) == 0x000004, "Member 'FPalDeforestRankDefineData::MaterialSubType' has a wrong offset!");

// ScriptStruct Pal.PalWorkSuitabilityDeforestDefineData
// 0x0028 (0x0028 - 0x0000)
struct FPalWorkSuitabilityDeforestDefineData final
{
public:
	struct FPalWorkSuitabilityDefineData          CommonDefineData;                                  // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPalDeforestRankDefineData>     DeforestDefineData;                                // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorkSuitabilityDeforestDefineData) == 0x000008, "Wrong alignment on FPalWorkSuitabilityDeforestDefineData");
static_assert(sizeof(FPalWorkSuitabilityDeforestDefineData) == 0x000028, "Wrong size on FPalWorkSuitabilityDeforestDefineData");
static_assert(offsetof(FPalWorkSuitabilityDeforestDefineData, CommonDefineData) == 0x000000, "Member 'FPalWorkSuitabilityDeforestDefineData::CommonDefineData' has a wrong offset!");
static_assert(offsetof(FPalWorkSuitabilityDeforestDefineData, DeforestDefineData) == 0x000018, "Member 'FPalWorkSuitabilityDeforestDefineData::DeforestDefineData' has a wrong offset!");

// ScriptStruct Pal.PalWorldMapUIDataSave
// 0x0050 (0x0050 - 0x0000)
struct FPalWorldMapUIDataSave final
{
public:
	TMap<class FName, bool>                       UnlockedRegionMap;                                 // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldMapUIDataSave) == 0x000008, "Wrong alignment on FPalWorldMapUIDataSave");
static_assert(sizeof(FPalWorldMapUIDataSave) == 0x000050, "Wrong size on FPalWorldMapUIDataSave");
static_assert(offsetof(FPalWorldMapUIDataSave, UnlockedRegionMap) == 0x000000, "Member 'FPalWorldMapUIDataSave::UnlockedRegionMap' has a wrong offset!");

// ScriptStruct Pal.PalWorldObjectRecordData_MapObjectSpawnerItem
// 0x0018 (0x0018 - 0x0000)
struct FPalWorldObjectRecordData_MapObjectSpawnerItem final
{
public:
	struct FGameDateTime                          NextSpawnLotteryGameTime;                          // 0x0000(0x0008)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MapObjectInstanceId;                               // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldObjectRecordData_MapObjectSpawnerItem) == 0x000008, "Wrong alignment on FPalWorldObjectRecordData_MapObjectSpawnerItem");
static_assert(sizeof(FPalWorldObjectRecordData_MapObjectSpawnerItem) == 0x000018, "Wrong size on FPalWorldObjectRecordData_MapObjectSpawnerItem");
static_assert(offsetof(FPalWorldObjectRecordData_MapObjectSpawnerItem, NextSpawnLotteryGameTime) == 0x000000, "Member 'FPalWorldObjectRecordData_MapObjectSpawnerItem::NextSpawnLotteryGameTime' has a wrong offset!");
static_assert(offsetof(FPalWorldObjectRecordData_MapObjectSpawnerItem, MapObjectInstanceId) == 0x000008, "Member 'FPalWorldObjectRecordData_MapObjectSpawnerItem::MapObjectInstanceId' has a wrong offset!");

// ScriptStruct Pal.PalWorldObjectRecordData_MapObjectSpawner
// 0x0058 (0x0058 - 0x0000)
struct FPalWorldObjectRecordData_MapObjectSpawner final
{
public:
	TMap<int32, struct FPalWorldObjectRecordData_MapObjectSpawnerItem> ItemMap;                                           // 0x0000(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_2719[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalWorldObjectRecordData_MapObjectSpawner) == 0x000008, "Wrong alignment on FPalWorldObjectRecordData_MapObjectSpawner");
static_assert(sizeof(FPalWorldObjectRecordData_MapObjectSpawner) == 0x000058, "Wrong size on FPalWorldObjectRecordData_MapObjectSpawner");
static_assert(offsetof(FPalWorldObjectRecordData_MapObjectSpawner, ItemMap) == 0x000000, "Member 'FPalWorldObjectRecordData_MapObjectSpawner::ItemMap' has a wrong offset!");

// ScriptStruct Pal.PalWorldObjectRecordData_MapObjectSpawnerInStage
// 0x0050 (0x0050 - 0x0000)
struct FPalWorldObjectRecordData_MapObjectSpawnerInStage final
{
public:
	TMap<struct FGuid, struct FPalWorldObjectRecordData_MapObjectSpawner> RecordDataMapByLevelObjectInstanceId;              // 0x0000(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalWorldObjectRecordData_MapObjectSpawnerInStage) == 0x000008, "Wrong alignment on FPalWorldObjectRecordData_MapObjectSpawnerInStage");
static_assert(sizeof(FPalWorldObjectRecordData_MapObjectSpawnerInStage) == 0x000050, "Wrong size on FPalWorldObjectRecordData_MapObjectSpawnerInStage");
static_assert(offsetof(FPalWorldObjectRecordData_MapObjectSpawnerInStage, RecordDataMapByLevelObjectInstanceId) == 0x000000, "Member 'FPalWorldObjectRecordData_MapObjectSpawnerInStage::RecordDataMapByLevelObjectInstanceId' has a wrong offset!");

// ScriptStruct Pal.PalCrimeMasterData
// 0x0010 (0x0018 - 0x0008)
struct FPalCrimeMasterData final : public FTableRowBase
{
public:
	class FName                                   CrimeNameTextId;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseReward;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPalCrimeMasterData) == 0x000008, "Wrong alignment on FPalCrimeMasterData");
static_assert(sizeof(FPalCrimeMasterData) == 0x000018, "Wrong size on FPalCrimeMasterData");
static_assert(offsetof(FPalCrimeMasterData, CrimeNameTextId) == 0x000008, "Member 'FPalCrimeMasterData::CrimeNameTextId' has a wrong offset!");
static_assert(offsetof(FPalCrimeMasterData, BaseReward) == 0x000010, "Member 'FPalCrimeMasterData::BaseReward' has a wrong offset!");

// ScriptStruct Pal.PalCrimeInstanceCreateParameter
// 0x0018 (0x0018 - 0x0000)
struct FPalCrimeInstanceCreateParameter final
{
public:
	class FName                                   CrimeId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TargetId;                                          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPalCrimeInstanceCreateParameter) == 0x000004, "Wrong alignment on FPalCrimeInstanceCreateParameter");
static_assert(sizeof(FPalCrimeInstanceCreateParameter) == 0x000018, "Wrong size on FPalCrimeInstanceCreateParameter");
static_assert(offsetof(FPalCrimeInstanceCreateParameter, CrimeId) == 0x000000, "Member 'FPalCrimeInstanceCreateParameter::CrimeId' has a wrong offset!");
static_assert(offsetof(FPalCrimeInstanceCreateParameter, TargetId) == 0x000008, "Member 'FPalCrimeInstanceCreateParameter::TargetId' has a wrong offset!");

}

