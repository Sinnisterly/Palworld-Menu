#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraCalibrationCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "CinematicCamera_structs.hpp"


namespace SDK
{

// Enum CameraCalibrationCore.ECalibratedMapPixelOrigin
// NumValues: 0x0003
enum class ECalibratedMapPixelOrigin : uint8
{
	TopLeft                                  = 0,
	BottomLeft                               = 1,
	MAX                                      = 2,
};

// Enum CameraCalibrationCore.ECalibratedMapChannels
// NumValues: 0x0004
enum class ECalibratedMapChannels : uint8
{
	RG                                       = 0,
	BA                                       = 1,
	None                                     = 2,
	MAX                                      = 3,
};

// Enum CameraCalibrationCore.ECalibrationPointVisualization
// NumValues: 0x0003
enum class ECalibrationPointVisualization : uint8
{
	CalibrationPointVisualizationCube        = 0,
	CalibrationPointVisualizationPyramid     = 1,
	ECalibrationPointVisualization_MAX       = 2,
};

// Enum CameraCalibrationCore.ELensDisplayUnit
// NumValues: 0x0004
enum class ELensDisplayUnit : uint8
{
	Millimeters                              = 0,
	Pixels                                   = 1,
	Normalized                               = 2,
	ELensDisplayUnit_MAX                     = 3,
};

// Enum CameraCalibrationCore.EFIZEvaluationMode
// NumValues: 0x0005
enum class EFIZEvaluationMode : uint8
{
	UseLiveLink                              = 0,
	UseCameraSettings                        = 1,
	UseRecordedValues                        = 2,
	DoNotEvaluate                            = 3,
	EFIZEvaluationMode_MAX                   = 4,
};

// Enum CameraCalibrationCore.EFilmbackOverrideSource
// NumValues: 0x0004
enum class EFilmbackOverrideSource : uint8
{
	LensFile                                 = 0,
	CroppedFilmbackSetting                   = 1,
	DoNotOverride                            = 2,
	EFilmbackOverrideSource_MAX              = 3,
};

// Enum CameraCalibrationCore.EDistortionSource
// NumValues: 0x0004
enum class EDistortionSource : uint8
{
	LensFile                                 = 0,
	LiveLinkLensSubject                      = 1,
	Manual                                   = 2,
	EDistortionSource_MAX                    = 3,
};

// Enum CameraCalibrationCore.ELensDataMode
// NumValues: 0x0003
enum class ELensDataMode : uint8
{
	Parameters                               = 0,
	STMap                                    = 1,
	ELensDataMode_MAX                        = 2,
};

// Enum CameraCalibrationCore.ELensDataCategory
// NumValues: 0x0008
enum class ELensDataCategory : uint8
{
	Focus                                    = 0,
	Iris                                     = 1,
	Zoom                                     = 2,
	Distortion                               = 3,
	ImageCenter                              = 4,
	STMap                                    = 5,
	NodalOffset                              = 6,
	ELensDataCategory_MAX                    = 7,
};

// ScriptStruct CameraCalibrationCore.BaseFocusPoint
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FBaseFocusPoint
{
public:
	uint8                                         Pad_182B[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseFocusPoint) == 0x000008, "Wrong alignment on FBaseFocusPoint");
static_assert(sizeof(FBaseFocusPoint) == 0x000008, "Wrong size on FBaseFocusPoint");

// ScriptStruct CameraCalibrationCore.BaseLensTable
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBaseLensTable
{
public:
	uint8                                         Pad_182C[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ULensFile>               LensFile;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBaseLensTable) == 0x000008, "Wrong alignment on FBaseLensTable");
static_assert(sizeof(FBaseLensTable) == 0x000010, "Wrong size on FBaseLensTable");
static_assert(offsetof(FBaseLensTable, LensFile) == 0x000008, "Member 'FBaseLensTable::LensFile' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.CalibratedMapFormat
// 0x0003 (0x0003 - 0x0000)
struct FCalibratedMapFormat final
{
public:
	ECalibratedMapPixelOrigin                     PixelOrigin;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalibratedMapChannels                        UndistortionChannels;                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalibratedMapChannels                        DistortionChannels;                                // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCalibratedMapFormat) == 0x000001, "Wrong alignment on FCalibratedMapFormat");
static_assert(sizeof(FCalibratedMapFormat) == 0x000003, "Wrong size on FCalibratedMapFormat");
static_assert(offsetof(FCalibratedMapFormat, PixelOrigin) == 0x000000, "Member 'FCalibratedMapFormat::PixelOrigin' has a wrong offset!");
static_assert(offsetof(FCalibratedMapFormat, UndistortionChannels) == 0x000001, "Member 'FCalibratedMapFormat::UndistortionChannels' has a wrong offset!");
static_assert(offsetof(FCalibratedMapFormat, DistortionChannels) == 0x000002, "Member 'FCalibratedMapFormat::DistortionChannels' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.LensDataCategoryEditorColor
// 0x001C (0x001C - 0x0000)
struct FLensDataCategoryEditorColor final
{
public:
	struct FColor                                 Focus;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Iris;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Zoom;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Distortion;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ImageCenter;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 STMap;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NodalOffset;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensDataCategoryEditorColor) == 0x000004, "Wrong alignment on FLensDataCategoryEditorColor");
static_assert(sizeof(FLensDataCategoryEditorColor) == 0x00001C, "Wrong size on FLensDataCategoryEditorColor");
static_assert(offsetof(FLensDataCategoryEditorColor, Focus) == 0x000000, "Member 'FLensDataCategoryEditorColor::Focus' has a wrong offset!");
static_assert(offsetof(FLensDataCategoryEditorColor, Iris) == 0x000004, "Member 'FLensDataCategoryEditorColor::Iris' has a wrong offset!");
static_assert(offsetof(FLensDataCategoryEditorColor, Zoom) == 0x000008, "Member 'FLensDataCategoryEditorColor::Zoom' has a wrong offset!");
static_assert(offsetof(FLensDataCategoryEditorColor, Distortion) == 0x00000C, "Member 'FLensDataCategoryEditorColor::Distortion' has a wrong offset!");
static_assert(offsetof(FLensDataCategoryEditorColor, ImageCenter) == 0x000010, "Member 'FLensDataCategoryEditorColor::ImageCenter' has a wrong offset!");
static_assert(offsetof(FLensDataCategoryEditorColor, STMap) == 0x000014, "Member 'FLensDataCategoryEditorColor::STMap' has a wrong offset!");
static_assert(offsetof(FLensDataCategoryEditorColor, NodalOffset) == 0x000018, "Member 'FLensDataCategoryEditorColor::NodalOffset' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DistortionHandlerPicker
// 0x0028 (0x0028 - 0x0000)
struct FDistortionHandlerPicker final
{
public:
	class UCineCameraComponent*                   TargetCameraComponent;                             // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  DistortionProducerID;                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HandlerDisplayName;                                // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionHandlerPicker) == 0x000008, "Wrong alignment on FDistortionHandlerPicker");
static_assert(sizeof(FDistortionHandlerPicker) == 0x000028, "Wrong size on FDistortionHandlerPicker");
static_assert(offsetof(FDistortionHandlerPicker, TargetCameraComponent) == 0x000000, "Member 'FDistortionHandlerPicker::TargetCameraComponent' has a wrong offset!");
static_assert(offsetof(FDistortionHandlerPicker, DistortionProducerID) == 0x000008, "Member 'FDistortionHandlerPicker::DistortionProducerID' has a wrong offset!");
static_assert(offsetof(FDistortionHandlerPicker, HandlerDisplayName) == 0x000018, "Member 'FDistortionHandlerPicker::HandlerDisplayName' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DistortionInfo
// 0x0010 (0x0010 - 0x0000)
struct FDistortionInfo final
{
public:
	TArray<float>                                 Parameters;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionInfo) == 0x000008, "Wrong alignment on FDistortionInfo");
static_assert(sizeof(FDistortionInfo) == 0x000010, "Wrong size on FDistortionInfo");
static_assert(offsetof(FDistortionInfo, Parameters) == 0x000000, "Member 'FDistortionInfo::Parameters' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DistortionZoomPoint
// 0x0018 (0x0018 - 0x0000)
struct FDistortionZoomPoint final
{
public:
	float                                         Zoom;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDistortionInfo                        DistortionInfo;                                    // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionZoomPoint) == 0x000008, "Wrong alignment on FDistortionZoomPoint");
static_assert(sizeof(FDistortionZoomPoint) == 0x000018, "Wrong size on FDistortionZoomPoint");
static_assert(offsetof(FDistortionZoomPoint, Zoom) == 0x000000, "Member 'FDistortionZoomPoint::Zoom' has a wrong offset!");
static_assert(offsetof(FDistortionZoomPoint, DistortionInfo) == 0x000008, "Member 'FDistortionZoomPoint::DistortionInfo' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DistortionFocusPoint
// 0x0098 (0x00A0 - 0x0008)
struct FDistortionFocusPoint final : public FBaseFocusPoint
{
public:
	float                                         Focus;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             MapBlendingCurve;                                  // 0x0010(0x0080)(NativeAccessSpecifierPublic)
	TArray<struct FDistortionZoomPoint>           ZoomPoints;                                        // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionFocusPoint) == 0x000008, "Wrong alignment on FDistortionFocusPoint");
static_assert(sizeof(FDistortionFocusPoint) == 0x0000A0, "Wrong size on FDistortionFocusPoint");
static_assert(offsetof(FDistortionFocusPoint, Focus) == 0x000008, "Member 'FDistortionFocusPoint::Focus' has a wrong offset!");
static_assert(offsetof(FDistortionFocusPoint, MapBlendingCurve) == 0x000010, "Member 'FDistortionFocusPoint::MapBlendingCurve' has a wrong offset!");
static_assert(offsetof(FDistortionFocusPoint, ZoomPoints) == 0x000090, "Member 'FDistortionFocusPoint::ZoomPoints' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DistortionTable
// 0x0010 (0x0020 - 0x0010)
struct FDistortionTable final : public FBaseLensTable
{
public:
	TArray<struct FDistortionFocusPoint>          FocusPoints;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionTable) == 0x000008, "Wrong alignment on FDistortionTable");
static_assert(sizeof(FDistortionTable) == 0x000020, "Wrong size on FDistortionTable");
static_assert(offsetof(FDistortionTable, FocusPoints) == 0x000010, "Member 'FDistortionTable::FocusPoints' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.EncodersTable
// 0x0100 (0x0100 - 0x0000)
struct FEncodersTable final
{
public:
	struct FRichCurve                             Focus;                                             // 0x0000(0x0080)(NativeAccessSpecifierPublic)
	struct FRichCurve                             Iris;                                              // 0x0080(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncodersTable) == 0x000008, "Wrong alignment on FEncodersTable");
static_assert(sizeof(FEncodersTable) == 0x000100, "Wrong size on FEncodersTable");
static_assert(offsetof(FEncodersTable, Focus) == 0x000000, "Member 'FEncodersTable::Focus' has a wrong offset!");
static_assert(offsetof(FEncodersTable, Iris) == 0x000080, "Member 'FEncodersTable::Iris' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.FocalLengthInfo
// 0x0010 (0x0010 - 0x0000)
struct FFocalLengthInfo final
{
public:
	struct FVector2D                              FxFy;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFocalLengthInfo) == 0x000008, "Wrong alignment on FFocalLengthInfo");
static_assert(sizeof(FFocalLengthInfo) == 0x000010, "Wrong size on FFocalLengthInfo");
static_assert(offsetof(FFocalLengthInfo, FxFy) == 0x000000, "Member 'FFocalLengthInfo::FxFy' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.FocalLengthZoomPoint
// 0x0020 (0x0020 - 0x0000)
struct FFocalLengthZoomPoint final
{
public:
	float                                         Zoom;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocalLengthInfo                       FocalLengthInfo;                                   // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsCalibrationPoint;                               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1830[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFocalLengthZoomPoint) == 0x000008, "Wrong alignment on FFocalLengthZoomPoint");
static_assert(sizeof(FFocalLengthZoomPoint) == 0x000020, "Wrong size on FFocalLengthZoomPoint");
static_assert(offsetof(FFocalLengthZoomPoint, Zoom) == 0x000000, "Member 'FFocalLengthZoomPoint::Zoom' has a wrong offset!");
static_assert(offsetof(FFocalLengthZoomPoint, FocalLengthInfo) == 0x000008, "Member 'FFocalLengthZoomPoint::FocalLengthInfo' has a wrong offset!");
static_assert(offsetof(FFocalLengthZoomPoint, bIsCalibrationPoint) == 0x000018, "Member 'FFocalLengthZoomPoint::bIsCalibrationPoint' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.FocalLengthFocusPoint
// 0x0118 (0x0120 - 0x0008)
struct FFocalLengthFocusPoint final : public FBaseFocusPoint
{
public:
	float                                         Focus;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1831[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             Fx;                                                // 0x0010(0x0080)(NativeAccessSpecifierPublic)
	struct FRichCurve                             Fy;                                                // 0x0090(0x0080)(NativeAccessSpecifierPublic)
	TArray<struct FFocalLengthZoomPoint>          ZoomPoints;                                        // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFocalLengthFocusPoint) == 0x000008, "Wrong alignment on FFocalLengthFocusPoint");
static_assert(sizeof(FFocalLengthFocusPoint) == 0x000120, "Wrong size on FFocalLengthFocusPoint");
static_assert(offsetof(FFocalLengthFocusPoint, Focus) == 0x000008, "Member 'FFocalLengthFocusPoint::Focus' has a wrong offset!");
static_assert(offsetof(FFocalLengthFocusPoint, Fx) == 0x000010, "Member 'FFocalLengthFocusPoint::Fx' has a wrong offset!");
static_assert(offsetof(FFocalLengthFocusPoint, Fy) == 0x000090, "Member 'FFocalLengthFocusPoint::Fy' has a wrong offset!");
static_assert(offsetof(FFocalLengthFocusPoint, ZoomPoints) == 0x000110, "Member 'FFocalLengthFocusPoint::ZoomPoints' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.FocalLengthTable
// 0x0010 (0x0020 - 0x0010)
struct FFocalLengthTable final : public FBaseLensTable
{
public:
	TArray<struct FFocalLengthFocusPoint>         FocusPoints;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFocalLengthTable) == 0x000008, "Wrong alignment on FFocalLengthTable");
static_assert(sizeof(FFocalLengthTable) == 0x000020, "Wrong size on FFocalLengthTable");
static_assert(offsetof(FFocalLengthTable, FocusPoints) == 0x000010, "Member 'FFocalLengthTable::FocusPoints' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.ImageCenterFocusPoint
// 0x0108 (0x0110 - 0x0008)
struct FImageCenterFocusPoint final : public FBaseFocusPoint
{
public:
	float                                         Focus;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1832[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             Cx;                                                // 0x0010(0x0080)(NativeAccessSpecifierPublic)
	struct FRichCurve                             Cy;                                                // 0x0090(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageCenterFocusPoint) == 0x000008, "Wrong alignment on FImageCenterFocusPoint");
static_assert(sizeof(FImageCenterFocusPoint) == 0x000110, "Wrong size on FImageCenterFocusPoint");
static_assert(offsetof(FImageCenterFocusPoint, Focus) == 0x000008, "Member 'FImageCenterFocusPoint::Focus' has a wrong offset!");
static_assert(offsetof(FImageCenterFocusPoint, Cx) == 0x000010, "Member 'FImageCenterFocusPoint::Cx' has a wrong offset!");
static_assert(offsetof(FImageCenterFocusPoint, Cy) == 0x000090, "Member 'FImageCenterFocusPoint::Cy' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.ImageCenterTable
// 0x0010 (0x0020 - 0x0010)
struct FImageCenterTable final : public FBaseLensTable
{
public:
	TArray<struct FImageCenterFocusPoint>         FocusPoints;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageCenterTable) == 0x000008, "Wrong alignment on FImageCenterTable");
static_assert(sizeof(FImageCenterTable) == 0x000020, "Wrong size on FImageCenterTable");
static_assert(offsetof(FImageCenterTable, FocusPoints) == 0x000010, "Member 'FImageCenterTable::FocusPoints' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.LensInfo
// 0x0040 (0x0040 - 0x0000)
struct FLensInfo final
{
public:
	class FString                                 LensModelName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LensSerialNumber;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULensModel>                 LensModel;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SensorDimensions;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ImageDimensions;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensInfo) == 0x000008, "Wrong alignment on FLensInfo");
static_assert(sizeof(FLensInfo) == 0x000040, "Wrong size on FLensInfo");
static_assert(offsetof(FLensInfo, LensModelName) == 0x000000, "Member 'FLensInfo::LensModelName' has a wrong offset!");
static_assert(offsetof(FLensInfo, LensSerialNumber) == 0x000010, "Member 'FLensInfo::LensSerialNumber' has a wrong offset!");
static_assert(offsetof(FLensInfo, LensModel) == 0x000020, "Member 'FLensInfo::LensModel' has a wrong offset!");
static_assert(offsetof(FLensInfo, SensorDimensions) == 0x000028, "Member 'FLensInfo::SensorDimensions' has a wrong offset!");
static_assert(offsetof(FLensInfo, ImageDimensions) == 0x000038, "Member 'FLensInfo::ImageDimensions' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.STMapInfo
// 0x0010 (0x0010 - 0x0000)
struct FSTMapInfo final
{
public:
	class UTexture*                               DistortionMap;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCalibratedMapFormat                   MapFormat;                                         // 0x0008(0x0003)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1833[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSTMapInfo) == 0x000008, "Wrong alignment on FSTMapInfo");
static_assert(sizeof(FSTMapInfo) == 0x000010, "Wrong size on FSTMapInfo");
static_assert(offsetof(FSTMapInfo, DistortionMap) == 0x000000, "Member 'FSTMapInfo::DistortionMap' has a wrong offset!");
static_assert(offsetof(FSTMapInfo, MapFormat) == 0x000008, "Member 'FSTMapInfo::MapFormat' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.ImageCenterInfo
// 0x0010 (0x0010 - 0x0000)
struct FImageCenterInfo final
{
public:
	struct FVector2D                              PrincipalPoint;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageCenterInfo) == 0x000008, "Wrong alignment on FImageCenterInfo");
static_assert(sizeof(FImageCenterInfo) == 0x000010, "Wrong size on FImageCenterInfo");
static_assert(offsetof(FImageCenterInfo, PrincipalPoint) == 0x000000, "Member 'FImageCenterInfo::PrincipalPoint' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.NodalPointOffset
// 0x0040 (0x0040 - 0x0000)
struct FNodalPointOffset final
{
public:
	struct FVector                                LocationOffset;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1834[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RotationOffset;                                    // 0x0020(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNodalPointOffset) == 0x000010, "Wrong alignment on FNodalPointOffset");
static_assert(sizeof(FNodalPointOffset) == 0x000040, "Wrong size on FNodalPointOffset");
static_assert(offsetof(FNodalPointOffset, LocationOffset) == 0x000000, "Member 'FNodalPointOffset::LocationOffset' has a wrong offset!");
static_assert(offsetof(FNodalPointOffset, RotationOffset) == 0x000020, "Member 'FNodalPointOffset::RotationOffset' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DistortionData
// 0x0018 (0x0018 - 0x0000)
struct FDistortionData final
{
public:
	TArray<struct FVector2D>                      DistortedUVs;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         OverscanFactor;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1835[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDistortionData) == 0x000008, "Wrong alignment on FDistortionData");
static_assert(sizeof(FDistortionData) == 0x000018, "Wrong size on FDistortionData");
static_assert(offsetof(FDistortionData, DistortedUVs) == 0x000000, "Member 'FDistortionData::DistortedUVs' has a wrong offset!");
static_assert(offsetof(FDistortionData, OverscanFactor) == 0x000010, "Member 'FDistortionData::OverscanFactor' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DataTablePointInfoBase
// 0x0008 (0x0008 - 0x0000)
struct FDataTablePointInfoBase
{
public:
	float                                         Focus;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Zoom;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataTablePointInfoBase) == 0x000004, "Wrong alignment on FDataTablePointInfoBase");
static_assert(sizeof(FDataTablePointInfoBase) == 0x000008, "Wrong size on FDataTablePointInfoBase");
static_assert(offsetof(FDataTablePointInfoBase, Focus) == 0x000000, "Member 'FDataTablePointInfoBase::Focus' has a wrong offset!");
static_assert(offsetof(FDataTablePointInfoBase, Zoom) == 0x000004, "Member 'FDataTablePointInfoBase::Zoom' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DistortionPointInfo
// 0x0010 (0x0018 - 0x0008)
struct FDistortionPointInfo final : public FDataTablePointInfoBase
{
public:
	struct FDistortionInfo                        DistortionInfo;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionPointInfo) == 0x000008, "Wrong alignment on FDistortionPointInfo");
static_assert(sizeof(FDistortionPointInfo) == 0x000018, "Wrong size on FDistortionPointInfo");
static_assert(offsetof(FDistortionPointInfo, DistortionInfo) == 0x000008, "Member 'FDistortionPointInfo::DistortionInfo' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.FocalLengthPointInfo
// 0x0010 (0x0018 - 0x0008)
struct FFocalLengthPointInfo final : public FDataTablePointInfoBase
{
public:
	struct FFocalLengthInfo                       FocalLengthInfo;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFocalLengthPointInfo) == 0x000008, "Wrong alignment on FFocalLengthPointInfo");
static_assert(sizeof(FFocalLengthPointInfo) == 0x000018, "Wrong size on FFocalLengthPointInfo");
static_assert(offsetof(FFocalLengthPointInfo, FocalLengthInfo) == 0x000008, "Member 'FFocalLengthPointInfo::FocalLengthInfo' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.STMapPointInfo
// 0x0010 (0x0018 - 0x0008)
struct FSTMapPointInfo final : public FDataTablePointInfoBase
{
public:
	struct FSTMapInfo                             STMapInfo;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSTMapPointInfo) == 0x000008, "Wrong alignment on FSTMapPointInfo");
static_assert(sizeof(FSTMapPointInfo) == 0x000018, "Wrong size on FSTMapPointInfo");
static_assert(offsetof(FSTMapPointInfo, STMapInfo) == 0x000008, "Member 'FSTMapPointInfo::STMapInfo' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.ImageCenterPointInfo
// 0x0010 (0x0018 - 0x0008)
struct FImageCenterPointInfo final : public FDataTablePointInfoBase
{
public:
	struct FImageCenterInfo                       ImageCenterInfo;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageCenterPointInfo) == 0x000008, "Wrong alignment on FImageCenterPointInfo");
static_assert(sizeof(FImageCenterPointInfo) == 0x000018, "Wrong size on FImageCenterPointInfo");
static_assert(offsetof(FImageCenterPointInfo, ImageCenterInfo) == 0x000008, "Member 'FImageCenterPointInfo::ImageCenterInfo' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.NodalOffsetPointInfo
// 0x0048 (0x0050 - 0x0008)
struct FNodalOffsetPointInfo final : public FDataTablePointInfoBase
{
public:
	uint8                                         Pad_1836[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNodalPointOffset                      NodalPointOffset;                                  // 0x0010(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNodalOffsetPointInfo) == 0x000010, "Wrong alignment on FNodalOffsetPointInfo");
static_assert(sizeof(FNodalOffsetPointInfo) == 0x000050, "Wrong size on FNodalOffsetPointInfo");
static_assert(offsetof(FNodalOffsetPointInfo, NodalPointOffset) == 0x000010, "Member 'FNodalOffsetPointInfo::NodalPointOffset' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.LensDistortionState
// 0x0030 (0x0030 - 0x0000)
struct FLensDistortionState final
{
public:
	struct FDistortionInfo                        DistortionInfo;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFocalLengthInfo                       FocalLengthInfo;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FImageCenterInfo                       ImageCenter;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensDistortionState) == 0x000008, "Wrong alignment on FLensDistortionState");
static_assert(sizeof(FLensDistortionState) == 0x000030, "Wrong size on FLensDistortionState");
static_assert(offsetof(FLensDistortionState, DistortionInfo) == 0x000000, "Member 'FLensDistortionState::DistortionInfo' has a wrong offset!");
static_assert(offsetof(FLensDistortionState, FocalLengthInfo) == 0x000010, "Member 'FLensDistortionState::FocalLengthInfo' has a wrong offset!");
static_assert(offsetof(FLensDistortionState, ImageCenter) == 0x000020, "Member 'FLensDistortionState::ImageCenter' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.LensFilePicker
// 0x0010 (0x0010 - 0x0000)
struct FLensFilePicker final
{
public:
	bool                                          bUseDefaultLensFile;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1837[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULensFile*                              LensFile;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensFilePicker) == 0x000008, "Wrong alignment on FLensFilePicker");
static_assert(sizeof(FLensFilePicker) == 0x000010, "Wrong size on FLensFilePicker");
static_assert(offsetof(FLensFilePicker, bUseDefaultLensFile) == 0x000000, "Member 'FLensFilePicker::bUseDefaultLensFile' has a wrong offset!");
static_assert(offsetof(FLensFilePicker, LensFile) == 0x000008, "Member 'FLensFilePicker::LensFile' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.LensFileEvaluationInputs
// 0x001C (0x001C - 0x0000)
struct FLensFileEvaluationInputs final
{
public:
	float                                         Focus;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Iris;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Zoom;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraFilmbackSettings                Filmback;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Interp, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1838[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLensFileEvaluationInputs) == 0x000004, "Wrong alignment on FLensFileEvaluationInputs");
static_assert(sizeof(FLensFileEvaluationInputs) == 0x00001C, "Wrong size on FLensFileEvaluationInputs");
static_assert(offsetof(FLensFileEvaluationInputs, Focus) == 0x000000, "Member 'FLensFileEvaluationInputs::Focus' has a wrong offset!");
static_assert(offsetof(FLensFileEvaluationInputs, Iris) == 0x000004, "Member 'FLensFileEvaluationInputs::Iris' has a wrong offset!");
static_assert(offsetof(FLensFileEvaluationInputs, Zoom) == 0x000008, "Member 'FLensFileEvaluationInputs::Zoom' has a wrong offset!");
static_assert(offsetof(FLensFileEvaluationInputs, Filmback) == 0x00000C, "Member 'FLensFileEvaluationInputs::Filmback' has a wrong offset!");
static_assert(offsetof(FLensFileEvaluationInputs, bIsValid) == 0x000018, "Member 'FLensFileEvaluationInputs::bIsValid' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.NodalOffsetFocusPoint
// 0x0308 (0x0310 - 0x0008)
struct FNodalOffsetFocusPoint final : public FBaseFocusPoint
{
public:
	float                                         Focus;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1839[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             LocationOffset[0x3];                               // 0x0010(0x0080)(NativeAccessSpecifierPublic)
	struct FRichCurve                             RotationOffset[0x3];                               // 0x0190(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FNodalOffsetFocusPoint) == 0x000008, "Wrong alignment on FNodalOffsetFocusPoint");
static_assert(sizeof(FNodalOffsetFocusPoint) == 0x000310, "Wrong size on FNodalOffsetFocusPoint");
static_assert(offsetof(FNodalOffsetFocusPoint, Focus) == 0x000008, "Member 'FNodalOffsetFocusPoint::Focus' has a wrong offset!");
static_assert(offsetof(FNodalOffsetFocusPoint, LocationOffset) == 0x000010, "Member 'FNodalOffsetFocusPoint::LocationOffset' has a wrong offset!");
static_assert(offsetof(FNodalOffsetFocusPoint, RotationOffset) == 0x000190, "Member 'FNodalOffsetFocusPoint::RotationOffset' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.NodalOffsetTable
// 0x0010 (0x0020 - 0x0010)
struct FNodalOffsetTable final : public FBaseLensTable
{
public:
	TArray<struct FNodalOffsetFocusPoint>         FocusPoints;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNodalOffsetTable) == 0x000008, "Wrong alignment on FNodalOffsetTable");
static_assert(sizeof(FNodalOffsetTable) == 0x000020, "Wrong size on FNodalOffsetTable");
static_assert(offsetof(FNodalOffsetTable, FocusPoints) == 0x000010, "Member 'FNodalOffsetTable::FocusPoints' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.SphericalDistortionParameters
// 0x0014 (0x0014 - 0x0000)
struct FSphericalDistortionParameters final
{
public:
	float                                         K1;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K2;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         K3;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         P1;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         P2;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSphericalDistortionParameters) == 0x000004, "Wrong alignment on FSphericalDistortionParameters");
static_assert(sizeof(FSphericalDistortionParameters) == 0x000014, "Wrong size on FSphericalDistortionParameters");
static_assert(offsetof(FSphericalDistortionParameters, K1) == 0x000000, "Member 'FSphericalDistortionParameters::K1' has a wrong offset!");
static_assert(offsetof(FSphericalDistortionParameters, K2) == 0x000004, "Member 'FSphericalDistortionParameters::K2' has a wrong offset!");
static_assert(offsetof(FSphericalDistortionParameters, K3) == 0x000008, "Member 'FSphericalDistortionParameters::K3' has a wrong offset!");
static_assert(offsetof(FSphericalDistortionParameters, P1) == 0x00000C, "Member 'FSphericalDistortionParameters::P1' has a wrong offset!");
static_assert(offsetof(FSphericalDistortionParameters, P2) == 0x000010, "Member 'FSphericalDistortionParameters::P2' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.DerivedDistortionData
// 0x0030 (0x0030 - 0x0000)
struct FDerivedDistortionData final
{
public:
	struct FDistortionData                        DistortionData;                                    // 0x0000(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 UndistortionDisplacementMap;                       // 0x0018(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 DistortionDisplacementMap;                         // 0x0020(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183A[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDerivedDistortionData) == 0x000008, "Wrong alignment on FDerivedDistortionData");
static_assert(sizeof(FDerivedDistortionData) == 0x000030, "Wrong size on FDerivedDistortionData");
static_assert(offsetof(FDerivedDistortionData, DistortionData) == 0x000000, "Member 'FDerivedDistortionData::DistortionData' has a wrong offset!");
static_assert(offsetof(FDerivedDistortionData, UndistortionDisplacementMap) == 0x000018, "Member 'FDerivedDistortionData::UndistortionDisplacementMap' has a wrong offset!");
static_assert(offsetof(FDerivedDistortionData, DistortionDisplacementMap) == 0x000020, "Member 'FDerivedDistortionData::DistortionDisplacementMap' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.STMapZoomPoint
// 0x0050 (0x0050 - 0x0000)
struct FSTMapZoomPoint final
{
public:
	float                                         Zoom;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTMapInfo                             STMapInfo;                                         // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDerivedDistortionData                 DerivedDistortionData;                             // 0x0018(0x0030)(Transient, NativeAccessSpecifierPublic)
	bool                                          bIsCalibrationPoint;                               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183C[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSTMapZoomPoint) == 0x000008, "Wrong alignment on FSTMapZoomPoint");
static_assert(sizeof(FSTMapZoomPoint) == 0x000050, "Wrong size on FSTMapZoomPoint");
static_assert(offsetof(FSTMapZoomPoint, Zoom) == 0x000000, "Member 'FSTMapZoomPoint::Zoom' has a wrong offset!");
static_assert(offsetof(FSTMapZoomPoint, STMapInfo) == 0x000008, "Member 'FSTMapZoomPoint::STMapInfo' has a wrong offset!");
static_assert(offsetof(FSTMapZoomPoint, DerivedDistortionData) == 0x000018, "Member 'FSTMapZoomPoint::DerivedDistortionData' has a wrong offset!");
static_assert(offsetof(FSTMapZoomPoint, bIsCalibrationPoint) == 0x000048, "Member 'FSTMapZoomPoint::bIsCalibrationPoint' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.STMapFocusPoint
// 0x0098 (0x00A0 - 0x0008)
struct FSTMapFocusPoint final : public FBaseFocusPoint
{
public:
	float                                         Focus;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             MapBlendingCurve;                                  // 0x0010(0x0080)(NativeAccessSpecifierPublic)
	TArray<struct FSTMapZoomPoint>                ZoomPoints;                                        // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSTMapFocusPoint) == 0x000008, "Wrong alignment on FSTMapFocusPoint");
static_assert(sizeof(FSTMapFocusPoint) == 0x0000A0, "Wrong size on FSTMapFocusPoint");
static_assert(offsetof(FSTMapFocusPoint, Focus) == 0x000008, "Member 'FSTMapFocusPoint::Focus' has a wrong offset!");
static_assert(offsetof(FSTMapFocusPoint, MapBlendingCurve) == 0x000010, "Member 'FSTMapFocusPoint::MapBlendingCurve' has a wrong offset!");
static_assert(offsetof(FSTMapFocusPoint, ZoomPoints) == 0x000090, "Member 'FSTMapFocusPoint::ZoomPoints' has a wrong offset!");

// ScriptStruct CameraCalibrationCore.STMapTable
// 0x0010 (0x0020 - 0x0010)
struct FSTMapTable final : public FBaseLensTable
{
public:
	TArray<struct FSTMapFocusPoint>               FocusPoints;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSTMapTable) == 0x000008, "Wrong alignment on FSTMapTable");
static_assert(sizeof(FSTMapTable) == 0x000020, "Wrong size on FSTMapTable");
static_assert(offsetof(FSTMapTable, FocusPoints) == 0x000010, "Member 'FSTMapTable::FocusPoints' has a wrong offset!");

}

