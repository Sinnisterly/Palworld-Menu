#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraCalibrationCore

#include "Basic.hpp"

#include "CameraCalibrationCore_classes.hpp"
#include "CameraCalibrationCore_parameters.hpp"


namespace SDK
{

// Function CameraCalibrationCore.CalibrationPointComponent.RebuildVertices
// (Final, Native, Public, BlueprintCallable)

void UCalibrationPointComponent::RebuildVertices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalibrationPointComponent", "RebuildVertices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.CalibrationPointComponent.GetNamespacedPointNames
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   OutNamespacedNames                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCalibrationPointComponent::GetNamespacedPointNames(TArray<class FString>* OutNamespacedNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalibrationPointComponent", "GetNamespacedPointNames");

	Params::CalibrationPointComponent_GetNamespacedPointNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNamespacedNames != nullptr)
		*OutNamespacedNames = std::move(Parms.OutNamespacedNames);
}


// Function CameraCalibrationCore.CalibrationPointComponent.GetWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           InPointName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCalibrationPointComponent::GetWorldLocation(const class FString& InPointName, struct FVector* OutLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalibrationPointComponent", "GetWorldLocation");

	Params::CalibrationPointComponent_GetWorldLocation Parms{};

	Parms.InPointName = std::move(InPointName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CalibrationPointComponent.NamespacedSubpointName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           InSubpointName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutNamespacedName                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCalibrationPointComponent::NamespacedSubpointName(const class FString& InSubpointName, class FString* OutNamespacedName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalibrationPointComponent", "NamespacedSubpointName");

	Params::CalibrationPointComponent_NamespacedSubpointName Parms{};

	Parms.InSubpointName = std::move(InSubpointName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNamespacedName != nullptr)
		*OutNamespacedName = std::move(Parms.OutNamespacedName);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationCheckerboard.Rebuild
// (Final, Native, Public, BlueprintCallable)

void ACameraCalibrationCheckerboard::Rebuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationCheckerboard", "Rebuild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.ApplyNodalOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  ComponentToOffset                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseManualInputs                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ManualFocusInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ManualZoomInput                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::ApplyNodalOffset(class USceneComponent* ComponentToOffset, bool bUseManualInputs, float ManualFocusInput, float ManualZoomInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "ApplyNodalOffset");

	Params::LensComponent_ApplyNodalOffset Parms{};

	Parms.ComponentToOffset = ComponentToOffset;
	Parms.bUseManualInputs = bUseManualInputs;
	Parms.ManualFocusInput = ManualFocusInput;
	Parms.ManualZoomInput = ManualZoomInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.ClearDistortionState
// (Final, Native, Public, BlueprintCallable)

void ULensComponent::ClearDistortionState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "ClearDistortionState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetApplyDistortion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bApply                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetApplyDistortion(bool bApply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetApplyDistortion");

	Params::LensComponent_SetApplyDistortion Parms{};

	Parms.bApply = bApply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetApplyNodalOffsetOnTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bApplyNodalOffset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetApplyNodalOffsetOnTick(bool bApplyNodalOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetApplyNodalOffsetOnTick");

	Params::LensComponent_SetApplyNodalOffsetOnTick Parms{};

	Parms.bApplyNodalOffset = bApplyNodalOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetCroppedFilmback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCameraFilmbackSettings          Filmback                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULensComponent::SetCroppedFilmback(const struct FCameraFilmbackSettings& Filmback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetCroppedFilmback");

	Params::LensComponent_SetCroppedFilmback Parms{};

	Parms.Filmback = std::move(Filmback);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetDistortionSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDistortionSource                       Source                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetDistortionSource(EDistortionSource Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetDistortionSource");

	Params::LensComponent_SetDistortionSource Parms{};

	Parms.Source = Source;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetDistortionState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FLensDistortionState             State                                                  (Parm, NativeAccessSpecifierPublic)

void ULensComponent::SetDistortionState(const struct FLensDistortionState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetDistortionState");

	Params::LensComponent_SetDistortionState Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetFilmbackOverrideSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFilmbackOverrideSource                 Setting                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetFilmbackOverrideSetting(EFilmbackOverrideSource Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetFilmbackOverrideSetting");

	Params::LensComponent_SetFilmbackOverrideSetting Parms{};

	Parms.Setting = Setting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetFIZEvaluationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFIZEvaluationMode                      Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetFIZEvaluationMode(EFIZEvaluationMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetFIZEvaluationMode");

	Params::LensComponent_SetFIZEvaluationMode Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetLensFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULensFile*                        LensFile                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetLensFile(class ULensFile* LensFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetLensFile");

	Params::LensComponent_SetLensFile Parms{};

	Parms.LensFile = LensFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetLensFilePicker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FLensFilePicker                  LensFile                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULensComponent::SetLensFilePicker(const struct FLensFilePicker& LensFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetLensFilePicker");

	Params::LensComponent_SetLensFilePicker Parms{};

	Parms.LensFile = std::move(LensFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetLensModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ULensModel>           Model                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetLensModel(TSubclassOf<class ULensModel> Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetLensModel");

	Params::LensComponent_SetLensModel Parms{};

	Parms.Model = Model;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.SetOverscanMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensComponent::SetOverscanMultiplier(float Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "SetOverscanMultiplier");

	Params::LensComponent_SetOverscanMultiplier Parms{};

	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensComponent.GetCroppedFilmback
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCameraFilmbackSettings          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FCameraFilmbackSettings ULensComponent::GetCroppedFilmback() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetCroppedFilmback");

	Params::LensComponent_GetCroppedFilmback Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetDistortionSource
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDistortionSource                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDistortionSource ULensComponent::GetDistortionSource() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetDistortionSource");

	Params::LensComponent_GetDistortionSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetDistortionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLensDistortionState             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLensDistortionState ULensComponent::GetDistortionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetDistortionState");

	Params::LensComponent_GetDistortionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetFilmbackOverrideSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFilmbackOverrideSource                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFilmbackOverrideSource ULensComponent::GetFilmbackOverrideSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetFilmbackOverrideSetting");

	Params::LensComponent_GetFilmbackOverrideSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetFIZEvaluationMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFIZEvaluationMode                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFIZEvaluationMode ULensComponent::GetFIZEvaluationMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetFIZEvaluationMode");

	Params::LensComponent_GetFIZEvaluationMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetLensFile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULensFile*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULensFile* ULensComponent::GetLensFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetLensFile");

	Params::LensComponent_GetLensFile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetLensFileEvaluationInputs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLensFileEvaluationInputs  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLensFileEvaluationInputs ULensComponent::GetLensFileEvaluationInputs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetLensFileEvaluationInputs");

	Params::LensComponent_GetLensFileEvaluationInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetLensFilePicker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLensFilePicker                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLensFilePicker ULensComponent::GetLensFilePicker() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetLensFilePicker");

	Params::LensComponent_GetLensFilePicker Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetLensModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ULensModel>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ULensModel> ULensComponent::GetLensModel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetLensModel");

	Params::LensComponent_GetLensModel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetOriginalFocalLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULensComponent::GetOriginalFocalLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetOriginalFocalLength");

	Params::LensComponent_GetOriginalFocalLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.GetOverscanMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULensComponent::GetOverscanMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "GetOverscanMultiplier");

	Params::LensComponent_GetOverscanMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.ShouldApplyDistortion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensComponent::ShouldApplyDistortion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "ShouldApplyDistortion");

	Params::LensComponent_ShouldApplyDistortion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.ShouldApplyNodalOffsetOnTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensComponent::ShouldApplyNodalOffsetOnTick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "ShouldApplyNodalOffsetOnTick");

	Params::LensComponent_ShouldApplyNodalOffsetOnTick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.WasDistortionEvaluated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensComponent::WasDistortionEvaluated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "WasDistortionEvaluated");

	Params::LensComponent_WasDistortionEvaluated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensComponent.WasNodalOffsetAppliedThisTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensComponent::WasNodalOffsetAppliedThisTick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensComponent", "WasNodalOffsetAppliedThisTick");

	Params::LensComponent_WasNodalOffsetAppliedThisTick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.FindOrCreateDistortionModelHandler
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDistortionHandlerPicker         DistortionHandlerPicker                                (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class ULensModel>           LensModelClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULensDistortionModelHandlerBase*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULensDistortionModelHandlerBase* UCameraCalibrationSubsystem::FindOrCreateDistortionModelHandler(struct FDistortionHandlerPicker& DistortionHandlerPicker, const TSubclassOf<class ULensModel> LensModelClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "FindOrCreateDistortionModelHandler");

	Params::CameraCalibrationSubsystem_FindOrCreateDistortionModelHandler Parms{};

	Parms.DistortionHandlerPicker = std::move(DistortionHandlerPicker);
	Parms.LensModelClass = LensModelClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DistortionHandlerPicker = std::move(Parms.DistortionHandlerPicker);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetDistortionModelHandlers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCineCameraComponent*             Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ULensDistortionModelHandlerBase*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ULensDistortionModelHandlerBase*> UCameraCalibrationSubsystem::GetDistortionModelHandlers(class UCineCameraComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetDistortionModelHandlers");

	Params::CameraCalibrationSubsystem_GetDistortionModelHandlers Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.SetDefaultLensFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULensFile*                        NewDefaultLensFile                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraCalibrationSubsystem::SetDefaultLensFile(class ULensFile* NewDefaultLensFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "SetDefaultLensFile");

	Params::CameraCalibrationSubsystem_SetDefaultLensFile Parms{};

	Parms.NewDefaultLensFile = NewDefaultLensFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.UnregisterDistortionModelHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCineCameraComponent*             Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULensDistortionModelHandlerBase*  Handler                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraCalibrationSubsystem::UnregisterDistortionModelHandler(class UCineCameraComponent* Component, class ULensDistortionModelHandlerBase* Handler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "UnregisterDistortionModelHandler");

	Params::CameraCalibrationSubsystem_UnregisterDistortionModelHandler Parms{};

	Parms.Component = Component;
	Parms.Handler = Handler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.FindDistortionModelHandler
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDistortionHandlerPicker         DistortionHandlerPicker                                (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bUpdatePicker                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULensDistortionModelHandlerBase*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULensDistortionModelHandlerBase* UCameraCalibrationSubsystem::FindDistortionModelHandler(struct FDistortionHandlerPicker& DistortionHandlerPicker, bool bUpdatePicker) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "FindDistortionModelHandler");

	Params::CameraCalibrationSubsystem_FindDistortionModelHandler Parms{};

	Parms.DistortionHandlerPicker = std::move(DistortionHandlerPicker);
	Parms.bUpdatePicker = bUpdatePicker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DistortionHandlerPicker = std::move(Parms.DistortionHandlerPicker);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetCameraCalibrationStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Param_Name                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCameraCalibrationStep>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UCameraCalibrationStep> UCameraCalibrationSubsystem::GetCameraCalibrationStep(class FName Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetCameraCalibrationStep");

	Params::CameraCalibrationSubsystem_GetCameraCalibrationStep Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetCameraCalibrationSteps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UCameraCalibrationSubsystem::GetCameraCalibrationSteps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetCameraCalibrationSteps");

	Params::CameraCalibrationSubsystem_GetCameraCalibrationSteps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetCameraImageCenterAlgo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Param_Name                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCameraImageCenterAlgo>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UCameraImageCenterAlgo> UCameraCalibrationSubsystem::GetCameraImageCenterAlgo(class FName Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetCameraImageCenterAlgo");

	Params::CameraCalibrationSubsystem_GetCameraImageCenterAlgo Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetCameraImageCenterAlgos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UCameraCalibrationSubsystem::GetCameraImageCenterAlgos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetCameraImageCenterAlgos");

	Params::CameraCalibrationSubsystem_GetCameraImageCenterAlgos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetCameraNodalOffsetAlgo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Param_Name                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCameraNodalOffsetAlgo>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UCameraNodalOffsetAlgo> UCameraCalibrationSubsystem::GetCameraNodalOffsetAlgo(class FName Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetCameraNodalOffsetAlgo");

	Params::CameraCalibrationSubsystem_GetCameraNodalOffsetAlgo Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetCameraNodalOffsetAlgos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UCameraCalibrationSubsystem::GetCameraNodalOffsetAlgos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetCameraNodalOffsetAlgos");

	Params::CameraCalibrationSubsystem_GetCameraNodalOffsetAlgos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetDefaultLensFile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULensFile*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULensFile* UCameraCalibrationSubsystem::GetDefaultLensFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetDefaultLensFile");

	Params::CameraCalibrationSubsystem_GetDefaultLensFile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetLensFile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLensFilePicker                  Picker                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ULensFile*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULensFile* UCameraCalibrationSubsystem::GetLensFile(const struct FLensFilePicker& Picker) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetLensFile");

	Params::CameraCalibrationSubsystem_GetLensFile Parms{};

	Parms.Picker = std::move(Picker);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetOverlayMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             OverlayName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UCameraCalibrationSubsystem::GetOverlayMaterial(const class FName& OverlayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetOverlayMaterial");

	Params::CameraCalibrationSubsystem_GetOverlayMaterial Parms{};

	Parms.OverlayName = OverlayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetOverlayMaterialNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UCameraCalibrationSubsystem::GetOverlayMaterialNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetOverlayMaterialNames");

	Params::CameraCalibrationSubsystem_GetOverlayMaterialNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.CameraCalibrationSubsystem.GetRegisteredLensModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ModelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULensModel>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ULensModel> UCameraCalibrationSubsystem::GetRegisteredLensModel(class FName ModelName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCalibrationSubsystem", "GetRegisteredLensModel");

	Params::CameraCalibrationSubsystem_GetRegisteredLensModel Parms{};

	Parms.ModelName = ModelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensDistortionModelHandlerBase.SetDistortionState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLensDistortionState             InNewState                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULensDistortionModelHandlerBase::SetDistortionState(const struct FLensDistortionState& InNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensDistortionModelHandlerBase", "SetDistortionState");

	Params::LensDistortionModelHandlerBase_SetDistortionState Parms{};

	Parms.InNewState = std::move(InNewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensDistortionModelHandlerBase.GetDistortionDisplacementMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ULensDistortionModelHandlerBase::GetDistortionDisplacementMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensDistortionModelHandlerBase", "GetDistortionDisplacementMap");

	Params::LensDistortionModelHandlerBase_GetDistortionDisplacementMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensDistortionModelHandlerBase.GetUndistortionDisplacementMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ULensDistortionModelHandlerBase::GetUndistortionDisplacementMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensDistortionModelHandlerBase", "GetUndistortionDisplacementMap");

	Params::LensDistortionModelHandlerBase_GetUndistortionDisplacementMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensDistortionModelHandlerBase.IsModelSupported
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ULensModel>           ModelToSupport                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensDistortionModelHandlerBase::IsModelSupported(const TSubclassOf<class ULensModel>& ModelToSupport) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensDistortionModelHandlerBase", "IsModelSupported");

	Params::LensDistortionModelHandlerBase_IsModelSupported Parms{};

	Parms.ModelToSupport = ModelToSupport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.AddDistortionPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewFocus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewZoom                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDistortionInfo                  NewPoint                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFocalLengthInfo                 NewFocalLength                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULensFile::AddDistortionPoint(float NewFocus, float NewZoom, const struct FDistortionInfo& NewPoint, const struct FFocalLengthInfo& NewFocalLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "AddDistortionPoint");

	Params::LensFile_AddDistortionPoint Parms{};

	Parms.NewFocus = NewFocus;
	Parms.NewZoom = NewZoom;
	Parms.NewPoint = std::move(NewPoint);
	Parms.NewFocalLength = std::move(NewFocalLength);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.AddFocalLengthPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewFocus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewZoom                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFocalLengthInfo                 NewFocalLength                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULensFile::AddFocalLengthPoint(float NewFocus, float NewZoom, const struct FFocalLengthInfo& NewFocalLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "AddFocalLengthPoint");

	Params::LensFile_AddFocalLengthPoint Parms{};

	Parms.NewFocus = NewFocus;
	Parms.NewZoom = NewZoom;
	Parms.NewFocalLength = std::move(NewFocalLength);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.AddImageCenterPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewFocus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewZoom                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FImageCenterInfo                 NewPoint                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULensFile::AddImageCenterPoint(float NewFocus, float NewZoom, const struct FImageCenterInfo& NewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "AddImageCenterPoint");

	Params::LensFile_AddImageCenterPoint Parms{};

	Parms.NewFocus = NewFocus;
	Parms.NewZoom = NewZoom;
	Parms.NewPoint = std::move(NewPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.AddNodalOffsetPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewFocus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewZoom                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNodalPointOffset                NewPoint                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULensFile::AddNodalOffsetPoint(float NewFocus, float NewZoom, const struct FNodalPointOffset& NewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "AddNodalOffsetPoint");

	Params::LensFile_AddNodalOffsetPoint Parms{};

	Parms.NewFocus = NewFocus;
	Parms.NewZoom = NewZoom;
	Parms.NewPoint = std::move(NewPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.AddSTMapPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewFocus                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewZoom                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTMapInfo                       NewPoint                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULensFile::AddSTMapPoint(float NewFocus, float NewZoom, const struct FSTMapInfo& NewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "AddSTMapPoint");

	Params::LensFile_AddSTMapPoint Parms{};

	Parms.NewFocus = NewFocus;
	Parms.NewZoom = NewZoom;
	Parms.NewPoint = std::move(NewPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.ClearAll
// (Final, Native, Public, BlueprintCallable)

void ULensFile::ClearAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "ClearAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.ClearData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELensDataCategory                       InDataCategory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensFile::ClearData(ELensDataCategory InDataCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "ClearData");

	Params::LensFile_ClearData Parms{};

	Parms.InDataCategory = InDataCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.RemoveFocusPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELensDataCategory                       InDataCategory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensFile::RemoveFocusPoint(ELensDataCategory InDataCategory, float InFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "RemoveFocusPoint");

	Params::LensFile_RemoveFocusPoint Parms{};

	Parms.InDataCategory = InDataCategory;
	Parms.InFocus = InFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.RemoveZoomPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELensDataCategory                       InDataCategory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULensFile::RemoveZoomPoint(ELensDataCategory InDataCategory, float InFocus, float InZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "RemoveZoomPoint");

	Params::LensFile_RemoveZoomPoint Parms{};

	Parms.InDataCategory = InDataCategory;
	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CameraCalibrationCore.LensFile.EvaluateDistortionData
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InFilmback                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULensDistortionModelHandlerBase*  InLensHandler                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::EvaluateDistortionData(float InFocus, float InZoom, const struct FVector2D& InFilmback, class ULensDistortionModelHandlerBase* InLensHandler) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "EvaluateDistortionData");

	Params::LensFile_EvaluateDistortionData Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;
	Parms.InFilmback = std::move(InFilmback);
	Parms.InLensHandler = InLensHandler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.EvaluateDistortionParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDistortionInfo                  OutEvaluatedValue                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::EvaluateDistortionParameters(float InFocus, float InZoom, struct FDistortionInfo* OutEvaluatedValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "EvaluateDistortionParameters");

	Params::LensFile_EvaluateDistortionParameters Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEvaluatedValue != nullptr)
		*OutEvaluatedValue = std::move(Parms.OutEvaluatedValue);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.EvaluateFocalLength
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFocalLengthInfo                 OutEvaluatedValue                                      (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::EvaluateFocalLength(float InFocus, float InZoom, struct FFocalLengthInfo* OutEvaluatedValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "EvaluateFocalLength");

	Params::LensFile_EvaluateFocalLength Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEvaluatedValue != nullptr)
		*OutEvaluatedValue = std::move(Parms.OutEvaluatedValue);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.EvaluateImageCenterParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FImageCenterInfo                 OutEvaluatedValue                                      (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::EvaluateImageCenterParameters(float InFocus, float InZoom, struct FImageCenterInfo* OutEvaluatedValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "EvaluateImageCenterParameters");

	Params::LensFile_EvaluateImageCenterParameters Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEvaluatedValue != nullptr)
		*OutEvaluatedValue = std::move(Parms.OutEvaluatedValue);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.EvaluateNodalPointOffset
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNodalPointOffset                OutEvaluatedValue                                      (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::EvaluateNodalPointOffset(float InFocus, float InZoom, struct FNodalPointOffset* OutEvaluatedValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "EvaluateNodalPointOffset");

	Params::LensFile_EvaluateNodalPointOffset Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEvaluatedValue != nullptr)
		*OutEvaluatedValue = std::move(Parms.OutEvaluatedValue);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.EvaluateNormalizedFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InNormalizedValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULensFile::EvaluateNormalizedFocus(float InNormalizedValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "EvaluateNormalizedFocus");

	Params::LensFile_EvaluateNormalizedFocus Parms{};

	Parms.InNormalizedValue = InNormalizedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.EvaluateNormalizedIris
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InNormalizedValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULensFile::EvaluateNormalizedIris(float InNormalizedValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "EvaluateNormalizedIris");

	Params::LensFile_EvaluateNormalizedIris Parms{};

	Parms.InNormalizedValue = InNormalizedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetDistortionPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDistortionInfo                  OutDistortionInfo                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::GetDistortionPoint(float InFocus, float InZoom, struct FDistortionInfo* OutDistortionInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetDistortionPoint");

	Params::LensFile_GetDistortionPoint Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDistortionInfo != nullptr)
		*OutDistortionInfo = std::move(Parms.OutDistortionInfo);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetDistortionPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDistortionPointInfo>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDistortionPointInfo> ULensFile::GetDistortionPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetDistortionPoints");

	Params::LensFile_GetDistortionPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetFocalLengthPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFocalLengthInfo                 OutFocalLengthInfo                                     (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::GetFocalLengthPoint(float InFocus, float InZoom, struct FFocalLengthInfo* OutFocalLengthInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetFocalLengthPoint");

	Params::LensFile_GetFocalLengthPoint Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFocalLengthInfo != nullptr)
		*OutFocalLengthInfo = std::move(Parms.OutFocalLengthInfo);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetFocalLengthPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FFocalLengthPointInfo>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFocalLengthPointInfo> ULensFile::GetFocalLengthPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetFocalLengthPoints");

	Params::LensFile_GetFocalLengthPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetImageCenterPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FImageCenterInfo                 OutImageCenterInfo                                     (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::GetImageCenterPoint(float InFocus, float InZoom, struct FImageCenterInfo* OutImageCenterInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetImageCenterPoint");

	Params::LensFile_GetImageCenterPoint Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutImageCenterInfo != nullptr)
		*OutImageCenterInfo = std::move(Parms.OutImageCenterInfo);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetImageCenterPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FImageCenterPointInfo>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FImageCenterPointInfo> ULensFile::GetImageCenterPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetImageCenterPoints");

	Params::LensFile_GetImageCenterPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetNodalOffsetPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNodalPointOffset                OutNodalPointOffset                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::GetNodalOffsetPoint(float InFocus, float InZoom, struct FNodalPointOffset* OutNodalPointOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetNodalOffsetPoint");

	Params::LensFile_GetNodalOffsetPoint Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNodalPointOffset != nullptr)
		*OutNodalPointOffset = std::move(Parms.OutNodalPointOffset);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetNodalOffsetPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FNodalOffsetPointInfo>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNodalOffsetPointInfo> ULensFile::GetNodalOffsetPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetNodalOffsetPoints");

	Params::LensFile_GetNodalOffsetPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetSTMapPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   InFocus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InZoom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSTMapInfo                       OutSTMapInfo                                           (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::GetSTMapPoint(float InFocus, float InZoom, struct FSTMapInfo* OutSTMapInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetSTMapPoint");

	Params::LensFile_GetSTMapPoint Parms{};

	Parms.InFocus = InFocus;
	Parms.InZoom = InZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSTMapInfo != nullptr)
		*OutSTMapInfo = std::move(Parms.OutSTMapInfo);

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetSTMapPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSTMapPointInfo>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSTMapPointInfo> ULensFile::GetSTMapPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetSTMapPoints");

	Params::LensFile_GetSTMapPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.GetTotalPointNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELensDataCategory                       InDataCategory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULensFile::GetTotalPointNum(ELensDataCategory InDataCategory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "GetTotalPointNum");

	Params::LensFile_GetTotalPointNum Parms{};

	Parms.InDataCategory = InDataCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.HasFocusEncoderMapping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::HasFocusEncoderMapping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "HasFocusEncoderMapping");

	Params::LensFile_HasFocusEncoderMapping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.HasIrisEncoderMapping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::HasIrisEncoderMapping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "HasIrisEncoderMapping");

	Params::LensFile_HasIrisEncoderMapping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CameraCalibrationCore.LensFile.HasSamples
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELensDataCategory                       InDataCategory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULensFile::HasSamples(ELensDataCategory InDataCategory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LensFile", "HasSamples");

	Params::LensFile_HasSamples Parms{};

	Parms.InDataCategory = InDataCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

