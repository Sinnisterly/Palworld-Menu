#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WantedPolice_NPCSpawner

#include "Basic.hpp"

#include "BP_WantedPolice_NPCSpawner_classes.hpp"
#include "BP_WantedPolice_NPCSpawner_parameters.hpp"


namespace SDK
{

// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.BlueprintTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::BlueprintTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "BlueprintTick");

	Params::BP_WantedPolice_NPCSpawner_C_BlueprintTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.ChangeCombatMode
// (BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::ChangeCombatMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "ChangeCombatMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckPoliceInSight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_NPCAIController_C*            NPC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    InSight                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::CheckPoliceInSight(class ABP_NPCAIController_C* NPC, bool* InSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckPoliceInSight");

	Params::BP_WantedPolice_NPCSpawner_C_CheckPoliceInSight Parms{};

	Parms.NPC = NPC;

	UObject::ProcessEvent(Func, &Parms);

	if (InSight != nullptr)
		*InSight = Parms.InSight;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckReleaseWantedTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRelease                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::CheckReleaseWantedTimer(double DeltaTime, bool* IsRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckReleaseWantedTimer");

	Params::BP_WantedPolice_NPCSpawner_C_CheckReleaseWantedTimer Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (IsRelease != nullptr)
		*IsRelease = Parms.IsRelease;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckReportCriminal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::CheckReportCriminal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckReportCriminal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckRespawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          CheckLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRespawn                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::CheckRespawn(const struct FVector& CheckLocation, bool* IsRespawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckRespawn");

	Params::BP_WantedPolice_NPCSpawner_C_CheckRespawn Parms{};

	Parms.CheckLocation = std::move(CheckLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (IsRespawn != nullptr)
		*IsRespawn = Parms.IsRespawn;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckRespawnByFailedMove
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::CheckRespawnByFailedMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckRespawnByFailedMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckSpawnFailed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::CheckSpawnFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckSpawnFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckValidSpawnLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::CheckValidSpawnLocation(const struct FVector& TargetLocation, struct FVector* Location, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckValidSpawnLocation");

	Params::BP_WantedPolice_NPCSpawner_C_CheckValidSpawnLocation Parms{};

	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CheckWaterOrSky
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWaterOrSky                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::CheckWaterOrSky(const struct FVector& Start, const struct FVector& End, bool* IsWaterOrSky)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CheckWaterOrSky");

	Params::BP_WantedPolice_NPCSpawner_C_CheckWaterOrSky Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);

	if (IsWaterOrSky != nullptr)
		*IsWaterOrSky = Parms.IsWaterOrSky;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.CorrectPoints
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  Points                                                 (Parm, OutParm)

void ABP_WantedPolice_NPCSpawner_C::CorrectPoints(TArray<struct FVector>* Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "CorrectPoints");

	Params::BP_WantedPolice_NPCSpawner_C_CorrectPoints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Points != nullptr)
		*Points = std::move(Parms.Points);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.DebugShowPoints
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::DebugShowPoints(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "DebugShowPoints");

	Params::BP_WantedPolice_NPCSpawner_C_DebugShowPoints Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.Despawn
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::Despawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "Despawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.DespawnPolices
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UPalIndividualCharacterHandle*>DespawnHandles                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_WantedPolice_NPCSpawner_C::DespawnPolices(TArray<class UPalIndividualCharacterHandle*>& DespawnHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "DespawnPolices");

	Params::BP_WantedPolice_NPCSpawner_C_DespawnPolices Parms{};

	Parms.DespawnHandles = std::move(DespawnHandles);

	UObject::ProcessEvent(Func, &Parms);

	DespawnHandles = std::move(Parms.DespawnHandles);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.ExecuteUbergraph_BP_WantedPolice_NPCSpawner
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::ExecuteUbergraph_BP_WantedPolice_NPCSpawner(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "ExecuteUbergraph_BP_WantedPolice_NPCSpawner");

	Params::BP_WantedPolice_NPCSpawner_C_ExecuteUbergraph_BP_WantedPolice_NPCSpawner Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.FindSpawnLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::FindSpawnLocation(struct FVector* Location, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "FindSpawnLocation");

	Params::BP_WantedPolice_NPCSpawner_C_FindSpawnLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.GetCombatGunBP
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_NPCAIController_C*            AIController                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_AIAction_NPC_Combat_Gun_C*    CombatAIAction                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::GetCombatGunBP(class ABP_NPCAIController_C* AIController, class UBP_AIAction_NPC_Combat_Gun_C** CombatAIAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "GetCombatGunBP");

	Params::BP_WantedPolice_NPCSpawner_C_GetCombatGunBP Parms{};

	Parms.AIController = AIController;

	UObject::ProcessEvent(Func, &Parms);

	if (CombatAIAction != nullptr)
		*CombatAIAction = Parms.CombatAIAction;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.HasWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_NPCAIController_C*            NPCController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_HasWeapon                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::HasWeapon(class ABP_NPCAIController_C* NPCController, bool* Param_HasWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "HasWeapon");

	Params::BP_WantedPolice_NPCSpawner_C_HasWeapon Parms{};

	Parms.NPCController = NPCController;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_HasWeapon != nullptr)
		*Param_HasWeapon = Parms.Param_HasWeapon;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.IsFailedMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_NPCAIController_C*            AIController                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFailed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::IsFailedMove(class ABP_NPCAIController_C* AIController, bool* IsFailed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "IsFailedMove");

	Params::BP_WantedPolice_NPCSpawner_C_IsFailedMove Parms{};

	Parms.AIController = AIController;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFailed != nullptr)
		*IsFailed = Parms.IsFailed;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.IsOrganizationCitizen
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPalOrganizationType                    OrganizationType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCitizen                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::IsOrganizationCitizen(EPalOrganizationType OrganizationType, bool* bCitizen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "IsOrganizationCitizen");

	Params::BP_WantedPolice_NPCSpawner_C_IsOrganizationCitizen Parms{};

	Parms.OrganizationType = OrganizationType;

	UObject::ProcessEvent(Func, &Parms);

	if (bCitizen != nullptr)
		*bCitizen = Parms.bCitizen;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.IsPoliceInSight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    NoOneInSight                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::IsPoliceInSight(bool* NoOneInSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "IsPoliceInSight");

	Params::BP_WantedPolice_NPCSpawner_C_IsPoliceInSight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoOneInSight != nullptr)
		*NoOneInSight = Parms.NoOneInSight;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.IsSelf
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPalIndividualCharacterHandle*    CharacterHandle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsSelf                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::IsSelf(class UPalIndividualCharacterHandle* CharacterHandle, bool* Param_IsSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "IsSelf");

	Params::BP_WantedPolice_NPCSpawner_C_IsSelf Parms{};

	Parms.CharacterHandle = CharacterHandle;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsSelf != nullptr)
		*Param_IsSelf = Parms.Param_IsSelf;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.IsStuckMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_NPCAIController_C*            AIController                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsStuck                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::IsStuckMove(class ABP_NPCAIController_C* AIController, bool* IsStuck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "IsStuckMove");

	Params::BP_WantedPolice_NPCSpawner_C_IsStuckMove Parms{};

	Parms.AIController = AIController;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStuck != nullptr)
		*IsStuck = Parms.IsStuck;
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.OnInitializedNPC
// (BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::OnInitializedNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "OnInitializedNPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.OnReleaseWanted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPalIndividualCharacterHandle*    CriminalHandle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::OnReleaseWanted(class UPalIndividualCharacterHandle* CriminalHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "OnReleaseWanted");

	Params::BP_WantedPolice_NPCSpawner_C_OnReleaseWanted Parms{};

	Parms.CriminalHandle = CriminalHandle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.OnWanted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPalIndividualCharacterHandle*    CriminalHandle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPalWorldSecurityWantedStateInfo WantedStateInfo                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_WantedPolice_NPCSpawner_C::OnWanted(class UPalIndividualCharacterHandle* CriminalHandle, const struct FPalWorldSecurityWantedStateInfo& WantedStateInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "OnWanted");

	Params::BP_WantedPolice_NPCSpawner_C_OnWanted Parms{};

	Parms.CriminalHandle = CriminalHandle;
	Parms.WantedStateInfo = std::move(WantedStateInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.ReleaseWanted
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::ReleaseWanted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "ReleaseWanted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.ReporterChangeAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APalCharacter*                    Reporter                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APalCharacter*                    Criminal                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::ReporterChangeAction(class APalCharacter* Reporter, class APalCharacter* Criminal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "ReporterChangeAction");

	Params::BP_WantedPolice_NPCSpawner_C_ReporterChangeAction Parms{};

	Parms.Reporter = Reporter;
	Parms.Criminal = Criminal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.SetupOwnerAndHandle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::SetupOwnerAndHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "SetupOwnerAndHandle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.Spawn
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::Spawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "Spawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.SpawnDelegate
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalInstanceID                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_WantedPolice_NPCSpawner_C::SpawnDelegate(const struct FPalInstanceID& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "SpawnDelegate");

	Params::BP_WantedPolice_NPCSpawner_C_SpawnDelegate Parms{};

	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.SpawnPolices
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::SpawnPolices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "SpawnPolices");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WantedPolice_NPCSpawner.BP_WantedPolice_NPCSpawner_C.TrySpawnPolices
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WantedPolice_NPCSpawner_C::TrySpawnPolices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WantedPolice_NPCSpawner_C", "TrySpawnPolices");

	UObject::ProcessEvent(Func, nullptr);
}

}

