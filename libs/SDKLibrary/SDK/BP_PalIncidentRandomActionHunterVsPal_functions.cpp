#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PalIncidentRandomActionHunterVsPal

#include "Basic.hpp"

#include "BP_PalIncidentRandomActionHunterVsPal_classes.hpp"
#include "BP_PalIncidentRandomActionHunterVsPal_parameters.hpp"


namespace SDK
{

// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.CollectCharactersByGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Group                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class APalCharacter*>            MatchCharacters                                        (Parm, OutParm)
// TArray<class APalCharacter*>            UnmatchCharacters                                      (Parm, OutParm)

void UBP_PalIncidentRandomActionHunterVsPal_C::CollectCharactersByGroup(int32 Group, TArray<class APalCharacter*>* MatchCharacters, TArray<class APalCharacter*>* UnmatchCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "CollectCharactersByGroup");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_CollectCharactersByGroup Parms{};

	Parms.Group = Group;

	UObject::ProcessEvent(Func, &Parms);

	if (MatchCharacters != nullptr)
		*MatchCharacters = std::move(Parms.MatchCharacters);

	if (UnmatchCharacters != nullptr)
		*UnmatchCharacters = std::move(Parms.UnmatchCharacters);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.CollectGroupIds
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           GroupIds                                               (Parm, OutParm)

void UBP_PalIncidentRandomActionHunterVsPal_C::CollectGroupIds(TArray<int32>* GroupIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "CollectGroupIds");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_CollectGroupIds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GroupIds != nullptr)
		*GroupIds = std::move(Parms.GroupIds);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.ExecuteUbergraph_BP_PalIncidentRandomActionHunterVsPal
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::ExecuteUbergraph_BP_PalIncidentRandomActionHunterVsPal(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "ExecuteUbergraph_BP_PalIncidentRandomActionHunterVsPal");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_ExecuteUbergraph_BP_PalIncidentRandomActionHunterVsPal Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.ExistsAliveCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class APalCharacter*>            Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::ExistsAliveCharacter(TArray<class APalCharacter*>& Array, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "ExistsAliveCharacter");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_ExistsAliveCharacter Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.GetSpawnedLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APalAIController*                 Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::GetSpawnedLocation(class APalAIController* Controller, bool* Found, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "GetSpawnedLocation");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_GetSpawnedLocation Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.GetSpawnerLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::GetSpawnerLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "GetSpawnerLocation");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_GetSpawnerLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.GetSpawnRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::GetSpawnRadius(double* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "GetSpawnRadius");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_GetSpawnRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.GetWinnerGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   GroupID                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::GetWinnerGroup(int32* GroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "GetWinnerGroup");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_GetWinnerGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GroupID != nullptr)
		*GroupID = Parms.GroupID;
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.OnAllNpcSpawned
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_PalIncidentRandomActionHunterVsPal_C::OnAllNpcSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "OnAllNpcSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.OnInitialized
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UBP_PalIncidentRandomActionHunterVsPal_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.OnStart
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UBP_PalIncidentRandomActionHunterVsPal_C::OnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "OnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.OnTerminate
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UBP_PalIncidentRandomActionHunterVsPal_C::OnTerminate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "OnTerminate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.OnTick
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::OnTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "OnTick");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_OnTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.ResetAIController
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::ResetAIController(int32 GroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "ResetAIController");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_ResetAIController Parms{};

	Parms.GroupID = GroupID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.ResetAIController_Monster
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MonsterAIControllerBase_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::ResetAIController_Monster(class ABP_MonsterAIControllerBase_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "ResetAIController_Monster");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_ResetAIController_Monster Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.ResetAIController_NPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_NPCAIController_C*            Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PalIncidentRandomActionHunterVsPal_C::ResetAIController_NPC(class ABP_NPCAIController_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "ResetAIController_NPC");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_ResetAIController_NPC Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.Set Hate To Targets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APalCharacter*                    Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class APalCharacter*>            Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_PalIncidentRandomActionHunterVsPal_C::Set_Hate_To_Targets(class APalCharacter* Character, TArray<class APalCharacter*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "Set Hate To Targets");

	Params::BP_PalIncidentRandomActionHunterVsPal_C_Set_Hate_To_Targets Parms{};

	Parms.Character = Character;
	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function BP_PalIncidentRandomActionHunterVsPal.BP_PalIncidentRandomActionHunterVsPal_C.SetHate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PalIncidentRandomActionHunterVsPal_C::SetHate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PalIncidentRandomActionHunterVsPal_C", "SetHate");

	UObject::ProcessEvent(Func, nullptr);
}

}

