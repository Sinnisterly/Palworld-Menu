#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkyCreatorPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SkyCreatorPlugin_structs.hpp"


namespace SDK::Params
{

// Function SkyCreatorPlugin.SkyCreator.FindLightningPosition
// 0x0038 (0x0038 - 0x0000)
struct SkyCreator_FindLightningPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136C[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkyCreator_FindLightningPosition) == 0x000008, "Wrong alignment on SkyCreator_FindLightningPosition");
static_assert(sizeof(SkyCreator_FindLightningPosition) == 0x000038, "Wrong size on SkyCreator_FindLightningPosition");
static_assert(offsetof(SkyCreator_FindLightningPosition, Position) == 0x000000, "Member 'SkyCreator_FindLightningPosition::Position' has a wrong offset!");
static_assert(offsetof(SkyCreator_FindLightningPosition, OutPosition) == 0x000018, "Member 'SkyCreator_FindLightningPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(SkyCreator_FindLightningPosition, ReturnValue) == 0x000030, "Member 'SkyCreator_FindLightningPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetCloudDensityAtPosition
// 0x0020 (0x0020 - 0x0000)
struct SkyCreator_GetCloudDensityAtPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136D[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkyCreator_GetCloudDensityAtPosition) == 0x000008, "Wrong alignment on SkyCreator_GetCloudDensityAtPosition");
static_assert(sizeof(SkyCreator_GetCloudDensityAtPosition) == 0x000020, "Wrong size on SkyCreator_GetCloudDensityAtPosition");
static_assert(offsetof(SkyCreator_GetCloudDensityAtPosition, Position) == 0x000000, "Member 'SkyCreator_GetCloudDensityAtPosition::Position' has a wrong offset!");
static_assert(offsetof(SkyCreator_GetCloudDensityAtPosition, ReturnValue) == 0x000018, "Member 'SkyCreator_GetCloudDensityAtPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetLastLightningPosition
// 0x0018 (0x0018 - 0x0000)
struct SkyCreator_GetLastLightningPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetLastLightningPosition) == 0x000008, "Wrong alignment on SkyCreator_GetLastLightningPosition");
static_assert(sizeof(SkyCreator_GetLastLightningPosition) == 0x000018, "Wrong size on SkyCreator_GetLastLightningPosition");
static_assert(offsetof(SkyCreator_GetLastLightningPosition, ReturnValue) == 0x000000, "Member 'SkyCreator_GetLastLightningPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetMoonPosition
// 0x0020 (0x0020 - 0x0000)
struct SkyCreator_GetMoonPosition final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetMoonPosition) == 0x000008, "Wrong alignment on SkyCreator_GetMoonPosition");
static_assert(sizeof(SkyCreator_GetMoonPosition) == 0x000020, "Wrong size on SkyCreator_GetMoonPosition");
static_assert(offsetof(SkyCreator_GetMoonPosition, Time) == 0x000000, "Member 'SkyCreator_GetMoonPosition::Time' has a wrong offset!");
static_assert(offsetof(SkyCreator_GetMoonPosition, ReturnValue) == 0x000008, "Member 'SkyCreator_GetMoonPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetSunPosition
// 0x0020 (0x0020 - 0x0000)
struct SkyCreator_GetSunPosition final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetSunPosition) == 0x000008, "Wrong alignment on SkyCreator_GetSunPosition");
static_assert(sizeof(SkyCreator_GetSunPosition) == 0x000020, "Wrong size on SkyCreator_GetSunPosition");
static_assert(offsetof(SkyCreator_GetSunPosition, Time) == 0x000000, "Member 'SkyCreator_GetSunPosition::Time' has a wrong offset!");
static_assert(offsetof(SkyCreator_GetSunPosition, ReturnValue) == 0x000008, "Member 'SkyCreator_GetSunPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpBackgroundCloudSettings
// 0x004C (0x004C - 0x0000)
struct SkyCreator_LerpBackgroundCloudSettings final
{
public:
	struct FSkyCreatorBackgroundCloudSettings     InBackgroundCloudSettingsA;                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorBackgroundCloudSettings     InBackgroundCloudSettingsB;                        // 0x0024(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpBackgroundCloudSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpBackgroundCloudSettings");
static_assert(sizeof(SkyCreator_LerpBackgroundCloudSettings) == 0x00004C, "Wrong size on SkyCreator_LerpBackgroundCloudSettings");
static_assert(offsetof(SkyCreator_LerpBackgroundCloudSettings, InBackgroundCloudSettingsA) == 0x000000, "Member 'SkyCreator_LerpBackgroundCloudSettings::InBackgroundCloudSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpBackgroundCloudSettings, InBackgroundCloudSettingsB) == 0x000024, "Member 'SkyCreator_LerpBackgroundCloudSettings::InBackgroundCloudSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpBackgroundCloudSettings, Alpha) == 0x000048, "Member 'SkyCreator_LerpBackgroundCloudSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpExponentialHeightFogSettings
// 0x00CC (0x00CC - 0x0000)
struct SkyCreator_LerpExponentialHeightFogSettings final
{
public:
	struct FSkyCreatorExponentialHeightFogSettings InExponentialHeightFogSettingsA;                   // 0x0000(0x0064)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorExponentialHeightFogSettings InExponentialHeightFogSettingsB;                   // 0x0064(0x0064)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpExponentialHeightFogSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpExponentialHeightFogSettings");
static_assert(sizeof(SkyCreator_LerpExponentialHeightFogSettings) == 0x0000CC, "Wrong size on SkyCreator_LerpExponentialHeightFogSettings");
static_assert(offsetof(SkyCreator_LerpExponentialHeightFogSettings, InExponentialHeightFogSettingsA) == 0x000000, "Member 'SkyCreator_LerpExponentialHeightFogSettings::InExponentialHeightFogSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpExponentialHeightFogSettings, InExponentialHeightFogSettingsB) == 0x000064, "Member 'SkyCreator_LerpExponentialHeightFogSettings::InExponentialHeightFogSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpExponentialHeightFogSettings, Alpha) == 0x0000C8, "Member 'SkyCreator_LerpExponentialHeightFogSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpMoonLightSettings
// 0x0094 (0x0094 - 0x0000)
struct SkyCreator_LerpMoonLightSettings final
{
public:
	struct FSkyCreatorMoonLightSettings           InMoonLightSettingsA;                              // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorMoonLightSettings           InMoonLightSettingsB;                              // 0x0048(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpMoonLightSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpMoonLightSettings");
static_assert(sizeof(SkyCreator_LerpMoonLightSettings) == 0x000094, "Wrong size on SkyCreator_LerpMoonLightSettings");
static_assert(offsetof(SkyCreator_LerpMoonLightSettings, InMoonLightSettingsA) == 0x000000, "Member 'SkyCreator_LerpMoonLightSettings::InMoonLightSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpMoonLightSettings, InMoonLightSettingsB) == 0x000048, "Member 'SkyCreator_LerpMoonLightSettings::InMoonLightSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpMoonLightSettings, Alpha) == 0x000090, "Member 'SkyCreator_LerpMoonLightSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpPostProcessSettings
// 0x001C (0x001C - 0x0000)
struct SkyCreator_LerpPostProcessSettings final
{
public:
	struct FSkyCreatorPostProcessSettings         InPostProcessSettingsA;                            // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorPostProcessSettings         InPostProcessSettingsB;                            // 0x000C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpPostProcessSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpPostProcessSettings");
static_assert(sizeof(SkyCreator_LerpPostProcessSettings) == 0x00001C, "Wrong size on SkyCreator_LerpPostProcessSettings");
static_assert(offsetof(SkyCreator_LerpPostProcessSettings, InPostProcessSettingsA) == 0x000000, "Member 'SkyCreator_LerpPostProcessSettings::InPostProcessSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpPostProcessSettings, InPostProcessSettingsB) == 0x00000C, "Member 'SkyCreator_LerpPostProcessSettings::InPostProcessSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpPostProcessSettings, Alpha) == 0x000018, "Member 'SkyCreator_LerpPostProcessSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpPuddlesAmount
// 0x000C (0x000C - 0x0000)
struct SkyCreator_LerpPuddlesAmount final
{
public:
	float                                         PuddlesAmountA;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesAmountB;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpPuddlesAmount) == 0x000004, "Wrong alignment on SkyCreator_LerpPuddlesAmount");
static_assert(sizeof(SkyCreator_LerpPuddlesAmount) == 0x00000C, "Wrong size on SkyCreator_LerpPuddlesAmount");
static_assert(offsetof(SkyCreator_LerpPuddlesAmount, PuddlesAmountA) == 0x000000, "Member 'SkyCreator_LerpPuddlesAmount::PuddlesAmountA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpPuddlesAmount, PuddlesAmountB) == 0x000004, "Member 'SkyCreator_LerpPuddlesAmount::PuddlesAmountB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpPuddlesAmount, Alpha) == 0x000008, "Member 'SkyCreator_LerpPuddlesAmount::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpSkyAtmosphereSettings
// 0x0104 (0x0104 - 0x0000)
struct SkyCreator_LerpSkyAtmosphereSettings final
{
public:
	struct FSkyCreatorSkyAtmosphereSettings       InSkyAtmosphereSettingsA;                          // 0x0000(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSkyAtmosphereSettings       InSkyAtmosphereSettingsB;                          // 0x0080(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpSkyAtmosphereSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpSkyAtmosphereSettings");
static_assert(sizeof(SkyCreator_LerpSkyAtmosphereSettings) == 0x000104, "Wrong size on SkyCreator_LerpSkyAtmosphereSettings");
static_assert(offsetof(SkyCreator_LerpSkyAtmosphereSettings, InSkyAtmosphereSettingsA) == 0x000000, "Member 'SkyCreator_LerpSkyAtmosphereSettings::InSkyAtmosphereSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSkyAtmosphereSettings, InSkyAtmosphereSettingsB) == 0x000080, "Member 'SkyCreator_LerpSkyAtmosphereSettings::InSkyAtmosphereSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSkyAtmosphereSettings, Alpha) == 0x000100, "Member 'SkyCreator_LerpSkyAtmosphereSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpSkyLightSettings
// 0x005C (0x005C - 0x0000)
struct SkyCreator_LerpSkyLightSettings final
{
public:
	struct FSkyCreatorSkyLightSettings            InSkyLightSettingsA;                               // 0x0000(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSkyLightSettings            InSkyLightSettingsB;                               // 0x002C(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpSkyLightSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpSkyLightSettings");
static_assert(sizeof(SkyCreator_LerpSkyLightSettings) == 0x00005C, "Wrong size on SkyCreator_LerpSkyLightSettings");
static_assert(offsetof(SkyCreator_LerpSkyLightSettings, InSkyLightSettingsA) == 0x000000, "Member 'SkyCreator_LerpSkyLightSettings::InSkyLightSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSkyLightSettings, InSkyLightSettingsB) == 0x00002C, "Member 'SkyCreator_LerpSkyLightSettings::InSkyLightSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSkyLightSettings, Alpha) == 0x000058, "Member 'SkyCreator_LerpSkyLightSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpSnowAmount
// 0x000C (0x000C - 0x0000)
struct SkyCreator_LerpSnowAmount final
{
public:
	float                                         SnowAmountA;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowAmountB;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpSnowAmount) == 0x000004, "Wrong alignment on SkyCreator_LerpSnowAmount");
static_assert(sizeof(SkyCreator_LerpSnowAmount) == 0x00000C, "Wrong size on SkyCreator_LerpSnowAmount");
static_assert(offsetof(SkyCreator_LerpSnowAmount, SnowAmountA) == 0x000000, "Member 'SkyCreator_LerpSnowAmount::SnowAmountA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSnowAmount, SnowAmountB) == 0x000004, "Member 'SkyCreator_LerpSnowAmount::SnowAmountB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSnowAmount, Alpha) == 0x000008, "Member 'SkyCreator_LerpSnowAmount::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpStarMapSettings
// 0x0094 (0x0094 - 0x0000)
struct SkyCreator_LerpStarMapSettings final
{
public:
	struct FSkyCreatorStarMapSettings             InStarMapSettingsA;                                // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorStarMapSettings             InStarMapSettingsB;                                // 0x0048(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpStarMapSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpStarMapSettings");
static_assert(sizeof(SkyCreator_LerpStarMapSettings) == 0x000094, "Wrong size on SkyCreator_LerpStarMapSettings");
static_assert(offsetof(SkyCreator_LerpStarMapSettings, InStarMapSettingsA) == 0x000000, "Member 'SkyCreator_LerpStarMapSettings::InStarMapSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpStarMapSettings, InStarMapSettingsB) == 0x000048, "Member 'SkyCreator_LerpStarMapSettings::InStarMapSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpStarMapSettings, Alpha) == 0x000090, "Member 'SkyCreator_LerpStarMapSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpSunLightSettings
// 0x0094 (0x0094 - 0x0000)
struct SkyCreator_LerpSunLightSettings final
{
public:
	struct FSkyCreatorSunLightSettings            InSunLightSettingsA;                               // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSunLightSettings            InSunLightSettingsB;                               // 0x0048(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpSunLightSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpSunLightSettings");
static_assert(sizeof(SkyCreator_LerpSunLightSettings) == 0x000094, "Wrong size on SkyCreator_LerpSunLightSettings");
static_assert(offsetof(SkyCreator_LerpSunLightSettings, InSunLightSettingsA) == 0x000000, "Member 'SkyCreator_LerpSunLightSettings::InSunLightSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSunLightSettings, InSunLightSettingsB) == 0x000048, "Member 'SkyCreator_LerpSunLightSettings::InSunLightSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpSunLightSettings, Alpha) == 0x000090, "Member 'SkyCreator_LerpSunLightSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpVolumetricCloudSettings
// 0x0154 (0x0154 - 0x0000)
struct SkyCreator_LerpVolumetricCloudSettings final
{
public:
	struct FSkyCreatorVolumetricCloudSettings     InVolumetricCloudSettingsA;                        // 0x0000(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorVolumetricCloudSettings     InVolumetricCloudSettingsB;                        // 0x00A8(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0150(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpVolumetricCloudSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpVolumetricCloudSettings");
static_assert(sizeof(SkyCreator_LerpVolumetricCloudSettings) == 0x000154, "Wrong size on SkyCreator_LerpVolumetricCloudSettings");
static_assert(offsetof(SkyCreator_LerpVolumetricCloudSettings, InVolumetricCloudSettingsA) == 0x000000, "Member 'SkyCreator_LerpVolumetricCloudSettings::InVolumetricCloudSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpVolumetricCloudSettings, InVolumetricCloudSettingsB) == 0x0000A8, "Member 'SkyCreator_LerpVolumetricCloudSettings::InVolumetricCloudSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpVolumetricCloudSettings, Alpha) == 0x000150, "Member 'SkyCreator_LerpVolumetricCloudSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpWeatherFXSettings
// 0x0228 (0x0228 - 0x0000)
struct SkyCreator_LerpWeatherFXSettings final
{
public:
	struct FSkyCreatorWeatherFXSettings           InWeatherFXSettingsA;                              // 0x0000(0x0110)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherFXSettings           InWeatherFXSettingsB;                              // 0x0110(0x0110)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0220(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1370[0x4];                                     // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkyCreator_LerpWeatherFXSettings) == 0x000008, "Wrong alignment on SkyCreator_LerpWeatherFXSettings");
static_assert(sizeof(SkyCreator_LerpWeatherFXSettings) == 0x000228, "Wrong size on SkyCreator_LerpWeatherFXSettings");
static_assert(offsetof(SkyCreator_LerpWeatherFXSettings, InWeatherFXSettingsA) == 0x000000, "Member 'SkyCreator_LerpWeatherFXSettings::InWeatherFXSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWeatherFXSettings, InWeatherFXSettingsB) == 0x000110, "Member 'SkyCreator_LerpWeatherFXSettings::InWeatherFXSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWeatherFXSettings, Alpha) == 0x000220, "Member 'SkyCreator_LerpWeatherFXSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpWeatherMaterialFXSettings
// 0x00D4 (0x00D4 - 0x0000)
struct SkyCreator_LerpWeatherMaterialFXSettings final
{
public:
	struct FSkyCreatorWeatherMaterialFXSettings   InWeatherMaterialFXSettingsA;                      // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherMaterialFXSettings   InWeatherMaterialFXSettingsB;                      // 0x0068(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpWeatherMaterialFXSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpWeatherMaterialFXSettings");
static_assert(sizeof(SkyCreator_LerpWeatherMaterialFXSettings) == 0x0000D4, "Wrong size on SkyCreator_LerpWeatherMaterialFXSettings");
static_assert(offsetof(SkyCreator_LerpWeatherMaterialFXSettings, InWeatherMaterialFXSettingsA) == 0x000000, "Member 'SkyCreator_LerpWeatherMaterialFXSettings::InWeatherMaterialFXSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWeatherMaterialFXSettings, InWeatherMaterialFXSettingsB) == 0x000068, "Member 'SkyCreator_LerpWeatherMaterialFXSettings::InWeatherMaterialFXSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWeatherMaterialFXSettings, Alpha) == 0x0000D0, "Member 'SkyCreator_LerpWeatherMaterialFXSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpWeatherSettings
// 0x08B8 (0x08B8 - 0x0000)
struct SkyCreator_LerpWeatherSettings final
{
public:
	struct FSkyCreatorWeatherSettings             InWeatherSettingsA;                                // 0x0000(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherSettings             InWeatherSettingsB;                                // 0x0458(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x08B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1371[0x4];                                     // 0x08B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkyCreator_LerpWeatherSettings) == 0x000008, "Wrong alignment on SkyCreator_LerpWeatherSettings");
static_assert(sizeof(SkyCreator_LerpWeatherSettings) == 0x0008B8, "Wrong size on SkyCreator_LerpWeatherSettings");
static_assert(offsetof(SkyCreator_LerpWeatherSettings, InWeatherSettingsA) == 0x000000, "Member 'SkyCreator_LerpWeatherSettings::InWeatherSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWeatherSettings, InWeatherSettingsB) == 0x000458, "Member 'SkyCreator_LerpWeatherSettings::InWeatherSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWeatherSettings, Alpha) == 0x0008B0, "Member 'SkyCreator_LerpWeatherSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpWetnessAmount
// 0x000C (0x000C - 0x0000)
struct SkyCreator_LerpWetnessAmount final
{
public:
	float                                         WetnessAmountA;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessAmountB;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpWetnessAmount) == 0x000004, "Wrong alignment on SkyCreator_LerpWetnessAmount");
static_assert(sizeof(SkyCreator_LerpWetnessAmount) == 0x00000C, "Wrong size on SkyCreator_LerpWetnessAmount");
static_assert(offsetof(SkyCreator_LerpWetnessAmount, WetnessAmountA) == 0x000000, "Member 'SkyCreator_LerpWetnessAmount::WetnessAmountA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWetnessAmount, WetnessAmountB) == 0x000004, "Member 'SkyCreator_LerpWetnessAmount::WetnessAmountB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWetnessAmount, Alpha) == 0x000008, "Member 'SkyCreator_LerpWetnessAmount::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpWindIndependentSettings
// 0x003C (0x003C - 0x0000)
struct SkyCreator_LerpWindIndependentSettings final
{
public:
	struct FSkyCreatorWindSettings                InWindSettingsA;                                   // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWindSettings                InWindSettingsB;                                   // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpWindIndependentSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpWindIndependentSettings");
static_assert(sizeof(SkyCreator_LerpWindIndependentSettings) == 0x00003C, "Wrong size on SkyCreator_LerpWindIndependentSettings");
static_assert(offsetof(SkyCreator_LerpWindIndependentSettings, InWindSettingsA) == 0x000000, "Member 'SkyCreator_LerpWindIndependentSettings::InWindSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWindIndependentSettings, InWindSettingsB) == 0x00001C, "Member 'SkyCreator_LerpWindIndependentSettings::InWindSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWindIndependentSettings, Alpha) == 0x000038, "Member 'SkyCreator_LerpWindIndependentSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.LerpWindSettings
// 0x003C (0x003C - 0x0000)
struct SkyCreator_LerpWindSettings final
{
public:
	struct FSkyCreatorWindSettings                InWindSettingsA;                                   // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWindSettings                InWindSettingsB;                                   // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_LerpWindSettings) == 0x000004, "Wrong alignment on SkyCreator_LerpWindSettings");
static_assert(sizeof(SkyCreator_LerpWindSettings) == 0x00003C, "Wrong size on SkyCreator_LerpWindSettings");
static_assert(offsetof(SkyCreator_LerpWindSettings, InWindSettingsA) == 0x000000, "Member 'SkyCreator_LerpWindSettings::InWindSettingsA' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWindSettings, InWindSettingsB) == 0x00001C, "Member 'SkyCreator_LerpWindSettings::InWindSettingsB' has a wrong offset!");
static_assert(offsetof(SkyCreator_LerpWindSettings, Alpha) == 0x000038, "Member 'SkyCreator_LerpWindSettings::Alpha' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.RealtimeTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct SkyCreator_RealtimeTimeOfDay final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DayCycleDuration;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_RealtimeTimeOfDay) == 0x000004, "Wrong alignment on SkyCreator_RealtimeTimeOfDay");
static_assert(sizeof(SkyCreator_RealtimeTimeOfDay) == 0x000008, "Wrong size on SkyCreator_RealtimeTimeOfDay");
static_assert(offsetof(SkyCreator_RealtimeTimeOfDay, DeltaSeconds) == 0x000000, "Member 'SkyCreator_RealtimeTimeOfDay::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(SkyCreator_RealtimeTimeOfDay, DayCycleDuration) == 0x000004, "Member 'SkyCreator_RealtimeTimeOfDay::DayCycleDuration' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetBackgroundCloudSettings
// 0x0024 (0x0024 - 0x0000)
struct SkyCreator_SetBackgroundCloudSettings final
{
public:
	struct FSkyCreatorBackgroundCloudSettings     InBackgroundCloudSettings;                         // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetBackgroundCloudSettings) == 0x000004, "Wrong alignment on SkyCreator_SetBackgroundCloudSettings");
static_assert(sizeof(SkyCreator_SetBackgroundCloudSettings) == 0x000024, "Wrong size on SkyCreator_SetBackgroundCloudSettings");
static_assert(offsetof(SkyCreator_SetBackgroundCloudSettings, InBackgroundCloudSettings) == 0x000000, "Member 'SkyCreator_SetBackgroundCloudSettings::InBackgroundCloudSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetbDaylightSavingTime
// 0x0001 (0x0001 - 0x0000)
struct SkyCreator_SetbDaylightSavingTime final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetbDaylightSavingTime) == 0x000001, "Wrong alignment on SkyCreator_SetbDaylightSavingTime");
static_assert(sizeof(SkyCreator_SetbDaylightSavingTime) == 0x000001, "Wrong size on SkyCreator_SetbDaylightSavingTime");
static_assert(offsetof(SkyCreator_SetbDaylightSavingTime, NewValue) == 0x000000, "Member 'SkyCreator_SetbDaylightSavingTime::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetCloudMapOffset
// 0x0010 (0x0010 - 0x0000)
struct SkyCreator_SetCloudMapOffset final
{
public:
	struct FVector2D                              NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetCloudMapOffset) == 0x000008, "Wrong alignment on SkyCreator_SetCloudMapOffset");
static_assert(sizeof(SkyCreator_SetCloudMapOffset) == 0x000010, "Wrong size on SkyCreator_SetCloudMapOffset");
static_assert(offsetof(SkyCreator_SetCloudMapOffset, NewValue) == 0x000000, "Member 'SkyCreator_SetCloudMapOffset::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetDay
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetDay final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetDay) == 0x000004, "Wrong alignment on SkyCreator_SetDay");
static_assert(sizeof(SkyCreator_SetDay) == 0x000004, "Wrong size on SkyCreator_SetDay");
static_assert(offsetof(SkyCreator_SetDay, NewValue) == 0x000000, "Member 'SkyCreator_SetDay::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetEditorTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetEditorTimeOfDay final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetEditorTimeOfDay) == 0x000004, "Wrong alignment on SkyCreator_SetEditorTimeOfDay");
static_assert(sizeof(SkyCreator_SetEditorTimeOfDay) == 0x000004, "Wrong size on SkyCreator_SetEditorTimeOfDay");
static_assert(offsetof(SkyCreator_SetEditorTimeOfDay, NewValue) == 0x000000, "Member 'SkyCreator_SetEditorTimeOfDay::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetEditorWeatherPreset
// 0x0008 (0x0008 - 0x0000)
struct SkyCreator_SetEditorWeatherPreset final
{
public:
	class USkyCreatorWeatherPreset*               NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetEditorWeatherPreset) == 0x000008, "Wrong alignment on SkyCreator_SetEditorWeatherPreset");
static_assert(sizeof(SkyCreator_SetEditorWeatherPreset) == 0x000008, "Wrong size on SkyCreator_SetEditorWeatherPreset");
static_assert(offsetof(SkyCreator_SetEditorWeatherPreset, NewValue) == 0x000000, "Member 'SkyCreator_SetEditorWeatherPreset::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetEditorWeatherSettings
// 0x0458 (0x0458 - 0x0000)
struct SkyCreator_SetEditorWeatherSettings final
{
public:
	struct FSkyCreatorWeatherSettings             NewValue;                                          // 0x0000(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetEditorWeatherSettings) == 0x000008, "Wrong alignment on SkyCreator_SetEditorWeatherSettings");
static_assert(sizeof(SkyCreator_SetEditorWeatherSettings) == 0x000458, "Wrong size on SkyCreator_SetEditorWeatherSettings");
static_assert(offsetof(SkyCreator_SetEditorWeatherSettings, NewValue) == 0x000000, "Member 'SkyCreator_SetEditorWeatherSettings::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetExponentialHeightFogSettings
// 0x0064 (0x0064 - 0x0000)
struct SkyCreator_SetExponentialHeightFogSettings final
{
public:
	struct FSkyCreatorExponentialHeightFogSettings InExponentialHeightFogSettings;                    // 0x0000(0x0064)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetExponentialHeightFogSettings) == 0x000004, "Wrong alignment on SkyCreator_SetExponentialHeightFogSettings");
static_assert(sizeof(SkyCreator_SetExponentialHeightFogSettings) == 0x000064, "Wrong size on SkyCreator_SetExponentialHeightFogSettings");
static_assert(offsetof(SkyCreator_SetExponentialHeightFogSettings, InExponentialHeightFogSettings) == 0x000000, "Member 'SkyCreator_SetExponentialHeightFogSettings::InExponentialHeightFogSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetLatitude
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetLatitude final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetLatitude) == 0x000004, "Wrong alignment on SkyCreator_SetLatitude");
static_assert(sizeof(SkyCreator_SetLatitude) == 0x000004, "Wrong size on SkyCreator_SetLatitude");
static_assert(offsetof(SkyCreator_SetLatitude, NewValue) == 0x000000, "Member 'SkyCreator_SetLatitude::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetLayerBottomAltitude
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetLayerBottomAltitude final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetLayerBottomAltitude) == 0x000004, "Wrong alignment on SkyCreator_SetLayerBottomAltitude");
static_assert(sizeof(SkyCreator_SetLayerBottomAltitude) == 0x000004, "Wrong size on SkyCreator_SetLayerBottomAltitude");
static_assert(offsetof(SkyCreator_SetLayerBottomAltitude, NewValue) == 0x000000, "Member 'SkyCreator_SetLayerBottomAltitude::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetLayerHeight
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetLayerHeight final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetLayerHeight) == 0x000004, "Wrong alignment on SkyCreator_SetLayerHeight");
static_assert(sizeof(SkyCreator_SetLayerHeight) == 0x000004, "Wrong size on SkyCreator_SetLayerHeight");
static_assert(offsetof(SkyCreator_SetLayerHeight, NewValue) == 0x000000, "Member 'SkyCreator_SetLayerHeight::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetLongitude
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetLongitude final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetLongitude) == 0x000004, "Wrong alignment on SkyCreator_SetLongitude");
static_assert(sizeof(SkyCreator_SetLongitude) == 0x000004, "Wrong size on SkyCreator_SetLongitude");
static_assert(offsetof(SkyCreator_SetLongitude, NewValue) == 0x000000, "Member 'SkyCreator_SetLongitude::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMonth
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMonth final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMonth) == 0x000004, "Wrong alignment on SkyCreator_SetMonth");
static_assert(sizeof(SkyCreator_SetMonth) == 0x000004, "Wrong size on SkyCreator_SetMonth");
static_assert(offsetof(SkyCreator_SetMonth, NewValue) == 0x000000, "Member 'SkyCreator_SetMonth::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonAtmosphereDiskColorScale
// 0x0010 (0x0010 - 0x0000)
struct SkyCreator_SetMoonAtmosphereDiskColorScale final
{
public:
	struct FLinearColor                           NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonAtmosphereDiskColorScale) == 0x000004, "Wrong alignment on SkyCreator_SetMoonAtmosphereDiskColorScale");
static_assert(sizeof(SkyCreator_SetMoonAtmosphereDiskColorScale) == 0x000010, "Wrong size on SkyCreator_SetMoonAtmosphereDiskColorScale");
static_assert(offsetof(SkyCreator_SetMoonAtmosphereDiskColorScale, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonAtmosphereDiskColorScale::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonAzimuth
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonAzimuth final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonAzimuth) == 0x000004, "Wrong alignment on SkyCreator_SetMoonAzimuth");
static_assert(sizeof(SkyCreator_SetMoonAzimuth) == 0x000004, "Wrong size on SkyCreator_SetMoonAzimuth");
static_assert(offsetof(SkyCreator_SetMoonAzimuth, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonAzimuth::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonDiskSize
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonDiskSize final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonDiskSize) == 0x000004, "Wrong alignment on SkyCreator_SetMoonDiskSize");
static_assert(sizeof(SkyCreator_SetMoonDiskSize) == 0x000004, "Wrong size on SkyCreator_SetMoonDiskSize");
static_assert(offsetof(SkyCreator_SetMoonDiskSize, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonDiskSize::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonElevation
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonElevation final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonElevation) == 0x000004, "Wrong alignment on SkyCreator_SetMoonElevation");
static_assert(sizeof(SkyCreator_SetMoonElevation) == 0x000004, "Wrong size on SkyCreator_SetMoonElevation");
static_assert(offsetof(SkyCreator_SetMoonElevation, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonElevation::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonIntensity
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonIntensity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonIntensity) == 0x000004, "Wrong alignment on SkyCreator_SetMoonIntensity");
static_assert(sizeof(SkyCreator_SetMoonIntensity) == 0x000004, "Wrong size on SkyCreator_SetMoonIntensity");
static_assert(offsetof(SkyCreator_SetMoonIntensity, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonIntensity::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonLightSettings
// 0x0048 (0x0048 - 0x0000)
struct SkyCreator_SetMoonLightSettings final
{
public:
	struct FSkyCreatorMoonLightSettings           InMoonLightSettings;                               // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonLightSettings) == 0x000004, "Wrong alignment on SkyCreator_SetMoonLightSettings");
static_assert(sizeof(SkyCreator_SetMoonLightSettings) == 0x000048, "Wrong size on SkyCreator_SetMoonLightSettings");
static_assert(offsetof(SkyCreator_SetMoonLightSettings, InMoonLightSettings) == 0x000000, "Member 'SkyCreator_SetMoonLightSettings::InMoonLightSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonPhase
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonPhase final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonPhase) == 0x000004, "Wrong alignment on SkyCreator_SetMoonPhase");
static_assert(sizeof(SkyCreator_SetMoonPhase) == 0x000004, "Wrong size on SkyCreator_SetMoonPhase");
static_assert(offsetof(SkyCreator_SetMoonPhase, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonPhase::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonriseTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonriseTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonriseTime) == 0x000004, "Wrong alignment on SkyCreator_SetMoonriseTime");
static_assert(sizeof(SkyCreator_SetMoonriseTime) == 0x000004, "Wrong size on SkyCreator_SetMoonriseTime");
static_assert(offsetof(SkyCreator_SetMoonriseTime, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonriseTime::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonRotation
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonRotation final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonRotation) == 0x000004, "Wrong alignment on SkyCreator_SetMoonRotation");
static_assert(sizeof(SkyCreator_SetMoonRotation) == 0x000004, "Wrong size on SkyCreator_SetMoonRotation");
static_assert(offsetof(SkyCreator_SetMoonRotation, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonRotation::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonsetTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetMoonsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonsetTime) == 0x000004, "Wrong alignment on SkyCreator_SetMoonsetTime");
static_assert(sizeof(SkyCreator_SetMoonsetTime) == 0x000004, "Wrong size on SkyCreator_SetMoonsetTime");
static_assert(offsetof(SkyCreator_SetMoonsetTime, NewValue) == 0x000000, "Member 'SkyCreator_SetMoonsetTime::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetMoonSimplePositionSettings
// 0x0010 (0x0010 - 0x0000)
struct SkyCreator_SetMoonSimplePositionSettings final
{
public:
	float                                         InMoonriseTime;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoonsetTime;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoonElevation;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoonAzimuth;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetMoonSimplePositionSettings) == 0x000004, "Wrong alignment on SkyCreator_SetMoonSimplePositionSettings");
static_assert(sizeof(SkyCreator_SetMoonSimplePositionSettings) == 0x000010, "Wrong size on SkyCreator_SetMoonSimplePositionSettings");
static_assert(offsetof(SkyCreator_SetMoonSimplePositionSettings, InMoonriseTime) == 0x000000, "Member 'SkyCreator_SetMoonSimplePositionSettings::InMoonriseTime' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetMoonSimplePositionSettings, InMoonsetTime) == 0x000004, "Member 'SkyCreator_SetMoonSimplePositionSettings::InMoonsetTime' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetMoonSimplePositionSettings, InMoonElevation) == 0x000008, "Member 'SkyCreator_SetMoonSimplePositionSettings::InMoonElevation' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetMoonSimplePositionSettings, InMoonAzimuth) == 0x00000C, "Member 'SkyCreator_SetMoonSimplePositionSettings::InMoonAzimuth' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetPostProcessSettings
// 0x000C (0x000C - 0x0000)
struct SkyCreator_SetPostProcessSettings final
{
public:
	struct FSkyCreatorPostProcessSettings         InPostProcessSettings;                             // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetPostProcessSettings) == 0x000004, "Wrong alignment on SkyCreator_SetPostProcessSettings");
static_assert(sizeof(SkyCreator_SetPostProcessSettings) == 0x00000C, "Wrong size on SkyCreator_SetPostProcessSettings");
static_assert(offsetof(SkyCreator_SetPostProcessSettings, InPostProcessSettings) == 0x000000, "Member 'SkyCreator_SetPostProcessSettings::InPostProcessSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetRealPositionSettings
// 0x001C (0x001C - 0x0000)
struct SkyCreator_SetRealPositionSettings final
{
public:
	float                                         InLatitude;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLongitude;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeZone;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbDaylightSavingTime;                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1372[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InYear;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetRealPositionSettings) == 0x000004, "Wrong alignment on SkyCreator_SetRealPositionSettings");
static_assert(sizeof(SkyCreator_SetRealPositionSettings) == 0x00001C, "Wrong size on SkyCreator_SetRealPositionSettings");
static_assert(offsetof(SkyCreator_SetRealPositionSettings, InLatitude) == 0x000000, "Member 'SkyCreator_SetRealPositionSettings::InLatitude' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetRealPositionSettings, InLongitude) == 0x000004, "Member 'SkyCreator_SetRealPositionSettings::InLongitude' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetRealPositionSettings, InTimeZone) == 0x000008, "Member 'SkyCreator_SetRealPositionSettings::InTimeZone' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetRealPositionSettings, InbDaylightSavingTime) == 0x00000C, "Member 'SkyCreator_SetRealPositionSettings::InbDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetRealPositionSettings, InYear) == 0x000010, "Member 'SkyCreator_SetRealPositionSettings::InYear' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetRealPositionSettings, InMonth) == 0x000014, "Member 'SkyCreator_SetRealPositionSettings::InMonth' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetRealPositionSettings, InDay) == 0x000018, "Member 'SkyCreator_SetRealPositionSettings::InDay' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSkyAtmosphereSettings
// 0x0080 (0x0080 - 0x0000)
struct SkyCreator_SetSkyAtmosphereSettings final
{
public:
	struct FSkyCreatorSkyAtmosphereSettings       InSkyAtmosphereSettings;                           // 0x0000(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSkyAtmosphereSettings) == 0x000004, "Wrong alignment on SkyCreator_SetSkyAtmosphereSettings");
static_assert(sizeof(SkyCreator_SetSkyAtmosphereSettings) == 0x000080, "Wrong size on SkyCreator_SetSkyAtmosphereSettings");
static_assert(offsetof(SkyCreator_SetSkyAtmosphereSettings, InSkyAtmosphereSettings) == 0x000000, "Member 'SkyCreator_SetSkyAtmosphereSettings::InSkyAtmosphereSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSkyLightSettings
// 0x002C (0x002C - 0x0000)
struct SkyCreator_SetSkyLightSettings final
{
public:
	struct FSkyCreatorSkyLightSettings            InSkyLightSettings;                                // 0x0000(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSkyLightSettings) == 0x000004, "Wrong alignment on SkyCreator_SetSkyLightSettings");
static_assert(sizeof(SkyCreator_SetSkyLightSettings) == 0x00002C, "Wrong size on SkyCreator_SetSkyLightSettings");
static_assert(offsetof(SkyCreator_SetSkyLightSettings, InSkyLightSettings) == 0x000000, "Member 'SkyCreator_SetSkyLightSettings::InSkyLightSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetStarMapAdditionalRotation
// 0x0018 (0x0018 - 0x0000)
struct SkyCreator_SetStarMapAdditionalRotation final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetStarMapAdditionalRotation) == 0x000008, "Wrong alignment on SkyCreator_SetStarMapAdditionalRotation");
static_assert(sizeof(SkyCreator_SetStarMapAdditionalRotation) == 0x000018, "Wrong size on SkyCreator_SetStarMapAdditionalRotation");
static_assert(offsetof(SkyCreator_SetStarMapAdditionalRotation, NewValue) == 0x000000, "Member 'SkyCreator_SetStarMapAdditionalRotation::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetStarMapSettings
// 0x0048 (0x0048 - 0x0000)
struct SkyCreator_SetStarMapSettings final
{
public:
	struct FSkyCreatorStarMapSettings             InStarMapSettings;                                 // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetStarMapSettings) == 0x000004, "Wrong alignment on SkyCreator_SetStarMapSettings");
static_assert(sizeof(SkyCreator_SetStarMapSettings) == 0x000048, "Wrong size on SkyCreator_SetStarMapSettings");
static_assert(offsetof(SkyCreator_SetStarMapSettings, InStarMapSettings) == 0x000000, "Member 'SkyCreator_SetStarMapSettings::InStarMapSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunAtmosphereDiskColorScale
// 0x0010 (0x0010 - 0x0000)
struct SkyCreator_SetSunAtmosphereDiskColorScale final
{
public:
	struct FLinearColor                           NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunAtmosphereDiskColorScale) == 0x000004, "Wrong alignment on SkyCreator_SetSunAtmosphereDiskColorScale");
static_assert(sizeof(SkyCreator_SetSunAtmosphereDiskColorScale) == 0x000010, "Wrong size on SkyCreator_SetSunAtmosphereDiskColorScale");
static_assert(offsetof(SkyCreator_SetSunAtmosphereDiskColorScale, NewValue) == 0x000000, "Member 'SkyCreator_SetSunAtmosphereDiskColorScale::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunAzimuth
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunAzimuth final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunAzimuth) == 0x000004, "Wrong alignment on SkyCreator_SetSunAzimuth");
static_assert(sizeof(SkyCreator_SetSunAzimuth) == 0x000004, "Wrong size on SkyCreator_SetSunAzimuth");
static_assert(offsetof(SkyCreator_SetSunAzimuth, NewValue) == 0x000000, "Member 'SkyCreator_SetSunAzimuth::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunDawnOffsetTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunDawnOffsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunDawnOffsetTime) == 0x000004, "Wrong alignment on SkyCreator_SetSunDawnOffsetTime");
static_assert(sizeof(SkyCreator_SetSunDawnOffsetTime) == 0x000004, "Wrong size on SkyCreator_SetSunDawnOffsetTime");
static_assert(offsetof(SkyCreator_SetSunDawnOffsetTime, NewValue) == 0x000000, "Member 'SkyCreator_SetSunDawnOffsetTime::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunDiskSize
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunDiskSize final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunDiskSize) == 0x000004, "Wrong alignment on SkyCreator_SetSunDiskSize");
static_assert(sizeof(SkyCreator_SetSunDiskSize) == 0x000004, "Wrong size on SkyCreator_SetSunDiskSize");
static_assert(offsetof(SkyCreator_SetSunDiskSize, NewValue) == 0x000000, "Member 'SkyCreator_SetSunDiskSize::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunDuskOffsetTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunDuskOffsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunDuskOffsetTime) == 0x000004, "Wrong alignment on SkyCreator_SetSunDuskOffsetTime");
static_assert(sizeof(SkyCreator_SetSunDuskOffsetTime) == 0x000004, "Wrong size on SkyCreator_SetSunDuskOffsetTime");
static_assert(offsetof(SkyCreator_SetSunDuskOffsetTime, NewValue) == 0x000000, "Member 'SkyCreator_SetSunDuskOffsetTime::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunElevation
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunElevation final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunElevation) == 0x000004, "Wrong alignment on SkyCreator_SetSunElevation");
static_assert(sizeof(SkyCreator_SetSunElevation) == 0x000004, "Wrong size on SkyCreator_SetSunElevation");
static_assert(offsetof(SkyCreator_SetSunElevation, NewValue) == 0x000000, "Member 'SkyCreator_SetSunElevation::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunIntensity
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunIntensity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunIntensity) == 0x000004, "Wrong alignment on SkyCreator_SetSunIntensity");
static_assert(sizeof(SkyCreator_SetSunIntensity) == 0x000004, "Wrong size on SkyCreator_SetSunIntensity");
static_assert(offsetof(SkyCreator_SetSunIntensity, NewValue) == 0x000000, "Member 'SkyCreator_SetSunIntensity::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunLightSettings
// 0x0048 (0x0048 - 0x0000)
struct SkyCreator_SetSunLightSettings final
{
public:
	struct FSkyCreatorSunLightSettings            InSunLightSettings;                                // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunLightSettings) == 0x000004, "Wrong alignment on SkyCreator_SetSunLightSettings");
static_assert(sizeof(SkyCreator_SetSunLightSettings) == 0x000048, "Wrong size on SkyCreator_SetSunLightSettings");
static_assert(offsetof(SkyCreator_SetSunLightSettings, InSunLightSettings) == 0x000000, "Member 'SkyCreator_SetSunLightSettings::InSunLightSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunMinAngleAtDawnDusk
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunMinAngleAtDawnDusk final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunMinAngleAtDawnDusk) == 0x000004, "Wrong alignment on SkyCreator_SetSunMinAngleAtDawnDusk");
static_assert(sizeof(SkyCreator_SetSunMinAngleAtDawnDusk) == 0x000004, "Wrong size on SkyCreator_SetSunMinAngleAtDawnDusk");
static_assert(offsetof(SkyCreator_SetSunMinAngleAtDawnDusk, NewValue) == 0x000000, "Member 'SkyCreator_SetSunMinAngleAtDawnDusk::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunriseTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunriseTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunriseTime) == 0x000004, "Wrong alignment on SkyCreator_SetSunriseTime");
static_assert(sizeof(SkyCreator_SetSunriseTime) == 0x000004, "Wrong size on SkyCreator_SetSunriseTime");
static_assert(offsetof(SkyCreator_SetSunriseTime, NewValue) == 0x000000, "Member 'SkyCreator_SetSunriseTime::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunsetTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetSunsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunsetTime) == 0x000004, "Wrong alignment on SkyCreator_SetSunsetTime");
static_assert(sizeof(SkyCreator_SetSunsetTime) == 0x000004, "Wrong size on SkyCreator_SetSunsetTime");
static_assert(offsetof(SkyCreator_SetSunsetTime, NewValue) == 0x000000, "Member 'SkyCreator_SetSunsetTime::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetSunSimplePositionSettings
// 0x0010 (0x0010 - 0x0000)
struct SkyCreator_SetSunSimplePositionSettings final
{
public:
	float                                         InSunriseTime;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunsetTime;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunElevation;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunAzimuth;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetSunSimplePositionSettings) == 0x000004, "Wrong alignment on SkyCreator_SetSunSimplePositionSettings");
static_assert(sizeof(SkyCreator_SetSunSimplePositionSettings) == 0x000010, "Wrong size on SkyCreator_SetSunSimplePositionSettings");
static_assert(offsetof(SkyCreator_SetSunSimplePositionSettings, InSunriseTime) == 0x000000, "Member 'SkyCreator_SetSunSimplePositionSettings::InSunriseTime' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetSunSimplePositionSettings, InSunsetTime) == 0x000004, "Member 'SkyCreator_SetSunSimplePositionSettings::InSunsetTime' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetSunSimplePositionSettings, InSunElevation) == 0x000008, "Member 'SkyCreator_SetSunSimplePositionSettings::InSunElevation' has a wrong offset!");
static_assert(offsetof(SkyCreator_SetSunSimplePositionSettings, InSunAzimuth) == 0x00000C, "Member 'SkyCreator_SetSunSimplePositionSettings::InSunAzimuth' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetTime) == 0x000004, "Wrong alignment on SkyCreator_SetTime");
static_assert(sizeof(SkyCreator_SetTime) == 0x000004, "Wrong size on SkyCreator_SetTime");
static_assert(offsetof(SkyCreator_SetTime, InTime) == 0x000000, "Member 'SkyCreator_SetTime::InTime' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetTimeZone
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetTimeZone final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetTimeZone) == 0x000004, "Wrong alignment on SkyCreator_SetTimeZone");
static_assert(sizeof(SkyCreator_SetTimeZone) == 0x000004, "Wrong size on SkyCreator_SetTimeZone");
static_assert(offsetof(SkyCreator_SetTimeZone, NewValue) == 0x000000, "Member 'SkyCreator_SetTimeZone::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetVolumetricCloudSettings
// 0x00A8 (0x00A8 - 0x0000)
struct SkyCreator_SetVolumetricCloudSettings final
{
public:
	struct FSkyCreatorVolumetricCloudSettings     InVolumetricCloudSettings;                         // 0x0000(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetVolumetricCloudSettings) == 0x000004, "Wrong alignment on SkyCreator_SetVolumetricCloudSettings");
static_assert(sizeof(SkyCreator_SetVolumetricCloudSettings) == 0x0000A8, "Wrong size on SkyCreator_SetVolumetricCloudSettings");
static_assert(offsetof(SkyCreator_SetVolumetricCloudSettings, InVolumetricCloudSettings) == 0x000000, "Member 'SkyCreator_SetVolumetricCloudSettings::InVolumetricCloudSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetWeatherFXSettings
// 0x0110 (0x0110 - 0x0000)
struct SkyCreator_SetWeatherFXSettings final
{
public:
	struct FSkyCreatorWeatherFXSettings           InWeatherFXSettings;                               // 0x0000(0x0110)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetWeatherFXSettings) == 0x000008, "Wrong alignment on SkyCreator_SetWeatherFXSettings");
static_assert(sizeof(SkyCreator_SetWeatherFXSettings) == 0x000110, "Wrong size on SkyCreator_SetWeatherFXSettings");
static_assert(offsetof(SkyCreator_SetWeatherFXSettings, InWeatherFXSettings) == 0x000000, "Member 'SkyCreator_SetWeatherFXSettings::InWeatherFXSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetWeatherMaterialFXSettings
// 0x0068 (0x0068 - 0x0000)
struct SkyCreator_SetWeatherMaterialFXSettings final
{
public:
	struct FSkyCreatorWeatherMaterialFXSettings   InWeatherMaterialFXSettings;                       // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetWeatherMaterialFXSettings) == 0x000004, "Wrong alignment on SkyCreator_SetWeatherMaterialFXSettings");
static_assert(sizeof(SkyCreator_SetWeatherMaterialFXSettings) == 0x000068, "Wrong size on SkyCreator_SetWeatherMaterialFXSettings");
static_assert(offsetof(SkyCreator_SetWeatherMaterialFXSettings, InWeatherMaterialFXSettings) == 0x000000, "Member 'SkyCreator_SetWeatherMaterialFXSettings::InWeatherMaterialFXSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetWeatherSettings
// 0x0458 (0x0458 - 0x0000)
struct SkyCreator_SetWeatherSettings final
{
public:
	struct FSkyCreatorWeatherSettings             InWeatherSettings;                                 // 0x0000(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetWeatherSettings) == 0x000008, "Wrong alignment on SkyCreator_SetWeatherSettings");
static_assert(sizeof(SkyCreator_SetWeatherSettings) == 0x000458, "Wrong size on SkyCreator_SetWeatherSettings");
static_assert(offsetof(SkyCreator_SetWeatherSettings, InWeatherSettings) == 0x000000, "Member 'SkyCreator_SetWeatherSettings::InWeatherSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetWindIndependentSettings
// 0x001C (0x001C - 0x0000)
struct SkyCreator_SetWindIndependentSettings final
{
public:
	struct FSkyCreatorWindSettings                InWindSettings;                                    // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetWindIndependentSettings) == 0x000004, "Wrong alignment on SkyCreator_SetWindIndependentSettings");
static_assert(sizeof(SkyCreator_SetWindIndependentSettings) == 0x00001C, "Wrong size on SkyCreator_SetWindIndependentSettings");
static_assert(offsetof(SkyCreator_SetWindIndependentSettings, InWindSettings) == 0x000000, "Member 'SkyCreator_SetWindIndependentSettings::InWindSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetWindSettings
// 0x001C (0x001C - 0x0000)
struct SkyCreator_SetWindSettings final
{
public:
	struct FSkyCreatorWindSettings                InWindSettings;                                    // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetWindSettings) == 0x000004, "Wrong alignment on SkyCreator_SetWindSettings");
static_assert(sizeof(SkyCreator_SetWindSettings) == 0x00001C, "Wrong size on SkyCreator_SetWindSettings");
static_assert(offsetof(SkyCreator_SetWindSettings, InWindSettings) == 0x000000, "Member 'SkyCreator_SetWindSettings::InWindSettings' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SetYear
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_SetYear final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SetYear) == 0x000004, "Wrong alignment on SkyCreator_SetYear");
static_assert(sizeof(SkyCreator_SetYear) == 0x000004, "Wrong size on SkyCreator_SetYear");
static_assert(offsetof(SkyCreator_SetYear, NewValue) == 0x000000, "Member 'SkyCreator_SetYear::NewValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.SpawnLightningStrike
// 0x0018 (0x0018 - 0x0000)
struct SkyCreator_SpawnLightningStrike final
{
public:
	struct FVector                                LightningPosition;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_SpawnLightningStrike) == 0x000008, "Wrong alignment on SkyCreator_SpawnLightningStrike");
static_assert(sizeof(SkyCreator_SpawnLightningStrike) == 0x000018, "Wrong size on SkyCreator_SpawnLightningStrike");
static_assert(offsetof(SkyCreator_SpawnLightningStrike, LightningPosition) == 0x000000, "Member 'SkyCreator_SpawnLightningStrike::LightningPosition' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetBackgroundCloudSettings
// 0x0024 (0x0024 - 0x0000)
struct SkyCreator_GetBackgroundCloudSettings final
{
public:
	struct FSkyCreatorBackgroundCloudSettings     ReturnValue;                                       // 0x0000(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetBackgroundCloudSettings) == 0x000004, "Wrong alignment on SkyCreator_GetBackgroundCloudSettings");
static_assert(sizeof(SkyCreator_GetBackgroundCloudSettings) == 0x000024, "Wrong size on SkyCreator_GetBackgroundCloudSettings");
static_assert(offsetof(SkyCreator_GetBackgroundCloudSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetBackgroundCloudSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetExponentialHeightFogSettings
// 0x0064 (0x0064 - 0x0000)
struct SkyCreator_GetExponentialHeightFogSettings final
{
public:
	struct FSkyCreatorExponentialHeightFogSettings ReturnValue;                                       // 0x0000(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetExponentialHeightFogSettings) == 0x000004, "Wrong alignment on SkyCreator_GetExponentialHeightFogSettings");
static_assert(sizeof(SkyCreator_GetExponentialHeightFogSettings) == 0x000064, "Wrong size on SkyCreator_GetExponentialHeightFogSettings");
static_assert(offsetof(SkyCreator_GetExponentialHeightFogSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetExponentialHeightFogSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetMoonLightSettings
// 0x0048 (0x0048 - 0x0000)
struct SkyCreator_GetMoonLightSettings final
{
public:
	struct FSkyCreatorMoonLightSettings           ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetMoonLightSettings) == 0x000004, "Wrong alignment on SkyCreator_GetMoonLightSettings");
static_assert(sizeof(SkyCreator_GetMoonLightSettings) == 0x000048, "Wrong size on SkyCreator_GetMoonLightSettings");
static_assert(offsetof(SkyCreator_GetMoonLightSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetMoonLightSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetMoonPhase
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_GetMoonPhase final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetMoonPhase) == 0x000004, "Wrong alignment on SkyCreator_GetMoonPhase");
static_assert(sizeof(SkyCreator_GetMoonPhase) == 0x000004, "Wrong size on SkyCreator_GetMoonPhase");
static_assert(offsetof(SkyCreator_GetMoonPhase, ReturnValue) == 0x000000, "Member 'SkyCreator_GetMoonPhase::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetPostProcessSettings
// 0x000C (0x000C - 0x0000)
struct SkyCreator_GetPostProcessSettings final
{
public:
	struct FSkyCreatorPostProcessSettings         ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetPostProcessSettings) == 0x000004, "Wrong alignment on SkyCreator_GetPostProcessSettings");
static_assert(sizeof(SkyCreator_GetPostProcessSettings) == 0x00000C, "Wrong size on SkyCreator_GetPostProcessSettings");
static_assert(offsetof(SkyCreator_GetPostProcessSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetPostProcessSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetSkyAtmosphereSettings
// 0x0080 (0x0080 - 0x0000)
struct SkyCreator_GetSkyAtmosphereSettings final
{
public:
	struct FSkyCreatorSkyAtmosphereSettings       ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetSkyAtmosphereSettings) == 0x000004, "Wrong alignment on SkyCreator_GetSkyAtmosphereSettings");
static_assert(sizeof(SkyCreator_GetSkyAtmosphereSettings) == 0x000080, "Wrong size on SkyCreator_GetSkyAtmosphereSettings");
static_assert(offsetof(SkyCreator_GetSkyAtmosphereSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetSkyAtmosphereSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetSkyLightSettings
// 0x002C (0x002C - 0x0000)
struct SkyCreator_GetSkyLightSettings final
{
public:
	struct FSkyCreatorSkyLightSettings            ReturnValue;                                       // 0x0000(0x002C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetSkyLightSettings) == 0x000004, "Wrong alignment on SkyCreator_GetSkyLightSettings");
static_assert(sizeof(SkyCreator_GetSkyLightSettings) == 0x00002C, "Wrong size on SkyCreator_GetSkyLightSettings");
static_assert(offsetof(SkyCreator_GetSkyLightSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetSkyLightSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetStarMapRotation
// 0x0018 (0x0018 - 0x0000)
struct SkyCreator_GetStarMapRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetStarMapRotation) == 0x000008, "Wrong alignment on SkyCreator_GetStarMapRotation");
static_assert(sizeof(SkyCreator_GetStarMapRotation) == 0x000018, "Wrong size on SkyCreator_GetStarMapRotation");
static_assert(offsetof(SkyCreator_GetStarMapRotation, ReturnValue) == 0x000000, "Member 'SkyCreator_GetStarMapRotation::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetStarMapSettings
// 0x0048 (0x0048 - 0x0000)
struct SkyCreator_GetStarMapSettings final
{
public:
	struct FSkyCreatorStarMapSettings             ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetStarMapSettings) == 0x000004, "Wrong alignment on SkyCreator_GetStarMapSettings");
static_assert(sizeof(SkyCreator_GetStarMapSettings) == 0x000048, "Wrong size on SkyCreator_GetStarMapSettings");
static_assert(offsetof(SkyCreator_GetStarMapSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetStarMapSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetSunLightSettings
// 0x0048 (0x0048 - 0x0000)
struct SkyCreator_GetSunLightSettings final
{
public:
	struct FSkyCreatorSunLightSettings            ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetSunLightSettings) == 0x000004, "Wrong alignment on SkyCreator_GetSunLightSettings");
static_assert(sizeof(SkyCreator_GetSunLightSettings) == 0x000048, "Wrong size on SkyCreator_GetSunLightSettings");
static_assert(offsetof(SkyCreator_GetSunLightSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetSunLightSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetTime
// 0x0004 (0x0004 - 0x0000)
struct SkyCreator_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetTime) == 0x000004, "Wrong alignment on SkyCreator_GetTime");
static_assert(sizeof(SkyCreator_GetTime) == 0x000004, "Wrong size on SkyCreator_GetTime");
static_assert(offsetof(SkyCreator_GetTime, ReturnValue) == 0x000000, "Member 'SkyCreator_GetTime::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetVolumetricCloudSettings
// 0x00A8 (0x00A8 - 0x0000)
struct SkyCreator_GetVolumetricCloudSettings final
{
public:
	struct FSkyCreatorVolumetricCloudSettings     ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetVolumetricCloudSettings) == 0x000004, "Wrong alignment on SkyCreator_GetVolumetricCloudSettings");
static_assert(sizeof(SkyCreator_GetVolumetricCloudSettings) == 0x0000A8, "Wrong size on SkyCreator_GetVolumetricCloudSettings");
static_assert(offsetof(SkyCreator_GetVolumetricCloudSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetVolumetricCloudSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetWeatherFXSettings
// 0x0110 (0x0110 - 0x0000)
struct SkyCreator_GetWeatherFXSettings final
{
public:
	struct FSkyCreatorWeatherFXSettings           ReturnValue;                                       // 0x0000(0x0110)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetWeatherFXSettings) == 0x000008, "Wrong alignment on SkyCreator_GetWeatherFXSettings");
static_assert(sizeof(SkyCreator_GetWeatherFXSettings) == 0x000110, "Wrong size on SkyCreator_GetWeatherFXSettings");
static_assert(offsetof(SkyCreator_GetWeatherFXSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetWeatherFXSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetWeatherMaterialFXSettings
// 0x0068 (0x0068 - 0x0000)
struct SkyCreator_GetWeatherMaterialFXSettings final
{
public:
	struct FSkyCreatorWeatherMaterialFXSettings   ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetWeatherMaterialFXSettings) == 0x000004, "Wrong alignment on SkyCreator_GetWeatherMaterialFXSettings");
static_assert(sizeof(SkyCreator_GetWeatherMaterialFXSettings) == 0x000068, "Wrong size on SkyCreator_GetWeatherMaterialFXSettings");
static_assert(offsetof(SkyCreator_GetWeatherMaterialFXSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetWeatherMaterialFXSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetWeatherSettings
// 0x0458 (0x0458 - 0x0000)
struct SkyCreator_GetWeatherSettings final
{
public:
	struct FSkyCreatorWeatherSettings             ReturnValue;                                       // 0x0000(0x0458)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetWeatherSettings) == 0x000008, "Wrong alignment on SkyCreator_GetWeatherSettings");
static_assert(sizeof(SkyCreator_GetWeatherSettings) == 0x000458, "Wrong size on SkyCreator_GetWeatherSettings");
static_assert(offsetof(SkyCreator_GetWeatherSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetWeatherSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreator.GetWindSettings
// 0x001C (0x001C - 0x0000)
struct SkyCreator_GetWindSettings final
{
public:
	struct FSkyCreatorWindSettings                ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreator_GetWindSettings) == 0x000004, "Wrong alignment on SkyCreator_GetWindSettings");
static_assert(sizeof(SkyCreator_GetWindSettings) == 0x00001C, "Wrong size on SkyCreator_GetWindSettings");
static_assert(offsetof(SkyCreator_GetWindSettings, ReturnValue) == 0x000000, "Member 'SkyCreator_GetWindSettings::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.CentimetersToKilometers
// 0x0008 (0x0008 - 0x0000)
struct SkyCreatorFunctionLibrary_CentimetersToKilometers final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_CentimetersToKilometers) == 0x000004, "Wrong alignment on SkyCreatorFunctionLibrary_CentimetersToKilometers");
static_assert(sizeof(SkyCreatorFunctionLibrary_CentimetersToKilometers) == 0x000008, "Wrong size on SkyCreatorFunctionLibrary_CentimetersToKilometers");
static_assert(offsetof(SkyCreatorFunctionLibrary_CentimetersToKilometers, Value) == 0x000000, "Member 'SkyCreatorFunctionLibrary_CentimetersToKilometers::Value' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CentimetersToKilometers, ReturnValue) == 0x000004, "Member 'SkyCreatorFunctionLibrary_CentimetersToKilometers::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.CheckCloudDensityAtPosition
// 0x0040 (0x0040 - 0x0000)
struct SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1373[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition");
static_assert(sizeof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition) == 0x000040, "Wrong size on SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition");
static_assert(offsetof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, WorldContextObject) == 0x000000, "Member 'SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, Position) == 0x000008, "Member 'SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::Position' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, ParameterCollection) == 0x000020, "Member 'SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::ParameterCollection' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, Material) == 0x000028, "Member 'SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::Material' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, RenderTarget) == 0x000030, "Member 'SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::RenderTarget' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, ReturnValue) == 0x000038, "Member 'SkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.ConvertRenderTargetToTexture2D
// 0x0010 (0x0010 - 0x0000)
struct SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D");
static_assert(sizeof(SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D) == 0x000010, "Wrong size on SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D");
static_assert(offsetof(SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D, RenderTarget) == 0x000000, "Member 'SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D::RenderTarget' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D, Texture) == 0x000008, "Member 'SkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D::Texture' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.CreateAndAssignMID
// 0x0018 (0x0018 - 0x0000)
struct SkyCreatorFunctionLibrary_CreateAndAssignMID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     InMaterial;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               InMID;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_CreateAndAssignMID) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_CreateAndAssignMID");
static_assert(sizeof(SkyCreatorFunctionLibrary_CreateAndAssignMID) == 0x000018, "Wrong size on SkyCreatorFunctionLibrary_CreateAndAssignMID");
static_assert(offsetof(SkyCreatorFunctionLibrary_CreateAndAssignMID, WorldContextObject) == 0x000000, "Member 'SkyCreatorFunctionLibrary_CreateAndAssignMID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CreateAndAssignMID, InMaterial) == 0x000008, "Member 'SkyCreatorFunctionLibrary_CreateAndAssignMID::InMaterial' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_CreateAndAssignMID, InMID) == 0x000010, "Member 'SkyCreatorFunctionLibrary_CreateAndAssignMID::InMID' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.ElevationRefraction
// 0x0010 (0x0010 - 0x0000)
struct SkyCreatorFunctionLibrary_ElevationRefraction final
{
public:
	double                                        F;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_ElevationRefraction) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_ElevationRefraction");
static_assert(sizeof(SkyCreatorFunctionLibrary_ElevationRefraction) == 0x000010, "Wrong size on SkyCreatorFunctionLibrary_ElevationRefraction");
static_assert(offsetof(SkyCreatorFunctionLibrary_ElevationRefraction, F) == 0x000000, "Member 'SkyCreatorFunctionLibrary_ElevationRefraction::F' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_ElevationRefraction, ReturnValue) == 0x000008, "Member 'SkyCreatorFunctionLibrary_ElevationRefraction::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.FindLightningPosition
// 0x0078 (0x0078 - 0x0000)
struct SkyCreatorFunctionLibrary_FindLightningPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSampleCloudDensity;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1374[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Samples;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityThreshold;                                  // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1375[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPosition;                                       // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1376[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkyCreatorFunctionLibrary_FindLightningPosition) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_FindLightningPosition");
static_assert(sizeof(SkyCreatorFunctionLibrary_FindLightningPosition) == 0x000078, "Wrong size on SkyCreatorFunctionLibrary_FindLightningPosition");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, WorldContextObject) == 0x000000, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, bSampleCloudDensity) == 0x000008, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::bSampleCloudDensity' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, Samples) == 0x00000C, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::Samples' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, ParameterCollection) == 0x000010, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::ParameterCollection' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, Material) == 0x000018, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::Material' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, RenderTarget) == 0x000020, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::RenderTarget' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, Position) == 0x000028, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::Position' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, InnerRadius) == 0x000040, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::InnerRadius' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, OuterRadius) == 0x000044, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::OuterRadius' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, MinHeight) == 0x000048, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::MinHeight' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, MaxHeight) == 0x00004C, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::MaxHeight' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, DensityThreshold) == 0x000050, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::DensityThreshold' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, OutPosition) == 0x000058, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_FindLightningPosition, ReturnValue) == 0x000070, "Member 'SkyCreatorFunctionLibrary_FindLightningPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.GetCloudDensityAtPosition
// 0x0040 (0x0040 - 0x0000)
struct SkyCreatorFunctionLibrary_GetCloudDensityAtPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1377[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_GetCloudDensityAtPosition");
static_assert(sizeof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition) == 0x000040, "Wrong size on SkyCreatorFunctionLibrary_GetCloudDensityAtPosition");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition, WorldContextObject) == 0x000000, "Member 'SkyCreatorFunctionLibrary_GetCloudDensityAtPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition, Position) == 0x000008, "Member 'SkyCreatorFunctionLibrary_GetCloudDensityAtPosition::Position' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition, ParameterCollection) == 0x000020, "Member 'SkyCreatorFunctionLibrary_GetCloudDensityAtPosition::ParameterCollection' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition, Material) == 0x000028, "Member 'SkyCreatorFunctionLibrary_GetCloudDensityAtPosition::Material' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition, RenderTarget) == 0x000030, "Member 'SkyCreatorFunctionLibrary_GetCloudDensityAtPosition::RenderTarget' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetCloudDensityAtPosition, ReturnValue) == 0x000038, "Member 'SkyCreatorFunctionLibrary_GetCloudDensityAtPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.GetRealMoonPosition
// 0x0020 (0x0020 - 0x0000)
struct SkyCreatorFunctionLibrary_GetRealMoonPosition final
{
public:
	float                                         Latitude;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZone;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDaylightSavingTime;                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1378[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateTime;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCelestialPositionData                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_GetRealMoonPosition) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_GetRealMoonPosition");
static_assert(sizeof(SkyCreatorFunctionLibrary_GetRealMoonPosition) == 0x000020, "Wrong size on SkyCreatorFunctionLibrary_GetRealMoonPosition");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealMoonPosition, Latitude) == 0x000000, "Member 'SkyCreatorFunctionLibrary_GetRealMoonPosition::Latitude' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealMoonPosition, Longitude) == 0x000004, "Member 'SkyCreatorFunctionLibrary_GetRealMoonPosition::Longitude' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealMoonPosition, TimeZone) == 0x000008, "Member 'SkyCreatorFunctionLibrary_GetRealMoonPosition::TimeZone' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealMoonPosition, bIsDaylightSavingTime) == 0x00000C, "Member 'SkyCreatorFunctionLibrary_GetRealMoonPosition::bIsDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealMoonPosition, DateTime) == 0x000010, "Member 'SkyCreatorFunctionLibrary_GetRealMoonPosition::DateTime' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealMoonPosition, ReturnValue) == 0x000018, "Member 'SkyCreatorFunctionLibrary_GetRealMoonPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.GetRealSunPosition
// 0x0020 (0x0020 - 0x0000)
struct SkyCreatorFunctionLibrary_GetRealSunPosition final
{
public:
	float                                         Latitude;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZone;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDaylightSavingTime;                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1379[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateTime;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCelestialPositionData                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_GetRealSunPosition) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_GetRealSunPosition");
static_assert(sizeof(SkyCreatorFunctionLibrary_GetRealSunPosition) == 0x000020, "Wrong size on SkyCreatorFunctionLibrary_GetRealSunPosition");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealSunPosition, Latitude) == 0x000000, "Member 'SkyCreatorFunctionLibrary_GetRealSunPosition::Latitude' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealSunPosition, Longitude) == 0x000004, "Member 'SkyCreatorFunctionLibrary_GetRealSunPosition::Longitude' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealSunPosition, TimeZone) == 0x000008, "Member 'SkyCreatorFunctionLibrary_GetRealSunPosition::TimeZone' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealSunPosition, bIsDaylightSavingTime) == 0x00000C, "Member 'SkyCreatorFunctionLibrary_GetRealSunPosition::bIsDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealSunPosition, DateTime) == 0x000010, "Member 'SkyCreatorFunctionLibrary_GetRealSunPosition::DateTime' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_GetRealSunPosition, ReturnValue) == 0x000018, "Member 'SkyCreatorFunctionLibrary_GetRealSunPosition::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.IsApplicationForegroundNow
// 0x0001 (0x0001 - 0x0000)
struct SkyCreatorFunctionLibrary_IsApplicationForegroundNow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_IsApplicationForegroundNow) == 0x000001, "Wrong alignment on SkyCreatorFunctionLibrary_IsApplicationForegroundNow");
static_assert(sizeof(SkyCreatorFunctionLibrary_IsApplicationForegroundNow) == 0x000001, "Wrong size on SkyCreatorFunctionLibrary_IsApplicationForegroundNow");
static_assert(offsetof(SkyCreatorFunctionLibrary_IsApplicationForegroundNow, ReturnValue) == 0x000000, "Member 'SkyCreatorFunctionLibrary_IsApplicationForegroundNow::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.KilometersToCentimeters
// 0x0008 (0x0008 - 0x0000)
struct SkyCreatorFunctionLibrary_KilometersToCentimeters final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_KilometersToCentimeters) == 0x000004, "Wrong alignment on SkyCreatorFunctionLibrary_KilometersToCentimeters");
static_assert(sizeof(SkyCreatorFunctionLibrary_KilometersToCentimeters) == 0x000008, "Wrong size on SkyCreatorFunctionLibrary_KilometersToCentimeters");
static_assert(offsetof(SkyCreatorFunctionLibrary_KilometersToCentimeters, Value) == 0x000000, "Member 'SkyCreatorFunctionLibrary_KilometersToCentimeters::Value' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_KilometersToCentimeters, ReturnValue) == 0x000004, "Member 'SkyCreatorFunctionLibrary_KilometersToCentimeters::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorFunctionLibrary.DynamicConvertRenderTargetToTexture2D
// 0x0010 (0x0010 - 0x0000)
struct SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D) == 0x000008, "Wrong alignment on SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D");
static_assert(sizeof(SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D) == 0x000010, "Wrong size on SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D");
static_assert(offsetof(SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D, RenderTarget) == 0x000000, "Member 'SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D::RenderTarget' has a wrong offset!");
static_assert(offsetof(SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D, ReturnValue) == 0x000008, "Member 'SkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D::ReturnValue' has a wrong offset!");

// Function SkyCreatorPlugin.SkyCreatorWeatherPreset.GetWeatherPresetSettings
// 0x0458 (0x0458 - 0x0000)
struct SkyCreatorWeatherPreset_GetWeatherPresetSettings final
{
public:
	struct FSkyCreatorWeatherSettings             ReturnValue;                                       // 0x0000(0x0458)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkyCreatorWeatherPreset_GetWeatherPresetSettings) == 0x000008, "Wrong alignment on SkyCreatorWeatherPreset_GetWeatherPresetSettings");
static_assert(sizeof(SkyCreatorWeatherPreset_GetWeatherPresetSettings) == 0x000458, "Wrong size on SkyCreatorWeatherPreset_GetWeatherPresetSettings");
static_assert(offsetof(SkyCreatorWeatherPreset_GetWeatherPresetSettings, ReturnValue) == 0x000000, "Member 'SkyCreatorWeatherPreset_GetWeatherPresetSettings::ReturnValue' has a wrong offset!");

}

