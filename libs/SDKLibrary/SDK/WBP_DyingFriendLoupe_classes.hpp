#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_DyingFriendLoupe

#include "Basic.hpp"

#include "Pal_structs.hpp"
#include "WBP_LoupeBase_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_DyingFriendLoupe.WBP_DyingFriendLoupe_C
// 0x0048 (0x04D0 - 0x0488)
class UWBP_DyingFriendLoupe_C final : public UWBP_LoupeBase_C
{
public:
	class UWBP_GuildMemberGauge_C*                WBP_GuildMemberGauge;                              // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPalIndividualCharacterHandle*          TargetHandle;                                      // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_Status_Dying_C*                     Dying_Status;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPalInstanceID                         SyncId;                                            // 0x04A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void CalcScreenPosition();
	void GetLoupeWidgetSize(struct FVector2D* Param_WidgetSize);
	void GetTargetWidgetSize(struct FVector2D* OutVector);
	void GetTargetWorldLocation(struct FVector* OutVector);
	void GetTranslationTarget(class UWidget** Widget);
	bool IsEnableLoupe();
	void OnSyncIndividualParameter(const struct FPalInstanceID& InstanceId);
	void SetFinalWidgetOpacity(double CalcedOpacity);
	void Setup(class UBP_Status_Dying_C* DyingStatus);
	void UpdateArrowImageAngle(double NewAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_DyingFriendLoupe_C">();
	}
	static class UWBP_DyingFriendLoupe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_DyingFriendLoupe_C>();
	}
};
static_assert(alignof(UWBP_DyingFriendLoupe_C) == 0x000008, "Wrong alignment on UWBP_DyingFriendLoupe_C");
static_assert(sizeof(UWBP_DyingFriendLoupe_C) == 0x0004D0, "Wrong size on UWBP_DyingFriendLoupe_C");
static_assert(offsetof(UWBP_DyingFriendLoupe_C, WBP_GuildMemberGauge) == 0x000488, "Member 'UWBP_DyingFriendLoupe_C::WBP_GuildMemberGauge' has a wrong offset!");
static_assert(offsetof(UWBP_DyingFriendLoupe_C, TargetHandle) == 0x000490, "Member 'UWBP_DyingFriendLoupe_C::TargetHandle' has a wrong offset!");
static_assert(offsetof(UWBP_DyingFriendLoupe_C, Dying_Status) == 0x000498, "Member 'UWBP_DyingFriendLoupe_C::Dying_Status' has a wrong offset!");
static_assert(offsetof(UWBP_DyingFriendLoupe_C, SyncId) == 0x0004A0, "Member 'UWBP_DyingFriendLoupe_C::SyncId' has a wrong offset!");

}

