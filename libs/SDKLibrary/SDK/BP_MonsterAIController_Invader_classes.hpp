#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MonsterAIController_Invader

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_MonsterAIControllerBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MonsterAIController_Invader.BP_MonsterAIController_Invader_C
// 0x0038 (0x0588 - 0x0550)
class ABP_MonsterAIController_Invader_C final : public ABP_MonsterAIControllerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MonsterAIController_Invader_C;   // 0x0550(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPalAISensorComponent*                  PalAISensor;                                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetBaseCampPosition;                            // 0x0560(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnInvaderArrivedDelegate;                          // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BindOnInvaderArrivedDelegate(TDelegate<void()> Event);
	void ExecuteUbergraph_BP_MonsterAIController_Invader(int32 EntryPoint);
	void GetLeaderBB(class UBP_PalAIBlackboard_Common_C** LeaderPalBrackboard);
	void GetMyBB(class UBP_PalAIBlackboard_Common_C** PalBrackboard);
	void OnInvaderArrived();
	void OnInvaderArrivedDelegate__DelegateSignature();
	void ReceivePossess(class APawn* PossessedPawn);
	void ReturnSpawnedPoint(const struct FVector& GoalLocation);
	void Setup(const struct FVector& BaseCampPos);
	void StartMartch(const struct FVector& GoalPosition);
	void _________1(class APalCharacter* InCharacter);
	void _________OnDead(const struct FPalDeadInfo& DeadInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MonsterAIController_Invader_C">();
	}
	static class ABP_MonsterAIController_Invader_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MonsterAIController_Invader_C>();
	}
};
static_assert(alignof(ABP_MonsterAIController_Invader_C) == 0x000008, "Wrong alignment on ABP_MonsterAIController_Invader_C");
static_assert(sizeof(ABP_MonsterAIController_Invader_C) == 0x000588, "Wrong size on ABP_MonsterAIController_Invader_C");
static_assert(offsetof(ABP_MonsterAIController_Invader_C, UberGraphFrame_BP_MonsterAIController_Invader_C) == 0x000550, "Member 'ABP_MonsterAIController_Invader_C::UberGraphFrame_BP_MonsterAIController_Invader_C' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Invader_C, PalAISensor) == 0x000558, "Member 'ABP_MonsterAIController_Invader_C::PalAISensor' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Invader_C, TargetBaseCampPosition) == 0x000560, "Member 'ABP_MonsterAIController_Invader_C::TargetBaseCampPosition' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Invader_C, OnInvaderArrivedDelegate) == 0x000578, "Member 'ABP_MonsterAIController_Invader_C::OnInvaderArrivedDelegate' has a wrong offset!");

}

