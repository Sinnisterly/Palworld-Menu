#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ActionNooseTrap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Pal_structs.hpp"
#include "Pal_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ActionNooseTrap.BP_ActionNooseTrap_C
// 0x0130 (0x0270 - 0x0140)
class UBP_ActionNooseTrap_C final : public UPalActionBase
{
public:
	uint8                                         Pad_3CB1[0x8];                                     // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0140(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                CurrentRopePos;                                    // 0x0148(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RopeFixPos;                                        // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRopeRotate;                                 // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        RopeLength;                                        // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSwingAngle;                                 // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Const_MaxSwingAngle;                               // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpMode;                                          // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CB2[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentSwingDirection;                             // 0x01B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAngleVelocity_Rad;                          // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentMechanicalEnergy;                           // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Const_Mass;                                        // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Const_Gravity;                                     // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAngle_Rad;                                  // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Const_StartMechanicalEnergy;                       // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_DeltaTime;                                    // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Const_InitSpeed;                                   // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAngleSpeed;                                 // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Const_Drag;                                        // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetSwingDirection;                              // 0x0220(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreRopePos;                                        // 0x0238(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FacialTimerHandle;                                 // 0x0250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CB3[0x7];                                     // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Const_DefaultRopeLength;                           // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeleportFlag;                                    // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalcAngleVelocity();
	void CalcAngularAcceleration_Swing(double* AngleAccel);
	void CalcDamageToSpeed(int32 Damage, double* Speed);
	void ChangeFacial(EPalFacialEyeType Facial);
	void ExecuteUbergraph_BP_ActionNooseTrap(int32 EntryPoint);
	void FindMontage(class UAnimMontage** Montage);
	void FixCharacterToRopePos();
	void GetWorldVelocity_ByDeadEnd(struct FVector* Velocity);
	void LerpSwingDirection();
	void OnBeginAction();
	void OnDamage(const struct FPalDamageResult& Info);
	void OnDead(const struct FPalDeadInfo& DeadInfo);
	void OnEndAction();
	void OnFinishAcion();
	void OnStatusAdd(const class UPalStatusComponent* StatusComponent, EPalStatusID StatusId, class UPalStatusBase* Status);
	void ReturnDefaultFacial();
	void TickAction(float DeltaTime);
	void UpdateAngle_Swing();
	void UpdateRopePos_Swing();
	void UpdateRopePosToUp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ActionNooseTrap_C">();
	}
	static class UBP_ActionNooseTrap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ActionNooseTrap_C>();
	}
};
static_assert(alignof(UBP_ActionNooseTrap_C) == 0x000010, "Wrong alignment on UBP_ActionNooseTrap_C");
static_assert(sizeof(UBP_ActionNooseTrap_C) == 0x000270, "Wrong size on UBP_ActionNooseTrap_C");
static_assert(offsetof(UBP_ActionNooseTrap_C, UberGraphFrame) == 0x000140, "Member 'UBP_ActionNooseTrap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentRopePos) == 0x000148, "Member 'UBP_ActionNooseTrap_C::CurrentRopePos' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, RopeFixPos) == 0x000160, "Member 'UBP_ActionNooseTrap_C::RopeFixPos' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Timer) == 0x000178, "Member 'UBP_ActionNooseTrap_C::Timer' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentRopeRotate) == 0x000180, "Member 'UBP_ActionNooseTrap_C::CurrentRopeRotate' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, RopeLength) == 0x000198, "Member 'UBP_ActionNooseTrap_C::RopeLength' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentSwingAngle) == 0x0001A0, "Member 'UBP_ActionNooseTrap_C::CurrentSwingAngle' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Const_MaxSwingAngle) == 0x0001A8, "Member 'UBP_ActionNooseTrap_C::Const_MaxSwingAngle' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, IsUpMode) == 0x0001B0, "Member 'UBP_ActionNooseTrap_C::IsUpMode' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentSwingDirection) == 0x0001B8, "Member 'UBP_ActionNooseTrap_C::CurrentSwingDirection' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentAngleVelocity_Rad) == 0x0001D0, "Member 'UBP_ActionNooseTrap_C::CurrentAngleVelocity_Rad' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentMechanicalEnergy) == 0x0001D8, "Member 'UBP_ActionNooseTrap_C::CurrentMechanicalEnergy' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Const_Mass) == 0x0001E0, "Member 'UBP_ActionNooseTrap_C::Const_Mass' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Const_Gravity) == 0x0001E8, "Member 'UBP_ActionNooseTrap_C::Const_Gravity' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentAngle_Rad) == 0x0001F0, "Member 'UBP_ActionNooseTrap_C::CurrentAngle_Rad' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Const_StartMechanicalEnergy) == 0x0001F8, "Member 'UBP_ActionNooseTrap_C::Const_StartMechanicalEnergy' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Temp_DeltaTime) == 0x000200, "Member 'UBP_ActionNooseTrap_C::Temp_DeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Const_InitSpeed) == 0x000208, "Member 'UBP_ActionNooseTrap_C::Const_InitSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, CurrentAngleSpeed) == 0x000210, "Member 'UBP_ActionNooseTrap_C::CurrentAngleSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Const_Drag) == 0x000218, "Member 'UBP_ActionNooseTrap_C::Const_Drag' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, TargetSwingDirection) == 0x000220, "Member 'UBP_ActionNooseTrap_C::TargetSwingDirection' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, PreRopePos) == 0x000238, "Member 'UBP_ActionNooseTrap_C::PreRopePos' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, FacialTimerHandle) == 0x000250, "Member 'UBP_ActionNooseTrap_C::FacialTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, IsDead) == 0x000258, "Member 'UBP_ActionNooseTrap_C::IsDead' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, Const_DefaultRopeLength) == 0x000260, "Member 'UBP_ActionNooseTrap_C::Const_DefaultRopeLength' has a wrong offset!");
static_assert(offsetof(UBP_ActionNooseTrap_C, IsTeleportFlag) == 0x000268, "Member 'UBP_ActionNooseTrap_C::IsTeleportFlag' has a wrong offset!");

}

