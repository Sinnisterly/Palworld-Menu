#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CapsuleTraceRotation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CapsuleTraceRotation.TraceUtils.CapsuleTraceMulti
// 0x00B8 (0x00B8 - 0x0000)
struct TraceUtils_CapsuleTraceMulti final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1703[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1704[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1705[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x008C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x009C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1706[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceUtils_CapsuleTraceMulti) == 0x000008, "Wrong alignment on TraceUtils_CapsuleTraceMulti");
static_assert(sizeof(TraceUtils_CapsuleTraceMulti) == 0x0000B8, "Wrong size on TraceUtils_CapsuleTraceMulti");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, WorldContextObject) == 0x000000, "Member 'TraceUtils_CapsuleTraceMulti::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, Start) == 0x000008, "Member 'TraceUtils_CapsuleTraceMulti::Start' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, End) == 0x000020, "Member 'TraceUtils_CapsuleTraceMulti::End' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, Radius) == 0x000038, "Member 'TraceUtils_CapsuleTraceMulti::Radius' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, HalfHeight) == 0x00003C, "Member 'TraceUtils_CapsuleTraceMulti::HalfHeight' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, Orientation) == 0x000040, "Member 'TraceUtils_CapsuleTraceMulti::Orientation' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, TraceChannel) == 0x000058, "Member 'TraceUtils_CapsuleTraceMulti::TraceChannel' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, bTraceComplex) == 0x000059, "Member 'TraceUtils_CapsuleTraceMulti::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, ActorsToIgnore) == 0x000060, "Member 'TraceUtils_CapsuleTraceMulti::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, DrawDebugType) == 0x000070, "Member 'TraceUtils_CapsuleTraceMulti::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, OutHits) == 0x000078, "Member 'TraceUtils_CapsuleTraceMulti::OutHits' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, bIgnoreSelf) == 0x000088, "Member 'TraceUtils_CapsuleTraceMulti::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, TraceColor) == 0x00008C, "Member 'TraceUtils_CapsuleTraceMulti::TraceColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, TraceHitColor) == 0x00009C, "Member 'TraceUtils_CapsuleTraceMulti::TraceHitColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, DrawTime) == 0x0000AC, "Member 'TraceUtils_CapsuleTraceMulti::DrawTime' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMulti, ReturnValue) == 0x0000B0, "Member 'TraceUtils_CapsuleTraceMulti::ReturnValue' has a wrong offset!");

// Function CapsuleTraceRotation.TraceUtils.CapsuleTraceMultiByProfile
// 0x00C0 (0x00C0 - 0x0000)
struct TraceUtils_CapsuleTraceMultiByProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1707[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1708[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1709[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0094(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x00A4(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x00B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170A[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceUtils_CapsuleTraceMultiByProfile) == 0x000008, "Wrong alignment on TraceUtils_CapsuleTraceMultiByProfile");
static_assert(sizeof(TraceUtils_CapsuleTraceMultiByProfile) == 0x0000C0, "Wrong size on TraceUtils_CapsuleTraceMultiByProfile");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, WorldContextObject) == 0x000000, "Member 'TraceUtils_CapsuleTraceMultiByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, Start) == 0x000008, "Member 'TraceUtils_CapsuleTraceMultiByProfile::Start' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, End) == 0x000020, "Member 'TraceUtils_CapsuleTraceMultiByProfile::End' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, Radius) == 0x000038, "Member 'TraceUtils_CapsuleTraceMultiByProfile::Radius' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, HalfHeight) == 0x00003C, "Member 'TraceUtils_CapsuleTraceMultiByProfile::HalfHeight' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, Orientation) == 0x000040, "Member 'TraceUtils_CapsuleTraceMultiByProfile::Orientation' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, ProfileName) == 0x000058, "Member 'TraceUtils_CapsuleTraceMultiByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, bTraceComplex) == 0x000060, "Member 'TraceUtils_CapsuleTraceMultiByProfile::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, ActorsToIgnore) == 0x000068, "Member 'TraceUtils_CapsuleTraceMultiByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, DrawDebugType) == 0x000078, "Member 'TraceUtils_CapsuleTraceMultiByProfile::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, OutHits) == 0x000080, "Member 'TraceUtils_CapsuleTraceMultiByProfile::OutHits' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, bIgnoreSelf) == 0x000090, "Member 'TraceUtils_CapsuleTraceMultiByProfile::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, TraceColor) == 0x000094, "Member 'TraceUtils_CapsuleTraceMultiByProfile::TraceColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, TraceHitColor) == 0x0000A4, "Member 'TraceUtils_CapsuleTraceMultiByProfile::TraceHitColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, DrawTime) == 0x0000B4, "Member 'TraceUtils_CapsuleTraceMultiByProfile::DrawTime' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiByProfile, ReturnValue) == 0x0000B8, "Member 'TraceUtils_CapsuleTraceMultiByProfile::ReturnValue' has a wrong offset!");

// Function CapsuleTraceRotation.TraceUtils.CapsuleTraceMultiForObjects
// 0x00C8 (0x00C8 - 0x0000)
struct TraceUtils_CapsuleTraceMultiForObjects final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170B[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170C[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170D[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x009C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x00AC(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x00BC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170E[0x7];                                     // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceUtils_CapsuleTraceMultiForObjects) == 0x000008, "Wrong alignment on TraceUtils_CapsuleTraceMultiForObjects");
static_assert(sizeof(TraceUtils_CapsuleTraceMultiForObjects) == 0x0000C8, "Wrong size on TraceUtils_CapsuleTraceMultiForObjects");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, WorldContextObject) == 0x000000, "Member 'TraceUtils_CapsuleTraceMultiForObjects::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, Start) == 0x000008, "Member 'TraceUtils_CapsuleTraceMultiForObjects::Start' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, End) == 0x000020, "Member 'TraceUtils_CapsuleTraceMultiForObjects::End' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, Radius) == 0x000038, "Member 'TraceUtils_CapsuleTraceMultiForObjects::Radius' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, HalfHeight) == 0x00003C, "Member 'TraceUtils_CapsuleTraceMultiForObjects::HalfHeight' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, Orientation) == 0x000040, "Member 'TraceUtils_CapsuleTraceMultiForObjects::Orientation' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, ObjectTypes) == 0x000058, "Member 'TraceUtils_CapsuleTraceMultiForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, bTraceComplex) == 0x000068, "Member 'TraceUtils_CapsuleTraceMultiForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, ActorsToIgnore) == 0x000070, "Member 'TraceUtils_CapsuleTraceMultiForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, DrawDebugType) == 0x000080, "Member 'TraceUtils_CapsuleTraceMultiForObjects::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, OutHits) == 0x000088, "Member 'TraceUtils_CapsuleTraceMultiForObjects::OutHits' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, bIgnoreSelf) == 0x000098, "Member 'TraceUtils_CapsuleTraceMultiForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, TraceColor) == 0x00009C, "Member 'TraceUtils_CapsuleTraceMultiForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, TraceHitColor) == 0x0000AC, "Member 'TraceUtils_CapsuleTraceMultiForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, DrawTime) == 0x0000BC, "Member 'TraceUtils_CapsuleTraceMultiForObjects::DrawTime' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceMultiForObjects, ReturnValue) == 0x0000C0, "Member 'TraceUtils_CapsuleTraceMultiForObjects::ReturnValue' has a wrong offset!");

// Function CapsuleTraceRotation.TraceUtils.CapsuleTraceSingle
// 0x0190 (0x0190 - 0x0000)
struct TraceUtils_CapsuleTraceSingle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170F[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1710[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0078(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0160(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1711[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0164(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0174(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0184(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0188(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1712[0x7];                                     // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceUtils_CapsuleTraceSingle) == 0x000008, "Wrong alignment on TraceUtils_CapsuleTraceSingle");
static_assert(sizeof(TraceUtils_CapsuleTraceSingle) == 0x000190, "Wrong size on TraceUtils_CapsuleTraceSingle");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, WorldContextObject) == 0x000000, "Member 'TraceUtils_CapsuleTraceSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, Start) == 0x000008, "Member 'TraceUtils_CapsuleTraceSingle::Start' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, End) == 0x000020, "Member 'TraceUtils_CapsuleTraceSingle::End' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, Radius) == 0x000038, "Member 'TraceUtils_CapsuleTraceSingle::Radius' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, HalfHeight) == 0x00003C, "Member 'TraceUtils_CapsuleTraceSingle::HalfHeight' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, Orientation) == 0x000040, "Member 'TraceUtils_CapsuleTraceSingle::Orientation' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, TraceChannel) == 0x000058, "Member 'TraceUtils_CapsuleTraceSingle::TraceChannel' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, bTraceComplex) == 0x000059, "Member 'TraceUtils_CapsuleTraceSingle::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, ActorsToIgnore) == 0x000060, "Member 'TraceUtils_CapsuleTraceSingle::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, DrawDebugType) == 0x000070, "Member 'TraceUtils_CapsuleTraceSingle::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, OutHit) == 0x000078, "Member 'TraceUtils_CapsuleTraceSingle::OutHit' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, bIgnoreSelf) == 0x000160, "Member 'TraceUtils_CapsuleTraceSingle::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, TraceColor) == 0x000164, "Member 'TraceUtils_CapsuleTraceSingle::TraceColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, TraceHitColor) == 0x000174, "Member 'TraceUtils_CapsuleTraceSingle::TraceHitColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, DrawTime) == 0x000184, "Member 'TraceUtils_CapsuleTraceSingle::DrawTime' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingle, ReturnValue) == 0x000188, "Member 'TraceUtils_CapsuleTraceSingle::ReturnValue' has a wrong offset!");

// Function CapsuleTraceRotation.TraceUtils.CapsuleTraceSingleByProfile
// 0x0198 (0x0198 - 0x0000)
struct TraceUtils_CapsuleTraceSingleByProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1713[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1714[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0080(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0168(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1715[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x016C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x017C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x018C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0190(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1716[0x7];                                     // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceUtils_CapsuleTraceSingleByProfile) == 0x000008, "Wrong alignment on TraceUtils_CapsuleTraceSingleByProfile");
static_assert(sizeof(TraceUtils_CapsuleTraceSingleByProfile) == 0x000198, "Wrong size on TraceUtils_CapsuleTraceSingleByProfile");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, WorldContextObject) == 0x000000, "Member 'TraceUtils_CapsuleTraceSingleByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, Start) == 0x000008, "Member 'TraceUtils_CapsuleTraceSingleByProfile::Start' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, End) == 0x000020, "Member 'TraceUtils_CapsuleTraceSingleByProfile::End' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, Radius) == 0x000038, "Member 'TraceUtils_CapsuleTraceSingleByProfile::Radius' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, HalfHeight) == 0x00003C, "Member 'TraceUtils_CapsuleTraceSingleByProfile::HalfHeight' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, Orientation) == 0x000040, "Member 'TraceUtils_CapsuleTraceSingleByProfile::Orientation' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, ProfileName) == 0x000058, "Member 'TraceUtils_CapsuleTraceSingleByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, bTraceComplex) == 0x000060, "Member 'TraceUtils_CapsuleTraceSingleByProfile::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, ActorsToIgnore) == 0x000068, "Member 'TraceUtils_CapsuleTraceSingleByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, DrawDebugType) == 0x000078, "Member 'TraceUtils_CapsuleTraceSingleByProfile::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, OutHit) == 0x000080, "Member 'TraceUtils_CapsuleTraceSingleByProfile::OutHit' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, bIgnoreSelf) == 0x000168, "Member 'TraceUtils_CapsuleTraceSingleByProfile::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, TraceColor) == 0x00016C, "Member 'TraceUtils_CapsuleTraceSingleByProfile::TraceColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, TraceHitColor) == 0x00017C, "Member 'TraceUtils_CapsuleTraceSingleByProfile::TraceHitColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, DrawTime) == 0x00018C, "Member 'TraceUtils_CapsuleTraceSingleByProfile::DrawTime' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleByProfile, ReturnValue) == 0x000190, "Member 'TraceUtils_CapsuleTraceSingleByProfile::ReturnValue' has a wrong offset!");

// Function CapsuleTraceRotation.TraceUtils.CapsuleTraceSingleForObjects
// 0x01A0 (0x01A0 - 0x0000)
struct TraceUtils_CapsuleTraceSingleForObjects final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1717[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1718[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0088(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0170(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1719[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0174(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0184(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0194(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0198(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171A[0x7];                                     // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceUtils_CapsuleTraceSingleForObjects) == 0x000008, "Wrong alignment on TraceUtils_CapsuleTraceSingleForObjects");
static_assert(sizeof(TraceUtils_CapsuleTraceSingleForObjects) == 0x0001A0, "Wrong size on TraceUtils_CapsuleTraceSingleForObjects");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, WorldContextObject) == 0x000000, "Member 'TraceUtils_CapsuleTraceSingleForObjects::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, Start) == 0x000008, "Member 'TraceUtils_CapsuleTraceSingleForObjects::Start' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, End) == 0x000020, "Member 'TraceUtils_CapsuleTraceSingleForObjects::End' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, Radius) == 0x000038, "Member 'TraceUtils_CapsuleTraceSingleForObjects::Radius' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, HalfHeight) == 0x00003C, "Member 'TraceUtils_CapsuleTraceSingleForObjects::HalfHeight' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, Orientation) == 0x000040, "Member 'TraceUtils_CapsuleTraceSingleForObjects::Orientation' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, ObjectTypes) == 0x000058, "Member 'TraceUtils_CapsuleTraceSingleForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, bTraceComplex) == 0x000068, "Member 'TraceUtils_CapsuleTraceSingleForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, ActorsToIgnore) == 0x000070, "Member 'TraceUtils_CapsuleTraceSingleForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, DrawDebugType) == 0x000080, "Member 'TraceUtils_CapsuleTraceSingleForObjects::DrawDebugType' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, OutHit) == 0x000088, "Member 'TraceUtils_CapsuleTraceSingleForObjects::OutHit' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, bIgnoreSelf) == 0x000170, "Member 'TraceUtils_CapsuleTraceSingleForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, TraceColor) == 0x000174, "Member 'TraceUtils_CapsuleTraceSingleForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, TraceHitColor) == 0x000184, "Member 'TraceUtils_CapsuleTraceSingleForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, DrawTime) == 0x000194, "Member 'TraceUtils_CapsuleTraceSingleForObjects::DrawTime' has a wrong offset!");
static_assert(offsetof(TraceUtils_CapsuleTraceSingleForObjects, ReturnValue) == 0x000198, "Member 'TraceUtils_CapsuleTraceSingleForObjects::ReturnValue' has a wrong offset!");

}

