#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Title_WorldSettings_ListContent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_PalTitleWorldSettingOptionType_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Pal_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Title_WorldSettings_ListContent.WBP_Title_WorldSettings_ListContent_C
// 0x00F8 (0x0500 - 0x0408)
class UWBP_Title_WorldSettings_ListContent_C final : public UPalUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0408(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anm_TextEditOnToOff;                               // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_DisableToEnable;                               // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_NormalToFocus;                                 // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_TextEdit;                                   // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       EditableTextBox_46;                                // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Caution;                                     // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PalTextBlock_C*                     Text_OptionTitle;                                  // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_OptionSettings_ListContentLR_C*    WBP_OptionSettings_ListContentLR;                  // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_OptionSettings_ListContentSlider_C* WBP_OptionSettings_ListContentSlider;              // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_OptionSettings_ListContentSwitch_C* WBP_OptionSettings_ListContentSwitch;              // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_PalInvisibleButton_C*              WBP_PalInvisibleButton;                            // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Title_WorldSettings_ListButton_C*  WBP_Title_WorldSettings_ListButton;                // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	E_PalTitleWorldSettingOptionType              OptionType;                                        // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4756[0x7];                                     // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    TitleMsgID;                                        // 0x0478(0x0010)(Edit, BlueprintVisible, NoDestructor)
	FMulticastInlineDelegateProperty_             OnSwitchChanged;                                   // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnComittedText;                                    // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         InputTextMaxLen;                                   // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4757[0x4];                                     // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangedSelectIndex;                              // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FDataTableRowHandle                    ButtonMsgID;                                       // 0x04C0(0x0010)(Edit, BlueprintVisible, NoDestructor)
	FMulticastInlineDelegateProperty_             OnClickedSettingButton;                            // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnChangedValue;                                    // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          NowEnabled;                                        // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverrideSliderStep;                              // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4758[0x6];                                     // 0x04F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OverrideSliderStepValue;                           // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetupTextInput(const class FString& DefaultString);
	void SetupSelectString(TArray<class FString>& SelectStrings, int32 DefaultSelectIndex);
	void SetupOnOff(bool Param_IsOn);
	void SetupIntValue(int32 Value, int32 Min, int32 Max);
	void SetupFloatValue(double NowValue, double MinValue, double MaxValue);
	void SetEnableCautionMark(bool IsEnableMark);
	void SetButtonText(const class FText& Text);
	void Set_Name_Select_Index(int32 Param_Index);
	void PreConstruct(bool IsDesignTime);
	void OnSwitchChanged__DelegateSignature(bool Param_IsOn);
	void OnComittedText__DelegateSignature(const class FString& NewString);
	void OnClickedSettingButton__DelegateSignature();
	void OnClickedInternal();
	void OnChangedValue__DelegateSignature(double NewValue);
	void OnChangedSelectIndex__DelegateSignature(int32 NewIndex);
	void IsOn(bool* Param_IsOn);
	void IsEditingText(bool* IsEditing);
	void InitializeInternal();
	void GetSelectNameIndex(int32* NowIndex);
	void GetInputText(class FString* InputTextString);
	void GetButtonText(class FText* Text);
	void ExecuteUbergraph_WBP_Title_WorldSettings_ListContent(int32 EntryPoint);
	class UWidget* CustomNavi_ToRight(EUINavigation Param_Navigation);
	class UWidget* CustomNavi_ToLeft(EUINavigation Param_Navigation);
	void Construct();
	void BndEvt__WBP_Title_WorldSettings_ListContent_WBP_Title_WorldSettings_ListButton_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature();
	void BndEvt__WBP_Title_WorldSettings_ListContent_WBP_PalInvisibleButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__WBP_Title_WorldSettings_ListContent_WBP_PalInvisibleButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__WBP_Title_WorldSettings_ListContent_WBP_PalInvisibleButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__WBP_Title_WorldSettings_ListContent_WBP_OptionSettings_ListContentSwitch_K2Node_ComponentBoundEvent_3_OnSwitcherChanged__DelegateSignature(bool Param_IsOn);
	void BndEvt__WBP_Title_WorldSettings_ListContent_WBP_OptionSettings_ListContentSlider_K2Node_ComponentBoundEvent_8_OnValueChanged__DelegateSignature(double Value);
	void BndEvt__WBP_Title_WorldSettings_ListContent_WBP_OptionSettings_ListContentLR_K2Node_ComponentBoundEvent_6_OnSelectionChanged__DelegateSignature(int32 Selection);
	void BndEvt__WBP_Title_WorldSettings_ListContent_EditableTextBox_46_K2Node_ComponentBoundEvent_5_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text);
	void BndEvt__WBP_Title_WorldSettings_ListContent_EditableTextBox_46_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod);
	void AnmEvent_SetEnableBuutton(bool IsEnableButton);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Title_WorldSettings_ListContent_C">();
	}
	static class UWBP_Title_WorldSettings_ListContent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Title_WorldSettings_ListContent_C>();
	}
};
static_assert(alignof(UWBP_Title_WorldSettings_ListContent_C) == 0x000008, "Wrong alignment on UWBP_Title_WorldSettings_ListContent_C");
static_assert(sizeof(UWBP_Title_WorldSettings_ListContent_C) == 0x000500, "Wrong size on UWBP_Title_WorldSettings_ListContent_C");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, UberGraphFrame) == 0x000408, "Member 'UWBP_Title_WorldSettings_ListContent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, Anm_TextEditOnToOff) == 0x000410, "Member 'UWBP_Title_WorldSettings_ListContent_C::Anm_TextEditOnToOff' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, Anm_DisableToEnable) == 0x000418, "Member 'UWBP_Title_WorldSettings_ListContent_C::Anm_DisableToEnable' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, Anm_NormalToFocus) == 0x000420, "Member 'UWBP_Title_WorldSettings_ListContent_C::Anm_NormalToFocus' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, Canvas_TextEdit) == 0x000428, "Member 'UWBP_Title_WorldSettings_ListContent_C::Canvas_TextEdit' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, EditableTextBox_46) == 0x000430, "Member 'UWBP_Title_WorldSettings_ListContent_C::EditableTextBox_46' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, Image_Caution) == 0x000438, "Member 'UWBP_Title_WorldSettings_ListContent_C::Image_Caution' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, Text_OptionTitle) == 0x000440, "Member 'UWBP_Title_WorldSettings_ListContent_C::Text_OptionTitle' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, WBP_OptionSettings_ListContentLR) == 0x000448, "Member 'UWBP_Title_WorldSettings_ListContent_C::WBP_OptionSettings_ListContentLR' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, WBP_OptionSettings_ListContentSlider) == 0x000450, "Member 'UWBP_Title_WorldSettings_ListContent_C::WBP_OptionSettings_ListContentSlider' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, WBP_OptionSettings_ListContentSwitch) == 0x000458, "Member 'UWBP_Title_WorldSettings_ListContent_C::WBP_OptionSettings_ListContentSwitch' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, WBP_PalInvisibleButton) == 0x000460, "Member 'UWBP_Title_WorldSettings_ListContent_C::WBP_PalInvisibleButton' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, WBP_Title_WorldSettings_ListButton) == 0x000468, "Member 'UWBP_Title_WorldSettings_ListContent_C::WBP_Title_WorldSettings_ListButton' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, OptionType) == 0x000470, "Member 'UWBP_Title_WorldSettings_ListContent_C::OptionType' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, TitleMsgID) == 0x000478, "Member 'UWBP_Title_WorldSettings_ListContent_C::TitleMsgID' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, OnSwitchChanged) == 0x000488, "Member 'UWBP_Title_WorldSettings_ListContent_C::OnSwitchChanged' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, OnComittedText) == 0x000498, "Member 'UWBP_Title_WorldSettings_ListContent_C::OnComittedText' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, InputTextMaxLen) == 0x0004A8, "Member 'UWBP_Title_WorldSettings_ListContent_C::InputTextMaxLen' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, OnChangedSelectIndex) == 0x0004B0, "Member 'UWBP_Title_WorldSettings_ListContent_C::OnChangedSelectIndex' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, ButtonMsgID) == 0x0004C0, "Member 'UWBP_Title_WorldSettings_ListContent_C::ButtonMsgID' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, OnClickedSettingButton) == 0x0004D0, "Member 'UWBP_Title_WorldSettings_ListContent_C::OnClickedSettingButton' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, OnChangedValue) == 0x0004E0, "Member 'UWBP_Title_WorldSettings_ListContent_C::OnChangedValue' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, NowEnabled) == 0x0004F0, "Member 'UWBP_Title_WorldSettings_ListContent_C::NowEnabled' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, IsOverrideSliderStep) == 0x0004F1, "Member 'UWBP_Title_WorldSettings_ListContent_C::IsOverrideSliderStep' has a wrong offset!");
static_assert(offsetof(UWBP_Title_WorldSettings_ListContent_C, OverrideSliderStepValue) == 0x0004F8, "Member 'UWBP_Title_WorldSettings_ListContent_C::OverrideSliderStepValue' has a wrong offset!");

}

