#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIAction_TurnAndEscape

#include "Basic.hpp"

#include "BP_AIAction_CanCombatBase_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIAction_TurnAndEscape.BP_AIAction_TurnAndEscape_C
// 0x0018 (0x0170 - 0x0158)
class UBP_AIAction_TurnAndEscape_C final : public UBP_AIAction_CanCombatBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AIAction_TurnAndEscape_C;        // 0x0158(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 TargetAct;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Turning;                                           // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CancelAble;                                        // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStopByDelay;                                     // 0x016A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActionResume(class APawn* ControlledPawn);
	void ActionStart(class APawn* ControlledPawn);
	void ActionTick(class APawn* ControlledPawn, float DeltaSeconds);
	void ExecuteUbergraph_BP_AIAction_TurnAndEscape(int32 EntryPoint);
	void OnSquadMemberDeadEvent(const struct FPalDeadInfo& DeadInbfo);
	void Setup(class AActor* TargetActor);
	void SoundEvent(const struct FVector& EmitLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIAction_TurnAndEscape_C">();
	}
	static class UBP_AIAction_TurnAndEscape_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIAction_TurnAndEscape_C>();
	}
};
static_assert(alignof(UBP_AIAction_TurnAndEscape_C) == 0x000008, "Wrong alignment on UBP_AIAction_TurnAndEscape_C");
static_assert(sizeof(UBP_AIAction_TurnAndEscape_C) == 0x000170, "Wrong size on UBP_AIAction_TurnAndEscape_C");
static_assert(offsetof(UBP_AIAction_TurnAndEscape_C, UberGraphFrame_BP_AIAction_TurnAndEscape_C) == 0x000158, "Member 'UBP_AIAction_TurnAndEscape_C::UberGraphFrame_BP_AIAction_TurnAndEscape_C' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_TurnAndEscape_C, TargetAct) == 0x000160, "Member 'UBP_AIAction_TurnAndEscape_C::TargetAct' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_TurnAndEscape_C, Turning) == 0x000168, "Member 'UBP_AIAction_TurnAndEscape_C::Turning' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_TurnAndEscape_C, CancelAble) == 0x000169, "Member 'UBP_AIAction_TurnAndEscape_C::CancelAble' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_TurnAndEscape_C, IsStopByDelay) == 0x00016A, "Member 'UBP_AIAction_TurnAndEscape_C::IsStopByDelay' has a wrong offset!");

}

