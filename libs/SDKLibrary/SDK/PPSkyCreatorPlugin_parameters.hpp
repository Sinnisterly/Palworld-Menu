#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PPSkyCreatorPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PPSkyCreatorPlugin_structs.hpp"


namespace SDK::Params
{

// Function PPSkyCreatorPlugin.PPSkyCreator.FindLightningPosition
// 0x0038 (0x0038 - 0x0000)
struct PPSkyCreator_FindLightningPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C04[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PPSkyCreator_FindLightningPosition) == 0x000008, "Wrong alignment on PPSkyCreator_FindLightningPosition");
static_assert(sizeof(PPSkyCreator_FindLightningPosition) == 0x000038, "Wrong size on PPSkyCreator_FindLightningPosition");
static_assert(offsetof(PPSkyCreator_FindLightningPosition, Position) == 0x000000, "Member 'PPSkyCreator_FindLightningPosition::Position' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_FindLightningPosition, OutPosition) == 0x000018, "Member 'PPSkyCreator_FindLightningPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_FindLightningPosition, ReturnValue) == 0x000030, "Member 'PPSkyCreator_FindLightningPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetCloudDensityAtPosition
// 0x0020 (0x0020 - 0x0000)
struct PPSkyCreator_GetCloudDensityAtPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C05[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PPSkyCreator_GetCloudDensityAtPosition) == 0x000008, "Wrong alignment on PPSkyCreator_GetCloudDensityAtPosition");
static_assert(sizeof(PPSkyCreator_GetCloudDensityAtPosition) == 0x000020, "Wrong size on PPSkyCreator_GetCloudDensityAtPosition");
static_assert(offsetof(PPSkyCreator_GetCloudDensityAtPosition, Position) == 0x000000, "Member 'PPSkyCreator_GetCloudDensityAtPosition::Position' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_GetCloudDensityAtPosition, ReturnValue) == 0x000018, "Member 'PPSkyCreator_GetCloudDensityAtPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetLastLightningPosition
// 0x0018 (0x0018 - 0x0000)
struct PPSkyCreator_GetLastLightningPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetLastLightningPosition) == 0x000008, "Wrong alignment on PPSkyCreator_GetLastLightningPosition");
static_assert(sizeof(PPSkyCreator_GetLastLightningPosition) == 0x000018, "Wrong size on PPSkyCreator_GetLastLightningPosition");
static_assert(offsetof(PPSkyCreator_GetLastLightningPosition, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetLastLightningPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetMoonPosition
// 0x0020 (0x0020 - 0x0000)
struct PPSkyCreator_GetMoonPosition final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C06[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetMoonPosition) == 0x000008, "Wrong alignment on PPSkyCreator_GetMoonPosition");
static_assert(sizeof(PPSkyCreator_GetMoonPosition) == 0x000020, "Wrong size on PPSkyCreator_GetMoonPosition");
static_assert(offsetof(PPSkyCreator_GetMoonPosition, Time) == 0x000000, "Member 'PPSkyCreator_GetMoonPosition::Time' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_GetMoonPosition, ReturnValue) == 0x000008, "Member 'PPSkyCreator_GetMoonPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetSunPosition
// 0x0020 (0x0020 - 0x0000)
struct PPSkyCreator_GetSunPosition final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C07[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetSunPosition) == 0x000008, "Wrong alignment on PPSkyCreator_GetSunPosition");
static_assert(sizeof(PPSkyCreator_GetSunPosition) == 0x000020, "Wrong size on PPSkyCreator_GetSunPosition");
static_assert(offsetof(PPSkyCreator_GetSunPosition, Time) == 0x000000, "Member 'PPSkyCreator_GetSunPosition::Time' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_GetSunPosition, ReturnValue) == 0x000008, "Member 'PPSkyCreator_GetSunPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpBackgroundCloudSettings
// 0x004C (0x004C - 0x0000)
struct PPSkyCreator_LerpBackgroundCloudSettings final
{
public:
	struct FPPSkyCreatorBackgroundCloudSettings   InBackgroundCloudSettingsA;                        // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorBackgroundCloudSettings   InBackgroundCloudSettingsB;                        // 0x0024(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpBackgroundCloudSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpBackgroundCloudSettings");
static_assert(sizeof(PPSkyCreator_LerpBackgroundCloudSettings) == 0x00004C, "Wrong size on PPSkyCreator_LerpBackgroundCloudSettings");
static_assert(offsetof(PPSkyCreator_LerpBackgroundCloudSettings, InBackgroundCloudSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpBackgroundCloudSettings::InBackgroundCloudSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpBackgroundCloudSettings, InBackgroundCloudSettingsB) == 0x000024, "Member 'PPSkyCreator_LerpBackgroundCloudSettings::InBackgroundCloudSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpBackgroundCloudSettings, Alpha) == 0x000048, "Member 'PPSkyCreator_LerpBackgroundCloudSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpExponentialHeightFogSettings
// 0x00CC (0x00CC - 0x0000)
struct PPSkyCreator_LerpExponentialHeightFogSettings final
{
public:
	struct FPPSkyCreatorExponentialHeightFogSettings InExponentialHeightFogSettingsA;                   // 0x0000(0x0064)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorExponentialHeightFogSettings InExponentialHeightFogSettingsB;                   // 0x0064(0x0064)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpExponentialHeightFogSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpExponentialHeightFogSettings");
static_assert(sizeof(PPSkyCreator_LerpExponentialHeightFogSettings) == 0x0000CC, "Wrong size on PPSkyCreator_LerpExponentialHeightFogSettings");
static_assert(offsetof(PPSkyCreator_LerpExponentialHeightFogSettings, InExponentialHeightFogSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpExponentialHeightFogSettings::InExponentialHeightFogSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpExponentialHeightFogSettings, InExponentialHeightFogSettingsB) == 0x000064, "Member 'PPSkyCreator_LerpExponentialHeightFogSettings::InExponentialHeightFogSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpExponentialHeightFogSettings, Alpha) == 0x0000C8, "Member 'PPSkyCreator_LerpExponentialHeightFogSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpMoonLightSettings
// 0x0094 (0x0094 - 0x0000)
struct PPSkyCreator_LerpMoonLightSettings final
{
public:
	struct FPPSkyCreatorMoonLightSettings         InMoonLightSettingsA;                              // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorMoonLightSettings         InMoonLightSettingsB;                              // 0x0048(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpMoonLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpMoonLightSettings");
static_assert(sizeof(PPSkyCreator_LerpMoonLightSettings) == 0x000094, "Wrong size on PPSkyCreator_LerpMoonLightSettings");
static_assert(offsetof(PPSkyCreator_LerpMoonLightSettings, InMoonLightSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpMoonLightSettings::InMoonLightSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpMoonLightSettings, InMoonLightSettingsB) == 0x000048, "Member 'PPSkyCreator_LerpMoonLightSettings::InMoonLightSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpMoonLightSettings, Alpha) == 0x000090, "Member 'PPSkyCreator_LerpMoonLightSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpPostProcessSettings
// 0x001C (0x001C - 0x0000)
struct PPSkyCreator_LerpPostProcessSettings final
{
public:
	struct FPPSkyCreatorPostProcessSettings       InPostProcessSettingsA;                            // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorPostProcessSettings       InPostProcessSettingsB;                            // 0x000C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpPostProcessSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpPostProcessSettings");
static_assert(sizeof(PPSkyCreator_LerpPostProcessSettings) == 0x00001C, "Wrong size on PPSkyCreator_LerpPostProcessSettings");
static_assert(offsetof(PPSkyCreator_LerpPostProcessSettings, InPostProcessSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpPostProcessSettings::InPostProcessSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpPostProcessSettings, InPostProcessSettingsB) == 0x00000C, "Member 'PPSkyCreator_LerpPostProcessSettings::InPostProcessSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpPostProcessSettings, Alpha) == 0x000018, "Member 'PPSkyCreator_LerpPostProcessSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpPuddlesAmount
// 0x000C (0x000C - 0x0000)
struct PPSkyCreator_LerpPuddlesAmount final
{
public:
	float                                         PuddlesAmountA;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesAmountB;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpPuddlesAmount) == 0x000004, "Wrong alignment on PPSkyCreator_LerpPuddlesAmount");
static_assert(sizeof(PPSkyCreator_LerpPuddlesAmount) == 0x00000C, "Wrong size on PPSkyCreator_LerpPuddlesAmount");
static_assert(offsetof(PPSkyCreator_LerpPuddlesAmount, PuddlesAmountA) == 0x000000, "Member 'PPSkyCreator_LerpPuddlesAmount::PuddlesAmountA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpPuddlesAmount, PuddlesAmountB) == 0x000004, "Member 'PPSkyCreator_LerpPuddlesAmount::PuddlesAmountB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpPuddlesAmount, Alpha) == 0x000008, "Member 'PPSkyCreator_LerpPuddlesAmount::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpSkyAtmosphereSettings
// 0x0104 (0x0104 - 0x0000)
struct PPSkyCreator_LerpSkyAtmosphereSettings final
{
public:
	struct FPPSkyCreatorSkyAtmosphereSettings     InSkyAtmosphereSettingsA;                          // 0x0000(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSkyAtmosphereSettings     InSkyAtmosphereSettingsB;                          // 0x0080(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpSkyAtmosphereSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpSkyAtmosphereSettings");
static_assert(sizeof(PPSkyCreator_LerpSkyAtmosphereSettings) == 0x000104, "Wrong size on PPSkyCreator_LerpSkyAtmosphereSettings");
static_assert(offsetof(PPSkyCreator_LerpSkyAtmosphereSettings, InSkyAtmosphereSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpSkyAtmosphereSettings::InSkyAtmosphereSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSkyAtmosphereSettings, InSkyAtmosphereSettingsB) == 0x000080, "Member 'PPSkyCreator_LerpSkyAtmosphereSettings::InSkyAtmosphereSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSkyAtmosphereSettings, Alpha) == 0x000100, "Member 'PPSkyCreator_LerpSkyAtmosphereSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpSkyLightSettings
// 0x005C (0x005C - 0x0000)
struct PPSkyCreator_LerpSkyLightSettings final
{
public:
	struct FPPSkyCreatorSkyLightSettings          InSkyLightSettingsA;                               // 0x0000(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSkyLightSettings          InSkyLightSettingsB;                               // 0x002C(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpSkyLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpSkyLightSettings");
static_assert(sizeof(PPSkyCreator_LerpSkyLightSettings) == 0x00005C, "Wrong size on PPSkyCreator_LerpSkyLightSettings");
static_assert(offsetof(PPSkyCreator_LerpSkyLightSettings, InSkyLightSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpSkyLightSettings::InSkyLightSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSkyLightSettings, InSkyLightSettingsB) == 0x00002C, "Member 'PPSkyCreator_LerpSkyLightSettings::InSkyLightSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSkyLightSettings, Alpha) == 0x000058, "Member 'PPSkyCreator_LerpSkyLightSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpSnowAmount
// 0x000C (0x000C - 0x0000)
struct PPSkyCreator_LerpSnowAmount final
{
public:
	float                                         SnowAmountA;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowAmountB;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpSnowAmount) == 0x000004, "Wrong alignment on PPSkyCreator_LerpSnowAmount");
static_assert(sizeof(PPSkyCreator_LerpSnowAmount) == 0x00000C, "Wrong size on PPSkyCreator_LerpSnowAmount");
static_assert(offsetof(PPSkyCreator_LerpSnowAmount, SnowAmountA) == 0x000000, "Member 'PPSkyCreator_LerpSnowAmount::SnowAmountA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSnowAmount, SnowAmountB) == 0x000004, "Member 'PPSkyCreator_LerpSnowAmount::SnowAmountB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSnowAmount, Alpha) == 0x000008, "Member 'PPSkyCreator_LerpSnowAmount::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpStarMapSettings
// 0x0094 (0x0094 - 0x0000)
struct PPSkyCreator_LerpStarMapSettings final
{
public:
	struct FPPSkyCreatorStarMapSettings           InStarMapSettingsA;                                // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorStarMapSettings           InStarMapSettingsB;                                // 0x0048(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpStarMapSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpStarMapSettings");
static_assert(sizeof(PPSkyCreator_LerpStarMapSettings) == 0x000094, "Wrong size on PPSkyCreator_LerpStarMapSettings");
static_assert(offsetof(PPSkyCreator_LerpStarMapSettings, InStarMapSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpStarMapSettings::InStarMapSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpStarMapSettings, InStarMapSettingsB) == 0x000048, "Member 'PPSkyCreator_LerpStarMapSettings::InStarMapSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpStarMapSettings, Alpha) == 0x000090, "Member 'PPSkyCreator_LerpStarMapSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpSunLightSettings
// 0x0094 (0x0094 - 0x0000)
struct PPSkyCreator_LerpSunLightSettings final
{
public:
	struct FPPSkyCreatorSunLightSettings          InSunLightSettingsA;                               // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSunLightSettings          InSunLightSettingsB;                               // 0x0048(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpSunLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpSunLightSettings");
static_assert(sizeof(PPSkyCreator_LerpSunLightSettings) == 0x000094, "Wrong size on PPSkyCreator_LerpSunLightSettings");
static_assert(offsetof(PPSkyCreator_LerpSunLightSettings, InSunLightSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpSunLightSettings::InSunLightSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSunLightSettings, InSunLightSettingsB) == 0x000048, "Member 'PPSkyCreator_LerpSunLightSettings::InSunLightSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpSunLightSettings, Alpha) == 0x000090, "Member 'PPSkyCreator_LerpSunLightSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpVolumetricCloudSettings
// 0x0154 (0x0154 - 0x0000)
struct PPSkyCreator_LerpVolumetricCloudSettings final
{
public:
	struct FPPSkyCreatorVolumetricCloudSettings   InVolumetricCloudSettingsA;                        // 0x0000(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorVolumetricCloudSettings   InVolumetricCloudSettingsB;                        // 0x00A8(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0150(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpVolumetricCloudSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpVolumetricCloudSettings");
static_assert(sizeof(PPSkyCreator_LerpVolumetricCloudSettings) == 0x000154, "Wrong size on PPSkyCreator_LerpVolumetricCloudSettings");
static_assert(offsetof(PPSkyCreator_LerpVolumetricCloudSettings, InVolumetricCloudSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpVolumetricCloudSettings::InVolumetricCloudSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpVolumetricCloudSettings, InVolumetricCloudSettingsB) == 0x0000A8, "Member 'PPSkyCreator_LerpVolumetricCloudSettings::InVolumetricCloudSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpVolumetricCloudSettings, Alpha) == 0x000150, "Member 'PPSkyCreator_LerpVolumetricCloudSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpWeatherFXSettings
// 0x0228 (0x0228 - 0x0000)
struct PPSkyCreator_LerpWeatherFXSettings final
{
public:
	struct FPPSkyCreatorWeatherFXSettings         InWeatherFXSettingsA;                              // 0x0000(0x0110)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWeatherFXSettings         InWeatherFXSettingsB;                              // 0x0110(0x0110)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0220(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C08[0x4];                                     // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PPSkyCreator_LerpWeatherFXSettings) == 0x000008, "Wrong alignment on PPSkyCreator_LerpWeatherFXSettings");
static_assert(sizeof(PPSkyCreator_LerpWeatherFXSettings) == 0x000228, "Wrong size on PPSkyCreator_LerpWeatherFXSettings");
static_assert(offsetof(PPSkyCreator_LerpWeatherFXSettings, InWeatherFXSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpWeatherFXSettings::InWeatherFXSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWeatherFXSettings, InWeatherFXSettingsB) == 0x000110, "Member 'PPSkyCreator_LerpWeatherFXSettings::InWeatherFXSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWeatherFXSettings, Alpha) == 0x000220, "Member 'PPSkyCreator_LerpWeatherFXSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpWeatherMaterialFXSettings
// 0x00D4 (0x00D4 - 0x0000)
struct PPSkyCreator_LerpWeatherMaterialFXSettings final
{
public:
	struct FPPSkyCreatorWeatherMaterialFXSettings InWeatherMaterialFXSettingsA;                      // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWeatherMaterialFXSettings InWeatherMaterialFXSettingsB;                      // 0x0068(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpWeatherMaterialFXSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpWeatherMaterialFXSettings");
static_assert(sizeof(PPSkyCreator_LerpWeatherMaterialFXSettings) == 0x0000D4, "Wrong size on PPSkyCreator_LerpWeatherMaterialFXSettings");
static_assert(offsetof(PPSkyCreator_LerpWeatherMaterialFXSettings, InWeatherMaterialFXSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpWeatherMaterialFXSettings::InWeatherMaterialFXSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWeatherMaterialFXSettings, InWeatherMaterialFXSettingsB) == 0x000068, "Member 'PPSkyCreator_LerpWeatherMaterialFXSettings::InWeatherMaterialFXSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWeatherMaterialFXSettings, Alpha) == 0x0000D0, "Member 'PPSkyCreator_LerpWeatherMaterialFXSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpWeatherSettings
// 0x08B8 (0x08B8 - 0x0000)
struct PPSkyCreator_LerpWeatherSettings final
{
public:
	struct FPPSkyCreatorWeatherSettings           InWeatherSettingsA;                                // 0x0000(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWeatherSettings           InWeatherSettingsB;                                // 0x0458(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x08B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C09[0x4];                                     // 0x08B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PPSkyCreator_LerpWeatherSettings) == 0x000008, "Wrong alignment on PPSkyCreator_LerpWeatherSettings");
static_assert(sizeof(PPSkyCreator_LerpWeatherSettings) == 0x0008B8, "Wrong size on PPSkyCreator_LerpWeatherSettings");
static_assert(offsetof(PPSkyCreator_LerpWeatherSettings, InWeatherSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpWeatherSettings::InWeatherSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWeatherSettings, InWeatherSettingsB) == 0x000458, "Member 'PPSkyCreator_LerpWeatherSettings::InWeatherSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWeatherSettings, Alpha) == 0x0008B0, "Member 'PPSkyCreator_LerpWeatherSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpWetnessAmount
// 0x000C (0x000C - 0x0000)
struct PPSkyCreator_LerpWetnessAmount final
{
public:
	float                                         WetnessAmountA;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessAmountB;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpWetnessAmount) == 0x000004, "Wrong alignment on PPSkyCreator_LerpWetnessAmount");
static_assert(sizeof(PPSkyCreator_LerpWetnessAmount) == 0x00000C, "Wrong size on PPSkyCreator_LerpWetnessAmount");
static_assert(offsetof(PPSkyCreator_LerpWetnessAmount, WetnessAmountA) == 0x000000, "Member 'PPSkyCreator_LerpWetnessAmount::WetnessAmountA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWetnessAmount, WetnessAmountB) == 0x000004, "Member 'PPSkyCreator_LerpWetnessAmount::WetnessAmountB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWetnessAmount, Alpha) == 0x000008, "Member 'PPSkyCreator_LerpWetnessAmount::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpWindIndependentSettings
// 0x003C (0x003C - 0x0000)
struct PPSkyCreator_LerpWindIndependentSettings final
{
public:
	struct FPPSkyCreatorWindSettings              InWindSettingsA;                                   // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWindSettings              InWindSettingsB;                                   // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpWindIndependentSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpWindIndependentSettings");
static_assert(sizeof(PPSkyCreator_LerpWindIndependentSettings) == 0x00003C, "Wrong size on PPSkyCreator_LerpWindIndependentSettings");
static_assert(offsetof(PPSkyCreator_LerpWindIndependentSettings, InWindSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpWindIndependentSettings::InWindSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWindIndependentSettings, InWindSettingsB) == 0x00001C, "Member 'PPSkyCreator_LerpWindIndependentSettings::InWindSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWindIndependentSettings, Alpha) == 0x000038, "Member 'PPSkyCreator_LerpWindIndependentSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.LerpWindSettings
// 0x003C (0x003C - 0x0000)
struct PPSkyCreator_LerpWindSettings final
{
public:
	struct FPPSkyCreatorWindSettings              InWindSettingsA;                                   // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWindSettings              InWindSettingsB;                                   // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_LerpWindSettings) == 0x000004, "Wrong alignment on PPSkyCreator_LerpWindSettings");
static_assert(sizeof(PPSkyCreator_LerpWindSettings) == 0x00003C, "Wrong size on PPSkyCreator_LerpWindSettings");
static_assert(offsetof(PPSkyCreator_LerpWindSettings, InWindSettingsA) == 0x000000, "Member 'PPSkyCreator_LerpWindSettings::InWindSettingsA' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWindSettings, InWindSettingsB) == 0x00001C, "Member 'PPSkyCreator_LerpWindSettings::InWindSettingsB' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_LerpWindSettings, Alpha) == 0x000038, "Member 'PPSkyCreator_LerpWindSettings::Alpha' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.RealtimeTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct PPSkyCreator_RealtimeTimeOfDay final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DayCycleDuration;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_RealtimeTimeOfDay) == 0x000004, "Wrong alignment on PPSkyCreator_RealtimeTimeOfDay");
static_assert(sizeof(PPSkyCreator_RealtimeTimeOfDay) == 0x000008, "Wrong size on PPSkyCreator_RealtimeTimeOfDay");
static_assert(offsetof(PPSkyCreator_RealtimeTimeOfDay, DeltaSeconds) == 0x000000, "Member 'PPSkyCreator_RealtimeTimeOfDay::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_RealtimeTimeOfDay, DayCycleDuration) == 0x000004, "Member 'PPSkyCreator_RealtimeTimeOfDay::DayCycleDuration' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetBackgroundCloudSettings
// 0x0024 (0x0024 - 0x0000)
struct PPSkyCreator_SetBackgroundCloudSettings final
{
public:
	struct FPPSkyCreatorBackgroundCloudSettings   InBackgroundCloudSettings;                         // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetBackgroundCloudSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetBackgroundCloudSettings");
static_assert(sizeof(PPSkyCreator_SetBackgroundCloudSettings) == 0x000024, "Wrong size on PPSkyCreator_SetBackgroundCloudSettings");
static_assert(offsetof(PPSkyCreator_SetBackgroundCloudSettings, InBackgroundCloudSettings) == 0x000000, "Member 'PPSkyCreator_SetBackgroundCloudSettings::InBackgroundCloudSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetbDaylightSavingTime
// 0x0001 (0x0001 - 0x0000)
struct PPSkyCreator_SetbDaylightSavingTime final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetbDaylightSavingTime) == 0x000001, "Wrong alignment on PPSkyCreator_SetbDaylightSavingTime");
static_assert(sizeof(PPSkyCreator_SetbDaylightSavingTime) == 0x000001, "Wrong size on PPSkyCreator_SetbDaylightSavingTime");
static_assert(offsetof(PPSkyCreator_SetbDaylightSavingTime, NewValue) == 0x000000, "Member 'PPSkyCreator_SetbDaylightSavingTime::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetCloudMapOffset
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreator_SetCloudMapOffset final
{
public:
	struct FVector2D                              NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetCloudMapOffset) == 0x000008, "Wrong alignment on PPSkyCreator_SetCloudMapOffset");
static_assert(sizeof(PPSkyCreator_SetCloudMapOffset) == 0x000010, "Wrong size on PPSkyCreator_SetCloudMapOffset");
static_assert(offsetof(PPSkyCreator_SetCloudMapOffset, NewValue) == 0x000000, "Member 'PPSkyCreator_SetCloudMapOffset::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetDay
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetDay final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetDay) == 0x000004, "Wrong alignment on PPSkyCreator_SetDay");
static_assert(sizeof(PPSkyCreator_SetDay) == 0x000004, "Wrong size on PPSkyCreator_SetDay");
static_assert(offsetof(PPSkyCreator_SetDay, NewValue) == 0x000000, "Member 'PPSkyCreator_SetDay::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetEditorTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetEditorTimeOfDay final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetEditorTimeOfDay) == 0x000004, "Wrong alignment on PPSkyCreator_SetEditorTimeOfDay");
static_assert(sizeof(PPSkyCreator_SetEditorTimeOfDay) == 0x000004, "Wrong size on PPSkyCreator_SetEditorTimeOfDay");
static_assert(offsetof(PPSkyCreator_SetEditorTimeOfDay, NewValue) == 0x000000, "Member 'PPSkyCreator_SetEditorTimeOfDay::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetEditorWeatherPreset
// 0x0008 (0x0008 - 0x0000)
struct PPSkyCreator_SetEditorWeatherPreset final
{
public:
	class UPPSkyCreatorWeatherPreset*             NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetEditorWeatherPreset) == 0x000008, "Wrong alignment on PPSkyCreator_SetEditorWeatherPreset");
static_assert(sizeof(PPSkyCreator_SetEditorWeatherPreset) == 0x000008, "Wrong size on PPSkyCreator_SetEditorWeatherPreset");
static_assert(offsetof(PPSkyCreator_SetEditorWeatherPreset, NewValue) == 0x000000, "Member 'PPSkyCreator_SetEditorWeatherPreset::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetEditorWeatherSettings
// 0x0458 (0x0458 - 0x0000)
struct PPSkyCreator_SetEditorWeatherSettings final
{
public:
	struct FPPSkyCreatorWeatherSettings           NewValue;                                          // 0x0000(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetEditorWeatherSettings) == 0x000008, "Wrong alignment on PPSkyCreator_SetEditorWeatherSettings");
static_assert(sizeof(PPSkyCreator_SetEditorWeatherSettings) == 0x000458, "Wrong size on PPSkyCreator_SetEditorWeatherSettings");
static_assert(offsetof(PPSkyCreator_SetEditorWeatherSettings, NewValue) == 0x000000, "Member 'PPSkyCreator_SetEditorWeatherSettings::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetExponentialHeightFogSettings
// 0x0064 (0x0064 - 0x0000)
struct PPSkyCreator_SetExponentialHeightFogSettings final
{
public:
	struct FPPSkyCreatorExponentialHeightFogSettings InExponentialHeightFogSettings;                    // 0x0000(0x0064)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetExponentialHeightFogSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetExponentialHeightFogSettings");
static_assert(sizeof(PPSkyCreator_SetExponentialHeightFogSettings) == 0x000064, "Wrong size on PPSkyCreator_SetExponentialHeightFogSettings");
static_assert(offsetof(PPSkyCreator_SetExponentialHeightFogSettings, InExponentialHeightFogSettings) == 0x000000, "Member 'PPSkyCreator_SetExponentialHeightFogSettings::InExponentialHeightFogSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetLatitude
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetLatitude final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetLatitude) == 0x000004, "Wrong alignment on PPSkyCreator_SetLatitude");
static_assert(sizeof(PPSkyCreator_SetLatitude) == 0x000004, "Wrong size on PPSkyCreator_SetLatitude");
static_assert(offsetof(PPSkyCreator_SetLatitude, NewValue) == 0x000000, "Member 'PPSkyCreator_SetLatitude::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetLayerBottomAltitude
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetLayerBottomAltitude final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetLayerBottomAltitude) == 0x000004, "Wrong alignment on PPSkyCreator_SetLayerBottomAltitude");
static_assert(sizeof(PPSkyCreator_SetLayerBottomAltitude) == 0x000004, "Wrong size on PPSkyCreator_SetLayerBottomAltitude");
static_assert(offsetof(PPSkyCreator_SetLayerBottomAltitude, NewValue) == 0x000000, "Member 'PPSkyCreator_SetLayerBottomAltitude::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetLayerHeight
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetLayerHeight final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetLayerHeight) == 0x000004, "Wrong alignment on PPSkyCreator_SetLayerHeight");
static_assert(sizeof(PPSkyCreator_SetLayerHeight) == 0x000004, "Wrong size on PPSkyCreator_SetLayerHeight");
static_assert(offsetof(PPSkyCreator_SetLayerHeight, NewValue) == 0x000000, "Member 'PPSkyCreator_SetLayerHeight::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetLongitude
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetLongitude final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetLongitude) == 0x000004, "Wrong alignment on PPSkyCreator_SetLongitude");
static_assert(sizeof(PPSkyCreator_SetLongitude) == 0x000004, "Wrong size on PPSkyCreator_SetLongitude");
static_assert(offsetof(PPSkyCreator_SetLongitude, NewValue) == 0x000000, "Member 'PPSkyCreator_SetLongitude::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMonth
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMonth final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMonth) == 0x000004, "Wrong alignment on PPSkyCreator_SetMonth");
static_assert(sizeof(PPSkyCreator_SetMonth) == 0x000004, "Wrong size on PPSkyCreator_SetMonth");
static_assert(offsetof(PPSkyCreator_SetMonth, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMonth::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonAtmosphereDiskColorScale
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreator_SetMoonAtmosphereDiskColorScale final
{
public:
	struct FLinearColor                           NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonAtmosphereDiskColorScale) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonAtmosphereDiskColorScale");
static_assert(sizeof(PPSkyCreator_SetMoonAtmosphereDiskColorScale) == 0x000010, "Wrong size on PPSkyCreator_SetMoonAtmosphereDiskColorScale");
static_assert(offsetof(PPSkyCreator_SetMoonAtmosphereDiskColorScale, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonAtmosphereDiskColorScale::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonAzimuth
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonAzimuth final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonAzimuth) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonAzimuth");
static_assert(sizeof(PPSkyCreator_SetMoonAzimuth) == 0x000004, "Wrong size on PPSkyCreator_SetMoonAzimuth");
static_assert(offsetof(PPSkyCreator_SetMoonAzimuth, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonAzimuth::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonDiskSize
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonDiskSize final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonDiskSize) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonDiskSize");
static_assert(sizeof(PPSkyCreator_SetMoonDiskSize) == 0x000004, "Wrong size on PPSkyCreator_SetMoonDiskSize");
static_assert(offsetof(PPSkyCreator_SetMoonDiskSize, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonDiskSize::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonElevation
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonElevation final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonElevation) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonElevation");
static_assert(sizeof(PPSkyCreator_SetMoonElevation) == 0x000004, "Wrong size on PPSkyCreator_SetMoonElevation");
static_assert(offsetof(PPSkyCreator_SetMoonElevation, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonElevation::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonIntensity
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonIntensity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonIntensity) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonIntensity");
static_assert(sizeof(PPSkyCreator_SetMoonIntensity) == 0x000004, "Wrong size on PPSkyCreator_SetMoonIntensity");
static_assert(offsetof(PPSkyCreator_SetMoonIntensity, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonIntensity::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonLightSettings
// 0x0048 (0x0048 - 0x0000)
struct PPSkyCreator_SetMoonLightSettings final
{
public:
	struct FPPSkyCreatorMoonLightSettings         InMoonLightSettings;                               // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonLightSettings");
static_assert(sizeof(PPSkyCreator_SetMoonLightSettings) == 0x000048, "Wrong size on PPSkyCreator_SetMoonLightSettings");
static_assert(offsetof(PPSkyCreator_SetMoonLightSettings, InMoonLightSettings) == 0x000000, "Member 'PPSkyCreator_SetMoonLightSettings::InMoonLightSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonPhase
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonPhase final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonPhase) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonPhase");
static_assert(sizeof(PPSkyCreator_SetMoonPhase) == 0x000004, "Wrong size on PPSkyCreator_SetMoonPhase");
static_assert(offsetof(PPSkyCreator_SetMoonPhase, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonPhase::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonriseTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonriseTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonriseTime) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonriseTime");
static_assert(sizeof(PPSkyCreator_SetMoonriseTime) == 0x000004, "Wrong size on PPSkyCreator_SetMoonriseTime");
static_assert(offsetof(PPSkyCreator_SetMoonriseTime, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonriseTime::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonRotation
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonRotation final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonRotation) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonRotation");
static_assert(sizeof(PPSkyCreator_SetMoonRotation) == 0x000004, "Wrong size on PPSkyCreator_SetMoonRotation");
static_assert(offsetof(PPSkyCreator_SetMoonRotation, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonRotation::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonsetTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetMoonsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonsetTime) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonsetTime");
static_assert(sizeof(PPSkyCreator_SetMoonsetTime) == 0x000004, "Wrong size on PPSkyCreator_SetMoonsetTime");
static_assert(offsetof(PPSkyCreator_SetMoonsetTime, NewValue) == 0x000000, "Member 'PPSkyCreator_SetMoonsetTime::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetMoonSimplePositionSettings
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreator_SetMoonSimplePositionSettings final
{
public:
	float                                         InMoonriseTime;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoonsetTime;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoonElevation;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoonAzimuth;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetMoonSimplePositionSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetMoonSimplePositionSettings");
static_assert(sizeof(PPSkyCreator_SetMoonSimplePositionSettings) == 0x000010, "Wrong size on PPSkyCreator_SetMoonSimplePositionSettings");
static_assert(offsetof(PPSkyCreator_SetMoonSimplePositionSettings, InMoonriseTime) == 0x000000, "Member 'PPSkyCreator_SetMoonSimplePositionSettings::InMoonriseTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetMoonSimplePositionSettings, InMoonsetTime) == 0x000004, "Member 'PPSkyCreator_SetMoonSimplePositionSettings::InMoonsetTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetMoonSimplePositionSettings, InMoonElevation) == 0x000008, "Member 'PPSkyCreator_SetMoonSimplePositionSettings::InMoonElevation' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetMoonSimplePositionSettings, InMoonAzimuth) == 0x00000C, "Member 'PPSkyCreator_SetMoonSimplePositionSettings::InMoonAzimuth' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetPostProcessSettings
// 0x000C (0x000C - 0x0000)
struct PPSkyCreator_SetPostProcessSettings final
{
public:
	struct FPPSkyCreatorPostProcessSettings       InPostProcessSettings;                             // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetPostProcessSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetPostProcessSettings");
static_assert(sizeof(PPSkyCreator_SetPostProcessSettings) == 0x00000C, "Wrong size on PPSkyCreator_SetPostProcessSettings");
static_assert(offsetof(PPSkyCreator_SetPostProcessSettings, InPostProcessSettings) == 0x000000, "Member 'PPSkyCreator_SetPostProcessSettings::InPostProcessSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetRealPositionSettings
// 0x001C (0x001C - 0x0000)
struct PPSkyCreator_SetRealPositionSettings final
{
public:
	float                                         InLatitude;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLongitude;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeZone;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbDaylightSavingTime;                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InYear;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMonth;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDay;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetRealPositionSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetRealPositionSettings");
static_assert(sizeof(PPSkyCreator_SetRealPositionSettings) == 0x00001C, "Wrong size on PPSkyCreator_SetRealPositionSettings");
static_assert(offsetof(PPSkyCreator_SetRealPositionSettings, InLatitude) == 0x000000, "Member 'PPSkyCreator_SetRealPositionSettings::InLatitude' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetRealPositionSettings, InLongitude) == 0x000004, "Member 'PPSkyCreator_SetRealPositionSettings::InLongitude' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetRealPositionSettings, InTimeZone) == 0x000008, "Member 'PPSkyCreator_SetRealPositionSettings::InTimeZone' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetRealPositionSettings, InbDaylightSavingTime) == 0x00000C, "Member 'PPSkyCreator_SetRealPositionSettings::InbDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetRealPositionSettings, InYear) == 0x000010, "Member 'PPSkyCreator_SetRealPositionSettings::InYear' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetRealPositionSettings, InMonth) == 0x000014, "Member 'PPSkyCreator_SetRealPositionSettings::InMonth' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetRealPositionSettings, InDay) == 0x000018, "Member 'PPSkyCreator_SetRealPositionSettings::InDay' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSkyAtmosphereSettings
// 0x0080 (0x0080 - 0x0000)
struct PPSkyCreator_SetSkyAtmosphereSettings final
{
public:
	struct FPPSkyCreatorSkyAtmosphereSettings     InSkyAtmosphereSettings;                           // 0x0000(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSkyAtmosphereSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetSkyAtmosphereSettings");
static_assert(sizeof(PPSkyCreator_SetSkyAtmosphereSettings) == 0x000080, "Wrong size on PPSkyCreator_SetSkyAtmosphereSettings");
static_assert(offsetof(PPSkyCreator_SetSkyAtmosphereSettings, InSkyAtmosphereSettings) == 0x000000, "Member 'PPSkyCreator_SetSkyAtmosphereSettings::InSkyAtmosphereSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSkyLightSettings
// 0x002C (0x002C - 0x0000)
struct PPSkyCreator_SetSkyLightSettings final
{
public:
	struct FPPSkyCreatorSkyLightSettings          InSkyLightSettings;                                // 0x0000(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSkyLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetSkyLightSettings");
static_assert(sizeof(PPSkyCreator_SetSkyLightSettings) == 0x00002C, "Wrong size on PPSkyCreator_SetSkyLightSettings");
static_assert(offsetof(PPSkyCreator_SetSkyLightSettings, InSkyLightSettings) == 0x000000, "Member 'PPSkyCreator_SetSkyLightSettings::InSkyLightSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetStarMapAdditionalRotation
// 0x0018 (0x0018 - 0x0000)
struct PPSkyCreator_SetStarMapAdditionalRotation final
{
public:
	struct FVector                                NewValue;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetStarMapAdditionalRotation) == 0x000008, "Wrong alignment on PPSkyCreator_SetStarMapAdditionalRotation");
static_assert(sizeof(PPSkyCreator_SetStarMapAdditionalRotation) == 0x000018, "Wrong size on PPSkyCreator_SetStarMapAdditionalRotation");
static_assert(offsetof(PPSkyCreator_SetStarMapAdditionalRotation, NewValue) == 0x000000, "Member 'PPSkyCreator_SetStarMapAdditionalRotation::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetStarMapSettings
// 0x0048 (0x0048 - 0x0000)
struct PPSkyCreator_SetStarMapSettings final
{
public:
	struct FPPSkyCreatorStarMapSettings           InStarMapSettings;                                 // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetStarMapSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetStarMapSettings");
static_assert(sizeof(PPSkyCreator_SetStarMapSettings) == 0x000048, "Wrong size on PPSkyCreator_SetStarMapSettings");
static_assert(offsetof(PPSkyCreator_SetStarMapSettings, InStarMapSettings) == 0x000000, "Member 'PPSkyCreator_SetStarMapSettings::InStarMapSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunAtmosphereDiskColorScale
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreator_SetSunAtmosphereDiskColorScale final
{
public:
	struct FLinearColor                           NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunAtmosphereDiskColorScale) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunAtmosphereDiskColorScale");
static_assert(sizeof(PPSkyCreator_SetSunAtmosphereDiskColorScale) == 0x000010, "Wrong size on PPSkyCreator_SetSunAtmosphereDiskColorScale");
static_assert(offsetof(PPSkyCreator_SetSunAtmosphereDiskColorScale, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunAtmosphereDiskColorScale::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunAzimuth
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunAzimuth final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunAzimuth) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunAzimuth");
static_assert(sizeof(PPSkyCreator_SetSunAzimuth) == 0x000004, "Wrong size on PPSkyCreator_SetSunAzimuth");
static_assert(offsetof(PPSkyCreator_SetSunAzimuth, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunAzimuth::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunDawnOffsetTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunDawnOffsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunDawnOffsetTime) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunDawnOffsetTime");
static_assert(sizeof(PPSkyCreator_SetSunDawnOffsetTime) == 0x000004, "Wrong size on PPSkyCreator_SetSunDawnOffsetTime");
static_assert(offsetof(PPSkyCreator_SetSunDawnOffsetTime, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunDawnOffsetTime::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunDiskSize
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunDiskSize final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunDiskSize) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunDiskSize");
static_assert(sizeof(PPSkyCreator_SetSunDiskSize) == 0x000004, "Wrong size on PPSkyCreator_SetSunDiskSize");
static_assert(offsetof(PPSkyCreator_SetSunDiskSize, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunDiskSize::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunDuskOffsetTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunDuskOffsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunDuskOffsetTime) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunDuskOffsetTime");
static_assert(sizeof(PPSkyCreator_SetSunDuskOffsetTime) == 0x000004, "Wrong size on PPSkyCreator_SetSunDuskOffsetTime");
static_assert(offsetof(PPSkyCreator_SetSunDuskOffsetTime, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunDuskOffsetTime::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunElevation
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunElevation final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunElevation) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunElevation");
static_assert(sizeof(PPSkyCreator_SetSunElevation) == 0x000004, "Wrong size on PPSkyCreator_SetSunElevation");
static_assert(offsetof(PPSkyCreator_SetSunElevation, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunElevation::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunIntensity
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunIntensity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunIntensity) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunIntensity");
static_assert(sizeof(PPSkyCreator_SetSunIntensity) == 0x000004, "Wrong size on PPSkyCreator_SetSunIntensity");
static_assert(offsetof(PPSkyCreator_SetSunIntensity, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunIntensity::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunLightSettings
// 0x0048 (0x0048 - 0x0000)
struct PPSkyCreator_SetSunLightSettings final
{
public:
	struct FPPSkyCreatorSunLightSettings          InSunLightSettings;                                // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunLightSettings");
static_assert(sizeof(PPSkyCreator_SetSunLightSettings) == 0x000048, "Wrong size on PPSkyCreator_SetSunLightSettings");
static_assert(offsetof(PPSkyCreator_SetSunLightSettings, InSunLightSettings) == 0x000000, "Member 'PPSkyCreator_SetSunLightSettings::InSunLightSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunMinAngleAtDawnDusk
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunMinAngleAtDawnDusk final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunMinAngleAtDawnDusk) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunMinAngleAtDawnDusk");
static_assert(sizeof(PPSkyCreator_SetSunMinAngleAtDawnDusk) == 0x000004, "Wrong size on PPSkyCreator_SetSunMinAngleAtDawnDusk");
static_assert(offsetof(PPSkyCreator_SetSunMinAngleAtDawnDusk, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunMinAngleAtDawnDusk::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunriseTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunriseTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunriseTime) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunriseTime");
static_assert(sizeof(PPSkyCreator_SetSunriseTime) == 0x000004, "Wrong size on PPSkyCreator_SetSunriseTime");
static_assert(offsetof(PPSkyCreator_SetSunriseTime, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunriseTime::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunsetTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetSunsetTime final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunsetTime) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunsetTime");
static_assert(sizeof(PPSkyCreator_SetSunsetTime) == 0x000004, "Wrong size on PPSkyCreator_SetSunsetTime");
static_assert(offsetof(PPSkyCreator_SetSunsetTime, NewValue) == 0x000000, "Member 'PPSkyCreator_SetSunsetTime::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetSunSimplePositionSettings
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreator_SetSunSimplePositionSettings final
{
public:
	float                                         InSunriseTime;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunsetTime;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunElevation;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSunAzimuth;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetSunSimplePositionSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetSunSimplePositionSettings");
static_assert(sizeof(PPSkyCreator_SetSunSimplePositionSettings) == 0x000010, "Wrong size on PPSkyCreator_SetSunSimplePositionSettings");
static_assert(offsetof(PPSkyCreator_SetSunSimplePositionSettings, InSunriseTime) == 0x000000, "Member 'PPSkyCreator_SetSunSimplePositionSettings::InSunriseTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetSunSimplePositionSettings, InSunsetTime) == 0x000004, "Member 'PPSkyCreator_SetSunSimplePositionSettings::InSunsetTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetSunSimplePositionSettings, InSunElevation) == 0x000008, "Member 'PPSkyCreator_SetSunSimplePositionSettings::InSunElevation' has a wrong offset!");
static_assert(offsetof(PPSkyCreator_SetSunSimplePositionSettings, InSunAzimuth) == 0x00000C, "Member 'PPSkyCreator_SetSunSimplePositionSettings::InSunAzimuth' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetTime) == 0x000004, "Wrong alignment on PPSkyCreator_SetTime");
static_assert(sizeof(PPSkyCreator_SetTime) == 0x000004, "Wrong size on PPSkyCreator_SetTime");
static_assert(offsetof(PPSkyCreator_SetTime, InTime) == 0x000000, "Member 'PPSkyCreator_SetTime::InTime' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetTimeZone
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetTimeZone final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetTimeZone) == 0x000004, "Wrong alignment on PPSkyCreator_SetTimeZone");
static_assert(sizeof(PPSkyCreator_SetTimeZone) == 0x000004, "Wrong size on PPSkyCreator_SetTimeZone");
static_assert(offsetof(PPSkyCreator_SetTimeZone, NewValue) == 0x000000, "Member 'PPSkyCreator_SetTimeZone::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetVolumetricCloudSettings
// 0x00A8 (0x00A8 - 0x0000)
struct PPSkyCreator_SetVolumetricCloudSettings final
{
public:
	struct FPPSkyCreatorVolumetricCloudSettings   InVolumetricCloudSettings;                         // 0x0000(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetVolumetricCloudSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetVolumetricCloudSettings");
static_assert(sizeof(PPSkyCreator_SetVolumetricCloudSettings) == 0x0000A8, "Wrong size on PPSkyCreator_SetVolumetricCloudSettings");
static_assert(offsetof(PPSkyCreator_SetVolumetricCloudSettings, InVolumetricCloudSettings) == 0x000000, "Member 'PPSkyCreator_SetVolumetricCloudSettings::InVolumetricCloudSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetWeatherFXSettings
// 0x0110 (0x0110 - 0x0000)
struct PPSkyCreator_SetWeatherFXSettings final
{
public:
	struct FPPSkyCreatorWeatherFXSettings         InWeatherFXSettings;                               // 0x0000(0x0110)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetWeatherFXSettings) == 0x000008, "Wrong alignment on PPSkyCreator_SetWeatherFXSettings");
static_assert(sizeof(PPSkyCreator_SetWeatherFXSettings) == 0x000110, "Wrong size on PPSkyCreator_SetWeatherFXSettings");
static_assert(offsetof(PPSkyCreator_SetWeatherFXSettings, InWeatherFXSettings) == 0x000000, "Member 'PPSkyCreator_SetWeatherFXSettings::InWeatherFXSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetWeatherMaterialFXSettings
// 0x0068 (0x0068 - 0x0000)
struct PPSkyCreator_SetWeatherMaterialFXSettings final
{
public:
	struct FPPSkyCreatorWeatherMaterialFXSettings InWeatherMaterialFXSettings;                       // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetWeatherMaterialFXSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetWeatherMaterialFXSettings");
static_assert(sizeof(PPSkyCreator_SetWeatherMaterialFXSettings) == 0x000068, "Wrong size on PPSkyCreator_SetWeatherMaterialFXSettings");
static_assert(offsetof(PPSkyCreator_SetWeatherMaterialFXSettings, InWeatherMaterialFXSettings) == 0x000000, "Member 'PPSkyCreator_SetWeatherMaterialFXSettings::InWeatherMaterialFXSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetWeatherSettings
// 0x0458 (0x0458 - 0x0000)
struct PPSkyCreator_SetWeatherSettings final
{
public:
	struct FPPSkyCreatorWeatherSettings           InWeatherSettings;                                 // 0x0000(0x0458)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetWeatherSettings) == 0x000008, "Wrong alignment on PPSkyCreator_SetWeatherSettings");
static_assert(sizeof(PPSkyCreator_SetWeatherSettings) == 0x000458, "Wrong size on PPSkyCreator_SetWeatherSettings");
static_assert(offsetof(PPSkyCreator_SetWeatherSettings, InWeatherSettings) == 0x000000, "Member 'PPSkyCreator_SetWeatherSettings::InWeatherSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetWindIndependentSettings
// 0x001C (0x001C - 0x0000)
struct PPSkyCreator_SetWindIndependentSettings final
{
public:
	struct FPPSkyCreatorWindSettings              InWindSettings;                                    // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetWindIndependentSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetWindIndependentSettings");
static_assert(sizeof(PPSkyCreator_SetWindIndependentSettings) == 0x00001C, "Wrong size on PPSkyCreator_SetWindIndependentSettings");
static_assert(offsetof(PPSkyCreator_SetWindIndependentSettings, InWindSettings) == 0x000000, "Member 'PPSkyCreator_SetWindIndependentSettings::InWindSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetWindSettings
// 0x001C (0x001C - 0x0000)
struct PPSkyCreator_SetWindSettings final
{
public:
	struct FPPSkyCreatorWindSettings              InWindSettings;                                    // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetWindSettings) == 0x000004, "Wrong alignment on PPSkyCreator_SetWindSettings");
static_assert(sizeof(PPSkyCreator_SetWindSettings) == 0x00001C, "Wrong size on PPSkyCreator_SetWindSettings");
static_assert(offsetof(PPSkyCreator_SetWindSettings, InWindSettings) == 0x000000, "Member 'PPSkyCreator_SetWindSettings::InWindSettings' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SetYear
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_SetYear final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SetYear) == 0x000004, "Wrong alignment on PPSkyCreator_SetYear");
static_assert(sizeof(PPSkyCreator_SetYear) == 0x000004, "Wrong size on PPSkyCreator_SetYear");
static_assert(offsetof(PPSkyCreator_SetYear, NewValue) == 0x000000, "Member 'PPSkyCreator_SetYear::NewValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.SpawnLightningStrike
// 0x0018 (0x0018 - 0x0000)
struct PPSkyCreator_SpawnLightningStrike final
{
public:
	struct FVector                                LightningPosition;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_SpawnLightningStrike) == 0x000008, "Wrong alignment on PPSkyCreator_SpawnLightningStrike");
static_assert(sizeof(PPSkyCreator_SpawnLightningStrike) == 0x000018, "Wrong size on PPSkyCreator_SpawnLightningStrike");
static_assert(offsetof(PPSkyCreator_SpawnLightningStrike, LightningPosition) == 0x000000, "Member 'PPSkyCreator_SpawnLightningStrike::LightningPosition' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetBackgroundCloudSettings
// 0x0024 (0x0024 - 0x0000)
struct PPSkyCreator_GetBackgroundCloudSettings final
{
public:
	struct FPPSkyCreatorBackgroundCloudSettings   ReturnValue;                                       // 0x0000(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetBackgroundCloudSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetBackgroundCloudSettings");
static_assert(sizeof(PPSkyCreator_GetBackgroundCloudSettings) == 0x000024, "Wrong size on PPSkyCreator_GetBackgroundCloudSettings");
static_assert(offsetof(PPSkyCreator_GetBackgroundCloudSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetBackgroundCloudSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetExponentialHeightFogSettings
// 0x0064 (0x0064 - 0x0000)
struct PPSkyCreator_GetExponentialHeightFogSettings final
{
public:
	struct FPPSkyCreatorExponentialHeightFogSettings ReturnValue;                                       // 0x0000(0x0064)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetExponentialHeightFogSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetExponentialHeightFogSettings");
static_assert(sizeof(PPSkyCreator_GetExponentialHeightFogSettings) == 0x000064, "Wrong size on PPSkyCreator_GetExponentialHeightFogSettings");
static_assert(offsetof(PPSkyCreator_GetExponentialHeightFogSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetExponentialHeightFogSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetMoonLightSettings
// 0x0048 (0x0048 - 0x0000)
struct PPSkyCreator_GetMoonLightSettings final
{
public:
	struct FPPSkyCreatorMoonLightSettings         ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetMoonLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetMoonLightSettings");
static_assert(sizeof(PPSkyCreator_GetMoonLightSettings) == 0x000048, "Wrong size on PPSkyCreator_GetMoonLightSettings");
static_assert(offsetof(PPSkyCreator_GetMoonLightSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetMoonLightSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetMoonPhase
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_GetMoonPhase final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetMoonPhase) == 0x000004, "Wrong alignment on PPSkyCreator_GetMoonPhase");
static_assert(sizeof(PPSkyCreator_GetMoonPhase) == 0x000004, "Wrong size on PPSkyCreator_GetMoonPhase");
static_assert(offsetof(PPSkyCreator_GetMoonPhase, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetMoonPhase::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetPostProcessSettings
// 0x000C (0x000C - 0x0000)
struct PPSkyCreator_GetPostProcessSettings final
{
public:
	struct FPPSkyCreatorPostProcessSettings       ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetPostProcessSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetPostProcessSettings");
static_assert(sizeof(PPSkyCreator_GetPostProcessSettings) == 0x00000C, "Wrong size on PPSkyCreator_GetPostProcessSettings");
static_assert(offsetof(PPSkyCreator_GetPostProcessSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetPostProcessSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetSkyAtmosphereSettings
// 0x0080 (0x0080 - 0x0000)
struct PPSkyCreator_GetSkyAtmosphereSettings final
{
public:
	struct FPPSkyCreatorSkyAtmosphereSettings     ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetSkyAtmosphereSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetSkyAtmosphereSettings");
static_assert(sizeof(PPSkyCreator_GetSkyAtmosphereSettings) == 0x000080, "Wrong size on PPSkyCreator_GetSkyAtmosphereSettings");
static_assert(offsetof(PPSkyCreator_GetSkyAtmosphereSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetSkyAtmosphereSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetSkyLightSettings
// 0x002C (0x002C - 0x0000)
struct PPSkyCreator_GetSkyLightSettings final
{
public:
	struct FPPSkyCreatorSkyLightSettings          ReturnValue;                                       // 0x0000(0x002C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetSkyLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetSkyLightSettings");
static_assert(sizeof(PPSkyCreator_GetSkyLightSettings) == 0x00002C, "Wrong size on PPSkyCreator_GetSkyLightSettings");
static_assert(offsetof(PPSkyCreator_GetSkyLightSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetSkyLightSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetStarMapRotation
// 0x0018 (0x0018 - 0x0000)
struct PPSkyCreator_GetStarMapRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetStarMapRotation) == 0x000008, "Wrong alignment on PPSkyCreator_GetStarMapRotation");
static_assert(sizeof(PPSkyCreator_GetStarMapRotation) == 0x000018, "Wrong size on PPSkyCreator_GetStarMapRotation");
static_assert(offsetof(PPSkyCreator_GetStarMapRotation, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetStarMapRotation::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetStarMapSettings
// 0x0048 (0x0048 - 0x0000)
struct PPSkyCreator_GetStarMapSettings final
{
public:
	struct FPPSkyCreatorStarMapSettings           ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetStarMapSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetStarMapSettings");
static_assert(sizeof(PPSkyCreator_GetStarMapSettings) == 0x000048, "Wrong size on PPSkyCreator_GetStarMapSettings");
static_assert(offsetof(PPSkyCreator_GetStarMapSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetStarMapSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetSunLightSettings
// 0x0048 (0x0048 - 0x0000)
struct PPSkyCreator_GetSunLightSettings final
{
public:
	struct FPPSkyCreatorSunLightSettings          ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetSunLightSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetSunLightSettings");
static_assert(sizeof(PPSkyCreator_GetSunLightSettings) == 0x000048, "Wrong size on PPSkyCreator_GetSunLightSettings");
static_assert(offsetof(PPSkyCreator_GetSunLightSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetSunLightSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetTime
// 0x0004 (0x0004 - 0x0000)
struct PPSkyCreator_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetTime) == 0x000004, "Wrong alignment on PPSkyCreator_GetTime");
static_assert(sizeof(PPSkyCreator_GetTime) == 0x000004, "Wrong size on PPSkyCreator_GetTime");
static_assert(offsetof(PPSkyCreator_GetTime, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetTime::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetVolumetricCloudSettings
// 0x00A8 (0x00A8 - 0x0000)
struct PPSkyCreator_GetVolumetricCloudSettings final
{
public:
	struct FPPSkyCreatorVolumetricCloudSettings   ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetVolumetricCloudSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetVolumetricCloudSettings");
static_assert(sizeof(PPSkyCreator_GetVolumetricCloudSettings) == 0x0000A8, "Wrong size on PPSkyCreator_GetVolumetricCloudSettings");
static_assert(offsetof(PPSkyCreator_GetVolumetricCloudSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetVolumetricCloudSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetWeatherFXSettings
// 0x0110 (0x0110 - 0x0000)
struct PPSkyCreator_GetWeatherFXSettings final
{
public:
	struct FPPSkyCreatorWeatherFXSettings         ReturnValue;                                       // 0x0000(0x0110)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetWeatherFXSettings) == 0x000008, "Wrong alignment on PPSkyCreator_GetWeatherFXSettings");
static_assert(sizeof(PPSkyCreator_GetWeatherFXSettings) == 0x000110, "Wrong size on PPSkyCreator_GetWeatherFXSettings");
static_assert(offsetof(PPSkyCreator_GetWeatherFXSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetWeatherFXSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetWeatherMaterialFXSettings
// 0x0068 (0x0068 - 0x0000)
struct PPSkyCreator_GetWeatherMaterialFXSettings final
{
public:
	struct FPPSkyCreatorWeatherMaterialFXSettings ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetWeatherMaterialFXSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetWeatherMaterialFXSettings");
static_assert(sizeof(PPSkyCreator_GetWeatherMaterialFXSettings) == 0x000068, "Wrong size on PPSkyCreator_GetWeatherMaterialFXSettings");
static_assert(offsetof(PPSkyCreator_GetWeatherMaterialFXSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetWeatherMaterialFXSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetWeatherSettings
// 0x0458 (0x0458 - 0x0000)
struct PPSkyCreator_GetWeatherSettings final
{
public:
	struct FPPSkyCreatorWeatherSettings           ReturnValue;                                       // 0x0000(0x0458)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetWeatherSettings) == 0x000008, "Wrong alignment on PPSkyCreator_GetWeatherSettings");
static_assert(sizeof(PPSkyCreator_GetWeatherSettings) == 0x000458, "Wrong size on PPSkyCreator_GetWeatherSettings");
static_assert(offsetof(PPSkyCreator_GetWeatherSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetWeatherSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreator.GetWindSettings
// 0x001C (0x001C - 0x0000)
struct PPSkyCreator_GetWindSettings final
{
public:
	struct FPPSkyCreatorWindSettings              ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreator_GetWindSettings) == 0x000004, "Wrong alignment on PPSkyCreator_GetWindSettings");
static_assert(sizeof(PPSkyCreator_GetWindSettings) == 0x00001C, "Wrong size on PPSkyCreator_GetWindSettings");
static_assert(offsetof(PPSkyCreator_GetWindSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreator_GetWindSettings::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.CentimetersToKilometers
// 0x0008 (0x0008 - 0x0000)
struct PPSkyCreatorFunctionLibrary_CentimetersToKilometers final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_CentimetersToKilometers) == 0x000004, "Wrong alignment on PPSkyCreatorFunctionLibrary_CentimetersToKilometers");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_CentimetersToKilometers) == 0x000008, "Wrong size on PPSkyCreatorFunctionLibrary_CentimetersToKilometers");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CentimetersToKilometers, Value) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_CentimetersToKilometers::Value' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CentimetersToKilometers, ReturnValue) == 0x000004, "Member 'PPSkyCreatorFunctionLibrary_CentimetersToKilometers::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.CheckCloudDensityAtPosition
// 0x0040 (0x0040 - 0x0000)
struct PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0B[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition) == 0x000040, "Wrong size on PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, WorldContextObject) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, Position) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::Position' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, ParameterCollection) == 0x000020, "Member 'PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::ParameterCollection' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, Material) == 0x000028, "Member 'PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::Material' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, RenderTarget) == 0x000030, "Member 'PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::RenderTarget' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition, ReturnValue) == 0x000038, "Member 'PPSkyCreatorFunctionLibrary_CheckCloudDensityAtPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.ConvertRenderTargetToTexture2D
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D) == 0x000010, "Wrong size on PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D, RenderTarget) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D::RenderTarget' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D, Texture) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_ConvertRenderTargetToTexture2D::Texture' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.CreateAndAssignMID
// 0x0018 (0x0018 - 0x0000)
struct PPSkyCreatorFunctionLibrary_CreateAndAssignMID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     InMaterial;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               InMID;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_CreateAndAssignMID) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_CreateAndAssignMID");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_CreateAndAssignMID) == 0x000018, "Wrong size on PPSkyCreatorFunctionLibrary_CreateAndAssignMID");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CreateAndAssignMID, WorldContextObject) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_CreateAndAssignMID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CreateAndAssignMID, InMaterial) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_CreateAndAssignMID::InMaterial' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_CreateAndAssignMID, InMID) == 0x000010, "Member 'PPSkyCreatorFunctionLibrary_CreateAndAssignMID::InMID' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.ElevationRefraction
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreatorFunctionLibrary_ElevationRefraction final
{
public:
	double                                        F;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_ElevationRefraction) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_ElevationRefraction");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_ElevationRefraction) == 0x000010, "Wrong size on PPSkyCreatorFunctionLibrary_ElevationRefraction");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_ElevationRefraction, F) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_ElevationRefraction::F' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_ElevationRefraction, ReturnValue) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_ElevationRefraction::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.FindLightningPosition
// 0x0078 (0x0078 - 0x0000)
struct PPSkyCreatorFunctionLibrary_FindLightningPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSampleCloudDensity;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Samples;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityThreshold;                                  // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0D[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPosition;                                       // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0E[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_FindLightningPosition) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_FindLightningPosition");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_FindLightningPosition) == 0x000078, "Wrong size on PPSkyCreatorFunctionLibrary_FindLightningPosition");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, WorldContextObject) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, bSampleCloudDensity) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::bSampleCloudDensity' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, Samples) == 0x00000C, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::Samples' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, ParameterCollection) == 0x000010, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::ParameterCollection' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, Material) == 0x000018, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::Material' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, RenderTarget) == 0x000020, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::RenderTarget' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, Position) == 0x000028, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::Position' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, InnerRadius) == 0x000040, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::InnerRadius' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, OuterRadius) == 0x000044, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::OuterRadius' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, MinHeight) == 0x000048, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::MinHeight' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, MaxHeight) == 0x00004C, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::MaxHeight' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, DensityThreshold) == 0x000050, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::DensityThreshold' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, OutPosition) == 0x000058, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_FindLightningPosition, ReturnValue) == 0x000070, "Member 'PPSkyCreatorFunctionLibrary_FindLightningPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.GetCloudDensityAtPosition
// 0x0040 (0x0040 - 0x0000)
struct PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           ParameterCollection;                               // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0F[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition) == 0x000040, "Wrong size on PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition, WorldContextObject) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition, Position) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition::Position' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition, ParameterCollection) == 0x000020, "Member 'PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition::ParameterCollection' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition, Material) == 0x000028, "Member 'PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition::Material' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition, RenderTarget) == 0x000030, "Member 'PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition::RenderTarget' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition, ReturnValue) == 0x000038, "Member 'PPSkyCreatorFunctionLibrary_GetCloudDensityAtPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.GetRealMoonPosition
// 0x0020 (0x0020 - 0x0000)
struct PPSkyCreatorFunctionLibrary_GetRealMoonPosition final
{
public:
	float                                         Latitude;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZone;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDaylightSavingTime;                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C10[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateTime;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPPCelestialPositionData               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_GetRealMoonPosition");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition) == 0x000020, "Wrong size on PPSkyCreatorFunctionLibrary_GetRealMoonPosition");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition, Latitude) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_GetRealMoonPosition::Latitude' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition, Longitude) == 0x000004, "Member 'PPSkyCreatorFunctionLibrary_GetRealMoonPosition::Longitude' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition, TimeZone) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_GetRealMoonPosition::TimeZone' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition, bIsDaylightSavingTime) == 0x00000C, "Member 'PPSkyCreatorFunctionLibrary_GetRealMoonPosition::bIsDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition, DateTime) == 0x000010, "Member 'PPSkyCreatorFunctionLibrary_GetRealMoonPosition::DateTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealMoonPosition, ReturnValue) == 0x000018, "Member 'PPSkyCreatorFunctionLibrary_GetRealMoonPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.GetRealSunPosition
// 0x0020 (0x0020 - 0x0000)
struct PPSkyCreatorFunctionLibrary_GetRealSunPosition final
{
public:
	float                                         Latitude;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZone;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDaylightSavingTime;                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C11[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateTime;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPPCelestialPositionData               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_GetRealSunPosition) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_GetRealSunPosition");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_GetRealSunPosition) == 0x000020, "Wrong size on PPSkyCreatorFunctionLibrary_GetRealSunPosition");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealSunPosition, Latitude) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_GetRealSunPosition::Latitude' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealSunPosition, Longitude) == 0x000004, "Member 'PPSkyCreatorFunctionLibrary_GetRealSunPosition::Longitude' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealSunPosition, TimeZone) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_GetRealSunPosition::TimeZone' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealSunPosition, bIsDaylightSavingTime) == 0x00000C, "Member 'PPSkyCreatorFunctionLibrary_GetRealSunPosition::bIsDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealSunPosition, DateTime) == 0x000010, "Member 'PPSkyCreatorFunctionLibrary_GetRealSunPosition::DateTime' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_GetRealSunPosition, ReturnValue) == 0x000018, "Member 'PPSkyCreatorFunctionLibrary_GetRealSunPosition::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.IsApplicationForegroundNow
// 0x0001 (0x0001 - 0x0000)
struct PPSkyCreatorFunctionLibrary_IsApplicationForegroundNow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_IsApplicationForegroundNow) == 0x000001, "Wrong alignment on PPSkyCreatorFunctionLibrary_IsApplicationForegroundNow");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_IsApplicationForegroundNow) == 0x000001, "Wrong size on PPSkyCreatorFunctionLibrary_IsApplicationForegroundNow");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_IsApplicationForegroundNow, ReturnValue) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_IsApplicationForegroundNow::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.KilometersToCentimeters
// 0x0008 (0x0008 - 0x0000)
struct PPSkyCreatorFunctionLibrary_KilometersToCentimeters final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_KilometersToCentimeters) == 0x000004, "Wrong alignment on PPSkyCreatorFunctionLibrary_KilometersToCentimeters");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_KilometersToCentimeters) == 0x000008, "Wrong size on PPSkyCreatorFunctionLibrary_KilometersToCentimeters");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_KilometersToCentimeters, Value) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_KilometersToCentimeters::Value' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_KilometersToCentimeters, ReturnValue) == 0x000004, "Member 'PPSkyCreatorFunctionLibrary_KilometersToCentimeters::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary.DynamicConvertRenderTargetToTexture2D
// 0x0010 (0x0010 - 0x0000)
struct PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D) == 0x000008, "Wrong alignment on PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D");
static_assert(sizeof(PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D) == 0x000010, "Wrong size on PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D, RenderTarget) == 0x000000, "Member 'PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D::RenderTarget' has a wrong offset!");
static_assert(offsetof(PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D, ReturnValue) == 0x000008, "Member 'PPSkyCreatorFunctionLibrary_DynamicConvertRenderTargetToTexture2D::ReturnValue' has a wrong offset!");

// Function PPSkyCreatorPlugin.PPSkyCreatorWeatherPreset.GetWeatherPresetSettings
// 0x0458 (0x0458 - 0x0000)
struct PPSkyCreatorWeatherPreset_GetWeatherPresetSettings final
{
public:
	struct FPPSkyCreatorWeatherSettings           ReturnValue;                                       // 0x0000(0x0458)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PPSkyCreatorWeatherPreset_GetWeatherPresetSettings) == 0x000008, "Wrong alignment on PPSkyCreatorWeatherPreset_GetWeatherPresetSettings");
static_assert(sizeof(PPSkyCreatorWeatherPreset_GetWeatherPresetSettings) == 0x000458, "Wrong size on PPSkyCreatorWeatherPreset_GetWeatherPresetSettings");
static_assert(offsetof(PPSkyCreatorWeatherPreset_GetWeatherPresetSettings, ReturnValue) == 0x000000, "Member 'PPSkyCreatorWeatherPreset_GetWeatherPresetSettings::ReturnValue' has a wrong offset!");

}

