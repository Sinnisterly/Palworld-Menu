#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InventoryEquipment_ItemInfo_Tecnology

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_InventoryEquipment_ItemInfo_Tecnology.WBP_InventoryEquipment_ItemInfo_Tecnology_C
// 0x0020 (0x0298 - 0x0278)
class UWBP_InventoryEquipment_ItemInfo_Tecnology_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_WorkSpace;                             // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_TechDetails;                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WorkSpaceInfo;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_InventoryEquipment_ItemInfo_Tecnology(int32 EntryPoint);
	void GetStockNum(class FName StaticItemId, bool WithStock, int32* Stock);
	void SetDetails(const TArray<struct FPalStaticItemIdAndNum>& MatDetail, bool WithStock);
	void SetWorkSpaceInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_InventoryEquipment_ItemInfo_Tecnology_C">();
	}
	static class UWBP_InventoryEquipment_ItemInfo_Tecnology_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_InventoryEquipment_ItemInfo_Tecnology_C>();
	}
};
static_assert(alignof(UWBP_InventoryEquipment_ItemInfo_Tecnology_C) == 0x000008, "Wrong alignment on UWBP_InventoryEquipment_ItemInfo_Tecnology_C");
static_assert(sizeof(UWBP_InventoryEquipment_ItemInfo_Tecnology_C) == 0x000298, "Wrong size on UWBP_InventoryEquipment_ItemInfo_Tecnology_C");
static_assert(offsetof(UWBP_InventoryEquipment_ItemInfo_Tecnology_C, UberGraphFrame) == 0x000278, "Member 'UWBP_InventoryEquipment_ItemInfo_Tecnology_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_InventoryEquipment_ItemInfo_Tecnology_C, CanvasPanel_WorkSpace) == 0x000280, "Member 'UWBP_InventoryEquipment_ItemInfo_Tecnology_C::CanvasPanel_WorkSpace' has a wrong offset!");
static_assert(offsetof(UWBP_InventoryEquipment_ItemInfo_Tecnology_C, VerticalBox_TechDetails) == 0x000288, "Member 'UWBP_InventoryEquipment_ItemInfo_Tecnology_C::VerticalBox_TechDetails' has a wrong offset!");
static_assert(offsetof(UWBP_InventoryEquipment_ItemInfo_Tecnology_C, WorkSpaceInfo) == 0x000290, "Member 'UWBP_InventoryEquipment_ItemInfo_Tecnology_C::WorkSpaceInfo' has a wrong offset!");

}

