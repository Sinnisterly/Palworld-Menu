#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Composure

#include "Basic.hpp"

#include "Composure_classes.hpp"
#include "Composure_parameters.hpp"


namespace SDK
{

// Function Composure.ComposurePipelineBaseActor.EnqueueRendering
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bCameraCutThisFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AComposurePipelineBaseActor::EnqueueRendering(bool bCameraCutThisFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePipelineBaseActor", "EnqueueRendering");

	Params::ComposurePipelineBaseActor_EnqueueRendering Parms{};

	Parms.bCameraCutThisFrame = bCameraCutThisFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePipelineBaseActor.SetAutoRun
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAutoRunVal                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AComposurePipelineBaseActor::SetAutoRun(bool bNewAutoRunVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePipelineBaseActor", "SetAutoRun");

	Params::ComposurePipelineBaseActor_SetAutoRun Parms{};

	Parms.bNewAutoRunVal = bNewAutoRunVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePipelineBaseActor.SetAutoRunChildrenAndSelf
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAutoRunChildAndSelf                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AComposurePipelineBaseActor::SetAutoRunChildrenAndSelf(bool bAutoRunChildAndSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePipelineBaseActor", "SetAutoRunChildrenAndSelf");

	Params::ComposurePipelineBaseActor_SetAutoRunChildrenAndSelf Parms{};

	Parms.bAutoRunChildAndSelf = bAutoRunChildAndSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePipelineBaseActor.AreChildrenAndSelfAutoRun
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AComposurePipelineBaseActor::AreChildrenAndSelfAutoRun() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePipelineBaseActor", "AreChildrenAndSelfAutoRun");

	Params::ComposurePipelineBaseActor_AreChildrenAndSelfAutoRun Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposurePipelineBaseActor.IsActivelyRunning
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AComposurePipelineBaseActor::IsActivelyRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePipelineBaseActor", "IsActivelyRunning");

	Params::ComposurePipelineBaseActor_IsActivelyRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.AddNewInputPass
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             PassName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCompositingElementInput>InputType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementInput*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementInput* ACompositingElement::AddNewInputPass(class FName PassName, TSubclassOf<class UCompositingElementInput> InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "AddNewInputPass");

	Params::CompositingElement_AddNewInputPass Parms{};

	Parms.PassName = PassName;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.AddNewOutputPass
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             PassName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCompositingElementOutput>OutputType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementOutput*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementOutput* ACompositingElement::AddNewOutputPass(class FName PassName, TSubclassOf<class UCompositingElementOutput> OutputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "AddNewOutputPass");

	Params::CompositingElement_AddNewOutputPass Parms{};

	Parms.PassName = PassName;
	Parms.OutputType = OutputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.AddNewTransformPass
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             PassName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCompositingElementTransform>TransformType                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementTransform*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementTransform* ACompositingElement::AddNewTransformPass(class FName PassName, TSubclassOf<class UCompositingElementTransform> TransformType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "AddNewTransformPass");

	Params::CompositingElement_AddNewTransformPass Parms{};

	Parms.PassName = PassName;
	Parms.TransformType = TransformType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.CreateNewInputPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PassName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCompositingElementInput>InputType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementInput*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementInput* ACompositingElement::CreateNewInputPass(class FName PassName, TSubclassOf<class UCompositingElementInput> InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "CreateNewInputPass");

	Params::CompositingElement_CreateNewInputPass Parms{};

	Parms.PassName = PassName;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.CreateNewOutputPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PassName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCompositingElementOutput>OutputType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementOutput*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementOutput* ACompositingElement::CreateNewOutputPass(class FName PassName, TSubclassOf<class UCompositingElementOutput> OutputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "CreateNewOutputPass");

	Params::CompositingElement_CreateNewOutputPass Parms{};

	Parms.PassName = PassName;
	Parms.OutputType = OutputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.CreateNewTransformPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PassName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCompositingElementTransform>TransformType                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementTransform*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementTransform* ACompositingElement::CreateNewTransformPass(class FName PassName, TSubclassOf<class UCompositingElementTransform> TransformType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "CreateNewTransformPass");

	Params::CompositingElement_CreateNewTransformPass Parms{};

	Parms.PassName = PassName;
	Parms.TransformType = TransformType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.DeletePass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCompositingElementPass*          PassToDelete                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACompositingElement::DeletePass(class UCompositingElementPass* PassToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "DeletePass");

	Params::CompositingElement_DeletePass Parms{};

	Parms.PassToDelete = PassToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.FindInputPass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCompositingElementInput>InputType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         PassResult                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OptionalPassName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementInput*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementInput* ACompositingElement::FindInputPass(TSubclassOf<class UCompositingElementInput> InputType, class UTexture** PassResult, class FName OptionalPassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "FindInputPass");

	Params::CompositingElement_FindInputPass Parms{};

	Parms.InputType = InputType;
	Parms.OptionalPassName = OptionalPassName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PassResult != nullptr)
		*PassResult = Parms.PassResult;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.FindNamedRenderResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PassName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSearchSubElements                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ACompositingElement::FindNamedRenderResult(class FName PassName, bool bSearchSubElements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "FindNamedRenderResult");

	Params::CompositingElement_FindNamedRenderResult Parms{};

	Parms.PassName = PassName;
	Parms.bSearchSubElements = bSearchSubElements;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.FindOutputPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCompositingElementOutput>OutputType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OptionalPassName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementOutput*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementOutput* ACompositingElement::FindOutputPass(TSubclassOf<class UCompositingElementOutput> OutputType, class FName OptionalPassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "FindOutputPass");

	Params::CompositingElement_FindOutputPass Parms{};

	Parms.OutputType = OutputType;
	Parms.OptionalPassName = OptionalPassName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.FindTransformPass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCompositingElementTransform>TransformType                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         PassResult                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OptionalPassName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingElementTransform*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingElementTransform* ACompositingElement::FindTransformPass(TSubclassOf<class UCompositingElementTransform> TransformType, class UTexture** PassResult, class FName OptionalPassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "FindTransformPass");

	Params::CompositingElement_FindTransformPass Parms{};

	Parms.TransformType = TransformType;
	Parms.OptionalPassName = OptionalPassName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PassResult != nullptr)
		*PassResult = Parms.PassResult;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.RegisterPassResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReferenceName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         PassResult                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetAsLatestRenderResult                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACompositingElement::RegisterPassResult(class FName ReferenceName, class UTexture* PassResult, bool bSetAsLatestRenderResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "RegisterPassResult");

	Params::CompositingElement_RegisterPassResult Parms{};

	Parms.ReferenceName = ReferenceName;
	Parms.PassResult = PassResult;
	Parms.bSetAsLatestRenderResult = bSetAsLatestRenderResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElement.ReleaseOwnedTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           OwnedTarget                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACompositingElement::ReleaseOwnedTarget(class UTextureRenderTarget2D* OwnedTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "ReleaseOwnedTarget");

	Params::CompositingElement_ReleaseOwnedTarget Parms{};

	Parms.OwnedTarget = OwnedTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.RenderCompElement
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bCameraCutThisFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ACompositingElement::RenderCompElement(bool bCameraCutThisFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "RenderCompElement");

	Params::CompositingElement_RenderCompElement Parms{};

	Parms.bCameraCutThisFrame = bCameraCutThisFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.RenderCompositingMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCompositingMaterial             CompMaterial                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   RenderScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ResultLookupName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETargetUsageFlags                       UsageTag                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ACompositingElement::RenderCompositingMaterial(struct FCompositingMaterial& CompMaterial, float RenderScale, class FName ResultLookupName, ETargetUsageFlags UsageTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "RenderCompositingMaterial");

	Params::CompositingElement_RenderCompositingMaterial Parms{};

	Parms.CompMaterial = std::move(CompMaterial);
	Parms.RenderScale = RenderScale;
	Parms.ResultLookupName = ResultLookupName;
	Parms.UsageTag = UsageTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	CompMaterial = std::move(Parms.CompMaterial);

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.RenderCompositingMaterialToTarget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCompositingMaterial             CompMaterial                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ResultLookupName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ACompositingElement::RenderCompositingMaterialToTarget(struct FCompositingMaterial& CompMaterial, class UTextureRenderTarget2D* RenderTarget, class FName ResultLookupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "RenderCompositingMaterialToTarget");

	Params::CompositingElement_RenderCompositingMaterialToTarget Parms{};

	Parms.CompMaterial = std::move(CompMaterial);
	Parms.RenderTarget = RenderTarget;
	Parms.ResultLookupName = ResultLookupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	CompMaterial = std::move(Parms.CompMaterial);

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.RequestNamedRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReferenceName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RenderPercentage                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETargetUsageFlags                       UsageTag                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ACompositingElement::RequestNamedRenderTarget(const class FName ReferenceName, const float RenderPercentage, ETargetUsageFlags UsageTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "RequestNamedRenderTarget");

	Params::CompositingElement_RequestNamedRenderTarget Parms{};

	Parms.ReferenceName = ReferenceName;
	Parms.RenderPercentage = RenderPercentage;
	Parms.UsageTag = UsageTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.SetEditorColorPickerDisplayImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         PickerDisplayImage                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACompositingElement::SetEditorColorPickerDisplayImage(class UTexture* PickerDisplayImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "SetEditorColorPickerDisplayImage");

	Params::CompositingElement_SetEditorColorPickerDisplayImage Parms{};

	Parms.PickerDisplayImage = PickerDisplayImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElement.SetEditorColorPickingTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           PickingTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACompositingElement::SetEditorColorPickingTarget(class UTextureRenderTarget2D* PickingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "SetEditorColorPickingTarget");

	Params::CompositingElement_SetEditorColorPickingTarget Parms{};

	Parms.PickingTarget = PickingTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElement.SetElementName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACompositingElement::SetElementName(const class FName NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "SetElementName");

	Params::CompositingElement_SetElementName Parms{};

	Parms.NewName = NewName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElement.SetOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewOpacity                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACompositingElement::SetOpacity(const float NewOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "SetOpacity");

	Params::CompositingElement_SetOpacity Parms{};

	Parms.NewOpacity = NewOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElement.SetRenderResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        NewResolution                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACompositingElement::SetRenderResolution(const struct FIntPoint& NewResolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "SetRenderResolution");

	Params::CompositingElement_SetRenderResolution Parms{};

	Parms.NewResolution = std::move(NewResolution);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElement.SetTargetCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACameraActor*                     NewCameraActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACompositingElement::SetTargetCamera(class ACameraActor* NewCameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "SetTargetCamera");

	Params::CompositingElement_SetTargetCamera Parms{};

	Parms.NewCameraActor = NewCameraActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElement.FindTargetCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACameraActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACameraActor* ACompositingElement::FindTargetCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "FindTargetCamera");

	Params::CompositingElement_FindTargetCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetChildElements
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class ACompositingElement*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<class ACompositingElement*> ACompositingElement::GetChildElements() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetChildElements");

	Params::CompositingElement_GetChildElements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetCompElementName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ACompositingElement::GetCompElementName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetCompElementName");

	Params::CompositingElement_GetCompElementName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetElementParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACompositingElement*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACompositingElement* ACompositingElement::GetElementParent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetElementParent");

	Params::CompositingElement_GetElementParent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetInputsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCompositingElementInput*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UCompositingElementInput*> ACompositingElement::GetInputsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetInputsList");

	Params::CompositingElement_GetInputsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetLatestRenderResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ACompositingElement::GetLatestRenderResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetLatestRenderResult");

	Params::CompositingElement_GetLatestRenderResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetOpacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACompositingElement::GetOpacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetOpacity");

	Params::CompositingElement_GetOpacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetOutputsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCompositingElementOutput*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UCompositingElementOutput*> ACompositingElement::GetOutputsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetOutputsList");

	Params::CompositingElement_GetOutputsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetRenderPriority
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ACompositingElement::GetRenderPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetRenderPriority");

	Params::CompositingElement_GetRenderPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetRenderResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint ACompositingElement::GetRenderResolution() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetRenderResolution");

	Params::CompositingElement_GetRenderResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.GetTransformsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCompositingElementTransform*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UCompositingElementTransform*> ACompositingElement::GetTransformsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "GetTransformsList");

	Params::CompositingElement_GetTransformsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElement.IsSubElement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACompositingElement::IsSubElement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElement", "IsSubElement");

	Params::CompositingElement_IsSubElement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingCaptureBase.UpdateDistortion
// (Final, Native, Public, BlueprintCallable)

void ACompositingCaptureBase::UpdateDistortion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingCaptureBase", "UpdateDistortion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingPickerAsyncTask.OpenCompositingPicker
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           Param_PickerTarget                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         DisplayImage                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             WindowTitle                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    bAverageColorOnDrag                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseImplicitGamma                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCompositingPickerAsyncTask*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCompositingPickerAsyncTask* UCompositingPickerAsyncTask::OpenCompositingPicker(class UTextureRenderTarget2D* Param_PickerTarget, class UTexture* DisplayImage, const class FText& WindowTitle, const bool bAverageColorOnDrag, const bool bUseImplicitGamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CompositingPickerAsyncTask", "OpenCompositingPicker");

	Params::CompositingPickerAsyncTask_OpenCompositingPicker Parms{};

	Parms.Param_PickerTarget = Param_PickerTarget;
	Parms.DisplayImage = DisplayImage;
	Parms.WindowTitle = std::move(WindowTitle);
	Parms.bAverageColorOnDrag = bAverageColorOnDrag;
	Parms.bUseImplicitGamma = bUseImplicitGamma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElementPass.OnDisabled
// (Native, Event, Protected, BlueprintEvent)

void UCompositingElementPass::OnDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "OnDisabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementPass.OnEnabled
// (Native, Event, Protected, BlueprintEvent)

void UCompositingElementPass::OnEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "OnEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementPass.OnFrameBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bCameraCutThisFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCompositingElementPass::OnFrameBegin(bool bCameraCutThisFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "OnFrameBegin");

	Params::CompositingElementPass_OnFrameBegin Parms{};

	Parms.bCameraCutThisFrame = bCameraCutThisFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementPass.OnFrameEnd
// (Native, Event, Public, BlueprintEvent)

void UCompositingElementPass::OnFrameEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "OnFrameEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementPass.ReleaseRenderTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           AssignedTarget                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCompositingElementPass::ReleaseRenderTarget(class UTextureRenderTarget2D* AssignedTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "ReleaseRenderTarget");

	Params::CompositingElementPass_ReleaseRenderTarget Parms{};

	Parms.AssignedTarget = AssignedTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElementPass.RequestNativelyFormattedTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   RenderScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UCompositingElementPass::RequestNativelyFormattedTarget(float RenderScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "RequestNativelyFormattedTarget");

	Params::CompositingElementPass_RequestNativelyFormattedTarget Parms{};

	Parms.RenderScale = RenderScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElementPass.RequestRenderTarget
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        Dimensions                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureRenderTargetFormat              Format                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UCompositingElementPass::RequestRenderTarget(const struct FIntPoint& Dimensions, ETextureRenderTargetFormat Format)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "RequestRenderTarget");

	Params::CompositingElementPass_RequestRenderTarget Parms{};

	Parms.Dimensions = std::move(Dimensions);
	Parms.Format = Format;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElementPass.Reset
// (Native, Event, Public, BlueprintEvent)

void UCompositingElementPass::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementPass.SetPassEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSetEnabledTo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCompositingElementPass::SetPassEnabled(bool bSetEnabledTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "SetPassEnabled");

	Params::CompositingElementPass_SetPassEnabled Parms{};

	Parms.bSetEnabledTo = bSetEnabledTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementPass.IsPassEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCompositingElementPass::IsPassEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementPass", "IsPassEnabled");

	Params::CompositingElementPass_IsPassEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElementInput.GenerateInput
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UCompositingElementInput::GenerateInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementInput", "GenerateInput");

	Params::CompositingElementInput_GenerateInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingInputInterface.GenerateInput
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCompositingInputInterfaceProxy*  Proxy                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ICompositingInputInterface::GenerateInput(class UCompositingInputInterfaceProxy* Proxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingInputInterface", "GenerateInput");

	Params::CompositingInputInterface_GenerateInput Parms{};

	Parms.Proxy = Proxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingInputInterface.OnFrameBegin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCompositingInputInterfaceProxy*  Proxy                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCameraCutThisFrame                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICompositingInputInterface::OnFrameBegin(class UCompositingInputInterfaceProxy* Proxy, bool bCameraCutThisFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingInputInterface", "OnFrameBegin");

	Params::CompositingInputInterface_OnFrameBegin Parms{};

	Parms.Proxy = Proxy;
	Parms.bCameraCutThisFrame = bCameraCutThisFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingInputInterface.OnFrameEnd
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UCompositingInputInterfaceProxy*  Proxy                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICompositingInputInterface::OnFrameEnd(class UCompositingInputInterfaceProxy* Proxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingInputInterface", "OnFrameEnd");

	Params::CompositingInputInterface_OnFrameEnd Parms{};

	Parms.Proxy = Proxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementOutput.RelayOutput
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture*                         FinalResult                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UComposurePostProcessingPassProxy*PostProcessProxy                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCompositingElementOutput::RelayOutput(class UTexture* FinalResult, class UComposurePostProcessingPassProxy* PostProcessProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementOutput", "RelayOutput");

	Params::CompositingElementOutput_RelayOutput Parms{};

	Parms.FinalResult = FinalResult;
	Parms.PostProcessProxy = PostProcessProxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementTransform.ApplyTransform
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture*                         Input                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UComposurePostProcessingPassProxy*PostProcessProxy                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACameraActor*                     TargetCamera                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UCompositingElementTransform::ApplyTransform(class UTexture* Input, class UComposurePostProcessingPassProxy* PostProcessProxy, class ACameraActor* TargetCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementTransform", "ApplyTransform");

	Params::CompositingElementTransform_ApplyTransform Parms{};

	Parms.Input = Input;
	Parms.PostProcessProxy = PostProcessProxy;
	Parms.TargetCamera = TargetCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElementTransform.FindNamedPrePassResult
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             PassLookupName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UCompositingElementTransform::FindNamedPrePassResult(class FName PassLookupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementTransform", "FindNamedPrePassResult");

	Params::CompositingElementTransform_FindNamedPrePassResult Parms{};

	Parms.PassLookupName = PassLookupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.CompositingElementMaterialPass.ApplyMaterialParams
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCompositingElementMaterialPass::ApplyMaterialParams(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementMaterialPass", "ApplyMaterialParams");

	Params::CompositingElementMaterialPass_ApplyMaterialParams Parms{};

	Parms.Mid = Mid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Composure.CompositingElementMaterialPass.SetMaterialInterface
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCompositingElementMaterialPass::SetMaterialInterface(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementMaterialPass", "SetMaterialInterface");

	Params::CompositingElementMaterialPass_SetMaterialInterface Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingElementMaterialPass.SetParameterMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TextureParamName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ComposureLayerName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCompositingElementMaterialPass::SetParameterMapping(class FName TextureParamName, class FName ComposureLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingElementMaterialPass", "SetParameterMapping");

	Params::CompositingElementMaterialPass_SetParameterMapping Parms{};

	Parms.TextureParamName = TextureParamName;
	Parms.ComposureLayerName = ComposureLayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureBlueprintLibrary.AttachComposureElement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ParentName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChildName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UComposureBlueprintLibrary::AttachComposureElement(const class FName ParentName, const class FName ChildName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "AttachComposureElement");

	Params::ComposureBlueprintLibrary_AttachComposureElement Parms{};

	Parms.ParentName = ParentName;
	Parms.ChildName = ChildName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureBlueprintLibrary.CopyCameraSettingsToSceneCapture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCameraComponent*                 SrcCamera                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         DstCaptureComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OriginalFocalLength                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverscanFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::CopyCameraSettingsToSceneCapture(class UCameraComponent* SrcCamera, class USceneCaptureComponent2D* DstCaptureComponent, float OriginalFocalLength, float OverscanFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "CopyCameraSettingsToSceneCapture");

	Params::ComposureBlueprintLibrary_CopyCameraSettingsToSceneCapture Parms{};

	Parms.SrcCamera = SrcCamera;
	Parms.DstCaptureComponent = DstCaptureComponent;
	Parms.OriginalFocalLength = OriginalFocalLength;
	Parms.OverscanFactor = OverscanFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposureBlueprintLibrary.CreateComposureElement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ElementName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ACompositingElement>  ClassType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           LevelContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACompositingElement*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACompositingElement* UComposureBlueprintLibrary::CreateComposureElement(const class FName ElementName, TSubclassOf<class ACompositingElement> ClassType, class AActor* LevelContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "CreateComposureElement");

	Params::ComposureBlueprintLibrary_CreateComposureElement Parms{};

	Parms.ElementName = ElementName;
	Parms.ClassType = ClassType;
	Parms.LevelContext = LevelContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureBlueprintLibrary.CreatePlayerCompositingTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UComposurePlayerCompositingTarget*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UComposurePlayerCompositingTarget* UComposureBlueprintLibrary::CreatePlayerCompositingTarget(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "CreatePlayerCompositingTarget");

	Params::ComposureBlueprintLibrary_CreatePlayerCompositingTarget Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureBlueprintLibrary.DeleteComposureElementAndChildren
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ElementToDelete                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::DeleteComposureElementAndChildren(const class FName ElementToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "DeleteComposureElementAndChildren");

	Params::ComposureBlueprintLibrary_DeleteComposureElementAndChildren Parms{};

	Parms.ElementToDelete = ElementToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposureBlueprintLibrary.GetComposureElement
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ElementName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACompositingElement*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACompositingElement* UComposureBlueprintLibrary::GetComposureElement(const class FName ElementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "GetComposureElement");

	Params::ComposureBlueprintLibrary_GetComposureElement Parms{};

	Parms.ElementName = ElementName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureBlueprintLibrary.GetCroppingUVTransformationMatrixFromPostMoveSettings
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FComposurePostMoveSettings       PostMoveSettings                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AspectRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          CropingUVTransformationMatrix                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          UncropingUVTransformationMatrix                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::GetCroppingUVTransformationMatrixFromPostMoveSettings(const struct FComposurePostMoveSettings& PostMoveSettings, float AspectRatio, struct FMatrix* CropingUVTransformationMatrix, struct FMatrix* UncropingUVTransformationMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "GetCroppingUVTransformationMatrixFromPostMoveSettings");

	Params::ComposureBlueprintLibrary_GetCroppingUVTransformationMatrixFromPostMoveSettings Parms{};

	Parms.PostMoveSettings = std::move(PostMoveSettings);
	Parms.AspectRatio = AspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CropingUVTransformationMatrix != nullptr)
		*CropingUVTransformationMatrix = std::move(Parms.CropingUVTransformationMatrix);

	if (UncropingUVTransformationMatrix != nullptr)
		*UncropingUVTransformationMatrix = std::move(Parms.UncropingUVTransformationMatrix);
}


// Function Composure.ComposureBlueprintLibrary.GetPlayerDisplayGamma
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerCameraManager*             PlayerCameraManager                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DisplayGamma                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::GetPlayerDisplayGamma(const class APlayerCameraManager* PlayerCameraManager, float* DisplayGamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "GetPlayerDisplayGamma");

	Params::ComposureBlueprintLibrary_GetPlayerDisplayGamma Parms{};

	Parms.PlayerCameraManager = PlayerCameraManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DisplayGamma != nullptr)
		*DisplayGamma = Parms.DisplayGamma;
}


// Function Composure.ComposureBlueprintLibrary.GetProjectionMatrixFromPostMoveSettings
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FComposurePostMoveSettings       PostMoveSettings                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   HorizontalFOVAngle                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AspectRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::GetProjectionMatrixFromPostMoveSettings(const struct FComposurePostMoveSettings& PostMoveSettings, float HorizontalFOVAngle, float AspectRatio, struct FMatrix* ProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "GetProjectionMatrixFromPostMoveSettings");

	Params::ComposureBlueprintLibrary_GetProjectionMatrixFromPostMoveSettings Parms{};

	Parms.PostMoveSettings = std::move(PostMoveSettings);
	Parms.HorizontalFOVAngle = HorizontalFOVAngle;
	Parms.AspectRatio = AspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ProjectionMatrix != nullptr)
		*ProjectionMatrix = std::move(Parms.ProjectionMatrix);
}


// Function Composure.ComposureBlueprintLibrary.GetRedGreenUVFactorsFromChromaticAberration
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ChromaticAberrationAmount                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        RedGreenUVFactors                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::GetRedGreenUVFactorsFromChromaticAberration(float ChromaticAberrationAmount, struct FVector2D* RedGreenUVFactors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "GetRedGreenUVFactorsFromChromaticAberration");

	Params::ComposureBlueprintLibrary_GetRedGreenUVFactorsFromChromaticAberration Parms{};

	Parms.ChromaticAberrationAmount = ChromaticAberrationAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RedGreenUVFactors != nullptr)
		*RedGreenUVFactors = std::move(Parms.RedGreenUVFactors);
}


// Function Composure.ComposureBlueprintLibrary.InvertUVDisplacementMapEncodingParameters
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        In                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::InvertUVDisplacementMapEncodingParameters(const struct FVector2D& In, struct FVector2D* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "InvertUVDisplacementMapEncodingParameters");

	Params::ComposureBlueprintLibrary_InvertUVDisplacementMapEncodingParameters Parms{};

	Parms.In = std::move(In);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function Composure.ComposureBlueprintLibrary.IsComposureElementDrawing
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACompositingElement*              CompElement                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UComposureBlueprintLibrary::IsComposureElementDrawing(class ACompositingElement* CompElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "IsComposureElementDrawing");

	Params::ComposureBlueprintLibrary_IsComposureElementDrawing Parms{};

	Parms.CompElement = CompElement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureBlueprintLibrary.RefreshComposureElementList
// (Final, Native, Static, Public, BlueprintCallable)

void UComposureBlueprintLibrary::RefreshComposureElementList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "RefreshComposureElementList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposureBlueprintLibrary.RenameComposureElement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             OriginalElementName                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NewElementName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UComposureBlueprintLibrary::RenameComposureElement(const class FName OriginalElementName, const class FName NewElementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "RenameComposureElement");

	Params::ComposureBlueprintLibrary_RenameComposureElement Parms{};

	Parms.OriginalElementName = OriginalElementName;
	Parms.NewElementName = NewElementName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureBlueprintLibrary.RequestRedrawComposureViewport
// (Final, Native, Static, Public, BlueprintCallable)

void UComposureBlueprintLibrary::RequestRedrawComposureViewport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "RequestRedrawComposureViewport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposureBlueprintLibrary.SetUVMapSettingsToMaterialParameters
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FComposureUVMapSettings          UVMapSettings                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureBlueprintLibrary::SetUVMapSettingsToMaterialParameters(const struct FComposureUVMapSettings& UVMapSettings, class UMaterialInstanceDynamic* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ComposureBlueprintLibrary", "SetUVMapSettingsToMaterialParameters");

	Params::ComposureBlueprintLibrary_SetUVMapSettingsToMaterialParameters Parms{};

	Parms.UVMapSettings = std::move(UVMapSettings);
	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePostProcessPass.SetOutputRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposurePostProcessPass::SetOutputRenderTarget(class UTextureRenderTarget2D* RenderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePostProcessPass", "SetOutputRenderTarget");

	Params::ComposurePostProcessPass_SetOutputRenderTarget Parms{};

	Parms.RenderTarget = RenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePostProcessPass.SetSetupMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposurePostProcessPass::SetSetupMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePostProcessPass", "SetSetupMaterial");

	Params::ComposurePostProcessPass_SetSetupMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePostProcessPass.GetOutputRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UComposurePostProcessPass::GetOutputRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePostProcessPass", "GetOutputRenderTarget");

	Params::ComposurePostProcessPass_GetOutputRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposurePostProcessPass.GetSetupMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UComposurePostProcessPass::GetSetupMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePostProcessPass", "GetSetupMaterial");

	Params::ComposurePostProcessPass_GetSetupMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureLensBloomPass.BloomToRenderTarget
// (Final, Native, Public, BlueprintCallable)

void UComposureLensBloomPass::BloomToRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposureLensBloomPass", "BloomToRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposureLensBloomPass.SetTonemapperReplacingMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureLensBloomPass::SetTonemapperReplacingMaterial(class UMaterialInstanceDynamic* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposureLensBloomPass", "SetTonemapperReplacingMaterial");

	Params::ComposureLensBloomPass_SetTonemapperReplacingMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePostProcessPassPolicy.SetupPostProcess
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         SceneCapture                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               TonemapperOverride                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposurePostProcessPassPolicy::SetupPostProcess(class USceneCaptureComponent2D* SceneCapture, class UMaterialInterface** TonemapperOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePostProcessPassPolicy", "SetupPostProcess");

	Params::ComposurePostProcessPassPolicy_SetupPostProcess Parms{};

	Parms.SceneCapture = SceneCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TonemapperOverride != nullptr)
		*TonemapperOverride = Parms.TonemapperOverride;
}


// Function Composure.ComposurePlayerCompositingTarget.SetPlayerCameraManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerCameraManager*             Param_PlayerCameraManager                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerCameraManager*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerCameraManager* UComposurePlayerCompositingTarget::SetPlayerCameraManager(class APlayerCameraManager* Param_PlayerCameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePlayerCompositingTarget", "SetPlayerCameraManager");

	Params::ComposurePlayerCompositingTarget_SetPlayerCameraManager Parms{};

	Parms.Param_PlayerCameraManager = Param_PlayerCameraManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposurePlayerCompositingTarget.SetRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposurePlayerCompositingTarget::SetRenderTarget(class UTextureRenderTarget2D* RenderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePlayerCompositingTarget", "SetRenderTarget");

	Params::ComposurePlayerCompositingTarget_SetRenderTarget Parms{};

	Parms.RenderTarget = RenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposurePlayerCompositingTarget.GetPlayerCameraManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerCameraManager*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerCameraManager* UComposurePlayerCompositingTarget::GetPlayerCameraManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePlayerCompositingTarget", "GetPlayerCameraManager");

	Params::ComposurePlayerCompositingTarget_GetPlayerCameraManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposureCompositingTargetComponent.SetDisplayTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         Param_DisplayTexture                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposureCompositingTargetComponent::SetDisplayTexture(class UTexture* Param_DisplayTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposureCompositingTargetComponent", "SetDisplayTexture");

	Params::ComposureCompositingTargetComponent_SetDisplayTexture Parms{};

	Parms.Param_DisplayTexture = Param_DisplayTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposureCompositingTargetComponent.GetDisplayTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UComposureCompositingTargetComponent::GetDisplayTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposureCompositingTargetComponent", "GetDisplayTexture");

	Params::ComposureCompositingTargetComponent_GetDisplayTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Composure.ComposurePostProcessingPassProxy.Execute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         PrePassInput                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UComposurePostProcessPassPolicy*  PostProcessPass                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UComposurePostProcessingPassProxy::Execute(class UTexture* PrePassInput, class UComposurePostProcessPassPolicy* PostProcessPass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposurePostProcessingPassProxy", "Execute");

	Params::ComposurePostProcessingPassProxy_Execute Parms{};

	Parms.PrePassInput = PrePassInput;
	Parms.PostProcessPass = PostProcessPass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Composure.ComposureTonemapperPass.TonemapToRenderTarget
// (Final, Native, Public, BlueprintCallable)

void UComposureTonemapperPass::TonemapToRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ComposureTonemapperPass", "TonemapToRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Composure.CompositingTextureLookupTable.FindNamedPassResult
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LookupName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         OutTexture                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ICompositingTextureLookupTable::FindNamedPassResult(class FName LookupName, class UTexture** OutTexture) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompositingTextureLookupTable", "FindNamedPassResult");

	Params::CompositingTextureLookupTable_FindNamedPassResult Parms{};

	Parms.LookupName = LookupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTexture != nullptr)
		*OutTexture = Parms.OutTexture;

	return Parms.ReturnValue;
}


// Function Composure.MovieSceneComposureExportClient.InitializeForExport
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMovieSceneComposureExportInitializer*ExportInitializer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMovieSceneComposureExportClient::InitializeForExport(class UMovieSceneComposureExportInitializer* ExportInitializer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieSceneComposureExportClient", "InitializeForExport");

	Params::MovieSceneComposureExportClient_InitializeForExport Parms{};

	Parms.ExportInitializer = ExportInitializer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Composure.MovieSceneComposureExportInitializer.ExportSceneCaptureBuffers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACompositingElement*              CompShotElement                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         SceneCapture                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   BuffersToExport                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMovieSceneComposureExportInitializer::ExportSceneCaptureBuffers(class ACompositingElement* CompShotElement, class USceneCaptureComponent2D* SceneCapture, const TArray<class FString>& BuffersToExport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieSceneComposureExportInitializer", "ExportSceneCaptureBuffers");

	Params::MovieSceneComposureExportInitializer_ExportSceneCaptureBuffers Parms{};

	Parms.CompShotElement = CompShotElement;
	Parms.SceneCapture = SceneCapture;
	Parms.BuffersToExport = std::move(BuffersToExport);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

