#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkyCreatorPlugin

#include "Basic.hpp"

#include "SkyCreatorPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class SkyCreatorPlugin.SkyCreator
// 0x0EF0 (0x1180 - 0x0290)
class ASkyCreator final : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Compass;                                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             SunLight;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             MoonLight;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcess;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StarMap;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SunSphere;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   MoonSphere;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               OcclusionCapture;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      WeatherFX;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkySphere;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SkySphereMaterial;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               SkySphereMID;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEditorTimeOfDay;                               // 0x0320(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1342[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EditorTimeOfDay;                                   // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEditorWeatherSettings;                         // 0x0328(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyCreatorEditorWeatherType                  EditorWeatherType;                                 // 0x0329(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1343[0x6];                                     // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkyCreatorWeatherPreset*               EditorWeatherPreset;                               // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherSettings             EditorWeatherSettings;                             // 0x0338(0x0458)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsUsedWithSequencer;                              // 0x0790(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditorTickEnabled;                              // 0x0791(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1344[0x2];                                     // 0x0792(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOfDay;                                         // 0x0794(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherSettings             WeatherSettings;                                   // 0x0798(0x0458)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           CommonMPC;                                         // 0x0BF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereRadius;                                   // 0x0BF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugVariables;                               // 0x0BFC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyCreatorSunPositionType                    SunPositionType;                                   // 0x0BFD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1345[0x2];                                     // 0x0BFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCelestialPositionData                 SunPositionData;                                   // 0x0C00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	ESkyCreatorMoonPositionType                   MoonPositionType;                                  // 0x0C08(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1346[0x3];                                     // 0x0C09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCelestialPositionData                 MoonPositionData;                                  // 0x0C0C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SunriseTime;                                       // 0x0C14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunsetTime;                                        // 0x0C18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDawnOffsetTime;                                 // 0x0C1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDuskOffsetTime;                                 // 0x0C20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDawnTime;                                       // 0x0C24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDuskTime;                                       // 0x0C28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunElevation;                                      // 0x0C2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunAzimuth;                                        // 0x0C30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunMinAngleAtDawnDusk;                             // 0x0C34(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunFadeInOutTime;                                  // 0x0C38(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonriseTime;                                      // 0x0C3C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonsetTime;                                       // 0x0C40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonElevation;                                     // 0x0C44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonAzimuth;                                       // 0x0C48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonFadeInOutTime;                                 // 0x0C4C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Latitude;                                          // 0x0C50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0C54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZone;                                          // 0x0C58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDaylightSavingTime;                               // 0x0C5C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1347[0x3];                                     // 0x0C5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Year;                                              // 0x0C60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0C64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0C68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1348[0x4];                                     // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Date;                                              // 0x0C70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightTransition;                                  // 0x0C78(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1349[0x3];                                     // 0x0C79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunSurfaceBrightness;                              // 0x0C7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonSurfaceBrightness;                             // 0x0C80(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCurrentElevation;                               // 0x0C84(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionStartSunAngle;                           // 0x0C88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionMiddleSunAngle;                          // 0x0C8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionEndSunAngle;                             // 0x0C90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensityTransitionStartSunAngle;             // 0x0C94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensityTransitionEndSunAngle;               // 0x0C98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SkyAtmosphereMobility;                             // 0x0C9C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyAtmosphereTransformMode                   TransformMode;                                     // 0x0C9D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134A[0x2];                                     // 0x0C9E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlanetRadius;                                      // 0x0CA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereHeight;                                  // 0x0CA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x0CA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134B[0x4];                                     // 0x0CAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlanetTopPosition;                                 // 0x0CB0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSampleCountScale;                             // 0x0CC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GodRaysResolution;                                 // 0x0CCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerBottomAltitude;                               // 0x0CD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerHeight;                                       // 0x0CD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingStartMaxDistance;                           // 0x0CD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingMaxDistance;                                // 0x0CDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerSampleAtmosphericLightTransmittance;           // 0x0CE0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134C[0x7];                                     // 0x0CE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           VolumetricCloudsMPC;                               // 0x0CE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerBottomAltitudePosition;                       // 0x0CF0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerTopAltitudePosition;                          // 0x0D08(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CurrentVolumetricCloudMaterial;                    // 0x0D20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloudMID;                                // 0x0D28(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     VolumetricCloudDensitySampleMaterial;              // 0x0D30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloudDensitySampleMID;                   // 0x0D38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 VolumetricCloudDensitySampleRT;                    // 0x0D40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicQuality;                                 // 0x0D48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudRenderTargetMode              RenderMode;                                        // 0x0D49(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighQualityAerialPerspective;                     // 0x0D4A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134D[0x1];                                     // 0x0D4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MultiScatteringApproximationOctaveCount;           // 0x0D4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGroundContribution;                               // 0x0D50(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRayMarchVolumeShadow;                             // 0x0D51(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134E[0x2];                                     // 0x0D52(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewSampleCountScale;                              // 0x0D54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionSampleCountScale;                        // 0x0D58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowViewSampleCountScale;                        // 0x0D5C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowReflectionSampleCountScale;                  // 0x0D60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTracingDistance;                             // 0x0D64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudMapScale;                                     // 0x0D68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134F[0x4];                                     // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CloudMapOffset;                                    // 0x0D70(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoverageVariationMapScale;                         // 0x0D80(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudNoiseShapeResolution          NoiseShapeResolution;                              // 0x0D84(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudNoiseDetailResolution         NoiseDetailResolution;                             // 0x0D85(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1350[0x2];                                     // 0x0D86(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseShapeScale;                                   // 0x0D88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseDetailScale;                                  // 0x0D8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurbulenceScale;                                   // 0x0D90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsContrast;                          // 0x0D94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsReflectionScale;                   // 0x0D98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SkyLightMobility;                                  // 0x0D9C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealTimeCapture;                                  // 0x0D9D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkyLightCaptureTimeSlice;                         // 0x0D9E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsSolidColor;                      // 0x0D9F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloudAmbientOcclusion;                            // 0x0DA0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1351[0x3];                                     // 0x0DA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudAmbientOcclusionExtent;                       // 0x0DA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionMapResolutionScale;           // 0x0DA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionApertureScale;                // 0x0DAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SunLightMobility;                                  // 0x0DB0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlSunDirection;                              // 0x0DB1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunConstantIntensity;                             // 0x0DB2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1352[0x1];                                     // 0x0DB3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunIntensity;                                      // 0x0DB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCurrentIntensity;                               // 0x0DB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunUseTemperature;                                // 0x0DBC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1353[0x3];                                     // 0x0DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunDiskSize;                                       // 0x0DC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunConstantAtmosphereDiskColorScale;              // 0x0DC4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1354[0x3];                                     // 0x0DC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SunAtmosphereDiskColorScale;                       // 0x0DC8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunPerPixelAtmosphereTransmittance;               // 0x0DD8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1355[0x3];                                     // 0x0DD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunCloudShadowExtent;                              // 0x0DDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCloudShadowMapResolutionScale;                  // 0x0DE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCloudShadowRaySampleCountScale;                 // 0x0DE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            MoonLightMobility;                                 // 0x0DE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlMoonDirection;                             // 0x0DE9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonConstantIntensity;                            // 0x0DEA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1356[0x1];                                     // 0x0DEB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonIntensity;                                     // 0x0DEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCurrentIntensity;                              // 0x0DF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonUseTemperature;                               // 0x0DF4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1357[0x3];                                     // 0x0DF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonDiskSize;                                      // 0x0DF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonRotation;                                      // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhase;                                         // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonPhaseLightIntensityScale;                     // 0x0E04(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1358[0x3];                                     // 0x0E05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonPhaseLightIntensityMinScale;                   // 0x0E08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhaseLightIntensityMaxScale;                   // 0x0E0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonConstantAtmosphereDiskColorScale;             // 0x0E10(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1359[0x3];                                     // 0x0E11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MoonAtmosphereDiskColorScale;                      // 0x0E14(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonPerPixelAtmosphereTransmittance;              // 0x0E24(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135A[0x3];                                     // 0x0E25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonCloudShadowExtent;                             // 0x0E28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCloudShadowMapResolutionScale;                 // 0x0E2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCloudShadowRaySampleCountScale;                // 0x0E30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            ExponentialHeightFogMobility;                      // 0x0E34(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableExponentialHeightFog;                       // 0x0E35(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVolumetricFog;                                    // 0x0E36(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135B[0x1];                                     // 0x0E37(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogHeightOffset;                                   // 0x0E38(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightOffset;                             // 0x0E3C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             StarMapTexture;                                    // 0x0E40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyCreatorStarMapRotationType                StarMapRotationType;                               // 0x0E48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135C[0x7];                                     // 0x0E49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StarMapAdditionalRotation;                         // 0x0E50(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOcclusionCapture;                           // 0x0E68(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135D[0x7];                                     // 0x0E69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 OcclusionRenderTarget;                             // 0x0E70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureWidth;                             // 0x0E78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureHeight;                            // 0x0E7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOcclusionCaptureRealtimeUpdate;                   // 0x0E80(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135E[0x3];                                     // 0x0E81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionCaptureStepDistance;                      // 0x0E84(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureStepSize;                          // 0x0E88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionBias;                                     // 0x0E8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OcclusionBlurSamples;                              // 0x0E90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionBlurDistance;                             // 0x0E94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionMaskFadeHardness;                         // 0x0E98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135F[0x4];                                     // 0x0E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocation;                                    // 0x0EA0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocationSnapped;                             // 0x0EB8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OcclusionCurrentLocation;                          // 0x0ED0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFXCutoffWorldHeight;                        // 0x0EE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFXCutoffSoftness;                           // 0x0EEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationSpawnRadius;                          // 0x0EF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGPUPrecipitation;                           // 0x0EF4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1360[0x3];                                     // 0x0EF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrecipitationSpawnRadiusGPU;                       // 0x0EF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationMaxViewDistance;                      // 0x0EFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationVerticalCheckDistance;                // 0x0F00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             PrecipitationCollisionChannel;                     // 0x0F04(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1361[0x3];                                     // 0x0F05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrecipitationDepthFadeDistance;                    // 0x0F08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationCameraFadeDistance;                   // 0x0F0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationCameraFadeOffset;                     // 0x0F10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSpawnRateMaxCPU;                               // 0x0F14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSpawnRateMaxGPU;                               // 0x0F18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDistanceScaleFactor;                           // 0x0F1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainCameraMotionAlignmentScale;                    // 0x0F20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainVelocityElongationScale;                       // 0x0F24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainMaskHardness;                                  // 0x0F28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSpawnRateMax;                            // 0x0F2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSpawnRateMaxGPU;                         // 0x0F30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpawnRateMaxCPU;                               // 0x0F34(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpawnRateMaxGPU;                               // 0x0F38(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowDistanceScaleFactor;                           // 0x0F3C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowCameraMotionAlignmentScale;                    // 0x0F40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowVelocityElongationScale;                       // 0x0F44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowMaskHardness;                                  // 0x0F48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1362[0x4];                                     // 0x0F4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 LightningsParametersRT;                            // 0x0F50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSkyCreatorLightningParameters> LightningParameters;                               // 0x0F58(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1363[0x8];                                     // 0x0F68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentLightningInterval;                          // 0x0F70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1364[0x4];                                     // 0x0F74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLightningPosition;                             // 0x0F78(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        LightningAvailablePositions;                       // 0x0F90(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         LightningCurrentIndex;                             // 0x0FA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSampleCloudDensity;                               // 0x0FA4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1365[0x3];                                     // 0x0FA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LightningMaxSamples;                               // 0x0FA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnInnerRadius;                         // 0x0FAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnOuterRadius;                         // 0x0FB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningRandomDegreeInConeMax;                    // 0x0FB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltEmissiveScale;                        // 0x0FB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1366[0xC];                                     // 0x0FBC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightningFlashFadeUpdateRate;                      // 0x0FC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashFadeDelta;                           // 0x0FCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashEmissiveScale;                       // 0x0FD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashEmissiveReflectionScale;             // 0x0FD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashRadiusScale;                         // 0x0FD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashFadeSpeed;                           // 0x0FDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowDistance;                                   // 0x0FE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowDepthFadeDistance;                          // 0x0FE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFXCutoffWorldHeight;                       // 0x0FE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFXCutoffSoftness;                          // 0x0FEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSlopeAngle;                                 // 0x0FF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSlopeSmoothness;                            // 0x0FF4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesMaskScale;                                  // 0x0FF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesRoughness;                                  // 0x0FFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesSlopeAngle;                                 // 0x1000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesSlopeSmoothness;                            // 0x1004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRainRipplesSolver;                          // 0x1008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseRainRipplesSolver;                           // 0x1009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1367[0xE];                                     // 0x100A(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainRipplesUpdateRate;                             // 0x1018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesScale;                                  // 0x101C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesMaxDensity;                             // 0x1020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRipplesScale;                                  // 0x1024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesSolverDelta;                            // 0x1028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RainRipplesSolverHeightState;                      // 0x102C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainRipplesPropagation;                            // 0x1030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               RainRipplesPropagationMID;                         // 0x1038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainRipplesForce;                                  // 0x1040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainRipplesNormal;                                 // 0x1048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               RainRipplesNormalMID;                              // 0x1050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesPropagationFrame0;                      // 0x1058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesPropagationFrame1;                      // 0x1060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesPropagationFrame2;                      // 0x1068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesNormalRT;                               // 0x1070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowMaskScale;                                     // 0x1078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowScale;                                         // 0x107C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowRoughness;                                     // 0x1080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesScale;                                 // 0x1084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesRoughness;                             // 0x1088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSlopeAngle;                                    // 0x108C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSlopeSmoothness;                               // 0x1090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x1094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIndependentWindControl;                           // 0x1095(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1368[0x2];                                     // 0x1096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkyCreatorWindSettings                EditorIndependentWindSettings;                     // 0x1098(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CloudWindSkewAmount;                               // 0x10B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudWindOffset;                                   // 0x10B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudWindSkewDirection;                            // 0x10D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudWindSkewForce;                                // 0x10E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1369[0x4];                                     // 0x10EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CloudNoiseShapeWindOffset;                         // 0x10F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudNoiseDetailWindOffset;                        // 0x1108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExposureSettings;                              // 0x1120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtendDefaultLuminanceRange;                      // 0x1121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136A[0x2];                                     // 0x1122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PostProcessPriority;                               // 0x1124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoExposureMethod                           ExposureMethod;                                    // 0x1128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136B[0x7];                                     // 0x1129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ExposureBiasCurve;                                 // 0x1130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ExposureMeterMask;                                 // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMinBrightness;                             // 0x1140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMaxBrightness;                             // 0x1144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMinEV100;                                  // 0x1148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMaxEV100;                                  // 0x114C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureSpeedUp;                                   // 0x1150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureSpeedDown;                                 // 0x1154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureLowPercent;                                // 0x1158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHighPercent;                               // 0x115C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramLogMin;                           // 0x1160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramLogMax;                           // 0x1164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramMinEV100;                         // 0x1168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramMaxEV100;                         // 0x116C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLightningStrike;                                 // 0x1170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	bool FindLightningPosition(const struct FVector& Position, struct FVector* OutPosition);
	float GetCloudDensityAtPosition(const struct FVector& Position);
	struct FVector GetLastLightningPosition();
	struct FRotator GetMoonPosition(float Time);
	struct FRotator GetSunPosition(float Time);
	void LerpBackgroundCloudSettings(const struct FSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettingsA, const struct FSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettingsB, float Alpha);
	void LerpExponentialHeightFogSettings(const struct FSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettingsA, const struct FSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettingsB, float Alpha);
	void LerpMoonLightSettings(const struct FSkyCreatorMoonLightSettings& InMoonLightSettingsA, const struct FSkyCreatorMoonLightSettings& InMoonLightSettingsB, float Alpha);
	void LerpPostProcessSettings(const struct FSkyCreatorPostProcessSettings& InPostProcessSettingsA, const struct FSkyCreatorPostProcessSettings& InPostProcessSettingsB, float Alpha);
	void LerpPuddlesAmount(float PuddlesAmountA, float PuddlesAmountB, float Alpha);
	void LerpSkyAtmosphereSettings(const struct FSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettingsA, const struct FSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettingsB, float Alpha);
	void LerpSkyLightSettings(const struct FSkyCreatorSkyLightSettings& InSkyLightSettingsA, const struct FSkyCreatorSkyLightSettings& InSkyLightSettingsB, float Alpha);
	void LerpSnowAmount(float SnowAmountA, float SnowAmountB, float Alpha);
	void LerpStarMapSettings(const struct FSkyCreatorStarMapSettings& InStarMapSettingsA, const struct FSkyCreatorStarMapSettings& InStarMapSettingsB, float Alpha);
	void LerpSunLightSettings(const struct FSkyCreatorSunLightSettings& InSunLightSettingsA, const struct FSkyCreatorSunLightSettings& InSunLightSettingsB, float Alpha);
	void LerpVolumetricCloudSettings(const struct FSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettingsA, const struct FSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettingsB, float Alpha);
	void LerpWeatherFXSettings(const struct FSkyCreatorWeatherFXSettings& InWeatherFXSettingsA, const struct FSkyCreatorWeatherFXSettings& InWeatherFXSettingsB, float Alpha);
	void LerpWeatherMaterialFXSettings(const struct FSkyCreatorWeatherMaterialFXSettings& InWeatherMaterialFXSettingsA, const struct FSkyCreatorWeatherMaterialFXSettings& InWeatherMaterialFXSettingsB, float Alpha);
	void LerpWeatherSettings(const struct FSkyCreatorWeatherSettings& InWeatherSettingsA, const struct FSkyCreatorWeatherSettings& InWeatherSettingsB, float Alpha);
	void LerpWetnessAmount(float WetnessAmountA, float WetnessAmountB, float Alpha);
	void LerpWindIndependentSettings(const struct FSkyCreatorWindSettings& InWindSettingsA, const struct FSkyCreatorWindSettings& InWindSettingsB, float Alpha);
	void LerpWindSettings(const struct FSkyCreatorWindSettings& InWindSettingsA, const struct FSkyCreatorWindSettings& InWindSettingsB, float Alpha);
	void OnRep_UpdateTime();
	void OnRep_UpdateWeather();
	void RealtimeTimeOfDay(float DeltaSeconds, float DayCycleDuration);
	void SetBackgroundCloudSettings(const struct FSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettings);
	void SetbDaylightSavingTime(bool NewValue);
	void SetCloudMapOffset(const struct FVector2D& NewValue);
	void SetDay(int32 NewValue);
	void SetEditorTimeOfDay(float NewValue);
	void SetEditorWeatherPreset(class USkyCreatorWeatherPreset* NewValue);
	void SetEditorWeatherSettings(const struct FSkyCreatorWeatherSettings& NewValue);
	void SetExponentialHeightFogSettings(const struct FSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettings);
	void SetLatitude(float NewValue);
	void SetLayerBottomAltitude(float NewValue);
	void SetLayerHeight(float NewValue);
	void SetLongitude(float NewValue);
	void SetMonth(int32 NewValue);
	void SetMoonAtmosphereDiskColorScale(const struct FLinearColor& NewValue);
	void SetMoonAzimuth(float NewValue);
	void SetMoonDiskSize(float NewValue);
	void SetMoonElevation(float NewValue);
	void SetMoonIntensity(float NewValue);
	void SetMoonLightSettings(const struct FSkyCreatorMoonLightSettings& InMoonLightSettings);
	void SetMoonPhase(float NewValue);
	void SetMoonriseTime(float NewValue);
	void SetMoonRotation(float NewValue);
	void SetMoonsetTime(float NewValue);
	void SetMoonSimplePositionSettings(const float InMoonriseTime, const float InMoonsetTime, const float InMoonElevation, const float InMoonAzimuth);
	void SetPostProcessSettings(const struct FSkyCreatorPostProcessSettings& InPostProcessSettings);
	void SetRealPositionSettings(const float InLatitude, const float InLongitude, const float InTimeZone, const bool InbDaylightSavingTime, const int32 InYear, const int32 InMonth, const int32 InDay);
	void SetSkyAtmosphereSettings(const struct FSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettings);
	void SetSkyLightSettings(const struct FSkyCreatorSkyLightSettings& InSkyLightSettings);
	void SetStarMapAdditionalRotation(const struct FVector& NewValue);
	void SetStarMapSettings(const struct FSkyCreatorStarMapSettings& InStarMapSettings);
	void SetSunAtmosphereDiskColorScale(const struct FLinearColor& NewValue);
	void SetSunAzimuth(float NewValue);
	void SetSunDawnOffsetTime(float NewValue);
	void SetSunDiskSize(float NewValue);
	void SetSunDuskOffsetTime(float NewValue);
	void SetSunElevation(float NewValue);
	void SetSunIntensity(float NewValue);
	void SetSunLightSettings(const struct FSkyCreatorSunLightSettings& InSunLightSettings);
	void SetSunMinAngleAtDawnDusk(float NewValue);
	void SetSunriseTime(float NewValue);
	void SetSunsetTime(float NewValue);
	void SetSunSimplePositionSettings(const float InSunriseTime, const float InSunsetTime, const float InSunElevation, const float InSunAzimuth);
	void SetTime(float InTime);
	void SetTimeZone(float NewValue);
	void SetVolumetricCloudSettings(const struct FSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettings);
	void SetWeatherFXSettings(const struct FSkyCreatorWeatherFXSettings& InWeatherFXSettings);
	void SetWeatherMaterialFXSettings(const struct FSkyCreatorWeatherMaterialFXSettings& InWeatherMaterialFXSettings);
	void SetWeatherSettings(const struct FSkyCreatorWeatherSettings& InWeatherSettings);
	void SetWindIndependentSettings(const struct FSkyCreatorWindSettings& InWindSettings);
	void SetWindSettings(const struct FSkyCreatorWindSettings& InWindSettings);
	void SetYear(int32 NewValue);
	void SpawnLightningStrike(const struct FVector& LightningPosition);
	void UpdateSettingsSequencer();

	struct FSkyCreatorBackgroundCloudSettings GetBackgroundCloudSettings() const;
	struct FSkyCreatorExponentialHeightFogSettings GetExponentialHeightFogSettings() const;
	struct FSkyCreatorMoonLightSettings GetMoonLightSettings() const;
	float GetMoonPhase() const;
	struct FSkyCreatorPostProcessSettings GetPostProcessSettings() const;
	struct FSkyCreatorSkyAtmosphereSettings GetSkyAtmosphereSettings() const;
	struct FSkyCreatorSkyLightSettings GetSkyLightSettings() const;
	struct FRotator GetStarMapRotation() const;
	struct FSkyCreatorStarMapSettings GetStarMapSettings() const;
	struct FSkyCreatorSunLightSettings GetSunLightSettings() const;
	float GetTime() const;
	struct FSkyCreatorVolumetricCloudSettings GetVolumetricCloudSettings() const;
	struct FSkyCreatorWeatherFXSettings GetWeatherFXSettings() const;
	struct FSkyCreatorWeatherMaterialFXSettings GetWeatherMaterialFXSettings() const;
	struct FSkyCreatorWeatherSettings GetWeatherSettings() const;
	struct FSkyCreatorWindSettings GetWindSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkyCreator">();
	}
	static class ASkyCreator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASkyCreator>();
	}
};
static_assert(alignof(ASkyCreator) == 0x000008, "Wrong alignment on ASkyCreator");
static_assert(sizeof(ASkyCreator) == 0x001180, "Wrong size on ASkyCreator");
static_assert(offsetof(ASkyCreator, Root) == 0x000290, "Member 'ASkyCreator::Root' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Billboard) == 0x000298, "Member 'ASkyCreator::Billboard' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Compass) == 0x0002A0, "Member 'ASkyCreator::Compass' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyAtmosphere) == 0x0002A8, "Member 'ASkyCreator::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloud) == 0x0002B0, "Member 'ASkyCreator::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyLight) == 0x0002B8, "Member 'ASkyCreator::SkyLight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunLight) == 0x0002C0, "Member 'ASkyCreator::SunLight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonLight) == 0x0002C8, "Member 'ASkyCreator::MoonLight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExponentialHeightFog) == 0x0002D0, "Member 'ASkyCreator::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PostProcess) == 0x0002D8, "Member 'ASkyCreator::PostProcess' has a wrong offset!");
static_assert(offsetof(ASkyCreator, StarMap) == 0x0002E0, "Member 'ASkyCreator::StarMap' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunSphere) == 0x0002E8, "Member 'ASkyCreator::SunSphere' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonSphere) == 0x0002F0, "Member 'ASkyCreator::MoonSphere' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCapture) == 0x0002F8, "Member 'ASkyCreator::OcclusionCapture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherFX) == 0x000300, "Member 'ASkyCreator::WeatherFX' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphere) == 0x000308, "Member 'ASkyCreator::SkySphere' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphereMaterial) == 0x000310, "Member 'ASkyCreator::SkySphereMaterial' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphereMID) == 0x000318, "Member 'ASkyCreator::SkySphereMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bUseEditorTimeOfDay) == 0x000320, "Member 'ASkyCreator::bUseEditorTimeOfDay' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorTimeOfDay) == 0x000324, "Member 'ASkyCreator::EditorTimeOfDay' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bUseEditorWeatherSettings) == 0x000328, "Member 'ASkyCreator::bUseEditorWeatherSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWeatherType) == 0x000329, "Member 'ASkyCreator::EditorWeatherType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWeatherPreset) == 0x000330, "Member 'ASkyCreator::EditorWeatherPreset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWeatherSettings) == 0x000338, "Member 'ASkyCreator::EditorWeatherSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bIsUsedWithSequencer) == 0x000790, "Member 'ASkyCreator::bIsUsedWithSequencer' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bIsEditorTickEnabled) == 0x000791, "Member 'ASkyCreator::bIsEditorTickEnabled' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TimeOfDay) == 0x000794, "Member 'ASkyCreator::TimeOfDay' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherSettings) == 0x000798, "Member 'ASkyCreator::WeatherSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CommonMPC) == 0x000BF0, "Member 'ASkyCreator::CommonMPC' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphereRadius) == 0x000BF8, "Member 'ASkyCreator::SkySphereRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bShowDebugVariables) == 0x000BFC, "Member 'ASkyCreator::bShowDebugVariables' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunPositionType) == 0x000BFD, "Member 'ASkyCreator::SunPositionType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunPositionData) == 0x000C00, "Member 'ASkyCreator::SunPositionData' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPositionType) == 0x000C08, "Member 'ASkyCreator::MoonPositionType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPositionData) == 0x000C0C, "Member 'ASkyCreator::MoonPositionData' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunriseTime) == 0x000C14, "Member 'ASkyCreator::SunriseTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunsetTime) == 0x000C18, "Member 'ASkyCreator::SunsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDawnOffsetTime) == 0x000C1C, "Member 'ASkyCreator::SunDawnOffsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDuskOffsetTime) == 0x000C20, "Member 'ASkyCreator::SunDuskOffsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDawnTime) == 0x000C24, "Member 'ASkyCreator::SunDawnTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDuskTime) == 0x000C28, "Member 'ASkyCreator::SunDuskTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunElevation) == 0x000C2C, "Member 'ASkyCreator::SunElevation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunAzimuth) == 0x000C30, "Member 'ASkyCreator::SunAzimuth' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunMinAngleAtDawnDusk) == 0x000C34, "Member 'ASkyCreator::SunMinAngleAtDawnDusk' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunFadeInOutTime) == 0x000C38, "Member 'ASkyCreator::SunFadeInOutTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonriseTime) == 0x000C3C, "Member 'ASkyCreator::MoonriseTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonsetTime) == 0x000C40, "Member 'ASkyCreator::MoonsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonElevation) == 0x000C44, "Member 'ASkyCreator::MoonElevation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonAzimuth) == 0x000C48, "Member 'ASkyCreator::MoonAzimuth' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonFadeInOutTime) == 0x000C4C, "Member 'ASkyCreator::MoonFadeInOutTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Latitude) == 0x000C50, "Member 'ASkyCreator::Latitude' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Longitude) == 0x000C54, "Member 'ASkyCreator::Longitude' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TimeZone) == 0x000C58, "Member 'ASkyCreator::TimeZone' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bDaylightSavingTime) == 0x000C5C, "Member 'ASkyCreator::bDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Year) == 0x000C60, "Member 'ASkyCreator::Year' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Month) == 0x000C64, "Member 'ASkyCreator::Month' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Day) == 0x000C68, "Member 'ASkyCreator::Day' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Date) == 0x000C70, "Member 'ASkyCreator::Date' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bLightTransition) == 0x000C78, "Member 'ASkyCreator::bLightTransition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunSurfaceBrightness) == 0x000C7C, "Member 'ASkyCreator::SunSurfaceBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonSurfaceBrightness) == 0x000C80, "Member 'ASkyCreator::MoonSurfaceBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCurrentElevation) == 0x000C84, "Member 'ASkyCreator::SunCurrentElevation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransitionStartSunAngle) == 0x000C88, "Member 'ASkyCreator::TransitionStartSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransitionMiddleSunAngle) == 0x000C8C, "Member 'ASkyCreator::TransitionMiddleSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransitionEndSunAngle) == 0x000C90, "Member 'ASkyCreator::TransitionEndSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NightIntensityTransitionStartSunAngle) == 0x000C94, "Member 'ASkyCreator::NightIntensityTransitionStartSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NightIntensityTransitionEndSunAngle) == 0x000C98, "Member 'ASkyCreator::NightIntensityTransitionEndSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyAtmosphereMobility) == 0x000C9C, "Member 'ASkyCreator::SkyAtmosphereMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransformMode) == 0x000C9D, "Member 'ASkyCreator::TransformMode' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PlanetRadius) == 0x000CA0, "Member 'ASkyCreator::PlanetRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, AtmosphereHeight) == 0x000CA4, "Member 'ASkyCreator::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, AerialPespectiveViewDistanceScale) == 0x000CA8, "Member 'ASkyCreator::AerialPespectiveViewDistanceScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PlanetTopPosition) == 0x000CB0, "Member 'ASkyCreator::PlanetTopPosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TraceSampleCountScale) == 0x000CC8, "Member 'ASkyCreator::TraceSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, GodRaysResolution) == 0x000CCC, "Member 'ASkyCreator::GodRaysResolution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerBottomAltitude) == 0x000CD0, "Member 'ASkyCreator::LayerBottomAltitude' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerHeight) == 0x000CD4, "Member 'ASkyCreator::LayerHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TracingStartMaxDistance) == 0x000CD8, "Member 'ASkyCreator::TracingStartMaxDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TracingMaxDistance) == 0x000CDC, "Member 'ASkyCreator::TracingMaxDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bPerSampleAtmosphericLightTransmittance) == 0x000CE0, "Member 'ASkyCreator::bPerSampleAtmosphericLightTransmittance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudsMPC) == 0x000CE8, "Member 'ASkyCreator::VolumetricCloudsMPC' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerBottomAltitudePosition) == 0x000CF0, "Member 'ASkyCreator::LayerBottomAltitudePosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerTopAltitudePosition) == 0x000D08, "Member 'ASkyCreator::LayerTopAltitudePosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CurrentVolumetricCloudMaterial) == 0x000D20, "Member 'ASkyCreator::CurrentVolumetricCloudMaterial' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudMID) == 0x000D28, "Member 'ASkyCreator::VolumetricCloudMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudDensitySampleMaterial) == 0x000D30, "Member 'ASkyCreator::VolumetricCloudDensitySampleMaterial' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudDensitySampleMID) == 0x000D38, "Member 'ASkyCreator::VolumetricCloudDensitySampleMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudDensitySampleRT) == 0x000D40, "Member 'ASkyCreator::VolumetricCloudDensitySampleRT' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bCinematicQuality) == 0x000D48, "Member 'ASkyCreator::bCinematicQuality' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RenderMode) == 0x000D49, "Member 'ASkyCreator::RenderMode' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bHighQualityAerialPerspective) == 0x000D4A, "Member 'ASkyCreator::bHighQualityAerialPerspective' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MultiScatteringApproximationOctaveCount) == 0x000D4C, "Member 'ASkyCreator::MultiScatteringApproximationOctaveCount' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bGroundContribution) == 0x000D50, "Member 'ASkyCreator::bGroundContribution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bRayMarchVolumeShadow) == 0x000D51, "Member 'ASkyCreator::bRayMarchVolumeShadow' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ViewSampleCountScale) == 0x000D54, "Member 'ASkyCreator::ViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ReflectionSampleCountScale) == 0x000D58, "Member 'ASkyCreator::ReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ShadowViewSampleCountScale) == 0x000D5C, "Member 'ASkyCreator::ShadowViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ShadowReflectionSampleCountScale) == 0x000D60, "Member 'ASkyCreator::ShadowReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ShadowTracingDistance) == 0x000D64, "Member 'ASkyCreator::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudMapScale) == 0x000D68, "Member 'ASkyCreator::CloudMapScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudMapOffset) == 0x000D70, "Member 'ASkyCreator::CloudMapOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CoverageVariationMapScale) == 0x000D80, "Member 'ASkyCreator::CoverageVariationMapScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseShapeResolution) == 0x000D84, "Member 'ASkyCreator::NoiseShapeResolution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseDetailResolution) == 0x000D85, "Member 'ASkyCreator::NoiseDetailResolution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseShapeScale) == 0x000D88, "Member 'ASkyCreator::NoiseShapeScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseDetailScale) == 0x000D8C, "Member 'ASkyCreator::NoiseDetailScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TurbulenceScale) == 0x000D90, "Member 'ASkyCreator::TurbulenceScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, BackgroundCloudsContrast) == 0x000D94, "Member 'ASkyCreator::BackgroundCloudsContrast' has a wrong offset!");
static_assert(offsetof(ASkyCreator, BackgroundCloudsReflectionScale) == 0x000D98, "Member 'ASkyCreator::BackgroundCloudsReflectionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyLightMobility) == 0x000D9C, "Member 'ASkyCreator::SkyLightMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bRealTimeCapture) == 0x000D9D, "Member 'ASkyCreator::bRealTimeCapture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSkyLightCaptureTimeSlice) == 0x000D9E, "Member 'ASkyCreator::bSkyLightCaptureTimeSlice' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bLowerHemisphereIsSolidColor) == 0x000D9F, "Member 'ASkyCreator::bLowerHemisphereIsSolidColor' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bCloudAmbientOcclusion) == 0x000DA0, "Member 'ASkyCreator::bCloudAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudAmbientOcclusionExtent) == 0x000DA4, "Member 'ASkyCreator::CloudAmbientOcclusionExtent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudAmbientOcclusionMapResolutionScale) == 0x000DA8, "Member 'ASkyCreator::CloudAmbientOcclusionMapResolutionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudAmbientOcclusionApertureScale) == 0x000DAC, "Member 'ASkyCreator::CloudAmbientOcclusionApertureScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunLightMobility) == 0x000DB0, "Member 'ASkyCreator::SunLightMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bControlSunDirection) == 0x000DB1, "Member 'ASkyCreator::bControlSunDirection' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunConstantIntensity) == 0x000DB2, "Member 'ASkyCreator::bSunConstantIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunIntensity) == 0x000DB4, "Member 'ASkyCreator::SunIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCurrentIntensity) == 0x000DB8, "Member 'ASkyCreator::SunCurrentIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunUseTemperature) == 0x000DBC, "Member 'ASkyCreator::bSunUseTemperature' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDiskSize) == 0x000DC0, "Member 'ASkyCreator::SunDiskSize' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunConstantAtmosphereDiskColorScale) == 0x000DC4, "Member 'ASkyCreator::bSunConstantAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunAtmosphereDiskColorScale) == 0x000DC8, "Member 'ASkyCreator::SunAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunPerPixelAtmosphereTransmittance) == 0x000DD8, "Member 'ASkyCreator::bSunPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCloudShadowExtent) == 0x000DDC, "Member 'ASkyCreator::SunCloudShadowExtent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCloudShadowMapResolutionScale) == 0x000DE0, "Member 'ASkyCreator::SunCloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCloudShadowRaySampleCountScale) == 0x000DE4, "Member 'ASkyCreator::SunCloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonLightMobility) == 0x000DE8, "Member 'ASkyCreator::MoonLightMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bControlMoonDirection) == 0x000DE9, "Member 'ASkyCreator::bControlMoonDirection' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonConstantIntensity) == 0x000DEA, "Member 'ASkyCreator::bMoonConstantIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonIntensity) == 0x000DEC, "Member 'ASkyCreator::MoonIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCurrentIntensity) == 0x000DF0, "Member 'ASkyCreator::MoonCurrentIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonUseTemperature) == 0x000DF4, "Member 'ASkyCreator::bMoonUseTemperature' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonDiskSize) == 0x000DF8, "Member 'ASkyCreator::MoonDiskSize' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonRotation) == 0x000DFC, "Member 'ASkyCreator::MoonRotation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPhase) == 0x000E00, "Member 'ASkyCreator::MoonPhase' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonPhaseLightIntensityScale) == 0x000E04, "Member 'ASkyCreator::bMoonPhaseLightIntensityScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPhaseLightIntensityMinScale) == 0x000E08, "Member 'ASkyCreator::MoonPhaseLightIntensityMinScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPhaseLightIntensityMaxScale) == 0x000E0C, "Member 'ASkyCreator::MoonPhaseLightIntensityMaxScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonConstantAtmosphereDiskColorScale) == 0x000E10, "Member 'ASkyCreator::bMoonConstantAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonAtmosphereDiskColorScale) == 0x000E14, "Member 'ASkyCreator::MoonAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonPerPixelAtmosphereTransmittance) == 0x000E24, "Member 'ASkyCreator::bMoonPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCloudShadowExtent) == 0x000E28, "Member 'ASkyCreator::MoonCloudShadowExtent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCloudShadowMapResolutionScale) == 0x000E2C, "Member 'ASkyCreator::MoonCloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCloudShadowRaySampleCountScale) == 0x000E30, "Member 'ASkyCreator::MoonCloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExponentialHeightFogMobility) == 0x000E34, "Member 'ASkyCreator::ExponentialHeightFogMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableExponentialHeightFog) == 0x000E35, "Member 'ASkyCreator::bEnableExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bVolumetricFog) == 0x000E36, "Member 'ASkyCreator::bVolumetricFog' has a wrong offset!");
static_assert(offsetof(ASkyCreator, FogHeightOffset) == 0x000E38, "Member 'ASkyCreator::FogHeightOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SecondFogHeightOffset) == 0x000E3C, "Member 'ASkyCreator::SecondFogHeightOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, StarMapTexture) == 0x000E40, "Member 'ASkyCreator::StarMapTexture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, StarMapRotationType) == 0x000E48, "Member 'ASkyCreator::StarMapRotationType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, StarMapAdditionalRotation) == 0x000E50, "Member 'ASkyCreator::StarMapAdditionalRotation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableOcclusionCapture) == 0x000E68, "Member 'ASkyCreator::bEnableOcclusionCapture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionRenderTarget) == 0x000E70, "Member 'ASkyCreator::OcclusionRenderTarget' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureWidth) == 0x000E78, "Member 'ASkyCreator::OcclusionCaptureWidth' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureHeight) == 0x000E7C, "Member 'ASkyCreator::OcclusionCaptureHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bOcclusionCaptureRealtimeUpdate) == 0x000E80, "Member 'ASkyCreator::bOcclusionCaptureRealtimeUpdate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureStepDistance) == 0x000E84, "Member 'ASkyCreator::OcclusionCaptureStepDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureStepSize) == 0x000E88, "Member 'ASkyCreator::OcclusionCaptureStepSize' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionBias) == 0x000E8C, "Member 'ASkyCreator::OcclusionBias' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionBlurSamples) == 0x000E90, "Member 'ASkyCreator::OcclusionBlurSamples' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionBlurDistance) == 0x000E94, "Member 'ASkyCreator::OcclusionBlurDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionMaskFadeHardness) == 0x000E98, "Member 'ASkyCreator::OcclusionMaskFadeHardness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CameraLocation) == 0x000EA0, "Member 'ASkyCreator::CameraLocation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CameraLocationSnapped) == 0x000EB8, "Member 'ASkyCreator::CameraLocationSnapped' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCurrentLocation) == 0x000ED0, "Member 'ASkyCreator::OcclusionCurrentLocation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherFXCutoffWorldHeight) == 0x000EE8, "Member 'ASkyCreator::WeatherFXCutoffWorldHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherFXCutoffSoftness) == 0x000EEC, "Member 'ASkyCreator::WeatherFXCutoffSoftness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationSpawnRadius) == 0x000EF0, "Member 'ASkyCreator::PrecipitationSpawnRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableGPUPrecipitation) == 0x000EF4, "Member 'ASkyCreator::bEnableGPUPrecipitation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationSpawnRadiusGPU) == 0x000EF8, "Member 'ASkyCreator::PrecipitationSpawnRadiusGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationMaxViewDistance) == 0x000EFC, "Member 'ASkyCreator::PrecipitationMaxViewDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationVerticalCheckDistance) == 0x000F00, "Member 'ASkyCreator::PrecipitationVerticalCheckDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationCollisionChannel) == 0x000F04, "Member 'ASkyCreator::PrecipitationCollisionChannel' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationDepthFadeDistance) == 0x000F08, "Member 'ASkyCreator::PrecipitationDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationCameraFadeDistance) == 0x000F0C, "Member 'ASkyCreator::PrecipitationCameraFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationCameraFadeOffset) == 0x000F10, "Member 'ASkyCreator::PrecipitationCameraFadeOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSpawnRateMaxCPU) == 0x000F14, "Member 'ASkyCreator::RainSpawnRateMaxCPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSpawnRateMaxGPU) == 0x000F18, "Member 'ASkyCreator::RainSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDistanceScaleFactor) == 0x000F1C, "Member 'ASkyCreator::RainDistanceScaleFactor' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainCameraMotionAlignmentScale) == 0x000F20, "Member 'ASkyCreator::RainCameraMotionAlignmentScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainVelocityElongationScale) == 0x000F24, "Member 'ASkyCreator::RainVelocityElongationScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainMaskHardness) == 0x000F28, "Member 'ASkyCreator::RainMaskHardness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashSpawnRateMax) == 0x000F2C, "Member 'ASkyCreator::RainSplashSpawnRateMax' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashSpawnRateMaxGPU) == 0x000F30, "Member 'ASkyCreator::RainSplashSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSpawnRateMaxCPU) == 0x000F34, "Member 'ASkyCreator::SnowSpawnRateMaxCPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSpawnRateMaxGPU) == 0x000F38, "Member 'ASkyCreator::SnowSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowDistanceScaleFactor) == 0x000F3C, "Member 'ASkyCreator::SnowDistanceScaleFactor' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowCameraMotionAlignmentScale) == 0x000F40, "Member 'ASkyCreator::SnowCameraMotionAlignmentScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowVelocityElongationScale) == 0x000F44, "Member 'ASkyCreator::SnowVelocityElongationScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowMaskHardness) == 0x000F48, "Member 'ASkyCreator::SnowMaskHardness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningsParametersRT) == 0x000F50, "Member 'ASkyCreator::LightningsParametersRT' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningParameters) == 0x000F58, "Member 'ASkyCreator::LightningParameters' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CurrentLightningInterval) == 0x000F70, "Member 'ASkyCreator::CurrentLightningInterval' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LastLightningPosition) == 0x000F78, "Member 'ASkyCreator::LastLightningPosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningAvailablePositions) == 0x000F90, "Member 'ASkyCreator::LightningAvailablePositions' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningCurrentIndex) == 0x000FA0, "Member 'ASkyCreator::LightningCurrentIndex' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSampleCloudDensity) == 0x000FA4, "Member 'ASkyCreator::bSampleCloudDensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningMaxSamples) == 0x000FA8, "Member 'ASkyCreator::LightningMaxSamples' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningSpawnInnerRadius) == 0x000FAC, "Member 'ASkyCreator::LightningSpawnInnerRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningSpawnOuterRadius) == 0x000FB0, "Member 'ASkyCreator::LightningSpawnOuterRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningRandomDegreeInConeMax) == 0x000FB4, "Member 'ASkyCreator::LightningRandomDegreeInConeMax' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningBoltEmissiveScale) == 0x000FB8, "Member 'ASkyCreator::LightningBoltEmissiveScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashFadeUpdateRate) == 0x000FC8, "Member 'ASkyCreator::LightningFlashFadeUpdateRate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashFadeDelta) == 0x000FCC, "Member 'ASkyCreator::LightningFlashFadeDelta' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashEmissiveScale) == 0x000FD0, "Member 'ASkyCreator::LightningFlashEmissiveScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashEmissiveReflectionScale) == 0x000FD4, "Member 'ASkyCreator::LightningFlashEmissiveReflectionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashRadiusScale) == 0x000FD8, "Member 'ASkyCreator::LightningFlashRadiusScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashFadeSpeed) == 0x000FDC, "Member 'ASkyCreator::LightningFlashFadeSpeed' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainbowDistance) == 0x000FE0, "Member 'ASkyCreator::RainbowDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainbowDepthFadeDistance) == 0x000FE4, "Member 'ASkyCreator::RainbowDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MaterialFXCutoffWorldHeight) == 0x000FE8, "Member 'ASkyCreator::MaterialFXCutoffWorldHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MaterialFXCutoffSoftness) == 0x000FEC, "Member 'ASkyCreator::MaterialFXCutoffSoftness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WetnessSlopeAngle) == 0x000FF0, "Member 'ASkyCreator::WetnessSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WetnessSlopeSmoothness) == 0x000FF4, "Member 'ASkyCreator::WetnessSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesMaskScale) == 0x000FF8, "Member 'ASkyCreator::PuddlesMaskScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesRoughness) == 0x000FFC, "Member 'ASkyCreator::PuddlesRoughness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesSlopeAngle) == 0x001000, "Member 'ASkyCreator::PuddlesSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesSlopeSmoothness) == 0x001004, "Member 'ASkyCreator::PuddlesSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableRainRipplesSolver) == 0x001008, "Member 'ASkyCreator::bEnableRainRipplesSolver' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bPauseRainRipplesSolver) == 0x001009, "Member 'ASkyCreator::bPauseRainRipplesSolver' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesUpdateRate) == 0x001018, "Member 'ASkyCreator::RainRipplesUpdateRate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesScale) == 0x00101C, "Member 'ASkyCreator::RainRipplesScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesMaxDensity) == 0x001020, "Member 'ASkyCreator::RainRipplesMaxDensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WindRipplesScale) == 0x001024, "Member 'ASkyCreator::WindRipplesScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesSolverDelta) == 0x001028, "Member 'ASkyCreator::RainRipplesSolverDelta' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesSolverHeightState) == 0x00102C, "Member 'ASkyCreator::RainRipplesSolverHeightState' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesPropagation) == 0x001030, "Member 'ASkyCreator::RainRipplesPropagation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesPropagationMID) == 0x001038, "Member 'ASkyCreator::RainRipplesPropagationMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesForce) == 0x001040, "Member 'ASkyCreator::RainRipplesForce' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesNormal) == 0x001048, "Member 'ASkyCreator::RainRipplesNormal' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesNormalMID) == 0x001050, "Member 'ASkyCreator::RainRipplesNormalMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesPropagationFrame0) == 0x001058, "Member 'ASkyCreator::RainRipplesPropagationFrame0' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesPropagationFrame1) == 0x001060, "Member 'ASkyCreator::RainRipplesPropagationFrame1' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesPropagationFrame2) == 0x001068, "Member 'ASkyCreator::RainRipplesPropagationFrame2' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesNormalRT) == 0x001070, "Member 'ASkyCreator::RainRipplesNormalRT' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowMaskScale) == 0x001078, "Member 'ASkyCreator::SnowMaskScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowScale) == 0x00107C, "Member 'ASkyCreator::SnowScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowRoughness) == 0x001080, "Member 'ASkyCreator::SnowRoughness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSparklesScale) == 0x001084, "Member 'ASkyCreator::SnowSparklesScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSparklesRoughness) == 0x001088, "Member 'ASkyCreator::SnowSparklesRoughness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSlopeAngle) == 0x00108C, "Member 'ASkyCreator::SnowSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSlopeSmoothness) == 0x001090, "Member 'ASkyCreator::SnowSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableWind) == 0x001094, "Member 'ASkyCreator::bEnableWind' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bIndependentWindControl) == 0x001095, "Member 'ASkyCreator::bIndependentWindControl' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorIndependentWindSettings) == 0x001098, "Member 'ASkyCreator::EditorIndependentWindSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudWindSkewAmount) == 0x0010B4, "Member 'ASkyCreator::CloudWindSkewAmount' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudWindOffset) == 0x0010B8, "Member 'ASkyCreator::CloudWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudWindSkewDirection) == 0x0010D0, "Member 'ASkyCreator::CloudWindSkewDirection' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudWindSkewForce) == 0x0010E8, "Member 'ASkyCreator::CloudWindSkewForce' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudNoiseShapeWindOffset) == 0x0010F0, "Member 'ASkyCreator::CloudNoiseShapeWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudNoiseDetailWindOffset) == 0x001108, "Member 'ASkyCreator::CloudNoiseDetailWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bUseExposureSettings) == 0x001120, "Member 'ASkyCreator::bUseExposureSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bExtendDefaultLuminanceRange) == 0x001121, "Member 'ASkyCreator::bExtendDefaultLuminanceRange' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PostProcessPriority) == 0x001124, "Member 'ASkyCreator::PostProcessPriority' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMethod) == 0x001128, "Member 'ASkyCreator::ExposureMethod' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureBiasCurve) == 0x001130, "Member 'ASkyCreator::ExposureBiasCurve' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMeterMask) == 0x001138, "Member 'ASkyCreator::ExposureMeterMask' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMinBrightness) == 0x001140, "Member 'ASkyCreator::ExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMaxBrightness) == 0x001144, "Member 'ASkyCreator::ExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMinEV100) == 0x001148, "Member 'ASkyCreator::ExposureMinEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMaxEV100) == 0x00114C, "Member 'ASkyCreator::ExposureMaxEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureSpeedUp) == 0x001150, "Member 'ASkyCreator::ExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureSpeedDown) == 0x001154, "Member 'ASkyCreator::ExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureLowPercent) == 0x001158, "Member 'ASkyCreator::ExposureLowPercent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHighPercent) == 0x00115C, "Member 'ASkyCreator::ExposureHighPercent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramLogMin) == 0x001160, "Member 'ASkyCreator::ExposureHistogramLogMin' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramLogMax) == 0x001164, "Member 'ASkyCreator::ExposureHistogramLogMax' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramMinEV100) == 0x001168, "Member 'ASkyCreator::ExposureHistogramMinEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramMaxEV100) == 0x00116C, "Member 'ASkyCreator::ExposureHistogramMaxEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OnLightningStrike) == 0x001170, "Member 'ASkyCreator::OnLightningStrike' has a wrong offset!");

// Class SkyCreatorPlugin.SkyCreatorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USkyCreatorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float CentimetersToKilometers(const float Value);
	static bool CheckCloudDensityAtPosition(class UObject* WorldContextObject, const struct FVector& Position, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget);
	static void ConvertRenderTargetToTexture2D(class UTextureRenderTarget2D* RenderTarget, class UTexture2D** Texture);
	static void CreateAndAssignMID(class UObject* WorldContextObject, class UMaterialInterface* InMaterial, class UMaterialInstanceDynamic** InMID);
	static double ElevationRefraction(double F);
	static bool FindLightningPosition(class UObject* WorldContextObject, bool bSampleCloudDensity, int32 Samples, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget, const struct FVector& Position, float InnerRadius, float OuterRadius, float MinHeight, float MaxHeight, float DensityThreshold, struct FVector* OutPosition);
	static float GetCloudDensityAtPosition(class UObject* WorldContextObject, const struct FVector& Position, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget);
	static struct FCelestialPositionData GetRealMoonPosition(const float Latitude, const float Longitude, const float TimeZone, const bool bIsDaylightSavingTime, const struct FDateTime& DateTime);
	static struct FCelestialPositionData GetRealSunPosition(const float Latitude, const float Longitude, const float TimeZone, const bool bIsDaylightSavingTime, const struct FDateTime& DateTime);
	static bool IsApplicationForegroundNow();
	static float KilometersToCentimeters(const float Value);

	class UTexture2D* DynamicConvertRenderTargetToTexture2D(class UTextureRenderTarget2D* RenderTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkyCreatorFunctionLibrary">();
	}
	static class USkyCreatorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkyCreatorFunctionLibrary>();
	}
};
static_assert(alignof(USkyCreatorFunctionLibrary) == 0x000008, "Wrong alignment on USkyCreatorFunctionLibrary");
static_assert(sizeof(USkyCreatorFunctionLibrary) == 0x000028, "Wrong size on USkyCreatorFunctionLibrary");

// Class SkyCreatorPlugin.SkyCreatorWeatherPreset
// 0x0470 (0x04A0 - 0x0030)
class USkyCreatorWeatherPreset final : public UDataAsset
{
public:
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSkyCreatorSkyAtmosphereSettings       SkyAtmosphereSettings;                             // 0x0048(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorVolumetricCloudSettings     VolumetricCloudSettings;                           // 0x00C8(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorBackgroundCloudSettings     BackgroundCloudSettings;                           // 0x0170(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSkyLightSettings            SkyLightSettings;                                  // 0x0194(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSunLightSettings            SunLightSettings;                                  // 0x01C0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorMoonLightSettings           MoonLightSettings;                                 // 0x0208(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorExponentialHeightFogSettings ExponentialHeightFogSettings;                      // 0x0250(0x0064)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorStarMapSettings             StarMapSettings;                                   // 0x02B4(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_137A[0x4];                                     // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkyCreatorWeatherFXSettings           WeatherFXSettings;                                 // 0x0300(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherMaterialFXSettings   WeatherMaterialFXSettings;                         // 0x0410(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWindSettings                WindSettings;                                      // 0x0478(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorPostProcessSettings         PostProcessSettings;                               // 0x0494(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	struct FSkyCreatorWeatherSettings GetWeatherPresetSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkyCreatorWeatherPreset">();
	}
	static class USkyCreatorWeatherPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkyCreatorWeatherPreset>();
	}
};
static_assert(alignof(USkyCreatorWeatherPreset) == 0x000008, "Wrong alignment on USkyCreatorWeatherPreset");
static_assert(sizeof(USkyCreatorWeatherPreset) == 0x0004A0, "Wrong size on USkyCreatorWeatherPreset");
static_assert(offsetof(USkyCreatorWeatherPreset, Description) == 0x000030, "Member 'USkyCreatorWeatherPreset::Description' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, SkyAtmosphereSettings) == 0x000048, "Member 'USkyCreatorWeatherPreset::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, VolumetricCloudSettings) == 0x0000C8, "Member 'USkyCreatorWeatherPreset::VolumetricCloudSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, BackgroundCloudSettings) == 0x000170, "Member 'USkyCreatorWeatherPreset::BackgroundCloudSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, SkyLightSettings) == 0x000194, "Member 'USkyCreatorWeatherPreset::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, SunLightSettings) == 0x0001C0, "Member 'USkyCreatorWeatherPreset::SunLightSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, MoonLightSettings) == 0x000208, "Member 'USkyCreatorWeatherPreset::MoonLightSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, ExponentialHeightFogSettings) == 0x000250, "Member 'USkyCreatorWeatherPreset::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, StarMapSettings) == 0x0002B4, "Member 'USkyCreatorWeatherPreset::StarMapSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, WeatherFXSettings) == 0x000300, "Member 'USkyCreatorWeatherPreset::WeatherFXSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, WeatherMaterialFXSettings) == 0x000410, "Member 'USkyCreatorWeatherPreset::WeatherMaterialFXSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, WindSettings) == 0x000478, "Member 'USkyCreatorWeatherPreset::WindSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, PostProcessSettings) == 0x000494, "Member 'USkyCreatorWeatherPreset::PostProcessSettings' has a wrong offset!");

}

