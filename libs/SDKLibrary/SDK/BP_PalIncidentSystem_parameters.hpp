#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PalIncidentSystem

#include "Basic.hpp"

#include "FPalPresentLotteryDataTableRow_structs.hpp"


namespace SDK::Params
{

// Function BP_PalIncidentSystem.BP_PalIncidentSystem_C.ExecuteUbergraph_BP_PalIncidentSystem
// 0x0038 (0x0038 - 0x0000)
struct BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43BD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APalPlayerCharacter*                    K2Node_Event_TalkPlayer;                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          K2Node_Event_TargetNPC;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UDataTable*                       K2Node_Event_CunstomFuncParam;                     // 0x0018(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NPCAIController_C*                  K2Node_DynamicCast_AsBP_NPCAIController;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem) == 0x000008, "Wrong alignment on BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem");
static_assert(sizeof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem) == 0x000038, "Wrong size on BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem");
static_assert(offsetof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem, EntryPoint) == 0x000000, "Member 'BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem, K2Node_Event_TalkPlayer) == 0x000008, "Member 'BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem::K2Node_Event_TalkPlayer' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem, K2Node_Event_TargetNPC) == 0x000010, "Member 'BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem::K2Node_Event_TargetNPC' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem, K2Node_Event_CunstomFuncParam) == 0x000018, "Member 'BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem::K2Node_Event_CunstomFuncParam' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem, CallFunc_GetController_ReturnValue) == 0x000020, "Member 'BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem, K2Node_DynamicCast_AsBP_NPCAIController) == 0x000028, "Member 'BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem::K2Node_DynamicCast_AsBP_NPCAIController' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_PalIncidentSystem_C_ExecuteUbergraph_BP_PalIncidentSystem::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PalIncidentSystem.BP_PalIncidentSystem_C.TalkCustomFunction_AttackToPlayer
// 0x0018 (0x0018 - 0x0000)
struct BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer final
{
public:
	class APalPlayerCharacter*                    TalkPlayer;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          TargetNPC;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UDataTable*                       CunstomFuncParam;                                  // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer) == 0x000008, "Wrong alignment on BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer");
static_assert(sizeof(BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer) == 0x000018, "Wrong size on BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer");
static_assert(offsetof(BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer, TalkPlayer) == 0x000000, "Member 'BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer::TalkPlayer' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer, TargetNPC) == 0x000008, "Member 'BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer::TargetNPC' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer, CunstomFuncParam) == 0x000010, "Member 'BP_PalIncidentSystem_C_TalkCustomFunction_AttackToPlayer::CunstomFuncParam' has a wrong offset!");

// Function BP_PalIncidentSystem.BP_PalIncidentSystem_C.Lottery Index by Weights
// 0x0088 (0x0088 - 0x0000)
struct BP_PalIncidentSystem_C_Lottery_Index_by_Weights final
{
public:
	TArray<double>                                Weights;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedIndex;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LotteryWeight;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalWeight;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43BE[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43BF[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C0[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C1[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights) == 0x000008, "Wrong alignment on BP_PalIncidentSystem_C_Lottery_Index_by_Weights");
static_assert(sizeof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights) == 0x000088, "Wrong size on BP_PalIncidentSystem_C_Lottery_Index_by_Weights");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, Weights) == 0x000000, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::Weights' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, Param_Index) == 0x000010, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, SelectedIndex) == 0x000014, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::SelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, LotteryWeight) == 0x000018, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::LotteryWeight' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, TotalWeight) == 0x000020, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::TotalWeight' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, Temp_bool_True_if_break_was_hit_Variable) == 0x000034, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Not_PreBool_ReturnValue) == 0x000035, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, Temp_int_Array_Index_Variable_1) == 0x000038, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, Temp_int_Loop_Counter_Variable_1) == 0x00003C, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00005A, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00005B, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_RandomFloatInRange_ReturnValue) == 0x000060, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Less_IntInt_ReturnValue_1) == 0x00007C, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_Lottery_Index_by_Weights, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_PalIncidentSystem_C_Lottery_Index_by_Weights::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_PalIncidentSystem.BP_PalIncidentSystem_C.LotteryItemAndNum
// 0x0110 (0x0110 - 0x0000)
struct BP_PalIncidentSystem_C_LotteryItemAndNum final
{
public:
	const class UDataTable*                       PresentLotteryDataTable;                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutItemName;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutNum;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                Weights;                                           // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         AddItemNum;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxRange;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinRange;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AddItemName;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Unit;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumMax;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumMin;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedIndex;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C3[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           RowNames;                                          // 0x0050(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C4[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Lottery_Index_by_Weights_Index;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C5[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFPalPresentLotteryDataTableRow        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0088(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C6[0x2];                                     // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_2;                        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C7[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPalPresentLotteryDataTableRow        CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x00C8(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C8[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x00F0(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C9[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PalIncidentSystem_C_LotteryItemAndNum) == 0x000008, "Wrong alignment on BP_PalIncidentSystem_C_LotteryItemAndNum");
static_assert(sizeof(BP_PalIncidentSystem_C_LotteryItemAndNum) == 0x000110, "Wrong size on BP_PalIncidentSystem_C_LotteryItemAndNum");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, PresentLotteryDataTable) == 0x000000, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::PresentLotteryDataTable' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, OutItemName) == 0x000008, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::OutItemName' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, OutNum) == 0x000010, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::OutNum' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, Weights) == 0x000018, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::Weights' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, AddItemNum) == 0x000028, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::AddItemNum' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, MaxRange) == 0x00002C, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::MaxRange' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, MinRange) == 0x000030, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::MinRange' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, AddItemName) == 0x000034, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::AddItemName' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, Unit) == 0x00003C, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::Unit' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, NumMax) == 0x000040, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::NumMax' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, NumMin) == 0x000044, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::NumMin' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, SelectedIndex) == 0x000048, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::SelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, RowNames) == 0x000050, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::RowNames' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Lottery_Index_by_Weights_Index) == 0x000068, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Lottery_Index_by_Weights_Index' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00006C, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Multiply_IntInt_ReturnValue) == 0x000070, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Divide_IntInt_ReturnValue) == 0x000074, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Percent_IntInt_ReturnValue) == 0x000078, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000080, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000084, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_GetDataTableRowFromName_OutRow) == 0x000088, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000A8, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A9, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Max_ReturnValue) == 0x0000AC, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Max_ReturnValue_1) == 0x0000B0, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Max_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Max_ReturnValue_2) == 0x0000B4, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Max_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0000C8, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x0000E8, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Array_Add_ReturnValue) == 0x0000EC, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0000F0, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, Temp_int_Loop_Counter_Variable) == 0x000100, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Less_IntInt_ReturnValue) == 0x000104, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PalIncidentSystem_C_LotteryItemAndNum, CallFunc_Add_IntInt_ReturnValue_1) == 0x000108, "Member 'BP_PalIncidentSystem_C_LotteryItemAndNum::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

}

