#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIAction_CanCombatBase

#include "Basic.hpp"

#include "BP_AIAction_CanCombatBase_classes.hpp"
#include "BP_AIAction_CanCombatBase_parameters.hpp"


namespace SDK
{

// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.ActionAbort
// (Event, Public, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::ActionAbort(class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "ActionAbort");

	Params::BP_AIAction_CanCombatBase_C_ActionAbort Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.ActionFinished
// (Event, Public, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPawnActionResult                       WithResult                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::ActionFinished(class APawn* ControlledPawn, EPawnActionResult WithResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "ActionFinished");

	Params::BP_AIAction_CanCombatBase_C_ActionFinished Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.WithResult = WithResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.ActionPause
// (Event, Public, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::ActionPause(class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "ActionPause");

	Params::BP_AIAction_CanCombatBase_C_ActionPause Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.ActionResume
// (Event, Public, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::ActionResume(class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "ActionResume");

	Params::BP_AIAction_CanCombatBase_C_ActionResume Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.ActionStart
// (Event, Public, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::ActionStart(class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "ActionStart");

	Params::BP_AIAction_CanCombatBase_C_ActionStart Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.DamageEventToCombatMode
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalDamageResult                 DamageResult                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_AIAction_CanCombatBase_C::DamageEventToCombatMode(const struct FPalDamageResult& DamageResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "DamageEventToCombatMode");

	Params::BP_AIAction_CanCombatBase_C_DamageEventToCombatMode Parms{};

	Parms.DamageResult = std::move(DamageResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.ExecuteUbergraph_BP_AIAction_CanCombatBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::ExecuteUbergraph_BP_AIAction_CanCombatBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "ExecuteUbergraph_BP_AIAction_CanCombatBase");

	Params::BP_AIAction_CanCombatBase_C_ExecuteUbergraph_BP_AIAction_CanCombatBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.Fun_Damage_AIResponse
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalDamageResult                 DamageResult                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_AIAction_CanCombatBase_C::Fun_Damage_AIResponse(const struct FPalDamageResult& DamageResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "Fun_Damage_AIResponse");

	Params::BP_AIAction_CanCombatBase_C_Fun_Damage_AIResponse Parms{};

	Parms.DamageResult = std::move(DamageResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.GetLeader
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APalCharacter*                    Leader                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::GetLeader(class APalCharacter** Leader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "GetLeader");

	Params::BP_AIAction_CanCombatBase_C_GetLeader Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Leader != nullptr)
		*Leader = Parms.Leader;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.GetLeaderPalBrackBoard
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_PalAIBlackboard_Common_C*     BB                                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::GetLeaderPalBrackBoard(class UBP_PalAIBlackboard_Common_C** BB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "GetLeaderPalBrackBoard");

	Params::BP_AIAction_CanCombatBase_C_GetLeaderPalBrackBoard Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BB != nullptr)
		*BB = Parms.BB;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.GetSelfPalBlackBoard
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_PalAIBlackboard_Common_C*     PalBlackBoard                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::GetSelfPalBlackBoard(class UBP_PalAIBlackboard_Common_C** PalBlackBoard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "GetSelfPalBlackBoard");

	Params::BP_AIAction_CanCombatBase_C_GetSelfPalBlackBoard Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PalBlackBoard != nullptr)
		*PalBlackBoard = Parms.PalBlackBoard;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.IsLeader
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Leader                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::IsLeader(bool* Leader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "IsLeader");

	Params::BP_AIAction_CanCombatBase_C_IsLeader Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Leader != nullptr)
		*Leader = Parms.Leader;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.OnSquadMemberDeadEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalDeadInfo                     DeadInbfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_AIAction_CanCombatBase_C::OnSquadMemberDeadEvent(const struct FPalDeadInfo& DeadInbfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "OnSquadMemberDeadEvent");

	Params::BP_AIAction_CanCombatBase_C_OnSquadMemberDeadEvent Parms{};

	Parms.DeadInbfo = std::move(DeadInbfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.SearchDeadEdibleBody
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ChangeNextAction                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::SearchDeadEdibleBody(bool* ChangeNextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "SearchDeadEdibleBody");

	Params::BP_AIAction_CanCombatBase_C_SearchDeadEdibleBody Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeNextAction != nullptr)
		*ChangeNextAction = Parms.ChangeNextAction;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.SelfMoveToLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Goal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::SelfMoveToLocation(const struct FVector& Goal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "SelfMoveToLocation");

	Params::BP_AIAction_CanCombatBase_C_SelfMoveToLocation Parms{};

	Parms.Goal = std::move(Goal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.SightCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPalAIResponseType                      CurrentState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OverrideIsDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPalAIResponseType                      ResponseType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::SightCheck(EPalAIResponseType CurrentState, bool OverrideIsDamage, class AActor** Target, EPalAIResponseType* ResponseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "SightCheck");

	Params::BP_AIAction_CanCombatBase_C_SightCheck Parms{};

	Parms.CurrentState = CurrentState;
	Parms.OverrideIsDamage = OverrideIsDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;

	if (ResponseType != nullptr)
		*ResponseType = Parms.ResponseType;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.SightCheckAndResponse
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPalAIResponseType                      Current                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OverrideIsDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeNextAction                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::SightCheckAndResponse(EPalAIResponseType Current, bool OverrideIsDamage, bool* ChangeNextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "SightCheckAndResponse");

	Params::BP_AIAction_CanCombatBase_C_SightCheckAndResponse Parms{};

	Parms.Current = Current;
	Parms.OverrideIsDamage = OverrideIsDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeNextAction != nullptr)
		*ChangeNextAction = Parms.ChangeNextAction;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.SightResponse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPalAIResponseType                      ResponseType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangeNextAction                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::SightResponse(class AActor* Target, EPalAIResponseType ResponseType, bool* ChangeNextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "SightResponse");

	Params::BP_AIAction_CanCombatBase_C_SightResponse Parms{};

	Parms.Target = Target;
	Parms.ResponseType = ResponseType;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangeNextAction != nullptr)
		*ChangeNextAction = Parms.ChangeNextAction;
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.SoundEvent
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          EmitLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::SoundEvent(const struct FVector& EmitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "SoundEvent");

	Params::BP_AIAction_CanCombatBase_C_SoundEvent Parms{};

	Parms.EmitLocation = std::move(EmitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.StartCombatMode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::StartCombatMode(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "StartCombatMode");

	Params::BP_AIAction_CanCombatBase_C_StartCombatMode Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.StartEscapeMode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::StartEscapeMode(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "StartEscapeMode");

	Params::BP_AIAction_CanCombatBase_C_StartEscapeMode Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.StartFriendlyLookatMode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::StartFriendlyLookatMode(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "StartFriendlyLookatMode");

	Params::BP_AIAction_CanCombatBase_C_StartFriendlyLookatMode Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C.StartWarningMode
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          AttentionLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AIAction_CanCombatBase_C::StartWarningMode(const struct FVector& AttentionLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AIAction_CanCombatBase_C", "StartWarningMode");

	Params::BP_AIAction_CanCombatBase_C_StartWarningMode Parms{};

	Parms.AttentionLocation = std::move(AttentionLocation);

	UObject::ProcessEvent(Func, &Parms);
}

}

