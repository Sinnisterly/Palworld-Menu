#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PPSkyCreatorPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PPSkyCreatorPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class PPSkyCreatorPlugin.PPSkyCreator
// 0x0EF0 (0x1180 - 0x0290)
class APPSkyCreator final : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Compass;                                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             SunLight;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             MoonLight;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcess;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StarMap;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SunSphere;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   MoonSphere;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               OcclusionCapture;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      WeatherFX;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkySphere;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SkySphereMaterial;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               SkySphereMID;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEditorTimeOfDay;                               // 0x0320(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDA[0x3];                                     // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EditorTimeOfDay;                                   // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEditorWeatherSettings;                         // 0x0328(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPPSkyCreatorEditorWeatherType                EditorWeatherType;                                 // 0x0329(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDB[0x6];                                     // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPPSkyCreatorWeatherPreset*             EditorWeatherPreset;                               // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWeatherSettings           EditorWeatherSettings;                             // 0x0338(0x0458)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsUsedWithSequencer;                              // 0x0790(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditorTickEnabled;                              // 0x0791(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDC[0x2];                                     // 0x0792(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOfDay;                                         // 0x0794(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWeatherSettings           WeatherSettings;                                   // 0x0798(0x0458)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           CommonMPC;                                         // 0x0BF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereRadius;                                   // 0x0BF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugVariables;                               // 0x0BFC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPPSkyCreatorSunPositionType                  SunPositionType;                                   // 0x0BFD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDD[0x2];                                     // 0x0BFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPPCelestialPositionData               SunPositionData;                                   // 0x0C00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	EPPSkyCreatorMoonPositionType                 MoonPositionType;                                  // 0x0C08(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDE[0x3];                                     // 0x0C09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPPCelestialPositionData               MoonPositionData;                                  // 0x0C0C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SunriseTime;                                       // 0x0C14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunsetTime;                                        // 0x0C18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDawnOffsetTime;                                 // 0x0C1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDuskOffsetTime;                                 // 0x0C20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDawnTime;                                       // 0x0C24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDuskTime;                                       // 0x0C28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunElevation;                                      // 0x0C2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunAzimuth;                                        // 0x0C30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunMinAngleAtDawnDusk;                             // 0x0C34(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunFadeInOutTime;                                  // 0x0C38(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonriseTime;                                      // 0x0C3C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonsetTime;                                       // 0x0C40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonElevation;                                     // 0x0C44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonAzimuth;                                       // 0x0C48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonFadeInOutTime;                                 // 0x0C4C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Latitude;                                          // 0x0C50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0C54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZone;                                          // 0x0C58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDaylightSavingTime;                               // 0x0C5C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDF[0x3];                                     // 0x0C5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Year;                                              // 0x0C60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0C64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0C68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE0[0x4];                                     // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Date;                                              // 0x0C70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightTransition;                                  // 0x0C78(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE1[0x3];                                     // 0x0C79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunSurfaceBrightness;                              // 0x0C7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonSurfaceBrightness;                             // 0x0C80(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCurrentElevation;                               // 0x0C84(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionStartSunAngle;                           // 0x0C88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionMiddleSunAngle;                          // 0x0C8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionEndSunAngle;                             // 0x0C90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensityTransitionStartSunAngle;             // 0x0C94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensityTransitionEndSunAngle;               // 0x0C98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SkyAtmosphereMobility;                             // 0x0C9C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyAtmosphereTransformMode                   TransformMode;                                     // 0x0C9D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE2[0x2];                                     // 0x0C9E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlanetRadius;                                      // 0x0CA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereHeight;                                  // 0x0CA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x0CA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE3[0x4];                                     // 0x0CAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlanetTopPosition;                                 // 0x0CB0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSampleCountScale;                             // 0x0CC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GodRaysResolution;                                 // 0x0CCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerBottomAltitude;                               // 0x0CD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerHeight;                                       // 0x0CD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingStartMaxDistance;                           // 0x0CD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingMaxDistance;                                // 0x0CDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerSampleAtmosphericLightTransmittance;           // 0x0CE0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE4[0x7];                                     // 0x0CE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           VolumetricCloudsMPC;                               // 0x0CE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerBottomAltitudePosition;                       // 0x0CF0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerTopAltitudePosition;                          // 0x0D08(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CurrentVolumetricCloudMaterial;                    // 0x0D20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloudMID;                                // 0x0D28(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     VolumetricCloudDensitySampleMaterial;              // 0x0D30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloudDensitySampleMID;                   // 0x0D38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 VolumetricCloudDensitySampleRT;                    // 0x0D40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicQuality;                                 // 0x0D48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPPVolumetricCloudRenderTargetMode            RenderMode;                                        // 0x0D49(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighQualityAerialPerspective;                     // 0x0D4A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE5[0x1];                                     // 0x0D4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MultiScatteringApproximationOctaveCount;           // 0x0D4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGroundContribution;                               // 0x0D50(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRayMarchVolumeShadow;                             // 0x0D51(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE6[0x2];                                     // 0x0D52(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewSampleCountScale;                              // 0x0D54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionSampleCountScale;                        // 0x0D58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowViewSampleCountScale;                        // 0x0D5C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowReflectionSampleCountScale;                  // 0x0D60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTracingDistance;                             // 0x0D64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudMapScale;                                     // 0x0D68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE7[0x4];                                     // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CloudMapOffset;                                    // 0x0D70(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoverageVariationMapScale;                         // 0x0D80(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPPVolumetricCloudNoiseShapeResolution        NoiseShapeResolution;                              // 0x0D84(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPPVolumetricCloudNoiseDetailResolution       NoiseDetailResolution;                             // 0x0D85(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE8[0x2];                                     // 0x0D86(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseShapeScale;                                   // 0x0D88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseDetailScale;                                  // 0x0D8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurbulenceScale;                                   // 0x0D90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsContrast;                          // 0x0D94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsReflectionScale;                   // 0x0D98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SkyLightMobility;                                  // 0x0D9C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealTimeCapture;                                  // 0x0D9D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkyLightCaptureTimeSlice;                         // 0x0D9E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsSolidColor;                      // 0x0D9F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloudAmbientOcclusion;                            // 0x0DA0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE9[0x3];                                     // 0x0DA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudAmbientOcclusionExtent;                       // 0x0DA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionMapResolutionScale;           // 0x0DA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionApertureScale;                // 0x0DAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SunLightMobility;                                  // 0x0DB0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlSunDirection;                              // 0x0DB1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunConstantIntensity;                             // 0x0DB2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEA[0x1];                                     // 0x0DB3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunIntensity;                                      // 0x0DB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCurrentIntensity;                               // 0x0DB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunUseTemperature;                                // 0x0DBC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEB[0x3];                                     // 0x0DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunDiskSize;                                       // 0x0DC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunConstantAtmosphereDiskColorScale;              // 0x0DC4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEC[0x3];                                     // 0x0DC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SunAtmosphereDiskColorScale;                       // 0x0DC8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunPerPixelAtmosphereTransmittance;               // 0x0DD8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BED[0x3];                                     // 0x0DD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunCloudShadowExtent;                              // 0x0DDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCloudShadowMapResolutionScale;                  // 0x0DE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCloudShadowRaySampleCountScale;                 // 0x0DE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            MoonLightMobility;                                 // 0x0DE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlMoonDirection;                             // 0x0DE9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonConstantIntensity;                            // 0x0DEA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEE[0x1];                                     // 0x0DEB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonIntensity;                                     // 0x0DEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCurrentIntensity;                              // 0x0DF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonUseTemperature;                               // 0x0DF4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEF[0x3];                                     // 0x0DF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonDiskSize;                                      // 0x0DF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonRotation;                                      // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhase;                                         // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonPhaseLightIntensityScale;                     // 0x0E04(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF0[0x3];                                     // 0x0E05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonPhaseLightIntensityMinScale;                   // 0x0E08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhaseLightIntensityMaxScale;                   // 0x0E0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonConstantAtmosphereDiskColorScale;             // 0x0E10(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF1[0x3];                                     // 0x0E11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MoonAtmosphereDiskColorScale;                      // 0x0E14(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonPerPixelAtmosphereTransmittance;              // 0x0E24(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF2[0x3];                                     // 0x0E25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonCloudShadowExtent;                             // 0x0E28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCloudShadowMapResolutionScale;                 // 0x0E2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCloudShadowRaySampleCountScale;                // 0x0E30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            ExponentialHeightFogMobility;                      // 0x0E34(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableExponentialHeightFog;                       // 0x0E35(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVolumetricFog;                                    // 0x0E36(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF3[0x1];                                     // 0x0E37(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogHeightOffset;                                   // 0x0E38(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightOffset;                             // 0x0E3C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             StarMapTexture;                                    // 0x0E40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPPSkyCreatorStarMapRotationType              StarMapRotationType;                               // 0x0E48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF4[0x7];                                     // 0x0E49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StarMapAdditionalRotation;                         // 0x0E50(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOcclusionCapture;                           // 0x0E68(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF5[0x7];                                     // 0x0E69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 OcclusionRenderTarget;                             // 0x0E70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureWidth;                             // 0x0E78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureHeight;                            // 0x0E7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOcclusionCaptureRealtimeUpdate;                   // 0x0E80(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF6[0x3];                                     // 0x0E81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionCaptureStepDistance;                      // 0x0E84(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureStepSize;                          // 0x0E88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionBias;                                     // 0x0E8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OcclusionBlurSamples;                              // 0x0E90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionBlurDistance;                             // 0x0E94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionMaskFadeHardness;                         // 0x0E98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF7[0x4];                                     // 0x0E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocation;                                    // 0x0EA0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocationSnapped;                             // 0x0EB8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OcclusionCurrentLocation;                          // 0x0ED0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFXCutoffWorldHeight;                        // 0x0EE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFXCutoffSoftness;                           // 0x0EEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationSpawnRadius;                          // 0x0EF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGPUPrecipitation;                           // 0x0EF4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF8[0x3];                                     // 0x0EF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrecipitationSpawnRadiusGPU;                       // 0x0EF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationMaxViewDistance;                      // 0x0EFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationVerticalCheckDistance;                // 0x0F00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             PrecipitationCollisionChannel;                     // 0x0F04(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF9[0x3];                                     // 0x0F05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrecipitationDepthFadeDistance;                    // 0x0F08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationCameraFadeDistance;                   // 0x0F0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationCameraFadeOffset;                     // 0x0F10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSpawnRateMaxCPU;                               // 0x0F14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSpawnRateMaxGPU;                               // 0x0F18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDistanceScaleFactor;                           // 0x0F1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainCameraMotionAlignmentScale;                    // 0x0F20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainVelocityElongationScale;                       // 0x0F24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainMaskHardness;                                  // 0x0F28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSpawnRateMax;                            // 0x0F2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSpawnRateMaxGPU;                         // 0x0F30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpawnRateMaxCPU;                               // 0x0F34(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpawnRateMaxGPU;                               // 0x0F38(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowDistanceScaleFactor;                           // 0x0F3C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowCameraMotionAlignmentScale;                    // 0x0F40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowVelocityElongationScale;                       // 0x0F44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowMaskHardness;                                  // 0x0F48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFA[0x4];                                     // 0x0F4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 LightningsParametersRT;                            // 0x0F50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPPSkyCreatorLightningParameters> LightningParameters;                               // 0x0F58(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFB[0x8];                                     // 0x0F68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentLightningInterval;                          // 0x0F70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFC[0x4];                                     // 0x0F74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLightningPosition;                             // 0x0F78(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        LightningAvailablePositions;                       // 0x0F90(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         LightningCurrentIndex;                             // 0x0FA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSampleCloudDensity;                               // 0x0FA4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFD[0x3];                                     // 0x0FA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LightningMaxSamples;                               // 0x0FA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnInnerRadius;                         // 0x0FAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnOuterRadius;                         // 0x0FB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningRandomDegreeInConeMax;                    // 0x0FB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltEmissiveScale;                        // 0x0FB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFE[0xC];                                     // 0x0FBC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightningFlashFadeUpdateRate;                      // 0x0FC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashFadeDelta;                           // 0x0FCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashEmissiveScale;                       // 0x0FD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashEmissiveReflectionScale;             // 0x0FD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashRadiusScale;                         // 0x0FD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashFadeSpeed;                           // 0x0FDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowDistance;                                   // 0x0FE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowDepthFadeDistance;                          // 0x0FE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFXCutoffWorldHeight;                       // 0x0FE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFXCutoffSoftness;                          // 0x0FEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSlopeAngle;                                 // 0x0FF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSlopeSmoothness;                            // 0x0FF4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesMaskScale;                                  // 0x0FF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesRoughness;                                  // 0x0FFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesSlopeAngle;                                 // 0x1000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesSlopeSmoothness;                            // 0x1004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRainRipplesSolver;                          // 0x1008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseRainRipplesSolver;                           // 0x1009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFF[0xE];                                     // 0x100A(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainRipplesUpdateRate;                             // 0x1018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesScale;                                  // 0x101C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesMaxDensity;                             // 0x1020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRipplesScale;                                  // 0x1024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesSolverDelta;                            // 0x1028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RainRipplesSolverHeightState;                      // 0x102C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainRipplesPropagation;                            // 0x1030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               RainRipplesPropagationMID;                         // 0x1038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainRipplesForce;                                  // 0x1040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RainRipplesNormal;                                 // 0x1048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               RainRipplesNormalMID;                              // 0x1050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesPropagationFrame0;                      // 0x1058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesPropagationFrame1;                      // 0x1060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesPropagationFrame2;                      // 0x1068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RainRipplesNormalRT;                               // 0x1070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowMaskScale;                                     // 0x1078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowScale;                                         // 0x107C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowRoughness;                                     // 0x1080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesScale;                                 // 0x1084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesRoughness;                             // 0x1088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSlopeAngle;                                    // 0x108C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSlopeSmoothness;                               // 0x1090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x1094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIndependentWindControl;                           // 0x1095(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C00[0x2];                                     // 0x1096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPPSkyCreatorWindSettings              EditorIndependentWindSettings;                     // 0x1098(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CloudWindSkewAmount;                               // 0x10B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudWindOffset;                                   // 0x10B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudWindSkewDirection;                            // 0x10D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudWindSkewForce;                                // 0x10E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C01[0x4];                                     // 0x10EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CloudNoiseShapeWindOffset;                         // 0x10F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudNoiseDetailWindOffset;                        // 0x1108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExposureSettings;                              // 0x1120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtendDefaultLuminanceRange;                      // 0x1121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C02[0x2];                                     // 0x1122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PostProcessPriority;                               // 0x1124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoExposureMethod                           ExposureMethod;                                    // 0x1128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C03[0x7];                                     // 0x1129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ExposureBiasCurve;                                 // 0x1130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ExposureMeterMask;                                 // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMinBrightness;                             // 0x1140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMaxBrightness;                             // 0x1144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMinEV100;                                  // 0x1148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMaxEV100;                                  // 0x114C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureSpeedUp;                                   // 0x1150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureSpeedDown;                                 // 0x1154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureLowPercent;                                // 0x1158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHighPercent;                               // 0x115C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramLogMin;                           // 0x1160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramLogMax;                           // 0x1164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramMinEV100;                         // 0x1168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramMaxEV100;                         // 0x116C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLightningStrike;                                 // 0x1170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	bool FindLightningPosition(const struct FVector& Position, struct FVector* OutPosition);
	float GetCloudDensityAtPosition(const struct FVector& Position);
	struct FVector GetLastLightningPosition();
	struct FRotator GetMoonPosition(float Time);
	struct FRotator GetSunPosition(float Time);
	void LerpBackgroundCloudSettings(const struct FPPSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettingsA, const struct FPPSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettingsB, float Alpha);
	void LerpExponentialHeightFogSettings(const struct FPPSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettingsA, const struct FPPSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettingsB, float Alpha);
	void LerpMoonLightSettings(const struct FPPSkyCreatorMoonLightSettings& InMoonLightSettingsA, const struct FPPSkyCreatorMoonLightSettings& InMoonLightSettingsB, float Alpha);
	void LerpPostProcessSettings(const struct FPPSkyCreatorPostProcessSettings& InPostProcessSettingsA, const struct FPPSkyCreatorPostProcessSettings& InPostProcessSettingsB, float Alpha);
	void LerpPuddlesAmount(float PuddlesAmountA, float PuddlesAmountB, float Alpha);
	void LerpSkyAtmosphereSettings(const struct FPPSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettingsA, const struct FPPSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettingsB, float Alpha);
	void LerpSkyLightSettings(const struct FPPSkyCreatorSkyLightSettings& InSkyLightSettingsA, const struct FPPSkyCreatorSkyLightSettings& InSkyLightSettingsB, float Alpha);
	void LerpSnowAmount(float SnowAmountA, float SnowAmountB, float Alpha);
	void LerpStarMapSettings(const struct FPPSkyCreatorStarMapSettings& InStarMapSettingsA, const struct FPPSkyCreatorStarMapSettings& InStarMapSettingsB, float Alpha);
	void LerpSunLightSettings(const struct FPPSkyCreatorSunLightSettings& InSunLightSettingsA, const struct FPPSkyCreatorSunLightSettings& InSunLightSettingsB, float Alpha);
	void LerpVolumetricCloudSettings(const struct FPPSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettingsA, const struct FPPSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettingsB, float Alpha);
	void LerpWeatherFXSettings(const struct FPPSkyCreatorWeatherFXSettings& InWeatherFXSettingsA, const struct FPPSkyCreatorWeatherFXSettings& InWeatherFXSettingsB, float Alpha);
	void LerpWeatherMaterialFXSettings(const struct FPPSkyCreatorWeatherMaterialFXSettings& InWeatherMaterialFXSettingsA, const struct FPPSkyCreatorWeatherMaterialFXSettings& InWeatherMaterialFXSettingsB, float Alpha);
	void LerpWeatherSettings(const struct FPPSkyCreatorWeatherSettings& InWeatherSettingsA, const struct FPPSkyCreatorWeatherSettings& InWeatherSettingsB, float Alpha);
	void LerpWetnessAmount(float WetnessAmountA, float WetnessAmountB, float Alpha);
	void LerpWindIndependentSettings(const struct FPPSkyCreatorWindSettings& InWindSettingsA, const struct FPPSkyCreatorWindSettings& InWindSettingsB, float Alpha);
	void LerpWindSettings(const struct FPPSkyCreatorWindSettings& InWindSettingsA, const struct FPPSkyCreatorWindSettings& InWindSettingsB, float Alpha);
	void OnRep_UpdateTime();
	void OnRep_UpdateWeather();
	void RealtimeTimeOfDay(float DeltaSeconds, float DayCycleDuration);
	void SetBackgroundCloudSettings(const struct FPPSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettings);
	void SetbDaylightSavingTime(bool NewValue);
	void SetCloudMapOffset(const struct FVector2D& NewValue);
	void SetDay(int32 NewValue);
	void SetEditorTimeOfDay(float NewValue);
	void SetEditorWeatherPreset(class UPPSkyCreatorWeatherPreset* NewValue);
	void SetEditorWeatherSettings(const struct FPPSkyCreatorWeatherSettings& NewValue);
	void SetExponentialHeightFogSettings(const struct FPPSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettings);
	void SetLatitude(float NewValue);
	void SetLayerBottomAltitude(float NewValue);
	void SetLayerHeight(float NewValue);
	void SetLongitude(float NewValue);
	void SetMonth(int32 NewValue);
	void SetMoonAtmosphereDiskColorScale(const struct FLinearColor& NewValue);
	void SetMoonAzimuth(float NewValue);
	void SetMoonDiskSize(float NewValue);
	void SetMoonElevation(float NewValue);
	void SetMoonIntensity(float NewValue);
	void SetMoonLightSettings(const struct FPPSkyCreatorMoonLightSettings& InMoonLightSettings);
	void SetMoonPhase(float NewValue);
	void SetMoonriseTime(float NewValue);
	void SetMoonRotation(float NewValue);
	void SetMoonsetTime(float NewValue);
	void SetMoonSimplePositionSettings(const float InMoonriseTime, const float InMoonsetTime, const float InMoonElevation, const float InMoonAzimuth);
	void SetPostProcessSettings(const struct FPPSkyCreatorPostProcessSettings& InPostProcessSettings);
	void SetRealPositionSettings(const float InLatitude, const float InLongitude, const float InTimeZone, const bool InbDaylightSavingTime, const int32 InYear, const int32 InMonth, const int32 InDay);
	void SetSkyAtmosphereSettings(const struct FPPSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettings);
	void SetSkyLightSettings(const struct FPPSkyCreatorSkyLightSettings& InSkyLightSettings);
	void SetStarMapAdditionalRotation(const struct FVector& NewValue);
	void SetStarMapSettings(const struct FPPSkyCreatorStarMapSettings& InStarMapSettings);
	void SetSunAtmosphereDiskColorScale(const struct FLinearColor& NewValue);
	void SetSunAzimuth(float NewValue);
	void SetSunDawnOffsetTime(float NewValue);
	void SetSunDiskSize(float NewValue);
	void SetSunDuskOffsetTime(float NewValue);
	void SetSunElevation(float NewValue);
	void SetSunIntensity(float NewValue);
	void SetSunLightSettings(const struct FPPSkyCreatorSunLightSettings& InSunLightSettings);
	void SetSunMinAngleAtDawnDusk(float NewValue);
	void SetSunriseTime(float NewValue);
	void SetSunsetTime(float NewValue);
	void SetSunSimplePositionSettings(const float InSunriseTime, const float InSunsetTime, const float InSunElevation, const float InSunAzimuth);
	void SetTime(float InTime);
	void SetTimeZone(float NewValue);
	void SetVolumetricCloudSettings(const struct FPPSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettings);
	void SetWeatherFXSettings(const struct FPPSkyCreatorWeatherFXSettings& InWeatherFXSettings);
	void SetWeatherMaterialFXSettings(const struct FPPSkyCreatorWeatherMaterialFXSettings& InWeatherMaterialFXSettings);
	void SetWeatherSettings(const struct FPPSkyCreatorWeatherSettings& InWeatherSettings);
	void SetWindIndependentSettings(const struct FPPSkyCreatorWindSettings& InWindSettings);
	void SetWindSettings(const struct FPPSkyCreatorWindSettings& InWindSettings);
	void SetYear(int32 NewValue);
	void SpawnLightningStrike(const struct FVector& LightningPosition);
	void UpdateSettingsSequencer();

	struct FPPSkyCreatorBackgroundCloudSettings GetBackgroundCloudSettings() const;
	struct FPPSkyCreatorExponentialHeightFogSettings GetExponentialHeightFogSettings() const;
	struct FPPSkyCreatorMoonLightSettings GetMoonLightSettings() const;
	float GetMoonPhase() const;
	struct FPPSkyCreatorPostProcessSettings GetPostProcessSettings() const;
	struct FPPSkyCreatorSkyAtmosphereSettings GetSkyAtmosphereSettings() const;
	struct FPPSkyCreatorSkyLightSettings GetSkyLightSettings() const;
	struct FRotator GetStarMapRotation() const;
	struct FPPSkyCreatorStarMapSettings GetStarMapSettings() const;
	struct FPPSkyCreatorSunLightSettings GetSunLightSettings() const;
	float GetTime() const;
	struct FPPSkyCreatorVolumetricCloudSettings GetVolumetricCloudSettings() const;
	struct FPPSkyCreatorWeatherFXSettings GetWeatherFXSettings() const;
	struct FPPSkyCreatorWeatherMaterialFXSettings GetWeatherMaterialFXSettings() const;
	struct FPPSkyCreatorWeatherSettings GetWeatherSettings() const;
	struct FPPSkyCreatorWindSettings GetWindSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PPSkyCreator">();
	}
	static class APPSkyCreator* GetDefaultObj()
	{
		return GetDefaultObjImpl<APPSkyCreator>();
	}
};
static_assert(alignof(APPSkyCreator) == 0x000008, "Wrong alignment on APPSkyCreator");
static_assert(sizeof(APPSkyCreator) == 0x001180, "Wrong size on APPSkyCreator");
static_assert(offsetof(APPSkyCreator, Root) == 0x000290, "Member 'APPSkyCreator::Root' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Billboard) == 0x000298, "Member 'APPSkyCreator::Billboard' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Compass) == 0x0002A0, "Member 'APPSkyCreator::Compass' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkyAtmosphere) == 0x0002A8, "Member 'APPSkyCreator::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, VolumetricCloud) == 0x0002B0, "Member 'APPSkyCreator::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkyLight) == 0x0002B8, "Member 'APPSkyCreator::SkyLight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunLight) == 0x0002C0, "Member 'APPSkyCreator::SunLight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonLight) == 0x0002C8, "Member 'APPSkyCreator::MoonLight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExponentialHeightFog) == 0x0002D0, "Member 'APPSkyCreator::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PostProcess) == 0x0002D8, "Member 'APPSkyCreator::PostProcess' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, StarMap) == 0x0002E0, "Member 'APPSkyCreator::StarMap' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunSphere) == 0x0002E8, "Member 'APPSkyCreator::SunSphere' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonSphere) == 0x0002F0, "Member 'APPSkyCreator::MoonSphere' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionCapture) == 0x0002F8, "Member 'APPSkyCreator::OcclusionCapture' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, WeatherFX) == 0x000300, "Member 'APPSkyCreator::WeatherFX' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkySphere) == 0x000308, "Member 'APPSkyCreator::SkySphere' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkySphereMaterial) == 0x000310, "Member 'APPSkyCreator::SkySphereMaterial' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkySphereMID) == 0x000318, "Member 'APPSkyCreator::SkySphereMID' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bUseEditorTimeOfDay) == 0x000320, "Member 'APPSkyCreator::bUseEditorTimeOfDay' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, EditorTimeOfDay) == 0x000324, "Member 'APPSkyCreator::EditorTimeOfDay' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bUseEditorWeatherSettings) == 0x000328, "Member 'APPSkyCreator::bUseEditorWeatherSettings' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, EditorWeatherType) == 0x000329, "Member 'APPSkyCreator::EditorWeatherType' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, EditorWeatherPreset) == 0x000330, "Member 'APPSkyCreator::EditorWeatherPreset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, EditorWeatherSettings) == 0x000338, "Member 'APPSkyCreator::EditorWeatherSettings' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bIsUsedWithSequencer) == 0x000790, "Member 'APPSkyCreator::bIsUsedWithSequencer' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bIsEditorTickEnabled) == 0x000791, "Member 'APPSkyCreator::bIsEditorTickEnabled' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TimeOfDay) == 0x000794, "Member 'APPSkyCreator::TimeOfDay' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, WeatherSettings) == 0x000798, "Member 'APPSkyCreator::WeatherSettings' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CommonMPC) == 0x000BF0, "Member 'APPSkyCreator::CommonMPC' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkySphereRadius) == 0x000BF8, "Member 'APPSkyCreator::SkySphereRadius' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bShowDebugVariables) == 0x000BFC, "Member 'APPSkyCreator::bShowDebugVariables' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunPositionType) == 0x000BFD, "Member 'APPSkyCreator::SunPositionType' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunPositionData) == 0x000C00, "Member 'APPSkyCreator::SunPositionData' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonPositionType) == 0x000C08, "Member 'APPSkyCreator::MoonPositionType' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonPositionData) == 0x000C0C, "Member 'APPSkyCreator::MoonPositionData' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunriseTime) == 0x000C14, "Member 'APPSkyCreator::SunriseTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunsetTime) == 0x000C18, "Member 'APPSkyCreator::SunsetTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunDawnOffsetTime) == 0x000C1C, "Member 'APPSkyCreator::SunDawnOffsetTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunDuskOffsetTime) == 0x000C20, "Member 'APPSkyCreator::SunDuskOffsetTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunDawnTime) == 0x000C24, "Member 'APPSkyCreator::SunDawnTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunDuskTime) == 0x000C28, "Member 'APPSkyCreator::SunDuskTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunElevation) == 0x000C2C, "Member 'APPSkyCreator::SunElevation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunAzimuth) == 0x000C30, "Member 'APPSkyCreator::SunAzimuth' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunMinAngleAtDawnDusk) == 0x000C34, "Member 'APPSkyCreator::SunMinAngleAtDawnDusk' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunFadeInOutTime) == 0x000C38, "Member 'APPSkyCreator::SunFadeInOutTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonriseTime) == 0x000C3C, "Member 'APPSkyCreator::MoonriseTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonsetTime) == 0x000C40, "Member 'APPSkyCreator::MoonsetTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonElevation) == 0x000C44, "Member 'APPSkyCreator::MoonElevation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonAzimuth) == 0x000C48, "Member 'APPSkyCreator::MoonAzimuth' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonFadeInOutTime) == 0x000C4C, "Member 'APPSkyCreator::MoonFadeInOutTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Latitude) == 0x000C50, "Member 'APPSkyCreator::Latitude' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Longitude) == 0x000C54, "Member 'APPSkyCreator::Longitude' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TimeZone) == 0x000C58, "Member 'APPSkyCreator::TimeZone' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bDaylightSavingTime) == 0x000C5C, "Member 'APPSkyCreator::bDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Year) == 0x000C60, "Member 'APPSkyCreator::Year' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Month) == 0x000C64, "Member 'APPSkyCreator::Month' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Day) == 0x000C68, "Member 'APPSkyCreator::Day' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, Date) == 0x000C70, "Member 'APPSkyCreator::Date' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bLightTransition) == 0x000C78, "Member 'APPSkyCreator::bLightTransition' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunSurfaceBrightness) == 0x000C7C, "Member 'APPSkyCreator::SunSurfaceBrightness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonSurfaceBrightness) == 0x000C80, "Member 'APPSkyCreator::MoonSurfaceBrightness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunCurrentElevation) == 0x000C84, "Member 'APPSkyCreator::SunCurrentElevation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TransitionStartSunAngle) == 0x000C88, "Member 'APPSkyCreator::TransitionStartSunAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TransitionMiddleSunAngle) == 0x000C8C, "Member 'APPSkyCreator::TransitionMiddleSunAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TransitionEndSunAngle) == 0x000C90, "Member 'APPSkyCreator::TransitionEndSunAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, NightIntensityTransitionStartSunAngle) == 0x000C94, "Member 'APPSkyCreator::NightIntensityTransitionStartSunAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, NightIntensityTransitionEndSunAngle) == 0x000C98, "Member 'APPSkyCreator::NightIntensityTransitionEndSunAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkyAtmosphereMobility) == 0x000C9C, "Member 'APPSkyCreator::SkyAtmosphereMobility' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TransformMode) == 0x000C9D, "Member 'APPSkyCreator::TransformMode' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PlanetRadius) == 0x000CA0, "Member 'APPSkyCreator::PlanetRadius' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, AtmosphereHeight) == 0x000CA4, "Member 'APPSkyCreator::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, AerialPespectiveViewDistanceScale) == 0x000CA8, "Member 'APPSkyCreator::AerialPespectiveViewDistanceScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PlanetTopPosition) == 0x000CB0, "Member 'APPSkyCreator::PlanetTopPosition' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TraceSampleCountScale) == 0x000CC8, "Member 'APPSkyCreator::TraceSampleCountScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, GodRaysResolution) == 0x000CCC, "Member 'APPSkyCreator::GodRaysResolution' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LayerBottomAltitude) == 0x000CD0, "Member 'APPSkyCreator::LayerBottomAltitude' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LayerHeight) == 0x000CD4, "Member 'APPSkyCreator::LayerHeight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TracingStartMaxDistance) == 0x000CD8, "Member 'APPSkyCreator::TracingStartMaxDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TracingMaxDistance) == 0x000CDC, "Member 'APPSkyCreator::TracingMaxDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bPerSampleAtmosphericLightTransmittance) == 0x000CE0, "Member 'APPSkyCreator::bPerSampleAtmosphericLightTransmittance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, VolumetricCloudsMPC) == 0x000CE8, "Member 'APPSkyCreator::VolumetricCloudsMPC' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LayerBottomAltitudePosition) == 0x000CF0, "Member 'APPSkyCreator::LayerBottomAltitudePosition' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LayerTopAltitudePosition) == 0x000D08, "Member 'APPSkyCreator::LayerTopAltitudePosition' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CurrentVolumetricCloudMaterial) == 0x000D20, "Member 'APPSkyCreator::CurrentVolumetricCloudMaterial' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, VolumetricCloudMID) == 0x000D28, "Member 'APPSkyCreator::VolumetricCloudMID' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, VolumetricCloudDensitySampleMaterial) == 0x000D30, "Member 'APPSkyCreator::VolumetricCloudDensitySampleMaterial' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, VolumetricCloudDensitySampleMID) == 0x000D38, "Member 'APPSkyCreator::VolumetricCloudDensitySampleMID' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, VolumetricCloudDensitySampleRT) == 0x000D40, "Member 'APPSkyCreator::VolumetricCloudDensitySampleRT' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bCinematicQuality) == 0x000D48, "Member 'APPSkyCreator::bCinematicQuality' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RenderMode) == 0x000D49, "Member 'APPSkyCreator::RenderMode' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bHighQualityAerialPerspective) == 0x000D4A, "Member 'APPSkyCreator::bHighQualityAerialPerspective' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MultiScatteringApproximationOctaveCount) == 0x000D4C, "Member 'APPSkyCreator::MultiScatteringApproximationOctaveCount' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bGroundContribution) == 0x000D50, "Member 'APPSkyCreator::bGroundContribution' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bRayMarchVolumeShadow) == 0x000D51, "Member 'APPSkyCreator::bRayMarchVolumeShadow' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ViewSampleCountScale) == 0x000D54, "Member 'APPSkyCreator::ViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ReflectionSampleCountScale) == 0x000D58, "Member 'APPSkyCreator::ReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ShadowViewSampleCountScale) == 0x000D5C, "Member 'APPSkyCreator::ShadowViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ShadowReflectionSampleCountScale) == 0x000D60, "Member 'APPSkyCreator::ShadowReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ShadowTracingDistance) == 0x000D64, "Member 'APPSkyCreator::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudMapScale) == 0x000D68, "Member 'APPSkyCreator::CloudMapScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudMapOffset) == 0x000D70, "Member 'APPSkyCreator::CloudMapOffset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CoverageVariationMapScale) == 0x000D80, "Member 'APPSkyCreator::CoverageVariationMapScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, NoiseShapeResolution) == 0x000D84, "Member 'APPSkyCreator::NoiseShapeResolution' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, NoiseDetailResolution) == 0x000D85, "Member 'APPSkyCreator::NoiseDetailResolution' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, NoiseShapeScale) == 0x000D88, "Member 'APPSkyCreator::NoiseShapeScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, NoiseDetailScale) == 0x000D8C, "Member 'APPSkyCreator::NoiseDetailScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, TurbulenceScale) == 0x000D90, "Member 'APPSkyCreator::TurbulenceScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, BackgroundCloudsContrast) == 0x000D94, "Member 'APPSkyCreator::BackgroundCloudsContrast' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, BackgroundCloudsReflectionScale) == 0x000D98, "Member 'APPSkyCreator::BackgroundCloudsReflectionScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SkyLightMobility) == 0x000D9C, "Member 'APPSkyCreator::SkyLightMobility' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bRealTimeCapture) == 0x000D9D, "Member 'APPSkyCreator::bRealTimeCapture' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bSkyLightCaptureTimeSlice) == 0x000D9E, "Member 'APPSkyCreator::bSkyLightCaptureTimeSlice' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bLowerHemisphereIsSolidColor) == 0x000D9F, "Member 'APPSkyCreator::bLowerHemisphereIsSolidColor' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bCloudAmbientOcclusion) == 0x000DA0, "Member 'APPSkyCreator::bCloudAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudAmbientOcclusionExtent) == 0x000DA4, "Member 'APPSkyCreator::CloudAmbientOcclusionExtent' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudAmbientOcclusionMapResolutionScale) == 0x000DA8, "Member 'APPSkyCreator::CloudAmbientOcclusionMapResolutionScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudAmbientOcclusionApertureScale) == 0x000DAC, "Member 'APPSkyCreator::CloudAmbientOcclusionApertureScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunLightMobility) == 0x000DB0, "Member 'APPSkyCreator::SunLightMobility' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bControlSunDirection) == 0x000DB1, "Member 'APPSkyCreator::bControlSunDirection' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bSunConstantIntensity) == 0x000DB2, "Member 'APPSkyCreator::bSunConstantIntensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunIntensity) == 0x000DB4, "Member 'APPSkyCreator::SunIntensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunCurrentIntensity) == 0x000DB8, "Member 'APPSkyCreator::SunCurrentIntensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bSunUseTemperature) == 0x000DBC, "Member 'APPSkyCreator::bSunUseTemperature' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunDiskSize) == 0x000DC0, "Member 'APPSkyCreator::SunDiskSize' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bSunConstantAtmosphereDiskColorScale) == 0x000DC4, "Member 'APPSkyCreator::bSunConstantAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunAtmosphereDiskColorScale) == 0x000DC8, "Member 'APPSkyCreator::SunAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bSunPerPixelAtmosphereTransmittance) == 0x000DD8, "Member 'APPSkyCreator::bSunPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunCloudShadowExtent) == 0x000DDC, "Member 'APPSkyCreator::SunCloudShadowExtent' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunCloudShadowMapResolutionScale) == 0x000DE0, "Member 'APPSkyCreator::SunCloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SunCloudShadowRaySampleCountScale) == 0x000DE4, "Member 'APPSkyCreator::SunCloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonLightMobility) == 0x000DE8, "Member 'APPSkyCreator::MoonLightMobility' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bControlMoonDirection) == 0x000DE9, "Member 'APPSkyCreator::bControlMoonDirection' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bMoonConstantIntensity) == 0x000DEA, "Member 'APPSkyCreator::bMoonConstantIntensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonIntensity) == 0x000DEC, "Member 'APPSkyCreator::MoonIntensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonCurrentIntensity) == 0x000DF0, "Member 'APPSkyCreator::MoonCurrentIntensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bMoonUseTemperature) == 0x000DF4, "Member 'APPSkyCreator::bMoonUseTemperature' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonDiskSize) == 0x000DF8, "Member 'APPSkyCreator::MoonDiskSize' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonRotation) == 0x000DFC, "Member 'APPSkyCreator::MoonRotation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonPhase) == 0x000E00, "Member 'APPSkyCreator::MoonPhase' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bMoonPhaseLightIntensityScale) == 0x000E04, "Member 'APPSkyCreator::bMoonPhaseLightIntensityScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonPhaseLightIntensityMinScale) == 0x000E08, "Member 'APPSkyCreator::MoonPhaseLightIntensityMinScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonPhaseLightIntensityMaxScale) == 0x000E0C, "Member 'APPSkyCreator::MoonPhaseLightIntensityMaxScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bMoonConstantAtmosphereDiskColorScale) == 0x000E10, "Member 'APPSkyCreator::bMoonConstantAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonAtmosphereDiskColorScale) == 0x000E14, "Member 'APPSkyCreator::MoonAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bMoonPerPixelAtmosphereTransmittance) == 0x000E24, "Member 'APPSkyCreator::bMoonPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonCloudShadowExtent) == 0x000E28, "Member 'APPSkyCreator::MoonCloudShadowExtent' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonCloudShadowMapResolutionScale) == 0x000E2C, "Member 'APPSkyCreator::MoonCloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MoonCloudShadowRaySampleCountScale) == 0x000E30, "Member 'APPSkyCreator::MoonCloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExponentialHeightFogMobility) == 0x000E34, "Member 'APPSkyCreator::ExponentialHeightFogMobility' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bEnableExponentialHeightFog) == 0x000E35, "Member 'APPSkyCreator::bEnableExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bVolumetricFog) == 0x000E36, "Member 'APPSkyCreator::bVolumetricFog' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, FogHeightOffset) == 0x000E38, "Member 'APPSkyCreator::FogHeightOffset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SecondFogHeightOffset) == 0x000E3C, "Member 'APPSkyCreator::SecondFogHeightOffset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, StarMapTexture) == 0x000E40, "Member 'APPSkyCreator::StarMapTexture' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, StarMapRotationType) == 0x000E48, "Member 'APPSkyCreator::StarMapRotationType' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, StarMapAdditionalRotation) == 0x000E50, "Member 'APPSkyCreator::StarMapAdditionalRotation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bEnableOcclusionCapture) == 0x000E68, "Member 'APPSkyCreator::bEnableOcclusionCapture' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionRenderTarget) == 0x000E70, "Member 'APPSkyCreator::OcclusionRenderTarget' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionCaptureWidth) == 0x000E78, "Member 'APPSkyCreator::OcclusionCaptureWidth' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionCaptureHeight) == 0x000E7C, "Member 'APPSkyCreator::OcclusionCaptureHeight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bOcclusionCaptureRealtimeUpdate) == 0x000E80, "Member 'APPSkyCreator::bOcclusionCaptureRealtimeUpdate' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionCaptureStepDistance) == 0x000E84, "Member 'APPSkyCreator::OcclusionCaptureStepDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionCaptureStepSize) == 0x000E88, "Member 'APPSkyCreator::OcclusionCaptureStepSize' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionBias) == 0x000E8C, "Member 'APPSkyCreator::OcclusionBias' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionBlurSamples) == 0x000E90, "Member 'APPSkyCreator::OcclusionBlurSamples' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionBlurDistance) == 0x000E94, "Member 'APPSkyCreator::OcclusionBlurDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionMaskFadeHardness) == 0x000E98, "Member 'APPSkyCreator::OcclusionMaskFadeHardness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CameraLocation) == 0x000EA0, "Member 'APPSkyCreator::CameraLocation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CameraLocationSnapped) == 0x000EB8, "Member 'APPSkyCreator::CameraLocationSnapped' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OcclusionCurrentLocation) == 0x000ED0, "Member 'APPSkyCreator::OcclusionCurrentLocation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, WeatherFXCutoffWorldHeight) == 0x000EE8, "Member 'APPSkyCreator::WeatherFXCutoffWorldHeight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, WeatherFXCutoffSoftness) == 0x000EEC, "Member 'APPSkyCreator::WeatherFXCutoffSoftness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationSpawnRadius) == 0x000EF0, "Member 'APPSkyCreator::PrecipitationSpawnRadius' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bEnableGPUPrecipitation) == 0x000EF4, "Member 'APPSkyCreator::bEnableGPUPrecipitation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationSpawnRadiusGPU) == 0x000EF8, "Member 'APPSkyCreator::PrecipitationSpawnRadiusGPU' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationMaxViewDistance) == 0x000EFC, "Member 'APPSkyCreator::PrecipitationMaxViewDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationVerticalCheckDistance) == 0x000F00, "Member 'APPSkyCreator::PrecipitationVerticalCheckDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationCollisionChannel) == 0x000F04, "Member 'APPSkyCreator::PrecipitationCollisionChannel' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationDepthFadeDistance) == 0x000F08, "Member 'APPSkyCreator::PrecipitationDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationCameraFadeDistance) == 0x000F0C, "Member 'APPSkyCreator::PrecipitationCameraFadeDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PrecipitationCameraFadeOffset) == 0x000F10, "Member 'APPSkyCreator::PrecipitationCameraFadeOffset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainSpawnRateMaxCPU) == 0x000F14, "Member 'APPSkyCreator::RainSpawnRateMaxCPU' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainSpawnRateMaxGPU) == 0x000F18, "Member 'APPSkyCreator::RainSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainDistanceScaleFactor) == 0x000F1C, "Member 'APPSkyCreator::RainDistanceScaleFactor' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainCameraMotionAlignmentScale) == 0x000F20, "Member 'APPSkyCreator::RainCameraMotionAlignmentScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainVelocityElongationScale) == 0x000F24, "Member 'APPSkyCreator::RainVelocityElongationScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainMaskHardness) == 0x000F28, "Member 'APPSkyCreator::RainMaskHardness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainSplashSpawnRateMax) == 0x000F2C, "Member 'APPSkyCreator::RainSplashSpawnRateMax' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainSplashSpawnRateMaxGPU) == 0x000F30, "Member 'APPSkyCreator::RainSplashSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowSpawnRateMaxCPU) == 0x000F34, "Member 'APPSkyCreator::SnowSpawnRateMaxCPU' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowSpawnRateMaxGPU) == 0x000F38, "Member 'APPSkyCreator::SnowSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowDistanceScaleFactor) == 0x000F3C, "Member 'APPSkyCreator::SnowDistanceScaleFactor' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowCameraMotionAlignmentScale) == 0x000F40, "Member 'APPSkyCreator::SnowCameraMotionAlignmentScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowVelocityElongationScale) == 0x000F44, "Member 'APPSkyCreator::SnowVelocityElongationScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowMaskHardness) == 0x000F48, "Member 'APPSkyCreator::SnowMaskHardness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningsParametersRT) == 0x000F50, "Member 'APPSkyCreator::LightningsParametersRT' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningParameters) == 0x000F58, "Member 'APPSkyCreator::LightningParameters' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CurrentLightningInterval) == 0x000F70, "Member 'APPSkyCreator::CurrentLightningInterval' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LastLightningPosition) == 0x000F78, "Member 'APPSkyCreator::LastLightningPosition' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningAvailablePositions) == 0x000F90, "Member 'APPSkyCreator::LightningAvailablePositions' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningCurrentIndex) == 0x000FA0, "Member 'APPSkyCreator::LightningCurrentIndex' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bSampleCloudDensity) == 0x000FA4, "Member 'APPSkyCreator::bSampleCloudDensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningMaxSamples) == 0x000FA8, "Member 'APPSkyCreator::LightningMaxSamples' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningSpawnInnerRadius) == 0x000FAC, "Member 'APPSkyCreator::LightningSpawnInnerRadius' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningSpawnOuterRadius) == 0x000FB0, "Member 'APPSkyCreator::LightningSpawnOuterRadius' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningRandomDegreeInConeMax) == 0x000FB4, "Member 'APPSkyCreator::LightningRandomDegreeInConeMax' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningBoltEmissiveScale) == 0x000FB8, "Member 'APPSkyCreator::LightningBoltEmissiveScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningFlashFadeUpdateRate) == 0x000FC8, "Member 'APPSkyCreator::LightningFlashFadeUpdateRate' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningFlashFadeDelta) == 0x000FCC, "Member 'APPSkyCreator::LightningFlashFadeDelta' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningFlashEmissiveScale) == 0x000FD0, "Member 'APPSkyCreator::LightningFlashEmissiveScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningFlashEmissiveReflectionScale) == 0x000FD4, "Member 'APPSkyCreator::LightningFlashEmissiveReflectionScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningFlashRadiusScale) == 0x000FD8, "Member 'APPSkyCreator::LightningFlashRadiusScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, LightningFlashFadeSpeed) == 0x000FDC, "Member 'APPSkyCreator::LightningFlashFadeSpeed' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainbowDistance) == 0x000FE0, "Member 'APPSkyCreator::RainbowDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainbowDepthFadeDistance) == 0x000FE4, "Member 'APPSkyCreator::RainbowDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MaterialFXCutoffWorldHeight) == 0x000FE8, "Member 'APPSkyCreator::MaterialFXCutoffWorldHeight' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, MaterialFXCutoffSoftness) == 0x000FEC, "Member 'APPSkyCreator::MaterialFXCutoffSoftness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, WetnessSlopeAngle) == 0x000FF0, "Member 'APPSkyCreator::WetnessSlopeAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, WetnessSlopeSmoothness) == 0x000FF4, "Member 'APPSkyCreator::WetnessSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PuddlesMaskScale) == 0x000FF8, "Member 'APPSkyCreator::PuddlesMaskScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PuddlesRoughness) == 0x000FFC, "Member 'APPSkyCreator::PuddlesRoughness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PuddlesSlopeAngle) == 0x001000, "Member 'APPSkyCreator::PuddlesSlopeAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PuddlesSlopeSmoothness) == 0x001004, "Member 'APPSkyCreator::PuddlesSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bEnableRainRipplesSolver) == 0x001008, "Member 'APPSkyCreator::bEnableRainRipplesSolver' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bPauseRainRipplesSolver) == 0x001009, "Member 'APPSkyCreator::bPauseRainRipplesSolver' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesUpdateRate) == 0x001018, "Member 'APPSkyCreator::RainRipplesUpdateRate' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesScale) == 0x00101C, "Member 'APPSkyCreator::RainRipplesScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesMaxDensity) == 0x001020, "Member 'APPSkyCreator::RainRipplesMaxDensity' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, WindRipplesScale) == 0x001024, "Member 'APPSkyCreator::WindRipplesScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesSolverDelta) == 0x001028, "Member 'APPSkyCreator::RainRipplesSolverDelta' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesSolverHeightState) == 0x00102C, "Member 'APPSkyCreator::RainRipplesSolverHeightState' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesPropagation) == 0x001030, "Member 'APPSkyCreator::RainRipplesPropagation' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesPropagationMID) == 0x001038, "Member 'APPSkyCreator::RainRipplesPropagationMID' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesForce) == 0x001040, "Member 'APPSkyCreator::RainRipplesForce' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesNormal) == 0x001048, "Member 'APPSkyCreator::RainRipplesNormal' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesNormalMID) == 0x001050, "Member 'APPSkyCreator::RainRipplesNormalMID' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesPropagationFrame0) == 0x001058, "Member 'APPSkyCreator::RainRipplesPropagationFrame0' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesPropagationFrame1) == 0x001060, "Member 'APPSkyCreator::RainRipplesPropagationFrame1' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesPropagationFrame2) == 0x001068, "Member 'APPSkyCreator::RainRipplesPropagationFrame2' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, RainRipplesNormalRT) == 0x001070, "Member 'APPSkyCreator::RainRipplesNormalRT' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowMaskScale) == 0x001078, "Member 'APPSkyCreator::SnowMaskScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowScale) == 0x00107C, "Member 'APPSkyCreator::SnowScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowRoughness) == 0x001080, "Member 'APPSkyCreator::SnowRoughness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowSparklesScale) == 0x001084, "Member 'APPSkyCreator::SnowSparklesScale' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowSparklesRoughness) == 0x001088, "Member 'APPSkyCreator::SnowSparklesRoughness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowSlopeAngle) == 0x00108C, "Member 'APPSkyCreator::SnowSlopeAngle' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, SnowSlopeSmoothness) == 0x001090, "Member 'APPSkyCreator::SnowSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bEnableWind) == 0x001094, "Member 'APPSkyCreator::bEnableWind' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bIndependentWindControl) == 0x001095, "Member 'APPSkyCreator::bIndependentWindControl' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, EditorIndependentWindSettings) == 0x001098, "Member 'APPSkyCreator::EditorIndependentWindSettings' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudWindSkewAmount) == 0x0010B4, "Member 'APPSkyCreator::CloudWindSkewAmount' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudWindOffset) == 0x0010B8, "Member 'APPSkyCreator::CloudWindOffset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudWindSkewDirection) == 0x0010D0, "Member 'APPSkyCreator::CloudWindSkewDirection' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudWindSkewForce) == 0x0010E8, "Member 'APPSkyCreator::CloudWindSkewForce' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudNoiseShapeWindOffset) == 0x0010F0, "Member 'APPSkyCreator::CloudNoiseShapeWindOffset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, CloudNoiseDetailWindOffset) == 0x001108, "Member 'APPSkyCreator::CloudNoiseDetailWindOffset' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bUseExposureSettings) == 0x001120, "Member 'APPSkyCreator::bUseExposureSettings' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, bExtendDefaultLuminanceRange) == 0x001121, "Member 'APPSkyCreator::bExtendDefaultLuminanceRange' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, PostProcessPriority) == 0x001124, "Member 'APPSkyCreator::PostProcessPriority' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureMethod) == 0x001128, "Member 'APPSkyCreator::ExposureMethod' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureBiasCurve) == 0x001130, "Member 'APPSkyCreator::ExposureBiasCurve' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureMeterMask) == 0x001138, "Member 'APPSkyCreator::ExposureMeterMask' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureMinBrightness) == 0x001140, "Member 'APPSkyCreator::ExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureMaxBrightness) == 0x001144, "Member 'APPSkyCreator::ExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureMinEV100) == 0x001148, "Member 'APPSkyCreator::ExposureMinEV100' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureMaxEV100) == 0x00114C, "Member 'APPSkyCreator::ExposureMaxEV100' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureSpeedUp) == 0x001150, "Member 'APPSkyCreator::ExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureSpeedDown) == 0x001154, "Member 'APPSkyCreator::ExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureLowPercent) == 0x001158, "Member 'APPSkyCreator::ExposureLowPercent' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureHighPercent) == 0x00115C, "Member 'APPSkyCreator::ExposureHighPercent' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureHistogramLogMin) == 0x001160, "Member 'APPSkyCreator::ExposureHistogramLogMin' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureHistogramLogMax) == 0x001164, "Member 'APPSkyCreator::ExposureHistogramLogMax' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureHistogramMinEV100) == 0x001168, "Member 'APPSkyCreator::ExposureHistogramMinEV100' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, ExposureHistogramMaxEV100) == 0x00116C, "Member 'APPSkyCreator::ExposureHistogramMaxEV100' has a wrong offset!");
static_assert(offsetof(APPSkyCreator, OnLightningStrike) == 0x001170, "Member 'APPSkyCreator::OnLightningStrike' has a wrong offset!");

// Class PPSkyCreatorPlugin.PPSkyCreatorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPPSkyCreatorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float CentimetersToKilometers(const float Value);
	static bool CheckCloudDensityAtPosition(class UObject* WorldContextObject, const struct FVector& Position, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget);
	static void ConvertRenderTargetToTexture2D(class UTextureRenderTarget2D* RenderTarget, class UTexture2D** Texture);
	static void CreateAndAssignMID(class UObject* WorldContextObject, class UMaterialInterface* InMaterial, class UMaterialInstanceDynamic** InMID);
	static double ElevationRefraction(double F);
	static bool FindLightningPosition(class UObject* WorldContextObject, bool bSampleCloudDensity, int32 Samples, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget, const struct FVector& Position, float InnerRadius, float OuterRadius, float MinHeight, float MaxHeight, float DensityThreshold, struct FVector* OutPosition);
	static float GetCloudDensityAtPosition(class UObject* WorldContextObject, const struct FVector& Position, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget);
	static struct FPPCelestialPositionData GetRealMoonPosition(const float Latitude, const float Longitude, const float TimeZone, const bool bIsDaylightSavingTime, const struct FDateTime& DateTime);
	static struct FPPCelestialPositionData GetRealSunPosition(const float Latitude, const float Longitude, const float TimeZone, const bool bIsDaylightSavingTime, const struct FDateTime& DateTime);
	static bool IsApplicationForegroundNow();
	static float KilometersToCentimeters(const float Value);

	class UTexture2D* DynamicConvertRenderTargetToTexture2D(class UTextureRenderTarget2D* RenderTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PPSkyCreatorFunctionLibrary">();
	}
	static class UPPSkyCreatorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPPSkyCreatorFunctionLibrary>();
	}
};
static_assert(alignof(UPPSkyCreatorFunctionLibrary) == 0x000008, "Wrong alignment on UPPSkyCreatorFunctionLibrary");
static_assert(sizeof(UPPSkyCreatorFunctionLibrary) == 0x000028, "Wrong size on UPPSkyCreatorFunctionLibrary");

// Class PPSkyCreatorPlugin.PPSkyCreatorWeatherPreset
// 0x0470 (0x04A0 - 0x0030)
class UPPSkyCreatorWeatherPreset final : public UDataAsset
{
public:
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSkyAtmosphereSettings     SkyAtmosphereSettings;                             // 0x0048(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorVolumetricCloudSettings   VolumetricCloudSettings;                           // 0x00C8(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorBackgroundCloudSettings   BackgroundCloudSettings;                           // 0x0170(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSkyLightSettings          SkyLightSettings;                                  // 0x0194(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorSunLightSettings          SunLightSettings;                                  // 0x01C0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorMoonLightSettings         MoonLightSettings;                                 // 0x0208(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorExponentialHeightFogSettings ExponentialHeightFogSettings;                      // 0x0250(0x0064)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorStarMapSettings           StarMapSettings;                                   // 0x02B4(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C12[0x4];                                     // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPPSkyCreatorWeatherFXSettings         WeatherFXSettings;                                 // 0x0300(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWeatherMaterialFXSettings WeatherMaterialFXSettings;                         // 0x0410(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorWindSettings              WindSettings;                                      // 0x0478(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPPSkyCreatorPostProcessSettings       PostProcessSettings;                               // 0x0494(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	struct FPPSkyCreatorWeatherSettings GetWeatherPresetSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PPSkyCreatorWeatherPreset">();
	}
	static class UPPSkyCreatorWeatherPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPPSkyCreatorWeatherPreset>();
	}
};
static_assert(alignof(UPPSkyCreatorWeatherPreset) == 0x000008, "Wrong alignment on UPPSkyCreatorWeatherPreset");
static_assert(sizeof(UPPSkyCreatorWeatherPreset) == 0x0004A0, "Wrong size on UPPSkyCreatorWeatherPreset");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, Description) == 0x000030, "Member 'UPPSkyCreatorWeatherPreset::Description' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, SkyAtmosphereSettings) == 0x000048, "Member 'UPPSkyCreatorWeatherPreset::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, VolumetricCloudSettings) == 0x0000C8, "Member 'UPPSkyCreatorWeatherPreset::VolumetricCloudSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, BackgroundCloudSettings) == 0x000170, "Member 'UPPSkyCreatorWeatherPreset::BackgroundCloudSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, SkyLightSettings) == 0x000194, "Member 'UPPSkyCreatorWeatherPreset::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, SunLightSettings) == 0x0001C0, "Member 'UPPSkyCreatorWeatherPreset::SunLightSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, MoonLightSettings) == 0x000208, "Member 'UPPSkyCreatorWeatherPreset::MoonLightSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, ExponentialHeightFogSettings) == 0x000250, "Member 'UPPSkyCreatorWeatherPreset::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, StarMapSettings) == 0x0002B4, "Member 'UPPSkyCreatorWeatherPreset::StarMapSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, WeatherFXSettings) == 0x000300, "Member 'UPPSkyCreatorWeatherPreset::WeatherFXSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, WeatherMaterialFXSettings) == 0x000410, "Member 'UPPSkyCreatorWeatherPreset::WeatherMaterialFXSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, WindSettings) == 0x000478, "Member 'UPPSkyCreatorWeatherPreset::WindSettings' has a wrong offset!");
static_assert(offsetof(UPPSkyCreatorWeatherPreset, PostProcessSettings) == 0x000494, "Member 'UPPSkyCreatorWeatherPreset::PostProcessSettings' has a wrong offset!");

}

