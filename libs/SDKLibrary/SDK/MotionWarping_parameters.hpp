#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotionWarping

#include "Basic.hpp"

#include "MotionWarping_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MotionWarping.AnimNotifyState_MotionWarping.AddRootMotionModifier
// 0x0020 (0x0020 - 0x0000)
struct AnimNotifyState_MotionWarping_AddRootMotionModifier final
{
public:
	class UMotionWarpingComponent*                MotionWarpingComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                Animation;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier*                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_MotionWarping_AddRootMotionModifier) == 0x000008, "Wrong alignment on AnimNotifyState_MotionWarping_AddRootMotionModifier");
static_assert(sizeof(AnimNotifyState_MotionWarping_AddRootMotionModifier) == 0x000020, "Wrong size on AnimNotifyState_MotionWarping_AddRootMotionModifier");
static_assert(offsetof(AnimNotifyState_MotionWarping_AddRootMotionModifier, MotionWarpingComp) == 0x000000, "Member 'AnimNotifyState_MotionWarping_AddRootMotionModifier::MotionWarpingComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_AddRootMotionModifier, Animation) == 0x000008, "Member 'AnimNotifyState_MotionWarping_AddRootMotionModifier::Animation' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_AddRootMotionModifier, StartTime) == 0x000010, "Member 'AnimNotifyState_MotionWarping_AddRootMotionModifier::StartTime' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_AddRootMotionModifier, EndTime) == 0x000014, "Member 'AnimNotifyState_MotionWarping_AddRootMotionModifier::EndTime' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_AddRootMotionModifier, ReturnValue) == 0x000018, "Member 'AnimNotifyState_MotionWarping_AddRootMotionModifier::ReturnValue' has a wrong offset!");

// Function MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierActivate
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_MotionWarping_OnRootMotionModifierActivate final
{
public:
	class UMotionWarpingComponent*                MotionWarpingComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier*                    Modifier;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_MotionWarping_OnRootMotionModifierActivate) == 0x000008, "Wrong alignment on AnimNotifyState_MotionWarping_OnRootMotionModifierActivate");
static_assert(sizeof(AnimNotifyState_MotionWarping_OnRootMotionModifierActivate) == 0x000010, "Wrong size on AnimNotifyState_MotionWarping_OnRootMotionModifierActivate");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnRootMotionModifierActivate, MotionWarpingComp) == 0x000000, "Member 'AnimNotifyState_MotionWarping_OnRootMotionModifierActivate::MotionWarpingComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnRootMotionModifierActivate, Modifier) == 0x000008, "Member 'AnimNotifyState_MotionWarping_OnRootMotionModifierActivate::Modifier' has a wrong offset!");

// Function MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierDeactivate
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate final
{
public:
	class UMotionWarpingComponent*                MotionWarpingComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier*                    Modifier;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate) == 0x000008, "Wrong alignment on AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate");
static_assert(sizeof(AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate) == 0x000010, "Wrong size on AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate, MotionWarpingComp) == 0x000000, "Member 'AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate::MotionWarpingComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate, Modifier) == 0x000008, "Member 'AnimNotifyState_MotionWarping_OnRootMotionModifierDeactivate::Modifier' has a wrong offset!");

// Function MotionWarping.AnimNotifyState_MotionWarping.OnRootMotionModifierUpdate
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate final
{
public:
	class UMotionWarpingComponent*                MotionWarpingComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier*                    Modifier;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate) == 0x000008, "Wrong alignment on AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate");
static_assert(sizeof(AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate) == 0x000010, "Wrong size on AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate, MotionWarpingComp) == 0x000000, "Member 'AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate::MotionWarpingComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate, Modifier) == 0x000008, "Member 'AnimNotifyState_MotionWarping_OnRootMotionModifierUpdate::Modifier' has a wrong offset!");

// Function MotionWarping.AnimNotifyState_MotionWarping.OnWarpBegin
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_MotionWarping_OnWarpBegin final
{
public:
	class UMotionWarpingComponent*                MotionWarpingComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier*                    Modifier;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_MotionWarping_OnWarpBegin) == 0x000008, "Wrong alignment on AnimNotifyState_MotionWarping_OnWarpBegin");
static_assert(sizeof(AnimNotifyState_MotionWarping_OnWarpBegin) == 0x000010, "Wrong size on AnimNotifyState_MotionWarping_OnWarpBegin");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnWarpBegin, MotionWarpingComp) == 0x000000, "Member 'AnimNotifyState_MotionWarping_OnWarpBegin::MotionWarpingComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnWarpBegin, Modifier) == 0x000008, "Member 'AnimNotifyState_MotionWarping_OnWarpBegin::Modifier' has a wrong offset!");

// Function MotionWarping.AnimNotifyState_MotionWarping.OnWarpEnd
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_MotionWarping_OnWarpEnd final
{
public:
	class UMotionWarpingComponent*                MotionWarpingComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier*                    Modifier;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_MotionWarping_OnWarpEnd) == 0x000008, "Wrong alignment on AnimNotifyState_MotionWarping_OnWarpEnd");
static_assert(sizeof(AnimNotifyState_MotionWarping_OnWarpEnd) == 0x000010, "Wrong size on AnimNotifyState_MotionWarping_OnWarpEnd");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnWarpEnd, MotionWarpingComp) == 0x000000, "Member 'AnimNotifyState_MotionWarping_OnWarpEnd::MotionWarpingComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnWarpEnd, Modifier) == 0x000008, "Member 'AnimNotifyState_MotionWarping_OnWarpEnd::Modifier' has a wrong offset!");

// Function MotionWarping.AnimNotifyState_MotionWarping.OnWarpUpdate
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_MotionWarping_OnWarpUpdate final
{
public:
	class UMotionWarpingComponent*                MotionWarpingComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier*                    Modifier;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_MotionWarping_OnWarpUpdate) == 0x000008, "Wrong alignment on AnimNotifyState_MotionWarping_OnWarpUpdate");
static_assert(sizeof(AnimNotifyState_MotionWarping_OnWarpUpdate) == 0x000010, "Wrong size on AnimNotifyState_MotionWarping_OnWarpUpdate");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnWarpUpdate, MotionWarpingComp) == 0x000000, "Member 'AnimNotifyState_MotionWarping_OnWarpUpdate::MotionWarpingComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_MotionWarping_OnWarpUpdate, Modifier) == 0x000008, "Member 'AnimNotifyState_MotionWarping_OnWarpUpdate::Modifier' has a wrong offset!");

// Function MotionWarping.MotionWarpingUtilities.ExtractRootMotionFromAnimation
// 0x0070 (0x0070 - 0x0000)
struct MotionWarpingUtilities_ExtractRootMotionFromAnimation final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingUtilities_ExtractRootMotionFromAnimation) == 0x000010, "Wrong alignment on MotionWarpingUtilities_ExtractRootMotionFromAnimation");
static_assert(sizeof(MotionWarpingUtilities_ExtractRootMotionFromAnimation) == 0x000070, "Wrong size on MotionWarpingUtilities_ExtractRootMotionFromAnimation");
static_assert(offsetof(MotionWarpingUtilities_ExtractRootMotionFromAnimation, Animation) == 0x000000, "Member 'MotionWarpingUtilities_ExtractRootMotionFromAnimation::Animation' has a wrong offset!");
static_assert(offsetof(MotionWarpingUtilities_ExtractRootMotionFromAnimation, StartTime) == 0x000008, "Member 'MotionWarpingUtilities_ExtractRootMotionFromAnimation::StartTime' has a wrong offset!");
static_assert(offsetof(MotionWarpingUtilities_ExtractRootMotionFromAnimation, EndTime) == 0x00000C, "Member 'MotionWarpingUtilities_ExtractRootMotionFromAnimation::EndTime' has a wrong offset!");
static_assert(offsetof(MotionWarpingUtilities_ExtractRootMotionFromAnimation, ReturnValue) == 0x000010, "Member 'MotionWarpingUtilities_ExtractRootMotionFromAnimation::ReturnValue' has a wrong offset!");

// Function MotionWarping.MotionWarpingUtilities.GetMotionWarpingWindowsForWarpTargetFromAnimation
// 0x0020 (0x0020 - 0x0000)
struct MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WarpTargetName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMotionWarpingWindowData>       OutWindows;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation) == 0x000008, "Wrong alignment on MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation");
static_assert(sizeof(MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation) == 0x000020, "Wrong size on MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation");
static_assert(offsetof(MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation, Animation) == 0x000000, "Member 'MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation::Animation' has a wrong offset!");
static_assert(offsetof(MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation, WarpTargetName) == 0x000008, "Member 'MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation::WarpTargetName' has a wrong offset!");
static_assert(offsetof(MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation, OutWindows) == 0x000010, "Member 'MotionWarpingUtilities_GetMotionWarpingWindowsForWarpTargetFromAnimation::OutWindows' has a wrong offset!");

// Function MotionWarping.MotionWarpingUtilities.GetMotionWarpingWindowsFromAnimation
// 0x0018 (0x0018 - 0x0000)
struct MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation final
{
public:
	const class UAnimSequenceBase*                Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMotionWarpingWindowData>       OutWindows;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation) == 0x000008, "Wrong alignment on MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation");
static_assert(sizeof(MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation) == 0x000018, "Wrong size on MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation");
static_assert(offsetof(MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation, Animation) == 0x000000, "Member 'MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation::Animation' has a wrong offset!");
static_assert(offsetof(MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation, OutWindows) == 0x000008, "Member 'MotionWarpingUtilities_GetMotionWarpingWindowsFromAnimation::OutWindows' has a wrong offset!");

// Function MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTarget
// 0x0050 (0x0050 - 0x0000)
struct MotionWarpingComponent_AddOrUpdateWarpTarget final
{
public:
	struct FMotionWarpingTarget                   WarpTarget;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingComponent_AddOrUpdateWarpTarget) == 0x000008, "Wrong alignment on MotionWarpingComponent_AddOrUpdateWarpTarget");
static_assert(sizeof(MotionWarpingComponent_AddOrUpdateWarpTarget) == 0x000050, "Wrong size on MotionWarpingComponent_AddOrUpdateWarpTarget");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTarget, WarpTarget) == 0x000000, "Member 'MotionWarpingComponent_AddOrUpdateWarpTarget::WarpTarget' has a wrong offset!");

// Function MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromComponent
// 0x0020 (0x0020 - 0x0000)
struct MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent final
{
public:
	class FName                                   WarpTargetName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  Component;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowComponent;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCC[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent) == 0x000008, "Wrong alignment on MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent");
static_assert(sizeof(MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent) == 0x000020, "Wrong size on MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent, WarpTargetName) == 0x000000, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent::WarpTargetName' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent, Component) == 0x000008, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent::Component' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent, BoneName) == 0x000010, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent::BoneName' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent, bFollowComponent) == 0x000018, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromComponent::bFollowComponent' has a wrong offset!");

// Function MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromLocation
// 0x0020 (0x0020 - 0x0000)
struct MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation final
{
public:
	class FName                                   WarpTargetName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation) == 0x000008, "Wrong alignment on MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation");
static_assert(sizeof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation) == 0x000020, "Wrong size on MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation, WarpTargetName) == 0x000000, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation::WarpTargetName' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation, TargetLocation) == 0x000008, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromLocation::TargetLocation' has a wrong offset!");

// Function MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromLocationAndRotation
// 0x0038 (0x0038 - 0x0000)
struct MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation final
{
public:
	class FName                                   WarpTargetName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation) == 0x000008, "Wrong alignment on MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation");
static_assert(sizeof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation) == 0x000038, "Wrong size on MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation, WarpTargetName) == 0x000000, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation::WarpTargetName' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation, TargetLocation) == 0x000008, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation::TargetLocation' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation, TargetRotation) == 0x000020, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromLocationAndRotation::TargetRotation' has a wrong offset!");

// Function MotionWarping.MotionWarpingComponent.AddOrUpdateWarpTargetFromTransform
// 0x0070 (0x0070 - 0x0000)
struct MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform final
{
public:
	class FName                                   WarpTargetName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCD[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform) == 0x000010, "Wrong alignment on MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform");
static_assert(sizeof(MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform) == 0x000070, "Wrong size on MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform, WarpTargetName) == 0x000000, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform::WarpTargetName' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform, TargetTransform) == 0x000010, "Member 'MotionWarpingComponent_AddOrUpdateWarpTargetFromTransform::TargetTransform' has a wrong offset!");

// Function MotionWarping.MotionWarpingComponent.RemoveWarpTarget
// 0x000C (0x000C - 0x0000)
struct MotionWarpingComponent_RemoveWarpTarget final
{
public:
	class FName                                   WarpTargetName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingComponent_RemoveWarpTarget) == 0x000004, "Wrong alignment on MotionWarpingComponent_RemoveWarpTarget");
static_assert(sizeof(MotionWarpingComponent_RemoveWarpTarget) == 0x00000C, "Wrong size on MotionWarpingComponent_RemoveWarpTarget");
static_assert(offsetof(MotionWarpingComponent_RemoveWarpTarget, WarpTargetName) == 0x000000, "Member 'MotionWarpingComponent_RemoveWarpTarget::WarpTargetName' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_RemoveWarpTarget, ReturnValue) == 0x000008, "Member 'MotionWarpingComponent_RemoveWarpTarget::ReturnValue' has a wrong offset!");

// Function MotionWarping.RootMotionModifier_Scale.AddRootMotionModifierScale
// 0x0038 (0x0038 - 0x0000)
struct RootMotionModifier_Scale_AddRootMotionModifierScale final
{
public:
	class UMotionWarpingComponent*                InMotionWarpingComp;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier_Scale*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMotionModifier_Scale_AddRootMotionModifierScale) == 0x000008, "Wrong alignment on RootMotionModifier_Scale_AddRootMotionModifierScale");
static_assert(sizeof(RootMotionModifier_Scale_AddRootMotionModifierScale) == 0x000038, "Wrong size on RootMotionModifier_Scale_AddRootMotionModifierScale");
static_assert(offsetof(RootMotionModifier_Scale_AddRootMotionModifierScale, InMotionWarpingComp) == 0x000000, "Member 'RootMotionModifier_Scale_AddRootMotionModifierScale::InMotionWarpingComp' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_Scale_AddRootMotionModifierScale, InAnimation) == 0x000008, "Member 'RootMotionModifier_Scale_AddRootMotionModifierScale::InAnimation' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_Scale_AddRootMotionModifierScale, InStartTime) == 0x000010, "Member 'RootMotionModifier_Scale_AddRootMotionModifierScale::InStartTime' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_Scale_AddRootMotionModifierScale, InEndTime) == 0x000014, "Member 'RootMotionModifier_Scale_AddRootMotionModifierScale::InEndTime' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_Scale_AddRootMotionModifierScale, InScale) == 0x000018, "Member 'RootMotionModifier_Scale_AddRootMotionModifierScale::InScale' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_Scale_AddRootMotionModifierScale, ReturnValue) == 0x000030, "Member 'RootMotionModifier_Scale_AddRootMotionModifierScale::ReturnValue' has a wrong offset!");

// Function MotionWarping.RootMotionModifier_SkewWarp.AddRootMotionModifierSkewWarp
// 0x00B0 (0x00B0 - 0x0000)
struct RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp final
{
public:
	class UMotionWarpingComponent*                InMotionWarpingComp;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEndTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InWarpTargetName;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpPointAnimProvider                        InWarpPointAnimProvider;                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD6[0xF];                                     // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InWarpPointAnimTransform;                          // 0x0030(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InWarpPointAnimBoneName;                           // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpTranslation;                                // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIgnoreZAxis;                                    // 0x0099(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWarpRotation;                                   // 0x009A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionWarpRotationType                       InRotationType;                                    // 0x009B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWarpRotationTimeMultiplier;                      // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URootMotionModifier_SkewWarp*           ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD7[0x8];                                     // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp) == 0x000010, "Wrong alignment on RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp");
static_assert(sizeof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp) == 0x0000B0, "Wrong size on RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InMotionWarpingComp) == 0x000000, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InMotionWarpingComp' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InAnimation) == 0x000008, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InAnimation' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InStartTime) == 0x000010, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InStartTime' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InEndTime) == 0x000014, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InEndTime' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InWarpTargetName) == 0x000018, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InWarpTargetName' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InWarpPointAnimProvider) == 0x000020, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InWarpPointAnimProvider' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InWarpPointAnimTransform) == 0x000030, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InWarpPointAnimTransform' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InWarpPointAnimBoneName) == 0x000090, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InWarpPointAnimBoneName' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, bInWarpTranslation) == 0x000098, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::bInWarpTranslation' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, bInIgnoreZAxis) == 0x000099, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::bInIgnoreZAxis' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, bInWarpRotation) == 0x00009A, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::bInWarpRotation' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InRotationType) == 0x00009B, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InRotationType' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, InWarpRotationTimeMultiplier) == 0x00009C, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::InWarpRotationTimeMultiplier' has a wrong offset!");
static_assert(offsetof(RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp, ReturnValue) == 0x0000A0, "Member 'RootMotionModifier_SkewWarp_AddRootMotionModifierSkewWarp::ReturnValue' has a wrong offset!");

}

