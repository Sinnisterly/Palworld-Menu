#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PocketpairUser

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PocketpairUser_structs.hpp"


namespace SDK::Params
{

// Function PocketpairUser.HTTPRequestAsyncFunction.HTTPRequestAsyncFunction
// 0x0030 (0x0030 - 0x0000)
struct HTTPRequestAsyncFunction_HTTPRequestAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Verb;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHTTPRequestAsyncFunction*              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HTTPRequestAsyncFunction_HTTPRequestAsyncFunction) == 0x000008, "Wrong alignment on HTTPRequestAsyncFunction_HTTPRequestAsyncFunction");
static_assert(sizeof(HTTPRequestAsyncFunction_HTTPRequestAsyncFunction) == 0x000030, "Wrong size on HTTPRequestAsyncFunction_HTTPRequestAsyncFunction");
static_assert(offsetof(HTTPRequestAsyncFunction_HTTPRequestAsyncFunction, Target) == 0x000000, "Member 'HTTPRequestAsyncFunction_HTTPRequestAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(HTTPRequestAsyncFunction_HTTPRequestAsyncFunction, URL) == 0x000008, "Member 'HTTPRequestAsyncFunction_HTTPRequestAsyncFunction::URL' has a wrong offset!");
static_assert(offsetof(HTTPRequestAsyncFunction_HTTPRequestAsyncFunction, Verb) == 0x000018, "Member 'HTTPRequestAsyncFunction_HTTPRequestAsyncFunction::Verb' has a wrong offset!");
static_assert(offsetof(HTTPRequestAsyncFunction_HTTPRequestAsyncFunction, ReturnValue) == 0x000028, "Member 'HTTPRequestAsyncFunction_HTTPRequestAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.SwitchUserUIDefaultOnlineSubsystemAsyncFunction.SwitchUserUIAsyncFunction
// 0x0010 (0x0010 - 0x0000)
struct SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USwitchUserUIDefaultOnlineSubsystemAsyncFunction* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction) == 0x000008, "Wrong alignment on SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction");
static_assert(sizeof(SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction) == 0x000010, "Wrong size on SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction");
static_assert(offsetof(SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction, Target) == 0x000000, "Member 'SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction, ReturnValue) == 0x000008, "Member 'SwitchUserUIDefaultOnlineSubsystemAsyncFunction_SwitchUserUIAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.LoginDefaultOnlineSubsystemAsyncFunction.LoginDefaultAsyncFunction
// 0x0010 (0x0010 - 0x0000)
struct LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoginDefaultOnlineSubsystemAsyncFunction* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction) == 0x000008, "Wrong alignment on LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction");
static_assert(sizeof(LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction) == 0x000010, "Wrong size on LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction");
static_assert(offsetof(LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction, Target) == 0x000000, "Member 'LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction, ReturnValue) == 0x000008, "Member 'LoginDefaultOnlineSubsystemAsyncFunction_LoginDefaultAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.LoginEOSAsyncFunction.LoginEOSAsyncFunction
// 0x0010 (0x0010 - 0x0000)
struct LoginEOSAsyncFunction_LoginEOSAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULoginEOSAsyncFunction*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginEOSAsyncFunction_LoginEOSAsyncFunction) == 0x000008, "Wrong alignment on LoginEOSAsyncFunction_LoginEOSAsyncFunction");
static_assert(sizeof(LoginEOSAsyncFunction_LoginEOSAsyncFunction) == 0x000010, "Wrong size on LoginEOSAsyncFunction_LoginEOSAsyncFunction");
static_assert(offsetof(LoginEOSAsyncFunction_LoginEOSAsyncFunction, Target) == 0x000000, "Member 'LoginEOSAsyncFunction_LoginEOSAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(LoginEOSAsyncFunction_LoginEOSAsyncFunction, ReturnValue) == 0x000008, "Member 'LoginEOSAsyncFunction_LoginEOSAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.CreateSessionAsyncFunction.CreateSessionAsyncFunction
// 0x00A0 (0x00A0 - 0x0000)
struct CreateSessionAsyncFunction_CreateSessionAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDedicatedServer;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C48[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PublicConnections;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteCode;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerAddress;                                     // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassword;                                        // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C49[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0088(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCreateSessionAsyncFunction*            ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreateSessionAsyncFunction_CreateSessionAsyncFunction) == 0x000008, "Wrong alignment on CreateSessionAsyncFunction_CreateSessionAsyncFunction");
static_assert(sizeof(CreateSessionAsyncFunction_CreateSessionAsyncFunction) == 0x0000A0, "Wrong size on CreateSessionAsyncFunction_CreateSessionAsyncFunction");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, Target) == 0x000000, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, IsDedicatedServer) == 0x000008, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::IsDedicatedServer' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, PublicConnections) == 0x00000C, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::PublicConnections' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, InviteCode) == 0x000010, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::InviteCode' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, ServerName) == 0x000020, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::ServerName' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, Desc) == 0x000030, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::Desc' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, ServerAddress) == 0x000040, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::ServerAddress' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, ServerPort) == 0x000050, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::ServerPort' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, IsPassword) == 0x000054, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::IsPassword' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, Version) == 0x000058, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::Version' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, ServerType) == 0x000068, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::ServerType' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, Region) == 0x000078, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::Region' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, Namespace) == 0x000088, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::Namespace' has a wrong offset!");
static_assert(offsetof(CreateSessionAsyncFunction_CreateSessionAsyncFunction, ReturnValue) == 0x000098, "Member 'CreateSessionAsyncFunction_CreateSessionAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.FindSessionsAsyncFunction.FindSessionsAsyncFunction
// 0x0070 (0x0070 - 0x0000)
struct FindSessionsAsyncFunction_FindSessionsAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDedicatedServer;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InviteCode;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LessThanTime;                                      // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4C[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WorldGUID;                                         // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0058(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFindSessionsAsyncFunction*             ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindSessionsAsyncFunction_FindSessionsAsyncFunction) == 0x000008, "Wrong alignment on FindSessionsAsyncFunction_FindSessionsAsyncFunction");
static_assert(sizeof(FindSessionsAsyncFunction_FindSessionsAsyncFunction) == 0x000070, "Wrong size on FindSessionsAsyncFunction_FindSessionsAsyncFunction");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, Target) == 0x000000, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, IsDedicatedServer) == 0x000008, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::IsDedicatedServer' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, InviteCode) == 0x000010, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::InviteCode' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, ServerType) == 0x000020, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::ServerType' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, Region) == 0x000030, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::Region' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, LessThanTime) == 0x000040, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::LessThanTime' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, WorldGUID) == 0x000048, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::WorldGUID' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, Namespace) == 0x000058, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::Namespace' has a wrong offset!");
static_assert(offsetof(FindSessionsAsyncFunction_FindSessionsAsyncFunction, ReturnValue) == 0x000068, "Member 'FindSessionsAsyncFunction_FindSessionsAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.SanitizeDisplayNameAsyncFunction.SanitizeDisplayNameAsyncFunction
// 0x0020 (0x0020 - 0x0000)
struct SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USanitizeDisplayNameAsyncFunction*      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction) == 0x000008, "Wrong alignment on SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction");
static_assert(sizeof(SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction) == 0x000020, "Wrong size on SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction");
static_assert(offsetof(SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction, Target) == 0x000000, "Member 'SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction, InString) == 0x000008, "Member 'SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction::InString' has a wrong offset!");
static_assert(offsetof(SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction, ReturnValue) == 0x000018, "Member 'SanitizeDisplayNameAsyncFunction_SanitizeDisplayNameAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PingIP.ConstructPingObject
// 0x0008 (0x0008 - 0x0000)
struct PingIP_ConstructPingObject final
{
public:
	class UPingIP*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIP_ConstructPingObject) == 0x000008, "Wrong alignment on PingIP_ConstructPingObject");
static_assert(sizeof(PingIP_ConstructPingObject) == 0x000008, "Wrong size on PingIP_ConstructPingObject");
static_assert(offsetof(PingIP_ConstructPingObject, ReturnValue) == 0x000000, "Member 'PingIP_ConstructPingObject::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PingIP.SendPing
// 0x0010 (0x0010 - 0x0000)
struct PingIP_SendPing final
{
public:
	class FString                                 IpAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingIP_SendPing) == 0x000008, "Wrong alignment on PingIP_SendPing");
static_assert(sizeof(PingIP_SendPing) == 0x000010, "Wrong size on PingIP_SendPing");
static_assert(offsetof(PingIP_SendPing, IpAddress) == 0x000000, "Member 'PingIP_SendPing::IpAddress' has a wrong offset!");

// Function PocketpairUser.PocketpairUserInfo.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserInfo_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserInfo_GetDebugString) == 0x000008, "Wrong alignment on PocketpairUserInfo_GetDebugString");
static_assert(sizeof(PocketpairUserInfo_GetDebugString) == 0x000010, "Wrong size on PocketpairUserInfo_GetDebugString");
static_assert(offsetof(PocketpairUserInfo_GetDebugString, ReturnValue) == 0x000000, "Member 'PocketpairUserInfo_GetDebugString::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserInfo.GetNetId
// 0x0030 (0x0030 - 0x0000)
struct PocketpairUserInfo_GetNetId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserInfo_GetNetId) == 0x000008, "Wrong alignment on PocketpairUserInfo_GetNetId");
static_assert(sizeof(PocketpairUserInfo_GetNetId) == 0x000030, "Wrong size on PocketpairUserInfo_GetNetId");
static_assert(offsetof(PocketpairUserInfo_GetNetId, ReturnValue) == 0x000000, "Member 'PocketpairUserInfo_GetNetId::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserInfo.GetNickname
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserInfo_GetNickname final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserInfo_GetNickname) == 0x000008, "Wrong alignment on PocketpairUserInfo_GetNickname");
static_assert(sizeof(PocketpairUserInfo_GetNickname) == 0x000010, "Wrong size on PocketpairUserInfo_GetNickname");
static_assert(offsetof(PocketpairUserInfo_GetNickname, ReturnValue) == 0x000000, "Member 'PocketpairUserInfo_GetNickname::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserInfo.GetOnlineSubsystemName
// 0x0008 (0x0008 - 0x0000)
struct PocketpairUserInfo_GetOnlineSubsystemName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserInfo_GetOnlineSubsystemName) == 0x000004, "Wrong alignment on PocketpairUserInfo_GetOnlineSubsystemName");
static_assert(sizeof(PocketpairUserInfo_GetOnlineSubsystemName) == 0x000008, "Wrong size on PocketpairUserInfo_GetOnlineSubsystemName");
static_assert(offsetof(PocketpairUserInfo_GetOnlineSubsystemName, ReturnValue) == 0x000000, "Member 'PocketpairUserInfo_GetOnlineSubsystemName::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairFriend.GetNetId
// 0x0030 (0x0030 - 0x0000)
struct PocketpairFriend_GetNetId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairFriend_GetNetId) == 0x000008, "Wrong alignment on PocketpairFriend_GetNetId");
static_assert(sizeof(PocketpairFriend_GetNetId) == 0x000030, "Wrong size on PocketpairFriend_GetNetId");
static_assert(offsetof(PocketpairFriend_GetNetId, ReturnValue) == 0x000000, "Member 'PocketpairFriend_GetNetId::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.AddPingResultCache
// 0x0018 (0x0018 - 0x0000)
struct PocketpairUserSubsystem_AddPingResultCache final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C54[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PocketpairUserSubsystem_AddPingResultCache) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_AddPingResultCache");
static_assert(sizeof(PocketpairUserSubsystem_AddPingResultCache) == 0x000018, "Wrong size on PocketpairUserSubsystem_AddPingResultCache");
static_assert(offsetof(PocketpairUserSubsystem_AddPingResultCache, Address) == 0x000000, "Member 'PocketpairUserSubsystem_AddPingResultCache::Address' has a wrong offset!");
static_assert(offsetof(PocketpairUserSubsystem_AddPingResultCache, Ping) == 0x000010, "Member 'PocketpairUserSubsystem_AddPingResultCache::Ping' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetPingResultCache
// 0x0018 (0x0018 - 0x0000)
struct PocketpairUserSubsystem_GetPingResultCache final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C55[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PocketpairUserSubsystem_GetPingResultCache) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetPingResultCache");
static_assert(sizeof(PocketpairUserSubsystem_GetPingResultCache) == 0x000018, "Wrong size on PocketpairUserSubsystem_GetPingResultCache");
static_assert(offsetof(PocketpairUserSubsystem_GetPingResultCache, Address) == 0x000000, "Member 'PocketpairUserSubsystem_GetPingResultCache::Address' has a wrong offset!");
static_assert(offsetof(PocketpairUserSubsystem_GetPingResultCache, ReturnValue) == 0x000010, "Member 'PocketpairUserSubsystem_GetPingResultCache::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetPlayerNo
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserSubsystem_GetPlayerNo final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C56[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PocketpairUserSubsystem_GetPlayerNo) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetPlayerNo");
static_assert(sizeof(PocketpairUserSubsystem_GetPlayerNo) == 0x000010, "Wrong size on PocketpairUserSubsystem_GetPlayerNo");
static_assert(offsetof(PocketpairUserSubsystem_GetPlayerNo, PlayerController) == 0x000000, "Member 'PocketpairUserSubsystem_GetPlayerNo::PlayerController' has a wrong offset!");
static_assert(offsetof(PocketpairUserSubsystem_GetPlayerNo, ReturnValue) == 0x000008, "Member 'PocketpairUserSubsystem_GetPlayerNo::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetSocialId
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserSubsystem_GetSocialId final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSocialId                              ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C57[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PocketpairUserSubsystem_GetSocialId) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetSocialId");
static_assert(sizeof(PocketpairUserSubsystem_GetSocialId) == 0x000010, "Wrong size on PocketpairUserSubsystem_GetSocialId");
static_assert(offsetof(PocketpairUserSubsystem_GetSocialId, PlayerController) == 0x000000, "Member 'PocketpairUserSubsystem_GetSocialId::PlayerController' has a wrong offset!");
static_assert(offsetof(PocketpairUserSubsystem_GetSocialId, ReturnValue) == 0x000008, "Member 'PocketpairUserSubsystem_GetSocialId::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.OnSessionInviteReceived
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserSubsystem_OnSessionInviteReceived final
{
public:
	class FString                                 InviteCode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserSubsystem_OnSessionInviteReceived) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_OnSessionInviteReceived");
static_assert(sizeof(PocketpairUserSubsystem_OnSessionInviteReceived) == 0x000010, "Wrong size on PocketpairUserSubsystem_OnSessionInviteReceived");
static_assert(offsetof(PocketpairUserSubsystem_OnSessionInviteReceived, InviteCode) == 0x000000, "Member 'PocketpairUserSubsystem_OnSessionInviteReceived::InviteCode' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.UnlockAchievement
// 0x0018 (0x0018 - 0x0000)
struct PocketpairUserSubsystem_UnlockAchievement final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C58[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PocketpairUserSubsystem_UnlockAchievement) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_UnlockAchievement");
static_assert(sizeof(PocketpairUserSubsystem_UnlockAchievement) == 0x000018, "Wrong size on PocketpairUserSubsystem_UnlockAchievement");
static_assert(offsetof(PocketpairUserSubsystem_UnlockAchievement, ID) == 0x000000, "Member 'PocketpairUserSubsystem_UnlockAchievement::ID' has a wrong offset!");
static_assert(offsetof(PocketpairUserSubsystem_UnlockAchievement, Percent) == 0x000010, "Member 'PocketpairUserSubsystem_UnlockAchievement::Percent' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetDefaultOnlineSubsystemName
// 0x0008 (0x0008 - 0x0000)
struct PocketpairUserSubsystem_GetDefaultOnlineSubsystemName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserSubsystem_GetDefaultOnlineSubsystemName) == 0x000004, "Wrong alignment on PocketpairUserSubsystem_GetDefaultOnlineSubsystemName");
static_assert(sizeof(PocketpairUserSubsystem_GetDefaultOnlineSubsystemName) == 0x000008, "Wrong size on PocketpairUserSubsystem_GetDefaultOnlineSubsystemName");
static_assert(offsetof(PocketpairUserSubsystem_GetDefaultOnlineSubsystemName, ReturnValue) == 0x000000, "Member 'PocketpairUserSubsystem_GetDefaultOnlineSubsystemName::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetInviteCode
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserSubsystem_GetInviteCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserSubsystem_GetInviteCode) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetInviteCode");
static_assert(sizeof(PocketpairUserSubsystem_GetInviteCode) == 0x000010, "Wrong size on PocketpairUserSubsystem_GetInviteCode");
static_assert(offsetof(PocketpairUserSubsystem_GetInviteCode, ReturnValue) == 0x000000, "Member 'PocketpairUserSubsystem_GetInviteCode::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetLocalUserInfo
// 0x0008 (0x0008 - 0x0000)
struct PocketpairUserSubsystem_GetLocalUserInfo final
{
public:
	const class UPocketpairUserInfo*              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserSubsystem_GetLocalUserInfo) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetLocalUserInfo");
static_assert(sizeof(PocketpairUserSubsystem_GetLocalUserInfo) == 0x000008, "Wrong size on PocketpairUserSubsystem_GetLocalUserInfo");
static_assert(offsetof(PocketpairUserSubsystem_GetLocalUserInfo, ReturnValue) == 0x000000, "Member 'PocketpairUserSubsystem_GetLocalUserInfo::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetSaveDataUserId
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserSubsystem_GetSaveDataUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserSubsystem_GetSaveDataUserId) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetSaveDataUserId");
static_assert(sizeof(PocketpairUserSubsystem_GetSaveDataUserId) == 0x000010, "Wrong size on PocketpairUserSubsystem_GetSaveDataUserId");
static_assert(offsetof(PocketpairUserSubsystem_GetSaveDataUserId, ReturnValue) == 0x000000, "Member 'PocketpairUserSubsystem_GetSaveDataUserId::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetTelemetrySessionId
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserSubsystem_GetTelemetrySessionId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserSubsystem_GetTelemetrySessionId) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetTelemetrySessionId");
static_assert(sizeof(PocketpairUserSubsystem_GetTelemetrySessionId) == 0x000010, "Wrong size on PocketpairUserSubsystem_GetTelemetrySessionId");
static_assert(offsetof(PocketpairUserSubsystem_GetTelemetrySessionId, ReturnValue) == 0x000000, "Member 'PocketpairUserSubsystem_GetTelemetrySessionId::ReturnValue' has a wrong offset!");

// Function PocketpairUser.PocketpairUserSubsystem.GetTelemetryUserId
// 0x0010 (0x0010 - 0x0000)
struct PocketpairUserSubsystem_GetTelemetryUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PocketpairUserSubsystem_GetTelemetryUserId) == 0x000008, "Wrong alignment on PocketpairUserSubsystem_GetTelemetryUserId");
static_assert(sizeof(PocketpairUserSubsystem_GetTelemetryUserId) == 0x000010, "Wrong size on PocketpairUserSubsystem_GetTelemetryUserId");
static_assert(offsetof(PocketpairUserSubsystem_GetTelemetryUserId, ReturnValue) == 0x000000, "Member 'PocketpairUserSubsystem_GetTelemetryUserId::ReturnValue' has a wrong offset!");

// Function PocketpairUser.GDKActivityAsyncFunction.GDKActivityAsyncFunction
// 0x0028 (0x0028 - 0x0000)
struct GDKActivityAsyncFunction_GDKActivityAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionString;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerNum;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPlayerNum;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGDKActivityAsyncFunction*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GDKActivityAsyncFunction_GDKActivityAsyncFunction) == 0x000008, "Wrong alignment on GDKActivityAsyncFunction_GDKActivityAsyncFunction");
static_assert(sizeof(GDKActivityAsyncFunction_GDKActivityAsyncFunction) == 0x000028, "Wrong size on GDKActivityAsyncFunction_GDKActivityAsyncFunction");
static_assert(offsetof(GDKActivityAsyncFunction_GDKActivityAsyncFunction, Target) == 0x000000, "Member 'GDKActivityAsyncFunction_GDKActivityAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(GDKActivityAsyncFunction_GDKActivityAsyncFunction, ConnectionString) == 0x000008, "Member 'GDKActivityAsyncFunction_GDKActivityAsyncFunction::ConnectionString' has a wrong offset!");
static_assert(offsetof(GDKActivityAsyncFunction_GDKActivityAsyncFunction, MaxPlayerNum) == 0x000018, "Member 'GDKActivityAsyncFunction_GDKActivityAsyncFunction::MaxPlayerNum' has a wrong offset!");
static_assert(offsetof(GDKActivityAsyncFunction_GDKActivityAsyncFunction, CurrentPlayerNum) == 0x00001C, "Member 'GDKActivityAsyncFunction_GDKActivityAsyncFunction::CurrentPlayerNum' has a wrong offset!");
static_assert(offsetof(GDKActivityAsyncFunction_GDKActivityAsyncFunction, ReturnValue) == 0x000020, "Member 'GDKActivityAsyncFunction_GDKActivityAsyncFunction::ReturnValue' has a wrong offset!");

// Function PocketpairUser.GDKInviteAsyncFunction.GDKInviteAsyncFunction
// 0x0010 (0x0010 - 0x0000)
struct GDKInviteAsyncFunction_GDKInviteAsyncFunction final
{
public:
	class UPocketpairUserSubsystem*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGDKInviteAsyncFunction*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GDKInviteAsyncFunction_GDKInviteAsyncFunction) == 0x000008, "Wrong alignment on GDKInviteAsyncFunction_GDKInviteAsyncFunction");
static_assert(sizeof(GDKInviteAsyncFunction_GDKInviteAsyncFunction) == 0x000010, "Wrong size on GDKInviteAsyncFunction_GDKInviteAsyncFunction");
static_assert(offsetof(GDKInviteAsyncFunction_GDKInviteAsyncFunction, Target) == 0x000000, "Member 'GDKInviteAsyncFunction_GDKInviteAsyncFunction::Target' has a wrong offset!");
static_assert(offsetof(GDKInviteAsyncFunction_GDKInviteAsyncFunction, ReturnValue) == 0x000008, "Member 'GDKInviteAsyncFunction_GDKInviteAsyncFunction::ReturnValue' has a wrong offset!");

}

