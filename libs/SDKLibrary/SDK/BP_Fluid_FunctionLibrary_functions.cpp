#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Fluid_FunctionLibrary

#include "Basic.hpp"

#include "BP_Fluid_FunctionLibrary_classes.hpp"
#include "BP_Fluid_FunctionLibrary_parameters.hpp"


namespace SDK
{

// Function BP_Fluid_FunctionLibrary.BP_Fluid_FunctionLibrary_C.DistanceCheck
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location_1                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location_2                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance_Radius                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutOfRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Fluid_FunctionLibrary_C::DistanceCheck(const struct FVector& Location_1, const struct FVector& Location_2, double Distance_Radius, class UObject* __WorldContext, double* Distance, bool* OutOfRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Fluid_FunctionLibrary_C", "DistanceCheck");

	Params::BP_Fluid_FunctionLibrary_C_DistanceCheck Parms{};

	Parms.Location_1 = std::move(Location_1);
	Parms.Location_2 = std::move(Location_2);
	Parms.Distance_Radius = Distance_Radius;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (OutOfRadius != nullptr)
		*OutOfRadius = Parms.OutOfRadius;
}


// Function BP_Fluid_FunctionLibrary.BP_Fluid_FunctionLibrary_C.DrawFluidSim
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_FluidController_C*            Fluid_Controller                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Draw_Material                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Draw_Location                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Draw_Size                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Draw_Intensity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_Fluid_FunctionLibrary_C::DrawFluidSim(class ABP_FluidController_C*& Fluid_Controller, class UMaterialInstanceDynamic*& Draw_Material, const struct FVector& Draw_Location, double Draw_Size, double Draw_Intensity, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Fluid_FunctionLibrary_C", "DrawFluidSim");

	Params::BP_Fluid_FunctionLibrary_C_DrawFluidSim Parms{};

	Parms.Fluid_Controller = Fluid_Controller;
	Parms.Draw_Material = Draw_Material;
	Parms.Draw_Location = std::move(Draw_Location);
	Parms.Draw_Size = Draw_Size;
	Parms.Draw_Intensity = Draw_Intensity;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Fluid_Controller = Parms.Fluid_Controller;
	Draw_Material = Parms.Draw_Material;
}


// Function BP_Fluid_FunctionLibrary.BP_Fluid_FunctionLibrary_C.DrawFluidSim_Capture
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_FluidController_C*            Fluid_Controller                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         Draw_Material                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Draw_Location                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_Fluid_FunctionLibrary_C::DrawFluidSim_Capture(class ABP_FluidController_C*& Fluid_Controller, class UMaterialInstanceDynamic*& Draw_Material, const struct FVector& Draw_Location, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Fluid_FunctionLibrary_C", "DrawFluidSim_Capture");

	Params::BP_Fluid_FunctionLibrary_C_DrawFluidSim_Capture Parms{};

	Parms.Fluid_Controller = Fluid_Controller;
	Parms.Draw_Material = Draw_Material;
	Parms.Draw_Location = std::move(Draw_Location);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Fluid_Controller = Parms.Fluid_Controller;
	Draw_Material = Parms.Draw_Material;
}

}

