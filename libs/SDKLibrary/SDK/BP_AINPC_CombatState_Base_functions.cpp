#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AINPC_CombatState_Base

#include "Basic.hpp"

#include "BP_AINPC_CombatState_Base_classes.hpp"
#include "BP_AINPC_CombatState_Base_parameters.hpp"


namespace SDK
{

// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.AttackAblePlayerCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    AttackAble                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::AttackAblePlayerCamera(bool* AttackAble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "AttackAblePlayerCamera");

	Params::BP_AINPC_CombatState_Base_C_AttackAblePlayerCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttackAble != nullptr)
		*AttackAble = Parms.AttackAble;
}


// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.GetCombatAIActionRef
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_AIAction_NPC_CombatBase_C*    BPAIActionNPCCombat                                    (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::GetCombatAIActionRef(class UBP_AIAction_NPC_CombatBase_C** BPAIActionNPCCombat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "GetCombatAIActionRef");

	Params::BP_AINPC_CombatState_Base_C_GetCombatAIActionRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BPAIActionNPCCombat != nullptr)
		*BPAIActionNPCCombat = Parms.BPAIActionNPCCombat;
}


// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.GetControllerRef
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_NPCAIController_C*            NPCAICon                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::GetControllerRef(class ABP_NPCAIController_C** NPCAICon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "GetControllerRef");

	Params::BP_AINPC_CombatState_Base_C_GetControllerRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NPCAICon != nullptr)
		*NPCAICon = Parms.NPCAICon;
}


// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.GetSelfActor
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APalCharacter*                    SelfActor                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::GetSelfActor(class APalCharacter** SelfActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "GetSelfActor");

	Params::BP_AINPC_CombatState_Base_C_GetSelfActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SelfActor != nullptr)
		*SelfActor = Parms.SelfActor;
}


// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.GetShooterComponent
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPalShooterComponent*             ShooterComp                                            (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::GetShooterComponent(class UPalShooterComponent** ShooterComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "GetShooterComponent");

	Params::BP_AINPC_CombatState_Base_C_GetShooterComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShooterComp != nullptr)
		*ShooterComp = Parms.ShooterComp;
}


// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.GetTargetActor
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::GetTargetActor(class AActor** TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "GetTargetActor");

	Params::BP_AINPC_CombatState_Base_C_GetTargetActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;
}


// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.IsEndSelfState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::IsEndSelfState(bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "IsEndSelfState");

	Params::BP_AINPC_CombatState_Base_C_IsEndSelfState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}


// Function BP_AINPC_CombatState_Base.BP_AINPC_CombatState_Base_C.ShootAbleSlefForwardDot
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ShootAble                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AINPC_CombatState_Base_C::ShootAbleSlefForwardDot(bool* ShootAble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AINPC_CombatState_Base_C", "ShootAbleSlefForwardDot");

	Params::BP_AINPC_CombatState_Base_C_ShootAbleSlefForwardDot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShootAble != nullptr)
		*ShootAble = Parms.ShootAble;
}

}

