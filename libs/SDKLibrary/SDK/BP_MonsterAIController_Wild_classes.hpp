#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MonsterAIController_Wild

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MonsterAIControllerBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MonsterAIController_Wild.BP_MonsterAIController_Wild_C
// 0x0020 (0x0570 - 0x0550)
class ABP_MonsterAIController_Wild_C final : public ABP_MonsterAIControllerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MonsterAIController_Wild_C;      // 0x0550(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPalAISensorComponent*                  PalAISensor;                                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             BattleStartEvent;                                  // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BattleStartEvent__DelegateSignature(class AActor* StartPalActor);
	void DebugBattleStart(class AActor* Player);
	void DebugBattleStartInternal(class AActor* Player);
	void ExecuteUbergraph_BP_MonsterAIController_Wild(int32 EntryPoint);
	void ForceBattleStartForOutside(class AActor* StartPalActor);
	void ForceBattleStartToTarget(class AActor* TargetActor);
	void ForceEscaleStartForOutside(class AActor* StartFriend, class AActor* Enemy);
	void GetLeaderBB(class UBP_PalAIBlackboard_Common_C** LeaderPalBrackboard);
	void GetMyBB(class UBP_PalAIBlackboard_Common_C** PalBrackboard);
	void GoBack_Teritory();
	void IsSleeping(bool* Sleep);
	void OnDeadDelegate______0(const struct FPalDeadInfo& DeadInfo);
	void PerformanceSetup(class APawn* Param_Pawn);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReturnToTerritory();
	void SetSpawndInfo(const struct FVector& SpawnerLoc, double ReturnRadius, double WalkRadius);
	void SetupBySpawner();
	void SetupSleepTime();
	void _________1(class APalCharacter* InCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MonsterAIController_Wild_C">();
	}
	static class ABP_MonsterAIController_Wild_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MonsterAIController_Wild_C>();
	}
};
static_assert(alignof(ABP_MonsterAIController_Wild_C) == 0x000008, "Wrong alignment on ABP_MonsterAIController_Wild_C");
static_assert(sizeof(ABP_MonsterAIController_Wild_C) == 0x000570, "Wrong size on ABP_MonsterAIController_Wild_C");
static_assert(offsetof(ABP_MonsterAIController_Wild_C, UberGraphFrame_BP_MonsterAIController_Wild_C) == 0x000550, "Member 'ABP_MonsterAIController_Wild_C::UberGraphFrame_BP_MonsterAIController_Wild_C' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Wild_C, PalAISensor) == 0x000558, "Member 'ABP_MonsterAIController_Wild_C::PalAISensor' has a wrong offset!");
static_assert(offsetof(ABP_MonsterAIController_Wild_C, BattleStartEvent) == 0x000560, "Member 'ABP_MonsterAIController_Wild_C::BattleStartEvent' has a wrong offset!");

}

