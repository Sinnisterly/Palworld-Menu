#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCAIController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Pal_structs.hpp"
#include "Pal_classes.hpp"
#include "F_NPC_PathWalkArray_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPCAIController.BP_NPCAIController_C
// 0x0060 (0x0588 - 0x0528)
class ABP_NPCAIController_C : public APalAIController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0528(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_OtomoPalHolderComponentForNPC_C*    BP_OtomoPalHolderComponentForNPC;                  // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPalAISensorComponent*                  PalAISensor;                                       // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AIADamageReaction_C*                BP_AIADamageReaction;                              // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DefaultActionClass;                                // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPalNPCAIWeaponHandle*                  WeaponHandle;                                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_PalIncidentNotifyListener_C*        IncidentNotifyListener;                            // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Filter_Incident_Ids;                               // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FF_NPC_PathWalkArray                   PathWalk;                                          // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	class FName                                   OtomoName;                                         // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CreateOtomo();
	void ExecuteUbergraph_BP_NPCAIController(int32 EntryPoint);
	void ForceBattleStartForOutside(class AActor* StartActor);
	void ForceBattleStartToTarget(class AActor* TargetActor);
	void ForceEscapeStartFortOutSide(class AActor* StartActor, class AActor* TargetActor);
	void GetLeaderBB(class UBP_PalAIBlackboard_Common_C** LeaderPalBrackboard);
	void GetMyBB(class UBP_PalAIBlackboard_Common_C** PalBrackboard);
	void GetWeaponHandle(class UPalNPCAIWeaponHandle** Param_WeaponHandle);
	void GoBack_Teritory();
	void IsSleeping(bool* IsSleep);
	void NotifyTalkEnd(class APalPlayerCharacter* TalkPlayer);
	void NotifyTalkStart(class APalPlayerCharacter* TalkPlayer);
	void OnNpcTalkIncidentNotify(class UPalIncidentNotifyListener* Listener, EPalIncidentState IncidentState, const struct FPalIncidentNotifyParameter& Parameter);
	void OnShootDeclementBullet();
	void OverrideDefaultAction(class UClass* DefaultAction);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveTick(float DeltaSeconds);
	void ReturnToTerritory();
	void SetAutoDefaultAIAction();
	void SetSpawnedInfo(const struct FVector& SpawnerLoc, double ReturnRadius, const struct FF_NPC_PathWalkArray& Param_PathWalk, class FName Otomo);
	void SetupAI_BP();
	void SetupWeaponHandle(class APalWeaponBase* Weapon);
	void StartCombatMode();
	void StartDefaultAIAction();
	void StartEscapeMode(class AActor* TargetActor, bool ByOutSide);
	void TalkEnd_Func(class AActor* SelfActor, class AActor* TargetActor);
	void TalkStart_Func(class AActor* SelfActor, class AActor* TargetActor);
	void _________0(const struct FPalInstanceID& ID);
	void _________1();
	void _________2(const struct FPalDeadInfo& DeadInfo);
	void _________4(class AController* HolderController, class APalCharacter* OtomoPal);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPCAIController_C">();
	}
	static class ABP_NPCAIController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPCAIController_C>();
	}
};
static_assert(alignof(ABP_NPCAIController_C) == 0x000008, "Wrong alignment on ABP_NPCAIController_C");
static_assert(sizeof(ABP_NPCAIController_C) == 0x000588, "Wrong size on ABP_NPCAIController_C");
static_assert(offsetof(ABP_NPCAIController_C, UberGraphFrame) == 0x000528, "Member 'ABP_NPCAIController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, BP_OtomoPalHolderComponentForNPC) == 0x000530, "Member 'ABP_NPCAIController_C::BP_OtomoPalHolderComponentForNPC' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, PalAISensor) == 0x000538, "Member 'ABP_NPCAIController_C::PalAISensor' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, BP_AIADamageReaction) == 0x000540, "Member 'ABP_NPCAIController_C::BP_AIADamageReaction' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, DefaultActionClass) == 0x000548, "Member 'ABP_NPCAIController_C::DefaultActionClass' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, WeaponHandle) == 0x000550, "Member 'ABP_NPCAIController_C::WeaponHandle' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, IncidentNotifyListener) == 0x000558, "Member 'ABP_NPCAIController_C::IncidentNotifyListener' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, Filter_Incident_Ids) == 0x000560, "Member 'ABP_NPCAIController_C::Filter_Incident_Ids' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, PathWalk) == 0x000570, "Member 'ABP_NPCAIController_C::PathWalk' has a wrong offset!");
static_assert(offsetof(ABP_NPCAIController_C, OtomoName) == 0x000580, "Member 'ABP_NPCAIController_C::OtomoName' has a wrong offset!");

}

