#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIAction_CanCombatBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Pal_structs.hpp"
#include "Pal_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIAction_CanCombatBase.BP_AIAction_CanCombatBase_C
// 0x0028 (0x0158 - 0x0130)
class UBP_AIAction_CanCombatBase_C : public UPalAIActionBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0130(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPalDamageReactionComponent*            DamageReaction;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EPalAIResponseType                            CurrentBehavior;                                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NextCombatModeChange;                              // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_15D4[0x6];                                     // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 TempEncountClass;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPalAISensorComponent*                  TSCache_AISensorComponent;                         // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ActionAbort(class APawn* ControlledPawn);
	void ActionFinished(class APawn* ControlledPawn, EPawnActionResult WithResult);
	void ActionPause(class APawn* ControlledPawn);
	void ActionResume(class APawn* ControlledPawn);
	void ActionStart(class APawn* ControlledPawn);
	void DamageEventToCombatMode(const struct FPalDamageResult& DamageResult);
	void ExecuteUbergraph_BP_AIAction_CanCombatBase(int32 EntryPoint);
	void Fun_Damage_AIResponse(const struct FPalDamageResult& DamageResult);
	void GetLeader(class APalCharacter** Leader);
	void GetLeaderPalBrackBoard(class UBP_PalAIBlackboard_Common_C** BB);
	void GetSelfPalBlackBoard(class UBP_PalAIBlackboard_Common_C** PalBlackBoard);
	void IsLeader(bool* Leader);
	void OnSquadMemberDeadEvent(const struct FPalDeadInfo& DeadInbfo);
	void SearchDeadEdibleBody(bool* ChangeNextAction);
	void SelfMoveToLocation(const struct FVector& Goal);
	void SightCheck(EPalAIResponseType CurrentState, bool OverrideIsDamage, class AActor** Target, EPalAIResponseType* ResponseType);
	void SightCheckAndResponse(EPalAIResponseType Current, bool OverrideIsDamage, bool* ChangeNextAction);
	void SightResponse(class AActor* Target, EPalAIResponseType ResponseType, bool* ChangeNextAction);
	void SoundEvent(const struct FVector& EmitLocation);
	void StartCombatMode(class AActor* TargetActor);
	void StartEscapeMode(class AActor* TargetActor);
	void StartFriendlyLookatMode(class AActor* TargetActor);
	void StartWarningMode(const struct FVector& AttentionLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIAction_CanCombatBase_C">();
	}
	static class UBP_AIAction_CanCombatBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIAction_CanCombatBase_C>();
	}
};
static_assert(alignof(UBP_AIAction_CanCombatBase_C) == 0x000008, "Wrong alignment on UBP_AIAction_CanCombatBase_C");
static_assert(sizeof(UBP_AIAction_CanCombatBase_C) == 0x000158, "Wrong size on UBP_AIAction_CanCombatBase_C");
static_assert(offsetof(UBP_AIAction_CanCombatBase_C, UberGraphFrame) == 0x000130, "Member 'UBP_AIAction_CanCombatBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_CanCombatBase_C, DamageReaction) == 0x000138, "Member 'UBP_AIAction_CanCombatBase_C::DamageReaction' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_CanCombatBase_C, CurrentBehavior) == 0x000140, "Member 'UBP_AIAction_CanCombatBase_C::CurrentBehavior' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_CanCombatBase_C, NextCombatModeChange) == 0x000141, "Member 'UBP_AIAction_CanCombatBase_C::NextCombatModeChange' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_CanCombatBase_C, TempEncountClass) == 0x000148, "Member 'UBP_AIAction_CanCombatBase_C::TempEncountClass' has a wrong offset!");
static_assert(offsetof(UBP_AIAction_CanCombatBase_C, TSCache_AISensorComponent) == 0x000150, "Member 'UBP_AIAction_CanCombatBase_C::TSCache_AISensorComponent' has a wrong offset!");

}

