#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NormalStationaryLauncherBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Pal_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NormalStationaryLauncherBase.BP_NormalStationaryLauncherBase_C
// 0x0068 (0x05A0 - 0x0538)
class ABP_NormalStationaryLauncherBase_C final : public APalStationaryWeaponBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0538(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShootingHandle;                                    // 0x0548(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class APalCharacter>           OwnerCharacter;                                    // 0x0550(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         ShootNum;                                          // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLauncher;                                    // 0x0584(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40A0[0x3];                                     // 0x0585(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0588(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        PullTriggerTimer;                                  // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRapidFIre;                                       // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalcShootBlurRotator(double BlurAngle, struct FRotator* BlurRotator);
	void EjectAmmo();
	void ExecuteUbergraph_BP_NormalStationaryLauncherBase(int32 EntryPoint);
	float GetAttackableAngle();
	float GetAttackableDistance();
	void GetBlurAngle(double* Angle);
	void GetBulletClass(class UClass** NewParam);
	void GetInitializeInterval(double* Time);
	void GetMuzzleEffect(class UNiagaraSystem** NewParam);
	void GetMuzzleEffectParticle(class UParticleSystem** Particle_System);
	void GetMuzzleLocation(struct FVector* MuzzleLocation);
	void GetMuzzleRotateLocation(struct FVector* RotateLocation);
	void GetMuzzleRotator(struct FRotator* Rotator);
	class APalCharacter* GetOwnerCharacter();
	void GetPullTriggerInterval(double* PullTriggerInterval);
	void GetRotateMuzzleRef(class UStaticMeshComponent** Muzzle);
	void GetShootInterval(double* Time);
	void GetShootNumMax(int32* ShootNumMax);
	void GetShotAnimation();
	void GeyEjectionPortTransform(struct FTransform* Transform);
	void Is_UseEjectionPort(bool* IsUse);
	void OnPullTrigger();
	void OnReleaseTrigger();
	void OnRep_EnableLauncher();
	void OnShoot();
	void OnSpawnedBullet(class APalBullet* Bullet);
	void PlayMuzzleEffectParticle();
	void PlayShootEffect();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RotatePitchToTarget(const struct FVector& TargetLocation, double LerpSpeed, double DeltaTime);
	void SetAttackTarget(class AActor* Target);
	void SetEnableLauncher(bool Enable);
	void SetOwnerCharacter(TSoftObjectPtr<class APalCharacter> Param_OwnerCharacter);
	void ShootBullet();
	void ShootBulletInternal();

	int32 GetWeaponDamage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NormalStationaryLauncherBase_C">();
	}
	static class ABP_NormalStationaryLauncherBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NormalStationaryLauncherBase_C>();
	}
};
static_assert(alignof(ABP_NormalStationaryLauncherBase_C) == 0x000008, "Wrong alignment on ABP_NormalStationaryLauncherBase_C");
static_assert(sizeof(ABP_NormalStationaryLauncherBase_C) == 0x0005A0, "Wrong size on ABP_NormalStationaryLauncherBase_C");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, UberGraphFrame) == 0x000538, "Member 'ABP_NormalStationaryLauncherBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, DefaultSceneRoot) == 0x000540, "Member 'ABP_NormalStationaryLauncherBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, ShootingHandle) == 0x000548, "Member 'ABP_NormalStationaryLauncherBase_C::ShootingHandle' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, OwnerCharacter) == 0x000550, "Member 'ABP_NormalStationaryLauncherBase_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, ShootNum) == 0x000580, "Member 'ABP_NormalStationaryLauncherBase_C::ShootNum' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, EnableLauncher) == 0x000584, "Member 'ABP_NormalStationaryLauncherBase_C::EnableLauncher' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, TargetActor) == 0x000588, "Member 'ABP_NormalStationaryLauncherBase_C::TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, PullTriggerTimer) == 0x000590, "Member 'ABP_NormalStationaryLauncherBase_C::PullTriggerTimer' has a wrong offset!");
static_assert(offsetof(ABP_NormalStationaryLauncherBase_C, IsRapidFIre) == 0x000598, "Member 'ABP_NormalStationaryLauncherBase_C::IsRapidFIre' has a wrong offset!");

}

