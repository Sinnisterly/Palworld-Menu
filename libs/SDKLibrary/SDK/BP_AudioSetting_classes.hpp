#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioSetting

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Pal_structs.hpp"
#include "Pal_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AudioSetting.BP_AudioSetting_C
// 0x0198 (0x0268 - 0x00D0)
class UBP_AudioSetting_C final : public UPalAudioSettingSystem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<EPalAudioBus, double>                    BusVolumes;                                        // 0x00D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPalAudioBus, double>                    BusVolumes_Debug;                                  // 0x0128(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPalAudioBus, bool>                      BusMute;                                           // 0x0178(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPalAudioBus, bool>                      BusMute_Debug;                                     // 0x01C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EPalAudioBus, struct FFloatContainer_FloatPair> BusVolumes_0;                                      // 0x0218(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AudioSetting(int32 EntryPoint);
	void Initialize();
	void Initialize_Impl();
	void Set_Audio_Bus_Volume_Impl(EPalAudioBus AudioBus, class FName Key, double Volume);
	void SetAudioBusMute(EPalAudioBus AudioBus, bool IsMute);
	void SetAudioBusMute_Impl(EPalAudioBus AudioBus, bool IsMute);
	void SetAudioBusVolume(EPalAudioBus AudioBus, const class FName& Key, float Volume);
	void SetMuteToMap(EPalAudioBus AudioBus, bool IsMute, TMap<EPalAudioBus, bool>& MuteMap);
	void SetVolumeToMap(EPalAudioBus AudioBus, double Volume, TMap<EPalAudioBus, double>& ValMap);
	void Tick_BP(float DeltaTime);
	void UpdateAudioVolume(EPalAudioBus AudioBus);

	void GetVolumeFromDebugSetting(EPalAudioBus AudioBus, double* Volume) const;
	void GetVolumeFromMap(EPalAudioBus AuduiBus, const TMap<EPalAudioBus, double>& ValMap, bool* Find, double* Volume) const;
	bool IsAudioBusMute(EPalAudioBus AudioBus) const;
	void IsMuteFromDebugSetting(EPalAudioBus AudioBus, bool* IsMute) const;
	void IsMuteFromMap(EPalAudioBus AuduiBus, const TMap<EPalAudioBus, bool>& ValMap, bool* Find, bool* IsMute) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AudioSetting_C">();
	}
	static class UBP_AudioSetting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AudioSetting_C>();
	}
};
static_assert(alignof(UBP_AudioSetting_C) == 0x000008, "Wrong alignment on UBP_AudioSetting_C");
static_assert(sizeof(UBP_AudioSetting_C) == 0x000268, "Wrong size on UBP_AudioSetting_C");
static_assert(offsetof(UBP_AudioSetting_C, UberGraphFrame) == 0x0000D0, "Member 'UBP_AudioSetting_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AudioSetting_C, BusVolumes) == 0x0000D8, "Member 'UBP_AudioSetting_C::BusVolumes' has a wrong offset!");
static_assert(offsetof(UBP_AudioSetting_C, BusVolumes_Debug) == 0x000128, "Member 'UBP_AudioSetting_C::BusVolumes_Debug' has a wrong offset!");
static_assert(offsetof(UBP_AudioSetting_C, BusMute) == 0x000178, "Member 'UBP_AudioSetting_C::BusMute' has a wrong offset!");
static_assert(offsetof(UBP_AudioSetting_C, BusMute_Debug) == 0x0001C8, "Member 'UBP_AudioSetting_C::BusMute_Debug' has a wrong offset!");
static_assert(offsetof(UBP_AudioSetting_C, BusVolumes_0) == 0x000218, "Member 'UBP_AudioSetting_C::BusVolumes_0' has a wrong offset!");

}

